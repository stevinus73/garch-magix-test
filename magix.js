/*
    Setup process:
  - IF YOU ALREADY HAVE MAGIX INSTALLED:
 Paste the script below into the console.
javascript:localStorage.setItem("legacySave-alpha",b64EncodeUnicode(escape(unescape(b64DecodeUnicode(G.Export())).replace("Xbm-ilapeDSxWf1b/MagixOfficialR55B.js","ZmatEHzFI2_QBuAF/magix.js").replace("Xbm-ilapeDSxWf1b/MagixUtilsR55B.js","ZmatEHzFI2_QBuAF/magixUtils.js")))),onbeforeunload=null,location.reload()

>>> It's that easy! If you can't open the console for some reason, you can try selecting all the code above and dragging it to your browser's bookmark bar. Then, go to the tab with NeverEnding Legacy open and click on the bookmark. After that, the bookmark isn't needed anymore and can be removed.
==========
  - IF YOU ARE STARTING FROM A NEW GAME:
 To set up this mod, go to Orteil's NeverEnding Legacy and click on the Load Mod button. From the text box that pops up, delete the default text and paste in the following 2 lines:
https://file.garden/ZmatEHzFI2_QBuAF/magixUtils.js
https://file.garden/ZmatEHzFI2_QBuAF/magix.js

>>> If you pasted them in with that order and deleted the default text, it should work!
==========
  - DOWNLOADING MAGIX LOCALLY:
 If you wish to download Magix in a local copy for offline use or modding, you can do so download the .zip file at https://github.com/plasma4/magix-fix/archive/refs/heads/main.zip to get started!

>>> You next step should be to extract the .zip file (to ensure assets work properly) and to open the index.html file. Congrats! You can now use Magix or load other mods in without internet.
*/
/* Small note: the creator of this mod (pelletsstarPL) has personally stated in Discord messages that the Magix mod may be modded by anyone who wishes, thus disregarding the comment below. This mod provides various important fixes that prevent the game from breaking, as well as a significant amount of text rewritings and improvements (and some extra content). To compare, visit https://file.garden/Xbm-ilapeDSxWf1b/MagixOfficialR55B.js to find the original source. */

/////////
///READ THIS: All rights reserved to mod creator and people that were helping the main creator with coding. Mod creator rejects law to copying icons from icon sheets used for this mod. All noticed plagiarism will be punished. Copyright: 2020
//===========================
//Detect invalid mods
if (window.magixLoaded === 1 && !window.skipModCheck) {
    window.magixLoaded = 2
    var modLen = G.mods.length
    if (modLen > 2 && (G.mods[modLen - 2].name === "MagixUtils" || G.mods[0].url === "data.js")) {
        G.dialogue.popup(function (div) {
            return '<div style="width:480px;height:240px;"><div class="fancyText title">Error!</div>' +
                '<div class="bitBiggerText scrollBox underTitle"><div class="par">It appears that you have already installed mods with Magix before it loaded.</div><div class="divider"></div>' +
                ((G.mods[0].url === "data.js" || G.mods[modLen - 1].url === "data.js") ? 'Remove the data.js file to continue.' : '<div class="par" style="color:#f40;">You may need to wipe the save and set the mods to install after Magix. Otherwise, ignore this message!<br><small>(If you are a developer and for some reason, you want to hide this, set window.skipModCheck to true.)</small></div>') +
                '</div>' +
                '<div class="buttonBox">' +
                G.button({ tooltip: 'Try to select different mods this time. (Clicking on this will reset all data!)', text: 'Clear data', classes: 'frameless', onclick: function () { G.Clear(); } }) +
                G.button({ tooltip: 'Ignore this message. (This may cause problems!)', text: 'Ignore', classes: 'frameless', onclick: function () { G.dialogue.forceClose() } }) +
                '</div></div>';
        }, 'noClose')
    }
}

//Hide warnings...why? Well, because some achievements will throw a LOT of errors, and that can clog up the console (and this happens when viewing achievements for other civs, nothing actually notable). Attempts have already been made to wipe out every last issue for both races, so hopefully this won't cause any problems. :)
G.getDict = function (name) {
    if (G.dict[name]) {
        if (G.dict[name].type == 'res') return G.resolveRes(G.dict[name]);
        else return G.dict[name];
    }
}
G.getBrokenSmallThing = function (what, text) {
    return '<b style="color: #f99">' + cap(text == '*PLURAL*' ? (what + 's') : (text || what)) + '</b>'
}

// Custom function for effect replacement: given a single thing or array of things (either by dict name or actual object), determines if property matches the "original" value and if so replaces it.
G.replaceEffectValues = function (things, type, property, original, replacement, multiple) {
    if (typeof things !== "object") {
        things = [things]
    }
    var result = []
    for (var i = 0; i < things.length; i++) {
        var thing = things[i]
        if (typeof thing === "string") {
            thing = G.getDict(thing)
        }
        var effects = thing.effects
        for (var t = 0; t < effects.length; t++) {
            var effect = effects[t]
            if ((type == null || effect.type === type) && effect[property] === original) {
                effect[property] = replacement
                result.push(effect)
                if (!multiple) {
                    break
                }
            }
        }
    }
    return result
}

// More complicated callback version for more complicated scenarios, compareEffect could be `e => (e.mult == 0.5)` and changedEffect could be `e => { e.mult = 1 }`. If changedEffect returns a truthy value then replacing values quits.
G.replaceEffectValues2 = function (things, compareEffect, changedEffect) {
    if (typeof things !== "object") {
        things = [things]
    }
    var result = []
    for (var i = 0; i < things.length; i++) {
        var thing = things[i]
        if (typeof thing === "string") {
            thing = G.getDict(thing)
        }
        var effects = thing.effects
        for (var t = 0; t < effects.length; t++) {
            var effect = effects[t]
            if (compareEffect(effect, original, thing)) {
                if (changedEffect(effect, original, thing)) {
                    result.push(effect)
                    break
                }
                result.push(effect)
            }
        }
    }
    return result
}

if (!window.loadedMagix) {
    // Custom implementation of keyboard events
    document.addEventListener("keydown", function (e) {
        try {
            var key = e.key
            if (key >= '0' && key <= '9') {
                if (G.tab.id == 'tech') {
                    pressed = parseInt(key)
                    var chooseBox = G.chooseBox[0]
                    if (pressed === 0) {
                        if (G.speed > 0) { G.rerollChooseBox(chooseBox); } else G.cantWhenPaused();
                    } else if (pressed <= chooseBox.choices.length) {
                        if (G.speed > 0) { G.purchaseChooseBox(chooseBox, G.chooseBox[0].choices[pressed - 1], l("chooseOption-" + pressed + "-0")); } else G.cantWhenPaused();
                    }
                }
            } else if (key == "_" || key == "-") {
                if (G.tab.id == 'unit') l('removeBulk').click()
                if (G.tab.id == 'land' && G.mapZoomT == 2) {
                    G.mapZoomT = 1
                    G.mapOffXT /= 2
                    G.mapOffYT /= 2
                    G.tooltip.close()
                }
            } else if (key == "+" || key == "=") {
                if (G.tab.id == 'unit') l('addBulk').click()
                if (G.tab.id == 'land' && G.mapZoomT == 1) {
                    G.mapZoomT = 2
                    G.mapOffXT *= 2
                    G.mapOffYT *= 2
                    G.tooltip.close()
                }
            } else if (e.altKey) {
                if (!e.repeat) l("fastButton").click()
            }
        } catch (e) { }
    })
    document.addEventListener("keyup", function (e) {
        if (e.key === "Alt") {
            if (l("playButton")) l("playButton").click()
        }
    })
    var loadedMagix = 1
}


var isUsingFile = window.offlineMode != null
var magixURL = isUsingFile ? "Magix/" : "https://file.garden/Xbm-ilapeDSxWf1b/"
var magixURL2 = isUsingFile ? "Magix/" : "https://file.garden/ZmatEHzFI2_QBuAF/"
var orteilURL = window.offlineMode ? "Magix/" : "https://orteil.dashnet.org/cookieclicker/snd/"

//Disable double click's default behavior for mobile users and scale properly
var meta = document.createElement('meta');
meta.name = "viewport";
meta.content = "width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no";
document.getElementsByTagName('head')[0].appendChild(meta);

//Touchscreen fix
var modeFunction = null
document.addEventListener("click", function (e) {
    var target = e.target
    if (modeFunction !== null && (target.id === "resources" || target.id === "generalInfo" || target.className.slice(0, 4) === "tab " || (target.parentElement.className && target.parentElement.className.slice(0, 4) === "tab "))) {
        modeFunction()
        modeFunction = null
    }
})

//Detect non-fixed MagixUtils
if (!window.getObj) {
    if (window.getCookie) {
        G.dialogue.popup(function () {
            return "It appears that you have not imported the fixed version of MagixUtils. Try reimporting with the correct link (https://file.garden/ZmatEHzFI2_QBuAF/magixUtils.js)."
        }, 'noClose')
        throw TypeError("You have not imported the fixed version of MagixUtils. Replace that link with this one: https://file.garden/ZmatEHzFI2_QBuAF/magixUtils.js")
    }
    alert("It appears that magix.js may have loaded before magixUtils.js. Try reloading.")
    setTimeout(() => G.dialogue.popup(function () {
        return "It appears that magix.js may have loaded before magixUtils.js. Try reloading."
    }, 'noClose'), 5000)
    throw Error("It appears that magix.js may have loaded before magixUtils.js. Try reloading.")
}

G.setDict = function (name, what) {
    //No more warnings :p
    G.dict[name] = what
}

//Allow touchscreen or mobile users to change policies
G.widget.update = function () {
    var me = this;
    var time = 3;//how many frames to open and close
    if (me.T < time) me.T++;
    if (me.T == time && me.closing) {
        me.lAnchor.style.display = 'none';
        me.l.innerHTML = '';
        me.func = 0;
        me.parent = 0;
        me.anchor = 'top';
        me.linked = 0;
    }
    else if (me.parent)//widget is currently active and focused on an element
    {
        //position and scale widget
        var t = (me.T / time);
        if (me.closing) t = 1 - t;
        t = (3 * Math.pow(t, 2) - 2 * Math.pow(t, 3));
        var x1 = 0, x2 = 0, y1 = 0, y2 = 0, s1 = 0, s2 = 1;
        var bounds = me.parent.getBoundingClientRect();

        var zoom = 1;
        // Check for the classes Magix adds to the body for scaling
        if (document.body.classList.contains('halfSize')) zoom = 0.5;
        else if (document.body.classList.contains('smallSize')) zoom = 0.75; // Assuming .smallSize is 75%

        if (zoom !== 1) {
            // "Un-scale" the coordinates by dividing by zoom factor
            bounds = {
                left: bounds.left / zoom,
                right: bounds.right / zoom,
                top: bounds.top / zoom,
                bottom: bounds.bottom / zoom,
                width: bounds.width / zoom,
                height: bounds.height / zoom
            }
        }

        //measure and fit in screen
        var dimensions = {
            top: me.l.offsetTop,
            right: me.l.offsetLeft + me.l.offsetWidth,
            bottom: me.l.offsetTop + me.l.offsetHeight,
            left: me.l.offsetLeft,
            width: me.l.offsetWidth,
            height: me.l.offsetHeight
        };

        var anchor = me.anchor;
        var behavior = 'pop';//me.behavior;
        var offX = me.offX;
        var offY = me.offY;
        var styleTransform = '';
        var styleTop = '';
        var styleLeft = '';

        for (var step = 0; step < 3; step++)//this is probably an awkward way of doing this
        {
            //this used to be handled with mostly just CSS. let's just say things didn't go as expected
            if (anchor == 'top') {
                x1 = (bounds.left + bounds.right) / 2; x2 = x1 + offX;
                y1 = bounds.top; y2 = y1 + offY;
                styleTransform = 'translate(0,-100%)';
                styleTop = 'auto';
                styleLeft = '-50%';
            }
            else if (anchor == 'bottom') {
                x1 = (bounds.left + bounds.right) / 2; x2 = x1 + offX;
                y1 = bounds.bottom; y2 = y1 + offY;
                styleTransform = 'translate(0,0)';
                styleTop = 'auto';
                styleLeft = '-50%';
            }
            else if (anchor == 'left') {
                x1 = bounds.left; x2 = x1 + offX;
                y1 = (bounds.top + bounds.bottom) / 2; y2 = y1 + offY;
                styleTransform = 'translate(-100%,0)';
                styleTop = (-dimensions.height / 2) + 'px';
                styleLeft = 'auto';
            }
            else if (anchor == 'right') {
                x1 = bounds.right; x2 = x1 + offX;
                y1 = (bounds.top + bounds.bottom) / 2; y2 = y1 + offY;
                styleTransform = 'translate(0,0)';
                styleTop = (-dimensions.height / 2) + 'px';
                styleLeft = 'auto';
            }

            if (step == 0)//toggle on the same axis
            {
                if (anchor == 'left' && x2 - dimensions.width < 0) { anchor = 'right'; offX = -offX; }
                else if (anchor == 'right' && x2 + dimensions.width >= G.w) { anchor = 'left'; offX = -offX; }
                else if (anchor == 'top' && y2 - dimensions.height < 0) { anchor = 'bottom'; offY = -offY; }
                else if (anchor == 'bottom' && y2 + dimensions.height >= G.h) { anchor = 'top'; offY = -offY; }
            }
            else if (step == 1)//still no room? switch axis
            {
                if (anchor == 'left' && x2 - dimensions.width < 0) { anchor = 'bottom'; var tmp = offX; offX = offY; offY = tmp; }
                else if (anchor == 'right' && x2 + dimensions.width >= G.w) { anchor = 'bottom'; var tmp = offX; offX = offY; offY = tmp; }
                else if (anchor == 'top' && y2 - dimensions.height < 0) { anchor = 'right'; var tmp = offX; offX = offY; offY = tmp; }
                else if (anchor == 'bottom' && y2 + dimensions.height >= G.h) { anchor = 'right'; var tmp = offX; offX = offY; offY = tmp; }
            }
            else//stick to the sides of the screen
            {
                if (anchor == 'top' || anchor == 'bottom') {
                    if (x2 - dimensions.width / 2 < 0) x2 = dimensions.width / 2;
                    else if (x2 + dimensions.width / 2 >= G.w) x2 = G.w - dimensions.width / 2;
                }
                else if (anchor == 'left' || anchor == 'right') {
                    if (y2 - dimensions.height / 2 < 0) y2 = dimensions.height / 2;
                    else if (y2 + dimensions.height / 2 >= G.h) y2 = G.h - dimensions.height / 2;
                }
            }
        }

        me.l.style.transform = styleTransform;
        me.l.style.top = styleTop;
        me.l.style.left = styleLeft;

        var x = Math.round(t * x2 + (1 - t) * x1);
        var y = Math.round(t * y2 + (1 - t) * y1);

        var s = 1;
        var o = 1;
        if (behavior == 'pop') s = (t * s2 + (1 - t) * s1);
        if (behavior == 'fade') o = t;
        me.lAnchor.style.transform = 'scale(' + s + ')';
        me.lAnchor.style.opacity = o;
        me.lAnchor.style.left = x + 'px';
        me.lAnchor.style.top = y + 'px';
        me.lAnchor.style.display = 'block';
    }
}

//Allow touchscreen or mobile users to click on gizmos
G.selectModeForUnit = function (me, div) {
    if (div == G.widget.parent) G.widget.close();
    else {
        G.widget.popup({
            func: function (widget) {
                var str = '';
                var me = widget.linked;
                for (var i in me.unit.modes) {
                    var mode = me.unit.modes[i];
                    if (!mode.req || G.checkReq(mode.req))
                    //{str+='<div class="button'+(mode.num==me.mode.num?' on':'')+'" id="mode-button-'+mode.num+'">'+mode.name+'</div>';}
                    { str += '<div class="button' + (mode.num == me.mode.num ? ' on' : '') + '" id="mode-button-' + mode.num + '">' + (mode.icon ? G.getSmallThing(mode) : '') + '' + mode.name + '</div>'; }
                }
                widget.l.innerHTML = str;
                modeFunction = function () {
                    widget.close();
                }
                for (var i in me.unit.modes) {
                    var mode = me.unit.modes[i];
                    if (!mode.req || G.checkReq(mode.req)) {
                        l('mode-button-' + mode.num).onmouseup = function (unit, mode) {
                            return function () {
                                //released the mouse on this mode button; test if we can switch to this mode, then close the widget
                                if (G.speed > 0) {
                                    if (true)//G.testUse(G.subtractCost(unit.mode.use,mode.use),unit.amount))
                                    {
                                        //remove "on" class from all mode buttons and add it to the current mode button
                                        for (var i in unit.unit.modes) { if (l('mode-button-' + unit.unit.modes[i].num)) { l('mode-button-' + unit.unit.modes[i].num).classList.remove('on'); } }
                                        l('mode-button-' + mode.num).classList.add('on');
                                        G.setUnitMode(unit, mode);
                                        if (unit.l) G.popupSquares.spawn(l('mode-button-' + mode.num), unit.l);
                                    }
                                } else G.cantWhenPaused();
                                widget.close();
                            };
                        }(me, mode, div);

                        l('mode-button-' + mode.num).onclick = function (unit, mode) {
                            return function () {
                                modeFunction = null
                                //released the mouse on this mode button; test if we can switch to this mode, then close the widget
                                if (G.speed > 0) {
                                    if (true)//G.testUse(G.subtractCost(unit.mode.use,mode.use),unit.amount))
                                    {
                                        //remove "on" class from all mode buttons and add it to the current mode button
                                        for (var i in unit.unit.modes) { if (l('mode-button-' + unit.unit.modes[i].num)) { l('mode-button-' + unit.unit.modes[i].num).classList.remove('on'); } }
                                        l('mode-button-' + mode.num).classList.add('on');
                                        G.setUnitMode(unit, mode);
                                        if (unit.l) G.popupSquares.spawn(l('mode-button-' + mode.num), unit.l);
                                    }
                                } else G.cantWhenPaused();
                                widget.close();
                            };
                        }(me, mode, div);

                        if (true)/*G.testUse(G.subtractCost(me.mode.use,mode.use),me.amount))*/ addHover(l('mode-button-' + mode.num), 'hover');//fake mouseover because :hover doesn't trigger when mouse is down
                        G.addTooltip(l('mode-button-' + mode.num), function (me, unit) {
                            return function () {
                                //var uses=G.subtractCost(unit.mode.use,me.use);
                                var str = '<div class="info"><div class="fancyText barred infoTitle">' + (me.icon ? G.getSmallThing(me) : '') + '' + me.name + '</div>' + G.parse(me.desc);
                                if (!isEmpty(me.use)) str += '<div class="divider"></div><div class="fancyText par">Uses: ' + G.getUseString(me.use, true, true) + ' per ' + unit.unit.displayName + '</div>';
                                //if (unit.amount>0 && unit.mode.num!=me.num && !isEmpty(uses)) str+='<div class="divider"></div><div class="fancyText par">Needs '+G.getUseString(uses,true,false,unit.amount)+' to switch</div>';
                                if (unit.amount > 0 && unit.mode.num != me.num) str += '<div class="divider"></div><div class="fancyText par">Switching will reset all of this stack\'s units to idle</div>';
                                str += '</div>';
                                return str;
                            };
                        }(mode, me), { offY: -8 });
                    }
                }
            },
            offX: 0,
            offY: -8,
            anchor: 'top',
            parent: div,
            linked: me
        });
    }
}

//We can override this function to hide negative costs and make numbers more specific
G.getCostString = function (costs, verbose, neutral, mult) {
    //returns a string that displays resource costs with icons and amount; the amounts will be red if our current resources don't match them, unless neutral is set to true; only the amount will be displayed unless verbose is true, in which case the amount and the resource name will be displayed; costs will be multiplied by mult if specified
    var costsStr = [];
    mult = mult || 1;
    for (var i in costs) {
        var cost = costs[i];
        if (cost > 0) {
            var thing = G.dict[i];
            if (!thing) {
                return;
            }
            var signed = cost * mult;
            var num = Math.abs(signed);
            var text = (num < 1 ? num === 0 ? "No" : ("1/" + (num > 0.1 ? (1 / num).toFixed(1).replace(".0", "") : B(1 / num))) : (num < 10 ? num.toFixed(1).replace(".0", "") : B(num))) + (verbose ? (' ' + thing.displayName) : '');
            if (signed !== num) {
                text = '-' + text;
            }
            if (thing.amount < num && !neutral) text = '<span style="color:red">' + text + '</span>';
            costsStr.push(G.getSmallThing(thing, text));
        }
    }
    return costsStr.join(', ');
}

//Same as above, but takes into account the unused amount of a usable resource instead of its total amount
G.getUseString = function (costs, verbose, neutral, mult) {
    var costsStr = [];
    mult = mult || 1;
    for (var i in costs) {
        var thing = G.dict[i];
        if (!thing) {
            return;
        }
        var signed = costs[i] * mult;
        var num = Math.abs(signed);
        var text = (num < 1 ? num === 0 ? "No" : ("1/" + (num > 0.1 ? (1 / num).toFixed(1).replace(".0", "") : B(1 / num))) : (num < 10 ? num.toFixed(1).replace(".0", "") : B(num))) + (verbose ? (' ' + thing.displayName) : '');
        if (signed !== num) {
            text = '-' + text;
        }
        if ((thing.amount - thing.used) < num && !neutral) text = '<span style="color:red">' + text + '</span>';
        costsStr.push(G.getSmallThing(thing, text));
    }
    return costsStr.join(', ');
}

//Custom new value for ungratefulness
var ungrateful = 1

///FOR SEASONAL CONTENT. IK COPIED FROM CC, BUT IT WILL HELP ME. ALSO THAT IS HOW MODDING LOOKS LIKE THAT xD
var yer = new Date();
var mausoBonus = 0;
var leap = (((yer % 4 == 0) && (yer % 100 != 0)) || (yer % 400 == 0)) ? 1 : 0;
var day = Math.floor((new Date() - new Date(new Date().getFullYear(), 0, 0)) / (1000 * 60 * 60 * 24));
var easterDay = function (Y) { var C = Math.floor(Y / 100); var N = Y - 19 * Math.floor(Y / 19); var K = Math.floor((C - 17) / 25); var I = C - Math.floor(C / 4) - Math.floor((C - K) / 3) + 19 * N + 15; I = I - 30 * Math.floor((I / 30)); I = I - Math.floor(I / 28) * (1 - Math.floor(I / 28) * Math.floor(29 / (I + 1)) * Math.floor((21 - N) / 11)); var J = Y + Math.floor(Y / 4) + I + 2 - C + Math.floor(C / 4); J = J - 7 * Math.floor(J / 7); var L = I - J; var M = 3 + Math.floor((L + 40) / 44); var D = L + 28 - 31 * Math.floor(M / 4); return new Date(Y, M - 1, D); }(yer);
easterDay = Math.floor((easterDay - new Date(easterDay.getFullYear(), 0, 0)) / (1000 * 60 * 60 * 24));
var spookboost = 1;
function c1() { G.loadMenu = 1; setObj("civ", 0); G.NewGameWithSameMods2() };
function c2() { G.loadMenu = 2; setObj("civ", 1); G.NewGameWithSameMods2() };
var civ1 = function () {
    G.dialogue.forceClose();
    G.dialogue.popup(function (div) {
        return '<div style="padding:16px;min-width:320px;"><div class="fancyText title"><font color="#8888ff">Start a new run</font></div>' +
            G.doFunc('new game blurb', 'What is your name?<br>') +
            G.field({ style: 'width:100%;', text: G.getName('ruler'), tooltip: 'Enter your name here.<br>Make it something memorable!', oninput: function (val) { G.setName('ruler', val); } }) +
            '<div class="divider"></div>' +
            (G.resets > 0 ? ('You have ' + B(G.resets) + ' ascension' + (G.resets == 1 ? '' : 's') + ' behind you.<br>') : '') +
            'You choose to start somewhere...<br><br>' +
            G.button({ style: 'width:33%;min-width:75px;box-shadow:0px 0px 1px 1px #963;',/*style:'display:block;width:100%;',*/tooltip: 'Start your civilization in a harsh terrain with scarce natural resources.', text: '<font color="fuschia">Awful</font>', onclick: function (e) { G.startingType = 1; var names = G.names; G.dialogue.forceClose(); G.NewGameConfirm(); G.names = names; } }) +
            G.button({ style: 'width:33%;min-width:75px;box-shadow:0px 0px 1px 1px #693;',/*style:'display:block;width:100%;',*/tooltip: 'Start your civilization in a welcoming terrain full of natural resources.', text: '<font color="#aaffaa">Pleasant</font>', onclick: function (e) { G.startingType = 0; var names = G.names; G.dialogue.forceClose(); G.NewGameConfirm(); G.names = names; } }) +
            G.button({ style: 'width:33%;min-width:75px;box-shadow:0px 0px 1px 1px #888;',/*style:'display:block;width:100%;',*/tooltip: 'Start your civilization in a random place on the map.<br>Who knows how your people will fare in these strange lands!', text: '? Random ?', onclick: function (e) { G.startingType = 2; var names = G.names; G.dialogue.forceClose(); G.NewGameConfirm(); G.names = names; } }) +
            '</div>';
    }, 'noClose');
};
var civ2 = function () {
    G.dialogue.forceClose();
    G.dialogue.popup(function (div) {
        return '<div style="padding:16px;min-width:320px;"><div class="fancyText title"><font color="#89ff88">Setup: Elf race</font></div>' +
            G.doFunc('new game blurb 2', 'What is your name?<br>') +
            G.field({ style: 'width:100%;', text: G.getName('ruler'), tooltip: 'Enter your name here.<br>Make it something memorable!', oninput: function (val) { G.setName('ruler', val); } }) +
            '<div class="divider"></div>' +
            (G.resets > 0 ? ('You have ' + B(G.resets) + ' ascension' + (G.resets == 1 ? '' : 's') + ' behind you.<br>') : '') +
            'You choose to start somewhere...<br><br>' +
            G.button({ style: 'width:33%;min-width:75px;box-shadow:0px 0px 1px 1px #963;',/*style:'display:block;width:100%;',*/tooltip: 'Start your civilization in a harsh terrain with scarce natural resources.', text: '<font color="fuschia">Awful & hostile </font>', onclick: function (e) { G.startingType = 1; var names = G.names; G.dialogue.forceClose(); G.NewGameConfirm(); G.names = names; } }) +
            G.button({ style: 'width:33%;min-width:75px;box-shadow:0px 0px 1px 1px #693;',/*style:'display:block;width:100%;',*/tooltip: 'Start your civilization in a welcoming terrain full of natural resources.', text: '<font color="#aaffaa">Pleasant & safe</font>', onclick: function (e) { G.startingType = 0; var names = G.names; G.dialogue.forceClose(); G.NewGameConfirm(); G.names = names; } }) +
            G.button({ style: 'width:33%;min-width:75px;box-shadow:0px 0px 1px 1px #888;',/*style:'display:block;width:100%;',*/tooltip: 'Start your civilization in a random place on the map.<br>Who knows how your people will fare in these strange lands!', text: '? Unknown fate ?', onclick: function (e) { G.startingType = 2; var names = G.names; G.dialogue.forceClose(); G.NewGameConfirm(); G.names = names; } }) +
            '</div>';
    }, 'noClose');
}

G.NewGame = function (doneLoading, mods) {
    if (G.resets == 0) G.loadmenu = 1;
    document.title = 'Setup: NeverEnding Legacy';
    //clean up data, create a map and ask the player to pick a starting location
    if (!doneLoading) {
        //save achievements for each mod so we can reapply them later
        if (G.rememberAchievs) {
            var achievs = [];
            for (var i in G.mods) {
                var me = G.mods[i];
                achievs[me.name] = [];
                if (me.achievs) {
                    for (var ii in me.achievs) {
                        achievs[me.name].push(me.achievs[ii].won);
                    }
                }
            }
            G.savedAchievs = achievs;
        }
        G.rememberAchievs = false;

        G.LoadMods(mods || ['data.js'], G.NewGame, true);
        return 0;
    }

    try {
        G.Reset();
        l('blackBackground').style.opacity = 1;

        G.modsStr = '';
        G.newModsStr = '';
        for (var i in G.mods) {
            G.modsStr += G.mods[i].url + '\n';
        }

        G.applyAchievEffects('pre-new');
        G.sequence = 'settle';
    }
    catch (err) {
        G.sequence = 'failed loading';
        console.log('Something went wrong:');
        console.log(err.message || err);

        G.dialogue.popup(function (div) {
            return '<div style="width:480px;height:240px;"><div class="fancyText title">Error!</div>' +
                '<div class="bitBiggerText scrollBox underTitle"><div class="par">Something went wrong when launching a new game:</div><div class="divider"></div>' +
                '<div class="par" style="color:#f30;">' + (err.message || err) + '</div>' +
                '</div>' +
                '<div class="buttonBox">' +
                G.button({ tooltip: 'Try to select different mods this time!', text: 'Back to menu', classes: 'frameless', onclick: function () { G.dialogue.forceClose(); G.NewGame(); } }) +
                '</div></div>';
        }, 'noClose');
        return 0;
    }

    //create starting names
    G.cultureSeed = makeSeed(5);
    G.setName('ruler', G.translate(cap(G.getRandomString(3, 5)), ['primitive'], G.cultureSeed));
    var civname = cap(G.getRandomString(3, 6));
    G.setName('civ', G.translate(civname, ['primitive'], G.cultureSeed));

    if (Math.random() < 0.05) {
        G.setName('inhab', 'child of ' + G.getName('ruler'));
        G.setName('inhabs', 'children of ' + G.getName('ruler'));
    }
    else {
        G.setName('inhab', G.translate(civname + G.getRandomString(1), ['primitive'], G.cultureSeed));
        var str = G.getName('inhab');
        var finds = ['s', 'x', 'z'];
        if (finds.indexOf(str.slice(-1)) == -1) str += 's';
        else str += 'es';
        G.setName('inhabs', str);
    }

    var str = G.getName('civ').toLowerCase();
    var finds = ['a', 'e', 'i', 'o', 'u', 'y'];
    if (finds.indexOf(str.slice(-1)) == -1) str += '';//ends in consonant
    else str += choose(['n', 'd', 's', 't', 'b', 'l']);//ends in vowel
    str += choose(['ian', 'ish', 'ese', 'an']);
    G.setName('civadj', str);
    if (G.loadMenu == undefined) {
        G.dialogue.popup(function (div) { //pick civs .

            return '<div style="padding:16px;min-width:390px;min-height:380px;"><font color="fuschia">Magix has successfully been loaded :)</font><br><div class="fancyText title"><font color="#52f79d">Start a new game</font><br>Pick which race do you want to rule this time.</div>' +
                G.button({ style: 'position:absolute;right:-6px;top:-6px;', tooltip: 'Select mods for this playthrough.', text: 'Use mods', onclick: function (e) { G.SelectMods(); } }) +
                G.button({ style: 'position:absolute;left:-6px;top:-6px;', tooltip: 'View the game\'s version history.', text: 'Update log', onclick: function (e) { G.dialogue.popup(G.tabPopup['updates'], 'bigDialogue'); } }) +
                G.button({ style: 'position:absolute;left:-6px;top:20px;', tooltip: 'Change the game\'s settings.', text: 'Settings', onclick: function (e) { G.dialogue.popup(G.tabPopup['settings'], 'bigDialogue'); } }) +
                '<div class="framed bgMid fancyText" style="position:absolute;left:-2px;bottom:-26px;">' + G.textWithTooltip('<small>About original content \u2014Orteil</small>', '<div style="width:240px;text-align:left;padding:4px;"><div class="par">The game in its current state features stone age technology and up to some parts of iron age.</div><div class="par">Features to be added later include agriculture, religion, commerce, military, and interactions with other civilizations, among other things planned.</div><div class="par">Feedback about bugs, oversights and technological inaccuracies are appreciated! (Send me a message to my tumblr at the top)</div><div class="par"><font color="pink">Thank you for playing this alpha!</div><div class="par" style="text-align:right;">-Orteil</font></div></div>') + '</div>' +
                '<div class="framed bgMid fancyText" style="position:absolute;right:-2px;bottom:-26px;">' + G.textWithTooltip('<small>About Magix</small>', '<div style="width:240px;text-align:left;padding:4px;"><div class="par">The mod adds a ton of new content, including a second civilization after playing for a while.</div><div class="par">Features that could be added include the rest of the trials for human race and new mechanics for both races.</div><div class="par">Feedback about bugs, oversights and technological inaccuracies are appreciated! On discord, you can contact me at @1_e0 (the original creator, @pelletsstarPL is no longer maintaining the project).</div><div class="par"><font color="#aaffaa">Thank you for playing Magix!</div><div class="par" style="text-align:right;">-pelletsstarPL (general fixes and rewritings separately by 1_e0)</div></div>') + '</div>' +
                '<div class="divider"></div>' +
                '<br>You can pick only one race to rule per run,<br>so don\'t worry, you won\'t rule both of them at a time. (Of course that\'s if you unlock<br>that second race...so have fun! <b>:p</b>)<br>' +
                (G.resets > 0 ? ('You have ' + B(G.resets) + ' ascension' + (G.resets == 1 ? '' : 's') + ' behind you.<br>') : '') +
                '<br><br>' +
                G.textWithTooltip('<table style="float:left;"><tr><td><img class="pixelate" src="' + magixURL2 + 'civ1Bposter.png" width="192" height="192" onclick="c1()"/></td></tr><tr><td><div class="fancyText"><font size="3">Human</font></div></td></tr></table></p>', 'Rule people in a natural environment that you know from real life.<br>Oceans, deserts, prairies, jungles, forests and many other natural biomes exist here.<br>Provide housing to your people, research new things, and most importantly, survive and prosper.<br>Make your tribe legendary and don\'t die early, so<br>your name will be praised in history books.') + '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;' +
                (G.tragedyHappened == 1 ? G.textWithTooltip('<table style="float:right;"><tr><td><img class="pixelate" src="' + magixURL2 + 'civ2Bposter.png" width="192" height="192" onclick="c2()"/></td></tr><tr><td><div class="fancyText"><font size="3">Elf</font></div></td></tr></table>', 'Rule elves in a mystic environment.<br>The world is mainly a huge forest, but still has many other biomes.<br>Gameplay difficulty is higher than with the human race<br>with more more brutal production penalties,<br>but helping elves out will progress both races!<br>Make housing for elves and grow your tribe, but most importantly, just survive in the harsh wilderness.<br>') : G.textWithTooltip('<table style="float:right;"><tr><td><img src="' + magixURL2 + 'civ2Blocked.png" width="192" height="192"/></td></tr><tr><td><div class="fancyText"><font size="3">???</font></div></td></tr></table>', '...there is a way to unlock this race. It will take a while though...')) +
                '</div>';
        }, 'noClose');
    } else if (G.loadMenu == 1 || G.resets == 0) {
        civ1();
    } else if (G.loadMenu == 2) {
        civ2();
    };
}

function vpcalc() {
    G.getRes('victory point').amount = 0
    var a1 = G.achievByName['patience'].won
    var b1 = 1
    var c1 = 0
    while (c1 < a1) {
        G.gain('victory point', b1)
        b1++
        c1++
    }
    var a2 = G.achievByName['unhappy'].won
    var b2 = 1
    var c2 = 0
    while (c2 < a2) {
        G.gain('victory point', b2)
        b2++
        c2++
    }
    var a3 = G.achievByName['cultural'].won
    var b3 = 1
    var c3 = 0
    while (c3 < a3) {
        G.gain('victory point', b3)
        b3++
        c3++
    }
    var a4 = G.achievByName['hunted'].won
    var b4 = 1
    var c4 = 0
    while (c4 < a4) {
        G.gain('victory point', b4)
        b4++
        c4++
    }
    var a5 = G.achievByName['unfishy'].won
    var b5 = 1
    var c5 = 0
    while (c5 < a5) {
        G.gain('victory point', b5)
        b5++
        c5++
    }
    var a6 = G.achievByName['ocean'].won
    var b6 = 1
    var c6 = 0
    while (c6 < a6) {
        G.gain('victory point', b6)
        b6++
        c6++
    }
    var a7 = G.achievByName['herbalism'].won
    var b7 = 1
    var c7 = 0
    while (c7 < a7) {
        G.gain('victory point', b7)
        b7++
        c7++
    }
    if (G.achievByName['buried'].won >= 1) G.gain('victory point', 10);

    var a9 = G.achievByName['underground'].won
    var b9 = 1
    var c9 = 0
    while (c9 < a9) {
        G.gain('victory point', b9)
        b9++
        c9++
    }
    var a10 = G.achievByName['pocket'].won
    var b10 = 1
    var c10 = 0
    while (c10 < a10) {
        G.gain('victory point', b10)
        b10++
        c10++
    }
    var a11 = G.achievByName['faithful'].won
    var b11 = 1
    var c11 = 0
    while (c11 < a11) {
        G.gain('victory point', b11)
        b11++
        c11++
    }
    var a12 = G.achievByName['dreamy'].won
    var b12 = 1
    var c12 = 0
    while (c12 < a12) {
        G.gain('victory point', b12)
        b12++
        c12++
    }
}
G.MODE_OFF = { name: 'Off', desc: 'The unit will not produce anything.', icon: [1, 0] };

var unitGetsConverted = function (into, min, max, mesg, message, single, plural) //mesg can toggle message
{
    //the unit is destroyed and its workers are converted into something else (such as wounded or dead)
    //min and max define the random percent of the unit's amount that gets wounded every day
    return function (me) {
        var toChange = Math.min(1, Math.random() * (max - min) + min);
        toChange = randomFloor(me.amount * toChange);
        var workers = 0;
        if (me.mode && me.mode.use && me.mode.use['worker']) workers += me.mode.use['worker'];
        if (me.unit.use['worker']) workers += me.unit.use['worker'];
        if (me.unit.staff['worker']) workers += me.unit.staff['worker'];
        if (toChange > 0 && workers > 0) {
            var peopleToChange = toChange * workers;
            var changed = 0;
            if (true) { var i = 'adult'; var n = G.lose(i, peopleToChange); changed += n; }
            if (changed < peopleToChange && G.checkPolicy('elder workforce') == 'on') { var i = 'elder'; var n = G.lose(i, peopleToChange); changed += n; }
            if (changed < peopleToChange && G.checkPolicy('child workforce') == 'on') { var i = 'child'; var n = G.lose(i, peopleToChange); changed += n; }

            for (var i in into) {
                G.gain(i, randomFloor(changed * into[i]), me.unit.displayName + ' accident');
            }
            changed /= workers;
            G.wasteUnit(me, changed);

            if (changed > 0 && mesg == true && (G.getSetting('lost messages') || G.resets < 3)) G.Message({
                type: 'bad', mergeId: 'unitGotConverted-' + me.unit.name, textFunc: function (args) {
                    return args.str.replaceAll('\\[people\\]', (args.n == 1 ? args.single : args.plural)).replaceAll('\\[X\\]', B(args.n));
                }, args: { n: changed, str: message, single: single, plural: plural }, icon: me.unit.icon
            });
        }
    }
}
var archaeologyRare = function () //mesg can toggle message
{
    //for rare findings and up (however, this has a chance to fail, although the failing chance is decreased based on your archaeologist amount)
    return function (me) {
        var rarities = ['Rare', 'Unique', 'Legendary', 'Magnificient', 'Fabled', 'Ethereal', 'Omnipotent', 'Transcendent', 'Godlike']; //magnificient and even more...maybe we should add sth like that in r55 or 56.. #rebalancing
        var mesgType = ['tutorial', 'unique', 'emblemobtain', 'magnificient', 'fabled', 'ethereal', 'omnipotent', 'transcendent', 'godlike']; //magnificient and even more...maybe we should add sth like that in r55 or 56.. #rebalancing
        var vals = [3, 6, 10, 18, 25, 40, 80, 125, 200];
        //clothing names - will provide culture or influence 
        var namesClothesState = ['Worn', 'Wet', 'Leaky', 'Furry', 'Faded', 'Leather'];
        var namesClothesLegend = ['Royal', 'Majesty\'s', 'High society\'s', 'Emperor\'s', 'Ancestor\'s'];
        var namesColors = ['red', 'orange', 'yellow', 'green', 'blue', 'purple', 'black', 'white', 'cyan'];//pelletsstarpl why do i have to add yellow back
        var namesClothing = ['cape', 'coat', 'jacket', 'shirt', 'yukata', 'shoes', 'boots', 'hat', 'mask', 'crown', 'robe'];
        //tool names - will provide insight or influence
        var namesToolsState = ['Well-preserved', 'Refined', 'Burnt', 'Blunt', 'Wasted', 'Shiny', 'Oxidized', 'Old'];
        var namesToolsLegend = ['Gilded', 'Precious', 'Very well-preserved', 'Emperor\'s', 'Judge\'s', 'Ancestor\'s'];
        var namesTools = ['pickaxe', 'axe', 'weapon', 'sword', 'katana', 'hammer', 'sledgehammer', 'scepter'];

        //religious symbols - will provide culture or faith with double chance of extra insight
        var symbolsState = ['Well-preserved', 'Cracked', 'Hard', 'Unique', 'Limestone'];
        var symbolsLegend = ['Gilded', 'Precious', 'Stable', 'Sacred'];
        var symbolsNames = ['idol', 'totem', 'cross', 'six-sided shape', 'ring', 'triangle', 'tablet', 'horn', 'bracelet'];
        //additions for tools and symbols names
        var additions = ['despair', 'authority', 'greed', 'faith', 'sincerity'];
        var additionsSymbols = ['guidance', 'authority', 'greed', 'faith', 'sincerity', 'past', 'future'];

        var type = Math.round(Math.random() * 2);  //if it is clothing  [0], tool [1] or symbol [2]
        let itemName = '';
        let rarity = (Math.random() > 0.45 ? rarities[0] : Math.random() > 0.1 ? rarities[1] : rarities[Math.random() < 0.05 ? 3 : 2]);
        var gain = 'insight';
        var extraInsight = Math.random();
        var ess2 = G.has('doctoral analysis') ? " II" : "";


        switch (type) { //let's proceed to generate names
            case 0:
                var typeCloth = namesClothing[Math.round(Math.random() * (namesClothing.length - 1))];
                if (rarity == 'Rare')
                    itemName = namesClothesState[Math.round(Math.random() * (namesClothesState.length - 1))] + " ";
                else
                    itemName = namesClothesLegend[Math.round(Math.random() * (namesClothesLegend.length - 1))] + " ";
                itemName += namesColors[Math.round(Math.random() * (namesColors.length - 1))] + " " + typeCloth + (rarity == 'Legendary' || rarity == 'Magnificient' ? ' of ' + additions[Math.round(Math.random() * (additions.length - 1))] : "");
                //if it is king related tool like scepter or hammer then give influence else give insight . TODO: give essentials II when specific tech obtained
                G.gain('relic', 1, rarities + ' relic found');
                if (typeCloth == 'crown' || typeCloth == 'robe' || typeCloth == 'cape') {
                    gain = 'influence' + ess2;
                    G.gain(gain, vals[rarities.indexOf(rarity)], rarities + ' relic found');
                } else {
                    gain = 'culture' + ess2;
                    G.gain(gain, vals[rarities.indexOf(rarity)], rarities + ' relic found');
                }
                //small chance to gain more insight (II with specific research)
                if (extraInsight < 0.17) G.gain('insight', 1, rarity + ' relic found');
                break;
            case 1:
                var typeTool = namesTools[Math.round(Math.random() * (namesTools.length - 1))];
                if (rarity == 'Rare')
                    itemName = namesToolsState[Math.round(Math.random() * (namesToolsState.length - 1))] + " ";
                else
                    itemName = namesToolsLegend[Math.round(Math.random() * (namesToolsLegend.length - 1))] + " ";
                itemName += typeTool + (rarity == 'Legendary' ? ' of ' + additions[Math.round(Math.random() * (additions.length - 1))] : "");
                //if it is king related tool like scepter or hammer then give influence else give insight . TODO: give essentials II when specific tech obtained
                G.gain('relic', 1, rarities + ' relic found');
                if (typeTool == 'scepter' || itemName.indexOf('Judge') != -1 || itemName.indexOf('Emperor') != -1) {
                    gain = 'influence' + ess2;
                    G.gain(gain, vals[rarities.indexOf(rarity)], rarity + ' relic found');
                } else {
                    gain = 'insight' + ess2;
                    G.gain(gain, vals[rarities.indexOf(rarity)], rarity + ' relic found');
                }
                //small chance to gain more insight (II with specific research)
                if (extraInsight < 0.17) G.gain('insight' + ess2, 2, rarity + ' relic found'); break;
            case 2:
                var typeSymbol = symbolsNames[Math.round(Math.random() * (symbolsNames.length - 1))];
                if (rarity == 'Rare')
                    itemName = symbolsState[Math.round(Math.random() * (symbolsState.length - 1))] + " ";
                else
                    itemName = symbolsState[Math.round(Math.random() * (symbolsState.length - 1))] + " " + symbolsLegend[Math.round(Math.random() * (symbolsLegend.length - 1))] + " ";
                itemName += typeSymbol + (rarity == 'Legendary' ? ' of ' + additions[Math.round(Math.random() * (additionsSymbols.length - 1))] : "");
                //if it is king related tool like scepter or hammer then give influence else give insight . TODO: give essentials II when specific tech obtained
                G.gain('relic', 1, rarities + ' relic found');
                if (typeTool == 'scepter' || itemName.indexOf('Judge') != -1 || itemName.indexOf('Emperor') != -1) {
                    gain = 'culture' + ess2;
                    G.gain(gain, vals[rarities.indexOf(rarity)], rarity + ' relic found');
                } else {
                    gain = 'faith' + ess2;
                    G.gain(gain, vals[rarities.indexOf(rarity)], rarity + ' relic found');
                }
                if (extraInsight < 1 / 3) G.gain('insight', 2, rarity + ' relic found');
                //even smaller to gain science
                if (rarity == 'Legendary' || rarity == 'Magnificient' && G.has('doctoral analysis')) G.gain('science', 3, rarity + ' relic found'); //later we plan to make it at least legendary
        }
        if (G.getSetting('relic messages')) {
            G.Message({
                type: mesgType[rarities.indexOf(rarity)],
                text: (G.getUnitAmount('archaeologist') === 1 ? "Your archaeologists (well, one archaeologist I suppose, but whatever)" : "Your archaeologists") + ("aeiou".includes(rarity[0]) ? " have found an <b>" : " have found a <b>") + rarity + "</b> relic.<br>It is " + choose(["a rather ", "a relatively ", "a cool and ", "an extremely "]) + choose(["interesting", "strange", "facinating", "useful"]) + " <b>" + itemName + "</b>. This finding provides you with <u>" + vals[rarities.indexOf(rarity)] + " " + G.getRes(gain).displayName + choose(["</u>.<br>Pretty good!", "</u>.<br>Great!", "</u>.<br>Nice!", "</u>.<br>Not bad!", "</u>.<br> That's something, isn't it?", "</u>.<br>Kind of interesting, really..."]),
                icon: [23, 33, "magixmod"]
            });
        }
        //G.getDict('archaeologist').effects[4].chance=(1/(G.getUnitAmount('archaeologist')/2 < 1 ? 1 : G.getUnitAmount('archaeologist')/2))/1100; //balancing rare relics
    }
}
var updateNewDayLines = function (fools, civ2) {
    if (fools) {
        G.props['new day lines'] = [ //Fools mode/April Fools active
            'Mantisk blades have been discovered.', 'You met a friend today.',
            'Creatures are lurking nearby.', 'Danger abounds.',
            'NeverEnding......Fools! (Yeah, its April 1st today, or...is it?)', 'An idiot tried to fall up.',
            'Wild beasts are on the prowl.', 'Large monsters roam, unseen.',
            'Who is missing the bucket?!', 'Another bucket was found on one of the lonely streets.',
            'This is harder but more interesting \u2014pelletsstarPL',
            'Creepers inbound!', 'It is raining.', 'Your rolling pins are rolling and pinning.',
            '.gnivigrofnu is thgin ehT', '.noziroh eth no mrost a si erehT',
            'Another stream on Twitch is happening.', 'plasma4 prepares the next update. Wait, is it not @1_e0?',
            'Another covid-der in the tribe.', 'Someone hits another person with a broom.',
            'friends meet during the night', 'Gatherer said another BRUH today.', '<font color="pink">Purchase the full version of Magix to unlock special content. $0 after you buy it for $999.</font>',
            'README.txt', 'README.png', '<font color="pink">Hey, over here!</font>',
            'Wild thorns do nothing.', 'Something does nothing in the distance.',
            'Strange ashes snow down.', 'A loud YEET is heard.',
            'Memish creatures roll and scurry in the dirt', 'i++;',
            'Name: Magix', 'Thanks for entering the game today, I suppose.',
            'Wind blows or something. Maybe it\'s air.', 'Secrets await.', '<b>Do not forget to look at r/engrish</b>',
            'Noisestorm', 'Unnoisestorm',
            'Distant lands lie undisturbed.', '<b>What happened?</b>',
            'A warm breeze is blowing.', 'sheesh',
            'jeez', '...gosh', 'You spin me round...',
            'QUACK!', 'beep beep boop',
            'Blab', 'blep', 'Moist cookies \u2014grandma',
            'Is this about cookies?', 'mispeled',
            'What is this mod called again?', '[null] [undefined] [NaN]',
            'Do you enjoy these weird messages or not?', 'NeverEnding Legacy or NeverEnding Waiting?',
            'How many secrets are left?', 'A meme appears in the shadows.',
            'You thought of a neat idea, but forgot it when you woke up!', '<b>what was that? did you see it?</b>',
            'You thought of a neat idea, but forgot it when you woke up...again. How is this happening?', 'Someone manages to slip on a banana peel.'
        ];
    } else {
        G.props['new day lines'] = [ //Normal quotes
            'Creatures are lurking nearby.', 'Danger abounds.',
            'Wild beasts are on the prowl.', 'Large monsters roam, unseen.',//'BRUH','OOF',
            'This is a cold night.', 'No sound but the low hum of a gray sky.',
            'The darkness is terrifying.', 'Clouds twist in complicated shapes.',
            'It is raining.', 'Dark birds caw ominously in the distance.',
            'There is a storm on the horizon.', 'The night is unforgiving.',
            'Creatures crawl in the shadows.', 'A stream burbles quietly nearby.',
            'In the distance, a prey falls to a pack of beasts.', 'An unexplained sound echoes on the horizon.',
            'Everything stands still in the morning air.', 'A droning sound fills the sky.',
            'The night sky sparkles, its mysteries undiscovered.', 'Dry bones crack and burst underfoot.',
            'Wild thorns scratch the ankles.', 'Something howls in the distance.',
            'Strange ashes fall from afar.', 'A blood-curdling wail is heard.',
            'Unknown creatures roll and scurry in the dirt.', 'The air carries a peculiar smell today.',
            'Wild scents flow in from elsewhere.', 'The dust is oppressive.',
            'Wind blows from the north.', 'Secrets await.',
            'You hope to discover what has never been found before.', 'A morning fog welcomes you.',
            'An eerie glow from above illuminates the night.',
            'Distant lands lay undisturbed.', '<b>Magic awaits.</b>',
            'A cool breeze is blowing.', 'Another sea wave crashes against a huge rock.',
            'What a cloudy day today!', 'The air is strangely dry today.',
            'Wild brambles look scary even from far away.', 'Your tribe has had a good sleep.',
            'From far away a falling tree can be heard.', 'There is no wind today.',
            'Just another day in your tribe!', 'A meowing sound can be heard in the distance...',
            'Uncover the secrets.', 'Merge with nature.',
            'Discover the undiscovered.', 'This is a lush evening.',
            'Another sea wave crashes against a tall cliff.', 'What a storm!',
            'The air has had a welcoming feel to it recently.', 'Your people went hiking today.',
            'The temperature feels just right today!', 'From somewhere an annoying bug stings you.',
            'Today is a good day for resting in the shade.', '<b>What will you discover?</b>',
            'A slow trickle of water can be heard nearby.', 'Lands from far away remain calm.',
            'Birds have been migrating recently.', 'The sun has finally shown itself.',
            'Night has fallen.', 'Your tribe watched the sunset tonight in awe.',
            'A weird low hum can be heard.', 'Mysteries abound.',
            'You thought of a neat idea, but forgot it when you woke up!', 'Finally, there is quiet.',
            'Various creatures chirp and howl.', 'It sounds like a strange creature is approaching...',
            'Rain has not fallen for the past few days.', 'Your tribe is itching to research more.',
            'It has been strangely foggy recently.', 'Your people haven\'t seen the sun in a while.',
            'The sun welcomes you to a brand new day.', 'Your tribe finally finds a shady area to avoid the heat.',
            'Your tribe managed to find a tasty snack for you!', 'A large gust of wind is blowing.',
            'You feel refreshed after a good night of sleep.', 'Birds chirp far, far away.'
        ];
    }
    if (civ2) {
        G.props['new day lines'].push('The wilderness feels like it is surrounding you.');
        G.props['new day lines'].push('Something mysterious seems to approach.');
        G.props['new day lines'].push('The moon is strangely bright today.');
        G.props['new day lines'].push('Sleep is difficult tonight.');
        G.props['new day lines'].push('You feel a strange longing.');
    }
    shuffle(G.props['new day lines']);
}

G.isMapFullyExplored = function () {
    for (var x = 0; x < G.maps[0].w; x++) {
        var t = G.maps[0].tiles[x];
        for (var y = 0; y < G.maps[0].h; y++) {
            var tile = t[y];
            if (tile.owner != 1 || tile.explored != 1) {
                return false;
            }
        }
    }
    return true;
}
G.traitTick = function (race, permachiev) {
    //possibility to gain random traits every day and removal of outdated temporary traits
    for (var i in G.trait) {
        var me = G.trait[i];
        var lt = typeof (me.lifetime) === 'function' ? me.lifetime() : me.lifetime;
        //autoswitch determines if duration shall affect trait category or not
        if (me.category != 'knowledge' && me.switchCategory != false && lt != undefined && lt != Infinity)
            if (lt > 50) me.category = 'long'; else me.category = 'short';
        if (G.year - me.yearOfObtainment > (typeof (me.lifetime) === 'function' ? me.lifetime() : me.lifetime) && G.traitsOwnedObject[me.name]) { //with this we can make traits have vary lifetime length , not just constant
            if (G.getSetting('trait messages') || G.resets < 3) G.Message({ type: 'important tall', text: (me.category == 'long' || me.category == 'short' ? 'The ' + me.category + '-term trait <b>' : 'The trait <b>') + me.displayName + '</b> ' + choose(['has expired', 'has come to an end', 'has become outdated', 'is no longer active', 'has lost its effect']) + '.', icon: me.icon });
            if (expTraits.indexOf(me.displayName) == -1) { //we don't want names to repeat if we have the century system
                expTraits.push(me.displayName);
            }
            G.deleteTrait(me.name);
            G.playSound(magixURL + 'GainedTech.mp3'); //Let's just...ignore the name of the sound effect, all right?
            return true;
        }
        if (!G.has(me.name)) {
            var traitMult = 1
            if (getObj("civ") == 0) {
                var mult = (Math.log10(G.getDict('population').amount / 20 + 1) * 0.8 + 1) * (G.achievByName['mausoleum'].won > 8 ? 1.3 : (G.achievByName['mausoleum'].won > 5 ? 1.15 : 1));
                G.getDict('trait rituals').desc = 'Improves the chance of getting eternal traits (excluding patrons) based on [population] (currently <b>+' + (mult * 100 - 100).toFixed(1) + (G.has('policy revaluation') ? '%</b>) through the faster spread of beliefs. Consumes just 1 [culture II], [faith II], and [influence II] over the course of 500 days.' : '%</b>) through the faster spread of beliefs. Consumes 1 [culture], [faith], and [influence] every 10 days.');
                traitMult = G.checkPolicy('trait rituals') == 'on' && me.name !== 'famine' && me.lifetime == null ? mult : 1
            }
            // To log currently obtainable traits and trait chances (as well as chance mult), uncomment the line below:
            // if (me.chance !== undefined && G.checkReq(me.req) && G.testCost(me.cost, 1)) console.log(me.name, me.chance, traitMult)
            if (Math.random() < G.getTraitChance(me, traitMult)) {
                if (G.checkReq(me.req) && G.testCost(me.cost, 1)) {
                    G.doCost(me.cost, 1);
                    G.gainTrait(me);
                    if (G.getSetting('trait messages') || G.resets < 3) {
                        switch (me.category) {
                            case "knowledge": G.Message({ type: 'important tall', text: 'Your ' + race + ' have adopted the knowledge: <b>' + me.displayName + '</b>.', icon: me.icon }); break;
                            case "devils": G.Message({ type: 'bad tall', text: 'Devils brought to your ' + race + ': <b>' + me.displayName + '</b>.', icon: me.icon }); break;
                            case "gods": G.Message({ type: 'good tall', text: 'A kind God brought down to your ' + race + ': <b>' + me.displayName + '</b>.', icon: me.icon }); break;
                            case "religion": G.Message({ type: 'story2 tall', text: 'Various beliefs and hopes of your ' + race + ' have brought a religious trait: <b>' + me.displayName + '</b>.', icon: me.icon }); break;
                            case "short": G.Message({ type: 'important tall', text: 'Your ' + race + ' have adopted the temporary trait <b>' + me.displayName + '</b>.', icon: me.icon }); break;
                            case "long": G.Message({ type: 'important tall', text: 'Your ' + race + ' have adopted the <u>long-term</u> trait <b>' + me.displayName + '</b>.', icon: me.icon }); break;
                            default: G.Message({ type: me.name == "famine" ? 'bad2 tall' : 'important tall', text: me.name == "famine" ? ('Your ' + race + ' are now experiencing a famine.') : ('Your ' + race + ' have adopted the trait <b>' + me.displayName + '</b>.'), icon: me.icon }); break;
                        }
                    }
                    if (G.has('symbI'));
                    me.yearOfObtainment = G.year;
                    if (typeof (me.lifetime) === 'function') if (me.lifetime() == Infinity) G.achievByName[permachiev].won++;
                    G.playSound(magixURL + 'GainedTrait.mp3');
                    return true;
                }
            }
        }
    }
    return false;
};

var expTraits = [];
function onTechBuy(race, tec) {
    var techCnt = G.techN - G.miscTechN + G.knowN;
    G.fastTicks += G.props['fastTicksOnResearch'];
    G.gainTech(tec);
    if ((techCnt) % (techCnt > 150 ? 12 : 20) == 0 && techCnt > 30) { G.gain("education", 1, "technological progress"); G.gain("science", 1, "technological progress") };
    if (G.getSetting('research messages') || G.resets < 3) {
        G.Message({ type: 'good tall', text: 'Your ' + race + ' have ' + choose(['discovered the secrets of ', 'found the mysteries of ', 'acknowledged ', 'learnt ', 'discovered ', 'uncovered ', 'now discovered ', 'learned about ']) + '<b>' + tec.displayName + '</b>.', icon: tec.icon })
    }
    if (tec.tutorialMesg != undefined)
        if (G.getSetting((tec.tutorialMesg[0].indexOf('tutorial') == -1 ? 'story' : "tutorial") + ' messages') || G.resets < 3)
            G.Message({ type: tec.tutorialMesg[0], text: tec.tutorialMesg[1], icon: tec.tutorialMesg[2] });
    G.update['tech']();

    l('techBox').children[0].classList.add('popIn');
    var randomSound = Math.floor(Math.random() * 4)
    switch (randomSound) {
        case 0: G.playSound(magixURL + 'GainedTech2.wav'); break;
        case 1: G.playSound(magixURL + 'GainedTech3.wav'); break;
        case 2: G.playSound(magixURL + 'GainedTech4.wav'); break;
        case 3: G.playSound(magixURL + 'GainedTech5.wav'); break;
    }
    if (techCnt == 50) G.Message({ type: 'important', text: 'Your tribe can now survive. Thanks to you (' + G.getName('ruler') + '), dreamers, and lots of insight. You stare at your tribe with a smile.', icon: [8, 12, 8, 4] })
    if (techCnt == 100) G.Message({ type: 'important', text: 'Your civilization is becoming smarter and smarter, and your people are thanking you for ruling them. They believe you are the only person fit for helping them build a great and never-ending civilization! Discover, research, and prosper.', icon: [24, 18, "magixmod", 8, 4] })
    if (techCnt == 250) G.Message({ type: 'important tall', text: 'Your civilization is now quite advanced, and yet your people still hope to learn a lot more researches, ideas, and improvements! You stare at your empire. One of you workers comes to you, thanking you for raising humanity to such a high level. Now, you wonder what you\'ll uncover next...', icon: [24, 18, "magixmod", 18, 19, "magixmod"] })
}
function timeAchievs() {
    var time = Date.now() - G.fullDate;
    if (time >= 3600000) { G.achievByName['the hour of hope'].won = 1; if (G.achievByName['the hour of hope'].won == 0) G.middleText("- Completed The hour of hope achievement -"); }
    if (time >= 3600000 * 24) { G.achievByName['the day of rise'].won = 1; if (G.achievByName['the day of rise'].won == 0) G.middleText("- Completed The day of rise achievement -"); }
    if (time >= 3600000 * 24 * 7) { G.achievByName['authority\'s week'].won = 1; if (G.achievByName['authority\'s week'].won == 0) G.middleText("- Completed Authority\'s week achievement -"); }
    if (time >= 3600000 * 24 * 30) { G.achievByName['golden month'].won = 1; if (G.achievByName['golden month'].won == 0) G.middleText("- Completed Golden Month achievement -"); }
    if (time >= 3600000 * 24 * 365) { G.achievByName['so much to do, so much to see'].won = 1; if (G.achievByName['so much to do, so much to see'].won == 0) G.middleText("- Completed So much to do,<br>so much to see <u>shadow achievement</u> -"); }
}

var foolsToggle = false
function newDayLines(civ2) {
    if (G.getSetting('atmosphere') && Math.random() < 0.01 && (G.getSetting('new day lines') || G.resets < 3)) {
        //show a random atmospheric message occasionally on new days
        //we pick one of the first 20 lines in the array, then push that line back at the end; this means we get a semi-random stream of lines with no frequent repetitions
        var foolsState = (yer.getMonth() == 3 && yer.getDate() == 1) || G.getSetting('fools')
        if (G.props['new day lines'] == null || (foolsToggle !== foolsState && G.resets >= 3)) {
            foolsToggle = foolsState
            updateNewDayLines(foolsState, civ2)
        }
        var msg = G.props['new day lines'].splice(Math.floor(Math.random() * 20), 1)[0];
        if (G.getSetting('new day lines'))
            G.props['new day lines'].push(msg);
        G.Message({ text: msg });
    }
}
function AoD() {
    var changed = 0;
    var n = G.lose('corpse', randomFloor(G.getRes('corpse').amount * 0.01), '<font color="#f70054">art of death</font>'); G.gain('bone', n * 3, 'unused corpse parts'); changed += n;
    //var happMult = 1;
    //if (G.has('fear of death')) happMult *= 1.05;
    //if (G.has('acceptance of death')) happMult *= 0.95;
    //if (G.has('death scepticism')) happMult -= G.year % 40 > 19 ? 0.05 : -0.05;
    //changeHappiness(-changed * 0.1 * happMult, 'art of death');
    if (n > 0) {
        G.pseudoGather(G.getRes('culture'), changed);
        G.gain('health', -changed * 0.1, 'art of death');
    }
}
function islandName() {
    var rawName = G.getName('island')
    return rawName == 'undefined' ? 'Plain Island' : rawName
}
function changeHappiness(amount, description) {
    G.gain('happiness', amount > 0 ? amount * ungrateful : amount, description)
}

if (getObj("civ") != "1") {
    //////////////////////////////////////////////////////////////
    ////////ACTUAL CONTENT - CIV 1
    G.AddData({
        name: 'Default dataset',
        author: 'pelletsstarPL',
        desc: 'Fit more people, discover magic, and build strange wonders along the way. Unlock portals and more housing so you can fit more people, and explore the vast oceans! Note that this mod uses part of the base game, so credits to Orteil for the default dataset. (many, many new techs, features, and text fixes have been added by @1_e0)',
        engineVersion: 1,
        manifest: 0,
        requires: ['MagixUtils'],
        sheets: { "magixmod": magixURL2 + 'magixmod.png', 'magix2': magix2Link, 'seasonal': magixURL + 'seasonalMagix.png', 'terrain': magixURL + 'terrainMagix.png' },//custom stylesheet (note : broken in IE and Edge for the time being)
        func: function () {
            function theme() {
                var Theme = G.checkPolicy('theme changer');
                if (Theme == 0 || Theme == null) {
                    Theme = 'Default';
                }
                //tech
                if (G.tab.id == 'tech' && document.getElementsByClassName("bgPanelUp")[0]) {
                    document.getElementsByClassName("bgPanelUp")[0].style['background-image'] = 'url("img/darkEdgeBorders.png"),url("' + (isUsingFile ? magixURL : magixURL + Theme + 'Theme/') + 'bgUpRock' + Theme + '.jpg")'; //needs refreshing every time we enter Tech tab
                }

                //res and messages tab
                document.getElementsByClassName("bgPanelDown")[0].style['background-image'] = 'url("img/darkEdgeBorders.png"),url("' + (isUsingFile ? magixURL : magixURL + Theme + 'Theme/') + 'bgDownRock' + Theme + '.jpg")';
                document.getElementsByClassName("tab")[0].style['background-image'] = 'url("' + (isUsingFile ? magixURL : magixURL + Theme + 'Theme/') + 'bgDarkRock' + Theme + '.jpg")';
                l("resources").style['background-image'] = 'url(img/darkBorders.png),url("' + (isUsingFile ? magixURL : magixURL + Theme + 'Theme/') + 'bgMidRock' + Theme + '.jpg")';
                l("messagesList").style['background-image'] = 'url("' + (isUsingFile ? magixURL : magixURL + Theme + 'Theme/') + 'bgMidRock' + Theme + '.jpg")';
                for (var i = 0; i < document.getElementsByClassName("sideCategory").length; i++) document.getElementsByClassName("sideCategory")[i].style.width = "100px";
                for (var i = 0; i < document.getElementsByClassName("subsection").length; i++) document.getElementsByClassName("subsection")[i].style['background'] = 'url(img/darkBorders.png),url("' + (isUsingFile ? magixURL : magixURL + Theme + 'Theme/') + 'bgDarkRock' + Theme + '.jpg")';
                for (var i = 0; i < document.getElementsByClassName("subsection").length; i++) document.getElementsByClassName("subsection")[i].style['background-repeat'] = 'no-repeat, repeat';
                for (var i = 0; i < document.getElementsByClassName("subsection").length; i++) document.getElementsByClassName("subsection")[i].style['background-size'] = 'cover';
            }

            function rootPolicyEvolve() {
                if (G.achievByName['democration'].won > 0 && G.achievByName['the fortress'].won > 2) {
                    G.getDict("trustworthy influence").cost['pagoda construction point'] = 2000;
                    G.getDict("trustworthy influence").desc = G.techByName["trustworthy influence"].desc.replace(" 5%", " 17.5%");
                    G.replaceEffectValues(['clan leader', 'chieftain'], 'mult', 'value', 1.05, 1.175);
                    G.getDict("pagoda of democracy").wideIcon = [0, 33, "magixmod"];
                    G.getDict("pagoda of democracy").icon = [1, 33, "magixmod"];
                    G.getDict("pagoda of democracy").cost = { 'basic building materials': 800, 'precious building materials': 700 };
                    G.getDict("pagoda of democracy").costPerStep = { 'basic building materials': 25, 'precious building materials': 5, 'influence': 40, 'pagoda construction point': -1 };
                    G.getDict("pagoda of democracy").steps = 2000;
                    G.getDict("pagoda of democracy").messageOnStart = 'You began the construction of the Pagoda of Democracy. Over the blossoms it looks like the most beautiful place you have ever seen. Some people say that Pagoda is even taller than the Mausoleum. <font color="#aaffaa">But this time ancient powers of nature brought from the elvish universe can lead this wonder to be better than ever.</font>';
                    G.getDict("pagoda of democracy").finalStepCost = { 'authority': 25, 'population': 2000, 'precious building materials': 4500, 'gem block': 50 };
                    G.getDict("pagoda of democracy").finalStepDesc = 'To complete the wonder and make justice, peace and democration last even longer, you need to do the final step.';
                    G.getDict("pagoda of democracy").use = { 'land': 15, 'worker': 20, 'metal tools': 20 };
                    if (G.getUnit("pagoda of democracy").desc.indexOf("better than ever") == -1)
                        G.getDict("pagoda of democracy").desc += '//<font color="#aaffaa">Evolving the elvish fortress unlocked the second level of this wonder. Complete it and ascend to increase the <b>Democration</b> achievement\'s starting bonus by 2.</font>';
                }
                if (G.achievByName['democration'].won > 0) {
                    G.gain("authority", G.achievByName['democration'].won > 1 ? 3 : 1);
                    G.gain("influence", G.achievByName['democration'].won > 1 ? 3 : 1);
                }
            }
            function rootCultureEvolve() {
                if (G.achievByName['sacrificed for culture'].won > 0 && G.achievByName['the fortress'].won > 3) {
                    G.getDict("culture rise").cost['fortress construction point'] = 2000;
                    G.getDict("culture rise").desc = G.techByName["culture rise"].desc.replace(" 5%", " 17.5%");
                    G.replaceEffectValues(['storyteller', 'painter', 'poet'], 'mult', 'value', 1.05, 1.175);
                    G.getDict("fortress of cultural legacy").icon = [4, 33, "magixmod"];
                    G.getDict("fortress of cultural legacy").wideIcon = [choose([9, 12, 15]), 17, "magixmod", 3, 33, "magixmod"];
                    G.getDict("fortress of cultural legacy").cost = { 'basic building materials': 1100, 'precious building materials': 800, 'inspiration': 10 };
                    G.getDict("fortress of cultural legacy").costPerStep = { 'basic building materials': 25, 'precious building materials': 5, 'culture': 125, 'glass': 1, 'fortress construction point': -1, 'dyes': 2 };
                    G.getDict("fortress of cultural legacy").steps = 2000;
                    G.getDict("fortress of cultural legacy").messageOnStart = 'You began the construction of Fortress of Cultural Legacy. <font color="#aaffaa">But this time, ancient powers of nature brought from the elvish universe can lead this wonder to be better than ever.</font>';
                    G.getDict("fortress of cultural legacy").finalStepCost = { 'inspiration': 125, 'population': 2000, 'precious building materials': 4500, 'gem block': 50, 'culture': 650 };
                    G.getDict("fortress of cultural legacy").finalStepDesc = 'To complete the wonder and prevent culture and traditions from being truly perditioned...you need to perform that final step.';
                    G.getDict("fortress of cultural legacy").use = { 'land': 15, 'worker': 20, 'metal tools': 20 };
                    if (G.getUnit("fortress of cultural legacy").desc.indexOf("better than ever") == -1)
                        G.getDict("fortress of cultural legacy").desc += '//<font color="#aaffaa">Evolving the elvish fortress unlocked the second level of this wonder! Complete it and ascend to increase the <b>Sacrificed for culture</b> achievement\'s starting bonus by 2.</font>';
                }
                if (G.achievByName['sacrificed for culture'].won > 0) {
                    G.gain("inspiration", G.achievByName['sacrificed for culture'].won > 1 ? 5 : 3);
                    G.gain("culture", G.achievByName['sacrificed for culture'].won > 1 ? 5 : 3);
                }
            }
            function rootKnowEvolve() {
                if (G.achievByName['insight-ly'].won > 0 && G.achievByName['the fortress'].won > 2) {
                    G.getDict("knowledgeable").cost['complex construction point'] = 2000;
                    G.getDict("knowledgeable").desc = G.techByName["knowledgeable"].desc.replace(" 5%", " 17.5%");
                    G.replaceEffectValues(['dreamer'], 'mult', 'value', 1.05, 1.175);
                    G.getDict("complex of dreamers").icon = [7, 33, "magixmod"];
                    G.getDict("complex of dreamers").wideIcon = [6, 33, "magixmod"];
                    G.getDict("complex of dreamers").cost = { 'basic building materials': 700, 'precious building materials': 800, 'wisdom': 20 };
                    G.getDict("complex of dreamers").costPerStep = { 'basic building materials': 250, 'precious building materials': 5, 'insight': 300, 'complex construction point': -1 };
                    G.getDict("complex of dreamers").steps = 2000;
                    G.getDict("complex of dreamers").messageOnStart = 'You began the construction of Complex of Dreamers. The complex looks like not from this world when night visits the world. <font color="#aaffaa">But this time, ancient powers of nature brought from the elvish universe can lead this wonder to be better than ever.</font>';
                    G.getDict("complex of dreamers").finalStepCost = { 'wisdom': 125, 'population': 2500, 'precious building materials': 6000, 'gem block': 50, 'insight': 1000, 'housing': -1875 };
                    G.getDict("complex of dreamers").finalStepDesc = 'To complete the wonder and make your whole civilization much smarter you will need to perform a final step.';
                    G.getDict("complex of dreamers").use = { 'land': 40, 'worker': 32, 'metal tools': 32 };
                    if (G.getUnit("complex of dreamers").desc.indexOf("better than ever") == -1)
                        G.getDict("complex of dreamers").desc += G.achievByName['insight-ly'].won == 1 ? '//<font color="#aaffaa">Evolving the elvish fortress unlocked the second level of this wonder. Complete it and ascend to increase the <b>Insight-ly</b> achievement\'s starting bonus by 2.</font>' : "This wonder is maxed and elvish fortress bonus is alredy obtained.";
                }
                if (G.achievByName['insight-ly'].won > 0) {
                    G.gain("insight", G.achievByName['insight-ly'].won > 1 ? 8 : 6);
                    G.unitByName['dreamer'].effects.push({ type: 'mult', value: 1.06 });
                }
            }
            function mausoleumEvolve() {
                var lvl = G.achievByName['mausoleum'].won;
                if (lvl > 0) {
                    var steps = 100 + (lvl <= 10 ? 10 * lvl : 100);
                    var population = 100 + (lvl <= 10 ? 100 * lvl : 1000);
                    G.getDict('mausoleum').steps = steps;    //amount of steps
                    G.getDict('mausoleum').icon = [1 + (lvl - 1) * 3, 20, "magixmod"];//icon
                    G.getDict('mausoleum').wideIcon = [0 + (lvl - 1) * 3, 20, "magixmod"]//wide icon
                    G.getDict('mausoleum').finalStepCost = { 'population': population };//final cost
                    G.getDict('mausoleum').finalStepDesc = 'To complete the ' + (lvl > 9 ? "Great" : "") + ' Mausoleum, ' + population + ' of your [population,people] must be sacrificed to accompany you as servants in the afterlife. //Finishing the Mausoleum also provides 2,000 extra [housing].'
                    G.getDict('mausoleum').desc = '@leads to the <b>Mausoleum Victory</b><>A mystical monument where the dead lie.//A temple housing a tomb deep under its rocky platform, the Mausoleum stands tall, its eternal shadow forever reminding your people of your greatness. <font color="#eac733">@The Mausoleum is evolved to level ' + (lvl <= 10 ? lvl : 10) + ' of 10. ' + (G.achievByName['mausoleum eternal'].won > 0 ? 'You have obtained all bonuses already' : 'Continue evolving up to unlock a special achievement and more bonuses. You can evolve up the Mausoleum to the next stage by ascending with it') + '. //To see level bonuses, hover over [a gift from the mausoleum]\'s tech icon.</font>';//description
                    G.getDict('mausoleum').cost = { 'basic building materials': 1000 + (lvl <= 10 ? 200 * lvl : 2000) }
                    if (lvl > 9) {
                        G.getDict('mausoleum').wonder = 'mausoleum eternal';
                        if (G.achievByName['mausoleum eternal'].won) mausobonus = 15;
                        G.getDict('mausoleum').displayName = 'The Great Mausoleum';
                        G.getDict('mausoleum').messageOnStart = 'You begin the construction of The Great Mausoleum. Its towering mass will soon dominate the city, casting fear and awe wherever its shadow reaches. This time the Mausoleum reach its total massivity. It is not just huge anymore; people say that The Mausoleum finally got colossal!';
                    } else
                        G.getDict('mausoleum').messageOnStart = 'You begin the construction of the Mausoleum. Its towering mass will dominate the city, casting fear and awe wherever its shadow reaches. This time, the Mausoleum will be even more massive!';

                    G.getDict('mausoleum').costPerStep = { 'basic building materials': 200 + (lvl <= 10 ? 10 * lvl : 100), 'precious building materials': 25 + (lvl <= 10 ? 5 * lvl : 50) }
                    G.getDict('mausoleum').use = { 'land': 10 + (lvl <= 10 ? 1 * lvl : 10), 'worker': 5 + (lvl <= 10 ? 1 * lvl : 10), 'metal tools': 5 + (lvl <= 10 ? 1 * lvl : 10) };
                    if (lvl > 5)//require mana
                        Object.assign(G.unitByName['mausoleum'].costPerStep, { 'mana': 60 });
                    if (lvl > 7) {//require more and apply new bonus
                        Object.assign(G.unitByName['mausoleum'].costPerStep, { 'mana': 60, 'gem block': 1, 'magic essences': 50 });
                    }
                    if (lvl > 6) G.getDict('archaeology').req = { 'gardening': true, 'will to know more': true };
                    //desc
                    G.getDict('a gift from the mausoleum').desc = 'This is something that may entirely change the human legacy. Current bonuses://<b>LV1</b> - [a gift from the mausoleum,This mystical gift...]<hr>' +
                        (lvl > 1 ? '<b>LV2</b> - +1 [land] from the starting tile each run for every 2 levels of this wonder.<hr>' : '') +
                        (lvl > 2 ? '<b>LV3</b> - The [ungrateful tribe] trait\'s effect is reduced by 20%.<hr>' : '') +
                        (lvl > 3 ? '<b>LV4</b> - The [ungrateful tribe] trait\'s effect is reduced by 40% instead of 20%.<hr>' : '') +
                        (lvl > 4 ? '<b>LV5</b> - [missionary] provides 1 [spirituality] when researched, and [care for nature] has a much higher chance to be adopted.<hr>' : '') +
                        (lvl > 5 ? '<b>LV6</b> - [trait rituals] are 15% more effective. In addition, you unlock the <b>theme changer</b>!<hr>' : '') +
                        (lvl > 6 ? '<b>LV7</b> - Your [population,people] have a chance to adopt [archaeology] knowledge over time.<hr>' : '') +
                        (lvl > 7 ? '<b>LV8</b> - The [belief in the beforelife,Belief in the before/afterlife] traits are twice as likely to be adopted.<hr>' : '') +
                        (lvl > 8 ? '<b>LV9</b> - [trait rituals] are 30% more effective instead of 15%.<hr>' : '') +
                        (lvl > 9 ? '<b>LV10</b> - Unlocks <b>Mausoleum eternal</b>, providing massive benefits!' : '');
                }
            }
            G.seasonalContent = function () {
                G.getDict('xmas1').desc = 'The spirits of Christmas thank your [artisan]s for crafting lights, ornaments, and neat decorations that bring Christmas to this world. For this run and the next <b>' + G.getAchiev('xmas buff').won + '</b> ' + (G.achievByName['xmas buff'].won == 1 ? "run/legacy" : "runs/legacies") + ', your [artisan]s are 3% more efficient. //<font color="#f70054">Note: During this season of festive cheer this buff won\'t disable; however, when it ends, you will start losing that bonus, meaning that you will have to wait until next Christmas.</font>';
                G.getDict('xmas2').desc = 'The spirits of Christmas thank your [clothier]s for weaving and sewing festive clothing, bringing Christmas to this world. For this run and the next <b>' + G.getAchiev('xmas buff').won + '</b> ' + (G.achievByName['xmas buff'].won == 1 ? "run/legacy" : "runs/legacies") + ', your [clothier]s are 3% more efficient. //<font color="#f70054">Note: During this season of festive cheer this buff won\'t disable; however, when it ends, you will start losing that bonus, meaning that you will have to wait until next Christmas.</font>';
                G.getDict('xmas3').desc = 'The spirits of Christmas thank your [potter]s for crafting festive pots and bowls with Christmas symbols that bring Christmas to this world. For this run and the next <b>' + G.getAchiev('xmas buff').won + '</b> ' + (G.achievByName['xmas buff'].won == 1 ? "run/legacy" : "runs/legacies") + ', your [potter]s are 3% more efficient. //<font color="#f70054">Note: During this season of festive cheer this buff won\'t disable; however, when it ends, you will start losing that bonus, meaning that you will have to wait until next Christmas.</font>';
                G.getDict('xmas4').desc = 'The spirits of Christmas thank your [carver]s for carving festive statuettes out of various materials and for decorating cut stone with festive shapes/symbols, bringing Christmas to this world. For this run and the next <b>' + G.getAchiev('xmas buff').won + '</b> ' + (G.achievByName['xmas buff'].won == 1 ? "run/legacy" : "runs/legacies") + ', your [carver]s are 3% more efficient. //<font color="#f70054">Note: During this season of festive cheer this buff won\'t disable; however, when it ends, you will start losing that bonus, meaning that you will have to wait until next Christmas.</font>';
                G.getDict('valentine1').desc = 'Amore the Angel of [love] and the son of [se03,Tu-ria] and [se11,Enlightened] thank you for completing the wonder and spreading love all around the globe. For this run and the next <b>' + G.getAchiev('xmas buff').won + '</b> ' + (G.achievByName['valentine buff'].won == 1 ? "run/legacy" : "runs/legacies") + ', you will start with 80 extra [water]. //<font color="#f70054">Note: While Valentines is active this buff won\'t disable; however, when Valentines ends, you will start losing that bonus, meaning that you will have to wait until next Valentines.</font>';
                G.getDict('valentine2').desc = 'Amore the Angel of [love] and the son of [se03,Tu-ria] and [se11,Enlightened] thank you for completing the wonder and spreading love all around the globe. For this run and the next <b>' + G.getAchiev('xmas buff').won + '</b> ' + (G.achievByName['valentine buff'].won == 1 ? "run/legacy" : "runs/legacies") + ', you will start with 70 extra [herbs]. //<font color="#f70054">Note: While Valentines is active this buff won\'t disable; however, when Valentines ends, you will start losing that bonus, meaning that you will have to wait until next Valentines.</font>';
                G.getDict('valentine3').desc = 'Amore the Angel of [love] and the son of [se03,Tu-ria] and [se11,Enlightened] thank you for completing the wonder and spreading love all around the globe. For this run and the next <b>' + G.getAchiev('xmas buff').won + '</b> ' + (G.achievByName['valentine buff'].won == 1 ? "run/legacy" : "runs/legacies") + ', you will start with 70 extra [cooked meat]. //<font color="#f70054">Note: While Valentines is active this buff won\'t disable; however, when Valentines ends, you will start losing that bonus, meaning that you will have to wait until next Valentines.</font>';
                G.getDict('valentine4').desc = 'Amore the Angel of [love] and the son of [se03,Tu-ria] and [se11,Enlightened] thank you for completing the wonder and spreading love all around the globe. For this run and the next <b>' + G.getAchiev('xmas buff').won + '</b> ' + (G.achievByName['valentine buff'].won == 1 ? "run/legacy" : "runs/legacies") + ', you will start with 1 extra [child] and 1 extra [insight]. //<font color="#f70054">Note: While Valentines is active this buff won\'t disable; however, when Valentines ends, you will start losing that bonus, meaning that you will have to wait until next Valentines.</font>';
                G.getDict('hallow1').desc = 'The ancients of Halloween are going to support you for some time. For this run and the next <b>' + G.getAchiev('halloween buff').won + '</b> ' + (G.achievByName['halloween buff'].won == 1 ? "run/legacy" : "runs/legacies") + ', your [wanderer]s are 2% more efficient. //<font color="#f70054">Note: During this spooky season this buff won\'t disable; however, when Halloween ends, you will start losing that bonus, meaning that you will have to wait until next Halloween.</font> //<small>we are no longer scared of the darkness!</small>';
                G.getDict('hallow2').desc = 'The ancients of Halloween are going to support you for some time. For this run and the next <b>' + G.getAchiev('halloween buff').won + '</b> ' + (G.achievByName['halloween buff'].won == 1 ? "run/legacy" : "runs/legacies") + ', your [florist]s are 3% more efficient. //<font color="#f70054">Note: During this spooky season this buff won\'t disable; however, when Halloween ends, you will start losing that bonus, meaning that you will have to wait until next Halloween.</font> //<small>the ancients sure do love flowers for whatever reason</small>';
                G.getDict('hallow3').desc = 'The ancients of Halloween are going to support you for some time. For this run and the next <b>' + G.getAchiev('halloween buff').won + '</b> ' + (G.achievByName['halloween buff'].won == 1 ? "run/legacy" : "runs/legacies") + ', your [mana maker]s are 1% more efficient. //<font color="#f70054">Note: During this spooky season this buff won\'t disable; however, when Halloween ends, you will start losing that bonus, meaning that you will have to wait until next Halloween.</font> //<small>it\'s a good thing?</small>';
                G.getDict('hallow4').desc = 'The ancients of Halloween are going to support you for some time. For this run and the next <b>' + G.getAchiev('halloween buff').won + '</b> ' + (G.achievByName['halloween buff'].won == 1 ? "run/legacy" : "runs/legacies") + ', all your [fire wizard tower,Wizard towers] are 1% more efficient. //<font color="#f70054">Note: During this spooky season this buff won\'t disable; however, when Halloween ends, you will start losing that bonus, meaning that you will have to wait until next Halloween.</font> //<small>that\'s pretty magical...</small>';
                var timeOffline = Math.max(0, (Date.now() - G.lastDate) / 1000);
                if (day + leap >= 289 && day + leap <= 305) {
                    G.getDict('"dark season"').req = { 'tribalism': true, 'culture of celebration': true, 'sedentism': true, 'intuition': true };
                    G.getDict('population').icon = [0, 7, 'seasonal'];
                    G.getDict('worker').icon = [1, 7, 'seasonal'];
                    G.getDict('child').icon = [2, 7, 'seasonal'];
                    G.getDict('adult').icon = [3, 7, 'seasonal'];
                    G.getDict('candy').hidden = false;
                    G.getDict('spookiness').hidden = false;
                    G.getDict('burial').icon = [16, 7, 'seasonal'];
                    G.getDict('halloween essence').hidden = false;
                    G.getDict('spirit summoner').req = { 'tribalism': true, 'spirit-summoning': true };
                    G.getDict('halloween essence storage').req = { 'tribalism': true, 'essence storages': true, '"dark season"': true };
                    G.getDict('elder').icon = [4, 7, 'seasonal'];
                    G.getDict("colored clothing").displayName = "Halloween costume";
                    G.getDict("colored clothing").icon = [0, 9, 'seasonal'];
                    G.getDict("artisan").modes['candies'].req = { 'tribalism': true, 'candy-crafting': true };
                    G.getDict("artisan").effects.push({ type: 'convert', from: { 'paper': 1, 'sugar': 20 }, into: { 'candy': 10, 'spookiness xp': 2 * spookboost }, every: 4, mode: 'candies' });
                    G.getDict("clothier").modes['weave leather colored clothing'].icon = [0, 9, 'seasonal'];
                    G.getDict("clothier").modes['weave fiber colored clothing'].icon = [0, 9, 'seasonal'];
                    G.getDict("clothier").modes['dye already made clothing'].icon = [0, 9, 'seasonal'];
                    G.getDict("clothier").modes['weave leather colored clothing'].desc = 'Your clothier will now weave spooky [colored clothing]s out of [leather]. Requires [costume-crafting] to work!';
                    G.getDict("clothier").modes['weave fiber colored clothing'].desc = 'Your clothier will now weave spooky [colored clothing]s out of [herbs]. Requires [costume-crafting] to work!';
                    G.getDict("clothier").modes['dye already made clothing'].desc = 'Your clothier will now dye already made [basic clothes], turning them into spooky [colored clothing]s. Requires [costume-crafting] to work!';
                    G.getDict("clothier").effects.push({ type: 'mult', value: 0, req: { 'costume-crafting': false }, mode: 'weave fiber colored clothing' })
                    G.getDict("clothier").effects.push({ type: 'mult', value: 0, req: { 'costume-crafting': false }, mode: 'dye already made clothing' })
                    G.getDict("clothier").effects.push({ type: 'mult', value: 0, req: { 'costume-crafting': false }, mode: 'weave leather colored clothing' })
                    if (!G.has('costume-crafting')) G.getRes('colored clothing').amount = 0;
                    G.getDict("colored clothing").desc = "Halloween costumes can be crafted by [clothier]s and will bring more [happiness] than [basic clothes]. //A variety of vampire, ghost, zombie, and skeleton costumes are crafted to celebrate this spooky time.<br>Happy Halloween!";
                } else {
                    G.getDict('spirit summoner').effects.push({ type: 'mult', value: 0 });
                };
                if (day + leap >= 349 && day + leap <= 362) {
                    G.getDict('scouting').icon = [8, 11, 'seasonal'];
                    G.getDict('cities').icon = [16, 11, 'seasonal'];
                    G.getDict('sedentism').icon = [18, 11, 'seasonal'];
                    G.getDict('valid portal frame').icon = [19, 11, 'seasonal'];
                    G.getDict('sedentism').icon = [18, 11, 'seasonal'];
                    G.getDict('mirror world 1/2').icon = [27, 3, "magixmod", 19, 12, 'seasonal'];
                    G.getDict('mirror world 2/2').icon = [27, 2, "magixmod", 19, 12, 'seasonal'];
                    G.getDict('focused scouting').icon = [17, 11, 'seasonal'];
                    G.getDict('dark side').icon = [8, 12, 'seasonal'];
                    G.getDict('winter holidays').req = { 'culture of celebration': true, 'tribalism': true, 'philosophy': true };
                    G.getDict('the christmas').req = { 'culture of celebration': true, 'tribalism': true, 'winter holidays': true };
                    G.middleText('<big><font color="#26ad1a">Merry Christmas!</big><br>- Welcome back -<br><small>You accumulated ' + B(timeOffline) + ' fast ticks while you were away.</small></font>', 'slow');

                    G.getDict('f.r.o.s.t.y').req = { 'festive robot print': true, 'tribalism': true };
                    G.getDict('child of Christmas').hidden = false;
                    G.getDict('snow').hidden = false;
                    G.getDict('artisan of christmas').req = { 'festive artisanistry': true, 'tribalism': true };
                    G.getDict('festive artisanistry').req = { 'winter holidays': true, 'tribalism': true };
                    G.getDict('festive light').hidden = false;
                    //G.getDict('lodge of Christmas').req={'the christmas':true,'tribalism':true};
                    G.getDict('snowman').hidden = false;
                    G.getDict('christmas ornament').hidden = false;
                    G.getDict('christmas essence').hidden = false;
                };
                //SEASONALs
                if ((day >= 365 && day <= 366) || (day > 0 && day <= 2)) {
                    //also not only greetings but also some content unlocks
                    G.getDict('firecracker').hidden = false; G.getDict('blue firework').hidden = false; G.getDict('orange firework').hidden = false; G.getDict('dark blue firework').hidden = false; G.getDict('dark orange firework').hidden = false;
                    G.getDict('firework crafting').req = { 'culture of celebration': true, 'tribalism': true };
                    G.getDict('artisan of new year').req = { 'culture of celebration': true, 'firework crafting': true, 'tribalism': true };
                    G.getDict('firework launching').req = { 'culture of celebration': true, 'firework crafting': true, 'tribalism': true };
                    G.getDict('dark essenced fireworks').req = { 'culture of celebration': true, 'firework crafting': true, 'Wizard complex': true, 'tribalism': true };
                }

                if (day >= 40 && day <= 46) {  //valentines
                    G.getDict('ambrosium treeplanting').icon = [11, 16, 'seasonal'];
                    G.getDict('exploration trips').icon = [20, 17, 'seasonal'];
                    G.getDict('love grows around us').req = { 'culture of celebration': true, 'tribalism': true };
                    G.getDict('cities').icon = [12, 16, 'seasonal'];
                    G.getDict('sedentism').icon = [13, 16, 'seasonal'];
                    G.getDict('fortress of love').req = { 'lovely monument': true, 'tribalism': true };
                    G.getDict('scouting').icon = [14, 16, 'seasonal'];
                    G.getDict('focused scouting').icon = [15, 16, 'seasonal'];
                    G.getDict('well-digging').icon = [16, 16, 'seasonal'];
                    G.getDict('bows').icon = [17, 16, 'seasonal'];
                    G.getDict('spears').icon = [18, 16, 'seasonal'];
                    G.getDict('sewing').icon = [19, 16, 'seasonal'];
                    G.getDict('sewing II').icon = [9, 17, 'seasonal'];
                }
            }
            G.maxMessages = 25;
            G.la = 1; G.lb = 2; G.ta = 0; //land id tab unlockable. without this trait you can't see policies, lc is for that quote depending on starting type
            /*=====================================================================================
            TECH & TRAIT CATEGORIES
            =======================================================================================*/
            G.knowCategories.push(
                { id: 'trial', name: 'Trial' },
                { id: 'main', name: 'General' },
                { id: 'misc', name: 'Miscellaneous' },
                { id: 'knowledge', name: 'Knowledge' },
                { id: 'seasonal', name: '<font color="fuschia">S e a s o n a l</font>' },
                { id: 'culture', name: 'Cultural' },
                { id: 'religion', name: 'Religious' },
                { id: 'short', name: 'Short-term' },//you can only have so many traits with this category; if the player gains a new "short" trait, the oldest "short" trait is removed
                { id: 'long', name: 'Long-term' },//you can only have so many traits with this category; if the player gains a new "long" trait, the oldest "long" trait is removed
                { id: 'gods', name: '<font color="#FFD700">God\'s traits</font>' },
                { id: 'ancestors', name: '<font color="fuschia">Ancestors traits</font>' },
                { id: 'devils', name: '<font color="#f70054">Devil\'s traits</font>' },
                ///TECH
                { id: 'tier1', name: 'Tier 1 technologies' },
                { id: 'tier2', name: 'Tier 2 technologies' },
                { id: 'upgrade', name: 'Upgrades' },
            );
            G.unitCategories.push(
                { id: 'debug', name: '<font color="#27b631">Debug</font>' },
                { id: 'housing', name: 'Housing' },
                { id: 'civil', name: 'Civil' },
                { id: 'crafting', name: 'Crafting' },
                { id: 'production', name: 'Gathering' },
                { id: 'political', name: 'Political' },
                { id: 'discovery', name: 'Discovery' },
                { id: 'cultural', name: 'Cultural' },
                { id: 'spiritual', name: 'Spiritual' },
                { id: 'exploration', name: 'Exploration' },
                { id: 'storage', name: 'Storage' },
                { id: 'wonder', name: '<font color="#ab20a2">Wonders</font>' },
                { id: 'dimensions', name: 'Portals' },
                { id: 'seasonal', name: '<font color="#7fffd4">Seasonal</font>' },
                { id: 'plainisleunit', name: islandName() },
                { id: 'paradiseunit', name: 'Paradise' },
                { id: 'ancestorsunit', name: 'Ancestors\' world' },
                { id: 'alchemy', name: 'Alchemy' },
                { id: 'trial', name: 'Trial' },
                { id: 'underworld', name: 'Underworld' },
                { id: 'guard', name: '<font color="#ff66cc">Army & Guards</font>' },
            );


            G.props['fastTicksOnResearch'] = 250;

            // (added by Garchmop)
            // famines can now happen during either droughts *or* frosts
            G.disasters = [
                {
                    name: 'droughtNew',
                    desc: '@<b>Your people are in a <u style="color:#c48b10">drought</u>, which means that they will get 85% less [water] from [gatherer]s and 70% less from all [well] types.</b> @In addition, [muddy water] gathering is decreased by 50%, non-magical farms become 40% slower, and [water] now decays faster (although the decay rate is based on how long the drought has lasted). @[cloudy water] will also decay faster, although slower than [water]. @However, during a <b><u style="color:#c48b10">drought</u></b>, you may research unique technologies!',
                    icon: [9, 10, 1, 0, "magix2"],
                    startYear: 50,
                    minDurFunc: function(){return Math.floor(Math.sqrt(Math.random() * 4.2 + 2) + 5) + 2;},
                    maxDur: 7,
                    rate: 1,
                },
                {
                    name: 'frost',
                    desc: '@<b>Your people are in a <u style="color:#c48b10">frost</u>, which means that [fire pit]s are 60% less effective and decay three times faster. @In addition, your tribe will get 50% less [water] from [gatherer]s and all [well] types, and [hunter]s, [fisher]s and [gatherer]s will collect 50% less [food].</b> @However, during a <b><u style="color:#c48b10">frost</u></b>, you gain much more [ice] and [food] decays 70% slower. @You may also research unique technologies!',
                    icon: [15, 14, "magixmod"],
                    startYear: 75,
                    // made these numbers up (balance please)
                    minDurFunc: function(){return Math.floor(Math.sqrt(Math.random() * 6.5 + 2.2) + 4.7) + 3},
                    maxDur: 9,
                    rate: 0.3,
                },
            ];

            let t1start = false
            let madeThievesWarn = false
            let backupmesg = false
            let droughtmesg = false
            let droughtwarnmesg = false
            let milleniummesg = false
            let millenium2mesg = false
            let Fifthmilleniummesg = false
            let st2 = false
            let st3 = false
            let st4 = false
            let st5 = false
            let st6 = false
            let st7 = false
            let st8 = false
            let st9 = false
            let st10 = false
            let st11 = false
            let st12 = false
            let st13 = false
            let st14 = false
            let st15 = false
            let st16 = false
            let st17 = false
            let st18 = false
            let canoestory = false
            let sedestory = false
            let boatstory = false
            let ritstory = false
            let burystory = false
            let sewstory = false
            let weastory = false
            let skinnsto = false
            let gem = false
            let writer = false
            let trait20 = false
            let pol15 = false
            let guru = false
            let explorepop = false
            let rofpopup = false
            let bapopup = false
            let cure = false
            let UnderworldMESG = false

            //////////////////////////////////////

            G.funcs['new game'] = function () {
                mausoleumEvolve();
                rootPolicyEvolve();
                rootCultureEvolve();
                rootKnowEvolve();
                G.seasonalContent();
                G.releaseNumber = 55;
                G.buildTabs();
                vpcalc();
                theme();
                G.ta = 1;
                if (G.achievByName['fortress eternal'].won > 0) G.gain("insight", 1);
                if (G.modsByName['Thot Mod']) G.getDict('philosophy').desc = 'Provides 25 [wisdom] for free. //Also increases the [symbolism] bonus for [dreamer]s from 40% to 50%. //Some people start wondering why things aren\'t different than they are. Also unlocks [thot] and applies the [symbolism] bonus for him equal to the new [dreamer] bonus.';
                if (G.achievByName['sacrificed for culture'].won == 1 && G.achievByName['the fortress'].won <= 3)
                    G.fastTicks = (G.fastTicks - G.fastTicks2 < 0 ? 0 : G.fastTicks - G.fastTicks2); //to prevent summing up bonuses for elf race
                document.title = 'NeverEnding Legacy';
                ///new game mesg
                var str = 'Your name is ' + G.getName('ruler') + '' + ((G.getName('ruler').toLowerCase() == 'orteil' || G.getName('ruler').toLowerCase() == 'pelletsstarpl' || G.getName('ruler').toLowerCase() == 'opti') ? ' <i>(but that\'s not you, is it?)</i>' : '') + ', ruler of ' + G.getName('civ') + '. Your tribe is primitive, but full of hope.<br>The first year of your legacy has begun. May it stand the test of time!';
                G.Message({ type: 'important tall', text: str, icon: [0, 3] });
                if (G.achievByName['first glory'].won > 1)
                    if (G.achievByName['mausoleum'].won > 0)
                        G.Message({ type: 'good', text: 'Building the Mausoleum in the past has granted you access to magic! :)', icon: [4, 12, 22, 8, "magixmod"] });
                    else G.Message({ type: 'important', text: 'Building the Mausoleum grants you access to magic in the future...', icon: [3, 12, 22, 8, "magixmod"] });

                /////////////////
                G.achievByName['starting type'].won = G.startingType;
                lc = G.achievByName['starting type'].won;

                G.achievByName['wondersDuringRun'].won = 0;
                G.achievByName['mostPeopleDuringRun'].won = 0;
                if (G.achievByName['mausoleum'].won >= 1 && !G.has('a gift from the mausoleum')) { G.gainTech(G.techByName['a gift from the mausoleum']); }
                if (G.achievByName['democration'].won >= 1 && !G.has("policies") && !G.has('authority of the ancestor')) { G.gainTech(G.techByName['authority of the ancestor']); G.gainTrait(G.traitByName['policies']); }
                if (G.achievByName['sacrificed for culture'].won >= 1 && !G.has('artistic gray cells')) { G.gainTech(G.techByName['artistic gray cells']); }
                if (G.achievByName['insight-ly'].won >= 1 && !G.has("genius feeling")) { G.gainTech(G.techByName['genius feeling']); }
                if (G.achievByName['herbalism'].won >= 1 && !G.has("blessed herbs")) { G.gainTech(G.techByName['blessed herbs']); }
                if (G.achievByName['in the underworld'].won > 0 && G.achievByName['deadly, revenantic'].won > 0 && !G.has('a feeling from the Underworld')) {
                    G.gainTech(G.techByName['a feeling from the Underworld']);
                };
                if (G.achievByName['in the underworld'].won >= 1 && G.achievByName['democration'].won >= 1 && G.achievByName['sacrificed for culture'].won >= 1 && G.achievByName['insight-ly'].won >= 1 && !G.has('underworld\'s ascendant')) {
                    G.gainTech(G.techByName['underworld\'s ascendant']);
                };
                if (G.achievByName['experienced'].won > 0 && !G.has('<font color="lime">Fruit supplies</font>')) { G.gainTech(G.techByName['<font color="lime">Fruit supplies</font>']); }
                if (G.achievByName['mausoleum'].won > 5 && !G.has('life has its theme')) {
                    G.gainTech(G.techByName['life has its theme']);
                };
                if (G.achievByName['smart'].won > 0 && !G.has('smaller but efficient')) {
                    G.gainTech(G.techByName['smaller but efficient']);
                };
                if (G.achievByName['magical'].won > 0 && !G.has('magical presence')) {
                    G.gainTech(G.techByName['magical presence']);
                };
                if (G.achievByName['next to the God'].won > 0 && !G.has('life in faith')) {
                    G.gainTech(G.techByName['life in faith'])
                };

                if (G.achievByName['talented?'].won > 0 && !G.has('smaller shacks')) {
                    G.gainTech(G.techByName['smaller shacks']);
                };
                if (G.achievByName['pocket'].won > 0 && !G.has('well stored') && G.achievByName['pocket'].won < 2) {
                    G.gainTech(G.techByName['well stored']);
                };
                if (G.achievByName['pocket'].won > 1 && !G.has('well stored 2')) {
                    G.gainTech(G.techByName['well stored 2']);
                };
                G.getRes('victory point').amount = 0;
                if (G.achievByName['talented?'].won > 0) G.getDict('research box').choicesN++;
                if (G.getName('ruler').toLowerCase() == 'orteil' || G.getName('ruler').toLowerCase() == 'pelletsstarpl' || G.getName('ruler').toLowerCase() == 'opti') {
                    if (G.achievByName['god complex'].won == 0) {
                        G.achievByName['god complex'].won = 1; G.middleText('- Completed <font color="#bbffbb">God complex</font> shadow achievement -<br><hr width="300"><small>Congrats!</small>', 'slow')
                    };
                };

                if (G.achievByName['next to the God'].won > 0) {
                    G.getDict('culture of the afterlife').chance /= 3;
                    G.getDict('culture of the beforelife').chance /= 3;
                    G.getDict('the god\'s call').chance = 59;
                    G.getDict('dark side').chance = 337;
                }
                /////VP CALC FOR STARTING A NEW RUN
                vpcalc();
                G.achievByName['pickedCiv'].won = 1; //bc you are playing with human race.
                G.getDict('villa of victory').effects.push({ type: 'provide', what: { 'housing': (100 + (G.getRes('victory point').amount * 8)) } });
                G.getDict('villa of victory').desc = '@The more [victory point]s you get, the more housing this will provide. The amount of [housing] provided starts from 100. However, you get 8 more bonus [housing] for every [victory point] obtained! Villas cannot waste; however, these are very limited. At the moment, each one provides ' + (100 + (G.getRes('victory point').amount * 8)) + ' [housing] for your people.';
                /*---------------------
                . . . assignments
                ----------------------------*/
                if (G.getRes('victory point').amount >= 1 && G.getRes('victory point').amount < 6 && !G.has('bonus1')) {
                    G.gainTech(G.techByName['bonus1'])
                } else if (G.getRes('victory point').amount >= 6 && G.getRes('victory point').amount < 10 && !G.has('bonus2')) {
                    G.gainTech(G.techByName['bonus2'])
                } else if (G.getRes('victory point').amount >= 10 && G.getRes('victory point').amount < 20 && !G.has('bonus3')) {
                    G.gainTech(G.techByName['bonus3'])
                } else if (G.getRes('victory point').amount >= 20 && G.getRes('victory point').amount < 35 && !G.has('bonus4')) {
                    G.gainTech(G.techByName['bonus4'])
                } else if (G.getRes('victory point').amount >= 35 && G.getRes('victory point').amount < 55 && !G.has('bonus5')) {
                    G.gainTech(G.techByName['bonus5'])
                } else if (G.getRes('victory point').amount >= 55 && !G.has('bonus6')) {
                    G.gainTech(G.techByName['bonus6'])
                }
                //NO EXTRA ORES WITH MAGIX
                if (G.modsByName['Extra ores(for data.js)']) {
                    G.middleText('The content from the extra ores mod is already available in Magix. Just unlock it sometime!', 'slow')
                }
                if (!(day + leap >= 349 && day + leap <= 362)) {
                    G.achievByName['xmas buff'].won--;
                }

                if (!(day + leap >= 289 && day + leap <= 305)) {
                    G.getDict('spirit summoner').effects.push({ type: 'mult', value: 0 });
                    G.achievByName['halloween buff'].won--
                };
                if (!(day + leap >= 40 && day + leap <= 46)) {
                    G.achievByName['valentine buff'].won--;
                };
                if (G.achievByName['xmas buff'].won >= 1) {
                    var buff = Math.round(Math.random() * 3) + 1;
                    G.gainTech(G.techByName['xmas' + buff + '']);
                };
                if (G.achievByName['valentine buff'].won >= 1) {
                    var buff = Math.round(Math.random() * 3) + 1;
                    G.gainTech(G.techByName['valentine' + buff + '']);
                };
                if (G.achievByName['halloween buff'].won >= 1) {
                    var buff = Math.round(Math.random() * 3) + 1;
                    G.gainTech(G.techByName['hallow' + buff + '']);
                };

                if (G.achievByName['???'].won > 0) {
                    G.tragedyHappened = true;
                    G.achievByName['???'].displayName = 'The tragedy and a whole new beginning';
                    G.achievByName['???'].desc = 'A green meteor has hit the Earth, killing most people around you and wiping almost all housing you had, leaving few survivors alive.';
                    G.achievByName['???'].icon = [31, 32, "magixmod"];
                }
                //G.achievByName['first glory'].won=G.resets;
                G.getDict('out of relics').chance = 2000 * (1 + (G.achievByName['first glory'].won / 15)); //the more you ascend the less chance

                var s = 0
                for (var u = 0; u < G.unitsOwned.length; u++) {
                    let defaultUnit = G.unitsOwned[u]
                    let amount = defaultUnit.unit.startWith
                    s += defaultUnit.unit.startWith
                    defaultUnit.amount = amount
                }
                G.getDict('worker').used = s
                G.Save();
            }
            G.funcs['game over'] = function () {
                if ((yer.getMonth() == 3 && yer.getDate() == 1) || (G.getSetting('fools') && G.resets >= 3)) {
                    document.title = 'Tribe OOFed: NeverEnding Legacy';
                } else {
                    document.title = 'Tribe died: NeverEnding Legacy';
                };
                var quote = Math.round(Math.random() * 5);
                const quotes = ['\u201cTo the well-organized mind, death is but the next great adventure.\u201d', '\u201cThe fear of death follows from the fear of life. A man who lives fully is prepared to die at any time.\u201d', '\u201cIt is said that your life flashes before your eyes just before you die.\u201d', '\u201cDon\'t feel bad, I\'m usually about to die.\u201d', '\u201cDeath is so terribly final, while life is full of possibilities.\u201d', "It is as natural to die as it is to be born."];
                if (G.techN < 15) {
                    G.Message({ type: 'bad', text: 'Your small tribe <font color="white"><b>' + G.getName('civ') + '</b></font> has died terribly. It is a sad fate indeed.', icon: [5, 4] });
                } else if (G.techN >= 15 && G.techN < 30) {
                    G.Message({ type: 'bad', text: 'Your small tribe <font color="white"><b>' + G.getName('civ') + '</b></font> has died sadly. It is unfortunate that no one will remember your <font color="white"><b>' + G.getName('civ') + '</b></font>.', icon: [5, 4] });
                } else if (G.techN >= 30 && G.techN < 50) {
                    G.Message({ type: 'bad', text: '<font color="white"><b>' + G.getName('civ') + '</b></font> is no more, and your legacy is unfortunately a long-lost memory in most history books.<br>Everyone is dead.', icon: [5, 4] });
                } else if (G.techN >= 50 && G.techN < 82) {
                    G.Message({ type: 'bad', text: '<font color="white"><b>' + G.getName('civ') + '</b></font> civilization is no more, and your legacy is mostly long-lost, but mentioned in some history books.<br>Unfortunately, everyone is dead.', icon: [5, 4] });
                } else if (G.techN >= 82 && G.techN < 116) {
                    G.Message({ type: 'bad', text: '<font color="white"><b>' + G.getName('civ') + '</b></font> civilization is no more, and your legacy is <b>not-so-long-lost memory</b>, and most likely an interesting sidenote in a history book of elves or...humans...who knows?<br><font color="#84c292">Everyone is dead but many relics of your tribe are left.</font>', icon: [5, 4] });
                } else if (G.techN >= 116 && G.techN < 148) {
                    G.Message({ type: 'bad', text: '<font color="white"><b>' + G.getName('civ') + '</b></font> civilization is no more, and your legacy is <b>not lost memory</b>, and surely an interesting sidenote in a history book.<br><font color="#84c292">Everyone is dead but many relics and constructions of your tribe remain, waiting to be discovered by other civilizations.</font>', icon: [5, 4] });
                } else if (G.techN >= 148 && G.techN < 190) {
                    G.Message({ type: 'bad', text: '<font color="white"><b>' + G.getName('civ') + '</b></font> is no longer as a civilization and everyone has died, but your legacy is <b>not a lost memory</b>, and an interesting part of a history book.<br><font color="#84c292">Everyone is dead but despite that, there are many relics, constructions, and manuscripts of your tribe are waiting to be discovered and analyzed by other civilizations.</font>', icon: [5, 4] });
                } else if (G.techN >= 190) {
                    G.Message({ type: 'bad', text: '<font color="white"><b>' + G.getName('civ') + '</b></font> exists no longer as a civilization and everyone died, but your legacy <b>isn\'t a lost memory</b>. It is surely an interesting, long note in many history books that will praise this place.<br><font color="#84c292">Everyone is dead, but despite that, there are many, many relics, buildings, and manuscripts from your tribe left waiting to be discovered and analyzed by other civilizations.</font>', icon: [5, 4] });
                }
                G.playSound(magixURL + '0population.mp3');
                G.dialogue.popup(function (div) {
                    var specialNotes = []
                    if (G.has('factories II')) {
                        specialNotes.push('researched Factories II')
                    }
                    if (G.has('eotm')) {
                        specialNotes.push('obtained Evolution of the minds')
                    }
                    if (G.has('Wizard complex')) {
                        specialNotes.push('unlocked Wizard Complexes')
                    }
                    if (G.has('trial')) {
                        specialNotes.push('was in a Trial')
                    }
                    return '<div style="width:540px;min-height:540px;height:75%;">' +
                        '<div class="fancyText title"><font color="#fe0031">Everyone in your tribe<br>has died terribly</font></div>' +
                        '<div class="fancyText"><font size="4">Here are the statistics of your tribe:</font><br>' +
                        '<font size="3" color="white"><br><li>Technologies obtained: ' + G.techN + '</li><Br>' +
                        '<li>Traits adopted: ' + (G.traitN - G.knowN) + '</li><Br>' +
                        '<li>Most people in your civilization<br>during the run: ' + B(G.achievByName['mostPeopleDuringRun'].won) + '</li><Br>' +
                        '<li>Days survived: ' + B(G.day + (300 * G.year)) + '</li><Br>' +
                        (G.has('time measuring 1/2') ? '<li>Years survived: ' + B(G.year + 1) + '</li><Br>' : '') +
                        '<li>Pieces of overworld land discovered: ' + B(G.getRes('land').amount) + '</li><Br>' +
                        '<li>Land from all worlds: ' + B(G.getRes('tl').amount) + '</li><br>' +
                        '<li>Wonders completed during legacy: ' + G.achievByName['wondersDuringRun'].won + '</li><Br>' +
                        '<li>Units unlocked: ' + G.unitN + '</li><Br>' +
                        '<li><font color="#a5cff3">Special notes: ' + (specialNotes.length === 0 ? 'none' : specialNotes.join(', ')) + '</font></li><Br>' +
                        '<li>Early-game completed: ' + (G.has('monument-building') ? 'yes' : 'no') + '</li><Br>' +
                        '<li>Season:<b> ' + (((day >= 1 && day <= 2) || (day == 365 || day == 366)) ? "New year\'s eve" : ((day >= 40 && day <= 46) ? 'Valentine\'s day' : (((Date.getMonth == 3 && Date.getDate == 1) || (G.getSetting('fools') && G.resets >= 3)) ? "Another anniversary since the first rickroll...<Br><small>bruh</small>" : ((day + leap >= 289 && day + leap <= 305) ? 'Halloween' : ((day + leap >= 349 && day + leap <= 362) ? 'Christmas' : 'none active'))))) + '</b></li><Br>' +
                        '<br><br></font>' +
                        '</div><br>' +
                        '<div class="fancyText title"><font size="3">' + quotes[quote] + '</font></div>' +
                        'Technical note: Start a new run by opening the settings.' +
                        '</div></div>'
                })
            }
            G.funcs['game loaded'] = function () {
                if (G.on) {
                    mausoleumEvolve();
                    rootPolicyEvolve();
                    rootCultureEvolve();
                    rootKnowEvolve();
                    G.seasonalContent();
                    theme();
                    G.isMapExplored = G.isMapFullyExplored();
                    //faith II removal from costs if over 25 VPs are obtained
                    if (G.getRes("victory point").amount > 25)
                        for (var i = 1; i <= 12; i++) {
                            if (G.policyByName['se' + (i < 10 ? "0" + i : i)].cost['faith II'] != undefined)
                                delete G.policyByName['se' + (i < 10 ? "0" + i : i)].cost['faith II'];
                        }
                    G.getDict('out of relics').chance = 2000 * (1 + (G.achievByName['first glory'].won / 15)); //the more you ascend the less chance
                    if (G.achievByName['mausoleum'].won > 4) G.techByName['missionary'].effects.push({ type: 'provide res', what: { 'spirituality': 1 } });

                    //bugfixes for eating policies
                    if (G.checkPolicy("insects as food") == "on") {
                        G.makePartOf('bugs', 'food');
                    }
                    if (G.checkPolicy("eat raw meat and fish") == "off") {
                        G.makePartOf('meat', '');
                        G.makePartOf('seafood', '');
                    }
                    if (G.checkPolicy("eat honey and honeycombs") == "off") {
                        G.makePartOf('honey', '');
                        G.makePartOf('honeycomb', '');
                    }
                    if (G.modsByName['Laws Of Food'] || G.modsByName['Laws Of Food Free Version']) {
                        //oh boy, here we go
                        if (G.checkPolicy("eat herbs") == "off") {
                            G.makePartOf('herbs', '');
                        }
                        if (G.checkPolicy("eat raw meat") == "off") {
                            G.makePartOf('meat', '');
                        }
                        if (G.checkPolicy("eat cooked meat") == "off") {
                            G.makePartOf('cooked meat', '');
                        }
                        if (G.checkPolicy("eat cured meat") == "off") {
                            G.makePartOf('cured meat', '');
                        }
                        if (G.checkPolicy("eat raw seafood") == "off") {
                            G.makePartOf('seafood', '');
                        }
                        if (G.checkPolicy("eat cooked seafood") == "off") {
                            G.makePartOf('cooked seafood', '');
                        }
                        if (G.checkPolicy("eat cured seafood") == "off") {
                            G.makePartOf('cured seafood', '');
                        }
                        if (G.checkPolicy("eat cooked meat and cooked seafood") == "off") {
                            G.makePartOf('cooked meat', '');
                            G.makePartOf('cooked seafood', '');
                        }
                        if (G.checkPolicy("eat cured meat and cured seafood") == "off") {
                            G.makePartOf('cured meat', '');
                            G.makePartOf('cured seafood', '');
                        }
                        if (G.checkPolicy("eat fruit") == "off") {
                            G.makePartOf('fruit', '');
                        }
                        if (G.checkPolicy("eat bread") == "off") {
                            G.makePartOf('bread', '');
                        }
                        if (G.checkPolicy("eat meals") == "off") {
                            G.makePartOf('meals', '');
                        }
                        if (G.checkPolicy("eat vegetables") == "off") {
                            G.makePartOf('vegetables', '');
                        }
                        if (G.checkPolicy("drink juices") == "off") {
                            G.makePartOf('juices', '');
                        }
                    }
                    G.ta = 1;
                    G.Message({ type: 'important tall', text: 'Welcome back, ' + G.getName('ruler') + ', ruler of ' + G.getName('civ') + '.<br>Join Orteil\'s official discord server via <a href="https://discord.gg/cookie" target="_blank">this link</a> to join the community!', icon: [0, 3] });
                    //Had to paste it there because if you obtain and you will unlock 5th choice after page refresh you can still pick 1 of 4 instead of 1 of 5
                    if (G.modsByName['Thot Mod']) G.getDict('philosophy').desc = 'Provides 25 [wisdom] for free. //Also increases the [symbolism] bonus for [dreamer]s from 40% to 50%. //Some people start wondering why things aren\'t different than they are. Also unlocks [thot] and applies the [symbolism] bonus for him equal to the new [dreamer] bonus.';

                    if (G.achievByName['talented?'].won > 0) G.getDict('research box').choicesN++;
                    if (G.getName('ruler').toLowerCase() == 'orteil' || G.getName('ruler').toLowerCase() == 'pelletsstarpl' || G.getName('ruler').toLowerCase() == 'opti') {
                        if (G.achievByName['god complex'].won == 0) {
                            G.achievByName['god complex'].won = 1; G.middleText('- Completed <font color="#bbffbb">God complex</font> shadow achievement -<br><hr width="300"><small>Congrats!</small>', 'slow')
                        };
                    };

                    if (G.achievByName['mausoleum'].won > 3) {
                        G.getDict('ungrateful tribe').chance *= 2;
                    }
                    if (G.achievByName['mausoleum'].won > 4) {
                        G.getDict('care for nature').chance /= 6;
                    }
                    if (G.achievByName['mausoleum eternal'].won) {
                        if (G.achievByName['mausoleum'].won > 7) {
                            G.getDict('belief in the afterlife').chance /= 2;
                            G.getDict('belief in the beforelife').chance /= 2;
                        }
                        if (G.achievByName['next to the God'].won > 0) {
                            G.getDict('culture of the afterlife').chance /= 3;
                            G.getDict('culture of the beforelife').chance /= 3;
                            G.getDict('the god\'s call').chance /= 3;
                            G.getDict('dark side').chance *= 2 / 3;
                        }
                    }
                    vpcalc();
                    G.greeting();
                    G.getDict('villa of victory').effects.push({ type: 'provide', what: { 'housing': (100 + (G.getRes('victory point').amount * 7)) } });
                    G.getDict('villa of victory').desc = '@The more [victory point]s you get, the more housing this will provide. The amount of [housing] provided starts from 100. However, you get 8 more bonus [housing] for every [victory point] obtained! Villas cannot waste; however, these are very limited. At the moment, each one provides ' + (100 + (G.getRes('victory point').amount * 8)) + ' [housing] for your people.';
                    ////

                    if (G.achievByName['???'].won > 0) {
                        G.tragedyHappened = true;
                        G.achievByName['???'].displayName = 'The tragedy and a whole new beginning';
                        G.achievByName['???'].desc = 'A green meteor has hit the Earth, killing most people around you and wiping most housing you had, leaving few survivors alive.';
                        G.achievByName['???'].icon = [31, 32, "magixmod"];
                    }
                    if (G.releaseNumber == undefined) G.Load();
                }
            };
            G.funcs['new year'] = function () {
                if (G.on) {
                    if (!G.has('trial')) {
                        //Drought/famine/frost calculations (frosts added by Garchmop)
                        if (!droughtwarnmesg && G.year >= 39 && G.year < 60) {
                            G.Message({ type: 'important tall', text: 'Be warned: <b>droughts and frosts may start occuring after year 50!</b> Droughts will increase water decay significantly and cause you to lose a significant amount of water production. Famines may occur after several years of drought and are much more severe! However, they may be a key to new discoveries...', icon: [9, 10] })
                            droughtwarnmesg = true
                        }

                        // drought messages also apply to frosts because i'm lazy
                        var year = 0;
                        G.disasters.forEach((d) => {
                            year = getObj(d.name)
                            if (year > 0) {
                                if ((year - d.minDurFunc()) > G.year || year + d.maxDur < G.year) {
                                    if (G.getSetting('drought messages')) {
                                        G.Message({ type: 'good', text: '<b>The '+d.name+' has finally been lifted!</b>', icon: d.icon })
                                    }
                                    if (G.has(d.name)) G.deleteTrait(d.name)
                                    if (G.has('famine')) G.deleteTrait('famine')
                                    setObj(d.name, 0)
                                }
                                } else if (G.year > 220 - G.techN * 0.35 && G.has("primary time measure") && G.year - 2 >= G.getRes(d.name+' year').amount) {
                                    if (G.getSetting('drought messages')) {
                                        if (G.year < 80) G.Message({ type: 'bad2', text: 'A <b>'+d.name+'</b> may happen at some point in the future. You can check when the next predicted year that one will happen in your people\'s demographics.', icon: [9, 10] })
                                    }
                                    G.getRes(d.name+' year').amount = G.year + Math.floor((Math.random() * 6 + 4) / d.rate);
                                } else if (year === 0) {
                                    if (G.year < 200) {
                                        G.Message({ type: 'good', text: 'After a <b>'+d.name+'/b> has happened, it can take anywhere from '+(d.name=='frost'?'23 to 50':'7 to 15')+' years for the next one to strike.', icon: [9, 10] })
                                    }
                                    droughtmesg = false
                                    setObj(d.name, -1)
                                } else if (G.year === G.getRes(d.name+' year').amount - 2) {
                                    if (G.getSetting('drought messages')) {
                                        G.Message({ type: 'bad2', text: 'A '+d.name+' could happen soon: you may want to prepare.', icon: d.icon })
                                    }
                                } else if (G.year > d.startYear-1 && Math.random() < 0.8 && G.year === G.getRes(d.name+' year').amount + (Math.round(Math.random() * 2.7 - 1.04))) {
                                    G.gainTrait(G.traitByName[d.name])
                                    setObj(d.name, G.year)
                                    G.getRes(d.name+' year').amount = G.year + Math.round((Math.random() * 8 + 6) / d.rate);
                                }
                        })
                    } else if (G.has('t6') && G.year == 5) {
                        G.Message({ type: 'bad', text: 'Your people have noticed that the land has been slowly <b>turning into ocean</b>! However, remember that the further you progress, the more researches you can obtain to balance this out. Once you start getting <b>deep ocean</b>, you should consider leaving this trial as soon as you can!', icon: [9, 0, "magix2"] })
                    } else if (G.has('t6') && G.year == 6) {
                        G.Message({ type: 'bad', text: 'In this trial, land will decay into ocean tiles faster and faster, so be warned! Be sure to check your land amount every so often: this is your final warning.', icon: [9, 0, "magix2"] })
                    } else if (!G.has('t5') && G.year === 39) {
                        G.Message({ type: 'good', text: 'Within trials, droughts, frosts and famines will <b>not</b> occur!', icon: choose([9, 10],[15,14,'magixmod']) })
                    } else if (G.has('t5') && G.year >= 5) {
                        if (!G.has('droughtNew')) {
                            setObj('droughtNew', 5)
                            G.gainTrait(G.traitByName['droughtNew'])
                        }
                    }

                    if (G.has('belief in the afterlife') && G.traitByName['belief in the afterlife'].yearOfObtainment > 100 && !G.has('culture of the afterlife') && G.testCost('culture of the afterlife', 1)) G.gainTrait(G.traitByName['culture of the afterlife']);
                    if (G.has('belief in the beforelife') && G.traitByName['belief in the beforelife'].yearOfObtainment > 100 && !G.has('culture of the beforelife') && G.testCost('culture of the beforelife', 1)) G.gainTrait(G.traitByName['culture of the beforelife']);

                    if (G.has("t5") && G.year > 0) {
                        var population = G.getRes("population").amount
                        G.fruitReq = parseInt((G.achievByName['unfishy'].won == 0 ? 1 : (0.8 + G.achievByName['unfishy'].won * 0.4)) * Math.pow((G.year - 1) * 0.6, 1.06) * population * 3 + 1);
                        if (G.getRes("fruit").amount >= G.fruitReq) {
                            G.Message({ type: 'good', text: "Your current stockpile of fruit is enough to please your people, making your " + G.getName("inhabs") + " much happier. Keep this up and do not forget that your people will long for more and more fruit as time goes on!", icon: [4, 7] });
                            changeHappiness(8 * population, "fruit happiness");
                            G.lose("fruit", G.fruitReq, "population pleasing");
                        } else {
                            G.Message({ type: 'bad', text: "Your current stockpile of fruit is not enough to your " + G.getName("inhabs") + ", making them much less happy. Do not forget that your civilization will be extremely unhappy if this continues!", icon: [4, 7] });
                            G.gain("trial point", 1)
                            changeHappiness(-1.8 * G.getRes("trial point").amount * (Math.random() + 1.4) * population, "fruit unhappiness");
                            G.lose("fruit", G.fruitReq, "failed population pleasing");
                        }
                        var fishReq = Math.pow(G.fruitReq, 0.95) - 1
                        if (G.getRes("seafood").amount >= fishReq) {
                            var waterAmount = Math.min(25 * population + 10, 12 * population + 400)
                            G.Message({ type: 'good', text: "Your current stockpile of fish is enough to please Fishyar, making your " + G.getName("inhabs") + " a little happier and healthier, as well as providing everyone with " + B(waterAmount) + " water to fend off the " + (G.has('droughtNew') ? "eternally lasting drought" : "drought that will arrive soon") + ". Keep this up and do not forget that Fishyar will demand more and more fish!", icon: [5, 6] });
                            changeHappiness(3 * population, "Fishyar happiness");
                            G.gain("water", waterAmount, "Fishyar giving supplies");
                            G.gain("health", 2.3 * population, "Fishyar giving supplies");
                            G.lose("seafood", G.fruitReq, "pleasing Fishyar");
                        } else {
                            G.Message({ type: 'bad', text: "Your current stockpile of fish is not enough to please Fishyar, which prevents your " + G.getName("inhabs") + " from getting water. Do not forget that your civilization will be unable to have sufficient water if this continues, as you could have gotten " + B(35 * population + 10) + " water for this year!", icon: [5, 6] });
                            G.gain("trial point", 1)
                            changeHappiness(-1.8 * G.getRes("trial point").amount * (Math.random() + 1.4) * population, "fruit unhappiness");
                            G.lose("seafood", G.fruitReq, "failed pleasing of Fishyar");
                        }
                        G.fruitReq = parseInt((G.achievByName['unfishy'].won == 0 ? 1 : (0.8 + G.achievByName['unfishy'].won * 0.4)) * Math.pow(G.year * 0.6, 1.06) * G.getRes('population').amount * 3 + 1);
                        G.update['unit']();
                    }

                    G.isMapExplored = G.isMapFullyExplored();
                    if (G.has("t7") && G.year > 0) {
                        G.herbReq = parseInt((G.achievByName['herbalism'].won == 0 ? 1 : 0.2 + G.achievByName['herbalism'].won) * ((G.year - 1) / 1.5) * (G.getRes('population').amount / 4));
                        var h = G.getRes("herbs").amount;
                        G.lose("herbs", h);
                        G.gain("herb essence", h * 0.08);
                        var population = G.getRes("population").amount;
                        if (G.getRes('herb essence').amount >= G.herbReq) {
                            G.Message({ type: 'good', text: "Your Herb essence amounts are enough to please your civilization, currently making your " + G.getName("inhabs") + " happy. Keep up the good work and do not forget that your civilization will demand more and more of that essence!", icon: [36, 19, "magixmod"] });
                            changeHappiness(2.5 * population, "herb essence happiness");
                            G.gain("health", 2.3 * population, "herb essence happiness");
                            G.lose("herb essence", G.herbReq, "population pleasing");
                        } else {
                            G.Message({ type: 'bad', text: "Your Herb essence amounts are not enough to please your civilization, which makes your " + G.getName("inhabs") + " unhappy. Do not forget that your civilization will demand more and more of that essence and that you will need it for your final wonder!", icon: [36, 19, "magixmod"] });
                            G.lose("happiness", 4 * population, "herb essence unhappiness");
                            G.lose("health", 2.3 * population, "herb essence unhappiness");
                            G.lose("herb essence", G.herbReq, "failed population pleasing");
                        }
                        G.herbReq = parseInt((G.achievByName['herbalism'].won == 0 ? 1 : 0.2 + G.achievByName['herbalism'].won) * (G.year / 1.5) * (G.getRes('population').amount / 4));
                        G.update['unit']();
                    }
                    G.lose('tragedy', 1);//thats a need
                    if (G.achievByName['???'].won == 0 && G.has('constellations'))
                        switch (G.getRes('tragedy').amount) {
                            case 8: G.Message({ type: 'story1', text: 'Rumors and whispers abound... Something terrible is going to happen. Who knows if that\'s true...or not.<br>Some people say that they\'ll wait and see.', icon: [32, 32, "magixmod"] }); break;
                            case 6: G.Message({ type: 'story2', text: 'Wizards believe in the tragedy. After now, happiness will go lower and lower. Soon, that won\'t seem like it\'s just a rumor. But is there any confirmation or proof about the incoming tragedy?', icon: [33, 32, "magixmod"] }); break;
                            case 4: G.Message({ type: 'story1', text: 'A green light shining through the sky is one of the proofs that people have noticed. Unhappiness will now start to grow. It is not a simple rumor anymore. But is there any clear confirmation about the incoming tragedy?', icon: [34, 32, "magixmod"] }); break;
                            case 3: G.Message({ type: 'story2', text: 'The tragedy seems like it will happen no matter what. The end of humanity is nigh...or is it the beginning of something new? That is no longer a rumor. Even at night, everyone in the tribe can see a glowing <font color="lime">green star</font> that is getting bigger and bigger.', icon: [34, 32, "magixmod"] }); break;
                            case 2: G.Message({ type: 'story2', text: 'Turns out that glowing object was a giant meteor. It\'s...the end...right??? The predicted time when the <font color="lime">green meteor</font> will hit Earth in the beginning of next year. <b>The end is nigh.</b>', icon: [35, 32, "magixmod"] }); break;
                            case 0:
                                var survivors = 240 + Math.round(Math.random() * 400);
                                var over = survivors - G.getRes('housing').amount;
                                if (G.getRes('housing').amount > survivors) G.getRes('population').amount = survivors;
                                else if (G.getRes('housing').amount < survivors) G.getRes('population').amount = survivors - over;
                                G.achievByName['???'].won++;
                                G.settingsByName['paused'].value = 1;
                                l('blackBackground').style.opacity = 1;
                                G.settingsByName['autosave'].value = 0;
                                var audio = new Audio(magixURL + 'meteor.mp3');
                                audio.play();
                                setTimeout(function () { G.middleText('<p id="loading">So...it happened.</p>', 'slow'); }, 1000);
                                setTimeout(function () { G.middleText('<p id="loading">It really did.</p>', 'slow'); }, 3000);
                                setTimeout(function () { G.middleText('<p id="loading">The tragedy. *cough cough*<br>It almost killed humanity...</p>', 'slow'); }, 7000);
                                setTimeout(function () { G.middleText('<p id="loading">...but there are some survivors. Life won\'t be the same from now.</p>', 'slow'); }, 10000);
                                setTimeout(function () { G.middleText('<p id="loading"><font color="#f70054" size="7">They are here...</font></p>', 'slow'); }, 15000);
                                setTimeout(function () { G.middleText('<p id="loading">and they need your help...</p>', 'slow'); }, 20000);
                                setTimeout(function () { G.middleText('<p id="loading">are you capable enough of giving these aliens a helpful hand?</p>', 'slow'); }, 20000);
                                setTimeout(function () { G.middleText('<p id="loading">are you capable enough of entering the new universe?</p>', 'slow'); }, 23000);
                                setTimeout(function () { G.middleText('<p id="loading">are you ready for the <i>new</i> adventure?</p>', 'slow'); }, 26000);
                                setTimeout(function () { G.middleText('<p id="loading">are you ready for the <i>NEW</i> adventure?</p>', 'slow'); }, 28000);
                                setTimeout(function () {
                                    G.dialogue.popup(function (div) {
                                        //var message = new Audio(magixURL + 'SpecialMessage.wav');
                                        //message.play()
                                        return '<div style="width:580px;min-height:600px;height:75%;">' +
                                            '<div class="fancyText title"><font color="pink">A whole new world</font></div>' +
                                            '<div class="fancyText"><font color="#4d4">The green meteor has fallen down from space!<br>It didn\'t take long to cause damage...<br>but you suddenly became the survivor.</font></div>' +
                                            '<div class="fancyText bitBiggerText scrollBox underTitle" style="text-align:left;padding:32px;">' +
                                            '<br><br><Br>' +
                                            '<center><table width="240" height="120"><tr background="' + magixURL + 'cassete.png"><td>' +
                                            '<br><br></td></tr></table></center>' +
                                            '<div class="bulleted">You unlocked Civilization 2!</div>' +
                                            '<div class="bulleted">The adventure with the new race will be harder than with your current human race. Think about collecting more <b>Victory points</b> first!<br>(You currently own ' + G.getRes('victory point').amount + ' Victory points.)</div>' +
                                            '<div class="bulleted">From now on, ascending or starting a new game will allow you to pick between Civilization 1 and 2.</div>' +
                                            '<div class="bulleted">You will need to finish some Civilization 2 legacies in order to unlock a few more human-related things.</div>' +
                                            '<div class="bulleted">Civilization 2 is settled in an entirely different environment!</div>' +
                                            '<div class="bulleted">Prepare for mystic, unnatural names.</div>' +
                                            '<div class="bulleted">Also...Civilization 1 will be able to boost Civilization 2 and vice-versa.</div><center>' + G.button({ tooltip: 'Ascend and start a whole new adventure!', text: 'Ascend', onclick: function () { G.settingsByName['autosave'].value = 1; G.NewGameWithSameMods(); G.resets++; message.pause(); G.achievByName['first glory'].won++ } }) + '' + G.button({ tooltip: 'Prepare mentally for the new adventure. Spend your last moments in that dead world.', text: 'Wait, I\'m not ready yet!', onclick: function () { G.dialogue.forceClose(); G.settingsByName['paused'].value = 0; G.settingsByName['autosave'].value = 1; l('blackBackground').style.opacity = 0; message.pause() } }) + '</center>' +
                                            '<div class="bulleted"><small><font color="lime">(Fortunately, you were far far away from where the meteor fell. After your remaining wizards helped you travel to this new place, you noticed some, well, rather off-putting things about it, to say the least.)</font></small></div>' +
                                            '</div>' +
                                            '</div><div class="buttonBox">' +
                                            '</div></div>' //aroundMeteor.png removed
                                    }, 'noClose');
                                }, 25000);
                                break;
                        }
                    G.updateMapDisplay() //FIX for map(because it is using my sheet not default one)
                    if (G.getRes('population').amount > 0) document.title = 'NeverEnding Legacy';
                    if (G.getSetting('tieredDisplay') == 0) { ta = 1 } else { ta = 0 };
                    var txt = '' + G.year + '';
                    if (day + leap >= 289 && day + leap <= 305) {
                        if (G.getRes('spookiness').amount >= 10 && G.achievByName['spooktober'].won == 0) { G.achievByName['spooktober'].won = 1; G.middleText('- Completed <font color="orange">Spooktober</font><br>seasonal achievement.', 'slow') };
                        if (G.getRes('spookiness').amount >= 15 && G.achievByName['spookyear'].won == 0) { G.achievByName['spookyear'].won = 1; G.middleText('- Completed <font color="orange">Spookyear</font><br>seasonal shadow achievement.', 'slow') };
                        G.doFunc('ToT');
                    };
                    if (G.getSetting('annual raports'))
                        if (G.has('time measuring 1/2')) {
                            var str = '';
                            var disastersActive = [];
                            G.disasters.forEach((d) => {
                                if (G.has(d.name)) disastersActive.push(d.name);
                            });
                            str += 'It is now year <b>' + (G.year + 1) + (disastersActive.length>0 ? '</b> (with a '+disastersActive.join(" and ")+' currently active).<br>' : '</b>.<br>');
                            str += 'Report for last year:<br>';
                            str += '&bull; <b>Births</b>: ' + B(G.getRes('born this year').amount) + '<br>';
                            str += '&bull; <b>Deaths</b>: ' + B(G.getRes('died this year').amount) + '<br>';
                            if (expTraits.length > 0) {
                                l = expTraits.length;
                                expTraits = expTraits.slice(0, 3).join(", ");
                                str += '&bull; <b>Temporary traits that expired this year</b>: ' + (l > 3 ? expTraits + " and " + (l - 3) + " more" : expTraits) + '<br>';
                            }
                            G.getRes('born this year').amount = 0;
                            G.getRes('died this year').amount = 0;
                            G.Message({ type: 'important', text: str, icon: [0, 3] });
                            expTraits = [];
                        } else if (G.has('primary time measure') && !G.has('time measuring 1/2')) {
                            if (G.year + 1 % 100 == 0) {
                                var str = '';
                                str += 'It is now Century <b>' + Math.floor(((G.year / 100) + 1)) + '</b>.<br>';
                                str += 'Report for this entire century:<br>';
                                str += '&bull; <b>Births</b>: ' + B(G.getRes('born this year').amount) + '<br>';
                                str += '&bull; <b>Deaths</b>: ' + B(G.getRes('died this year').amount) + '<br>';
                                if (expTraits.length > 0) {
                                    var l = expTraits.length;
                                    expTraits = expTraits.slice(0, 3);
                                    str += '&bull; <b>Temporary traits that expired this century</b>: ' + (l > 3 ? expTraits + " and " + (l - 3) + " more" : expTraits) + '<br>';
                                }
                                G.getRes('born this year').amount = 0;
                                G.getRes('died this year').amount = 0;
                                G.Message({ type: 'important', text: str, icon: [0, 3] });
                                expTraits = [];
                            }
                        }
                    var rese = txt.endsWith("5");

                    if (t1start == true) {
                        if (G.has('time measuring 1/2')) {
                            var insight = Math.floor(Math.random() * (33 / (G.achievByName['patience'].won + 1)));
                            G.Message({ type: 'important', text: 'During this year Chra\'nos has brought down to you:<br><b><font color="#ff6bdb">' + B(insight) + ' Insight</font></b><br>The hidden weakness in this plane affects you stronger and stronger each year. Think about finishing the trial as soon as possible.', icon: [10, 11, "magixmod"] });
                            if (G.getRes('insight').amount < G.getRes('wisdom').amount * 1.6) {
                                G.gain('insight', insight);
                            } else if (rese == true) {
                                var insight = Math.floor(Math.random() * (33 / (G.achievByName['patience'].won + 1)));
                                G.Message({ type: 'important', text: 'Recently Chra\'nos has brought down to you:<br><b><font color="#ff6bdb">' + B(insight) + ' Insight</font></b><br>The hidden weakness in this plane affects you stronger and stronger. Think about finishing the trial as soon as possible.', icon: [10, 11, "magixmod"] });
                                if (G.getRes('insight').amount < G.getRes('wisdom').amount * 1.6) {
                                    G.gain('insight', insight);
                                }
                                var weakness = Math.floor(Math.random() * 4)
                                G.gain('chranosweak', weakness);
                            }
                        }
                    }
                    //influence trickle
                    if (G.has('glory') && G.year % 5 == 0) {
                        if (G.getRes('influence II').amount <= G.getRes('authority II').amount - 2) G.gain('influence II', 1 + (G.has('at1') ? (Math.floor(G.unitByName['church'].amount / 3)) + (Math.floor(G.unitByName['cathedral'].amount / 3)) : 0));
                    } else {
                        if (G.getRes('influence').amount <= G.getRes('authority').amount - 1) G.gain('influence', 1 + (G.has('at1') ? (Math.floor(G.unitByName['church'].amount / 3)) + (Math.floor(G.unitByName['cathedral'].amount / 3)) : 0));
                    }
                    G.influenceTraitRemovalCooldown -= (Math.floor(G.getUnitAmount('lawyer') / 100) + (G.influenceTraitRemovalCooldown > 3000 ? Math.floor(G.getUnitAmount('mediator') / 50) : 0));
                    //science trickle for bonus 2 or above
                    if (G.has('eotm')) {
                        if (G.has('bonus2') || G.has('bonus3') || G.has('bonus4') || G.has('bonus5') || G.has('bonus6')) {
                            if (G.getRes('science').amount <= G.getRes('education').amount - 0.1) G.gain('science', 0.1, '. . .');
                        }
                    }
                    if (G.has('ink-fishing')) { G.getDict('squid').res['fish']['ink'] = 0.001; G.getDict('squid').mult = 0.95; }
                    //Chra-nos bonus
                    let goup = false
                    let godown = false
                    if (G.getRes('chranospts').amount >= 0 && goup && !godown) {
                        G.gain('chranospts', 1);
                        if (G.getRes('chranospts').amount == 100) {
                            goup = false
                            godown = true
                        }
                    } else if (G.getRes('chranospts').amount <= 100 && godown && !goup) {
                        G.lose('chranospts', 1);
                        if (G.getRes('chranospts').amount = 1) {
                            goup = true
                            godown = false
                        }
                    }
                    if (G.has('trees of faith II') && Math.random() < 0.04) {
                        var gained = false
                        if (!G.has('leaves of wisdom')) {
                            G.gainTrait(G.traitByName['leaves of wisdom'])
                            gained = true
                        }
                        if (!G.has('branches of wisdom')) {
                            G.gainTrait(G.traitByName['branches of wisdom'])
                            gained = true
                        }
                        if (gained) {
                            G.Message({ type: 'important tall', text: 'Your people have gained <b>Leaves of wisdom</b> and <b>Branches of wisdom</b> at the same time. Congrats!' })
                        }
                    }
                    if (G.achievByName['mausoleum'].won > 0) {
                        if (G.year >= 109 && G.year <= 121 && !madeThievesWarn && !G.has('t1') && !G.has('t10')) {
                            G.getDict('battling thieves').req = { 'hunting': true };
                            G.Message({ type: 'bad', text: '<b><font color="#FFA500">Beware of thievery!</font></b> It will begin occuring from now on, and slowly grow worse for the next 25 years. Soon, your people will want to punish thieves, so craft equipment for them so they will become easier to deal with! Thieves are unhappy adults and will show their unhappiness by commiting crimes. Even 200% <font color="#f7441f">Happiness</font> won\'t prevent any thieves from appearing, sadly. Adults (and more rarely, old people) may die after encountering a Thief. Expect these bad guys from now on.', icon: [23, 1, "magixmod"] });
                            madeThievesWarn = true
                        } else if (G.has('t1') || G.has('t2')) {
                            if (G.year >= 109 && G.year <= 121 && !madeThievesWarn) {
                                G.Message({ type: 'important', text: 'You got used to Thieves and the fact that they tend to appear. But in this plane, Thieves don\'t exist. Indeed, this is quite good for you!', icon: [28, 2, "magixmod", 23, 0, "magixmod"] });
                                madeThievesWarn = true
                            }
                        } else if (G.has('t10')) {
                            if (G.year >= 80 - G.achievByName['pocket'].won * 2 && !madeThievesWarn) {
                                G.getDict('battling thieves').req = { 'hunting': true };
                                G.Message({ type: 'bad', text: '<b><font color="#FFA500">Beware of thievery!</font></b> It will begin occuring from now on, and slowly grow worse for the next 25 years. Soon, your people will want to punish thieves, so craft equipment for them so they will become easier to deal with! Thieves are unhappy adults and will show their unhappiness by commiting crimes. Even 200% <font color="#f7441f">Happiness</font> won\'t prevent any thieves from appearing, sadly. Adults (and more rarely, old people) may die after encountering a Thief. Expect these bad guys to take your money from now on.', icon: [23, 1, "magixmod"] });
                                madeThievesWarn = true
                            }
                        }
                    }
                    if (G.year == 29) G.Message({ type: 'important', text: '<font color="#d9d9d9"><b>Your people noticed that their tools have started decaying.</font> <li>This doesn\'t seem good.</li></b>', icon: [24, 6, "magixmod"] });
                    if (G.year == 89)
                        if (G.achievByName['mausoleum'].won == 0) {
                            G.Message({ type: 'tutorial', text: 'It\'s a good idea to ascend with the Mausoleum! When you start a new run after getting the Mausoleum victory, you will unlock way more technologies, and something magical...', icon: [32, 27, "magixmod"] });
                        } else {
                            G.Message({ type: 'tutorial', text: 'I need to warn you. ' + (G.has('time measuring 1/2') ? 'After the next 20 years' : 'After a while') + ', something bad will start to occur. It seems that you have previously ascended, which is a good choice. To prepare for this event, you should probably start making some <b>Armor</b> and <b>Metal weapons</b>.', icon: [32, 27, "magixmod"] });
                        }
                    if (G.year == 149) G.Message({ type: 'important', text: '<font color="#a968ec">Seems like you are doing quite well. It is been 150 years since you started the magic adventure with Magix additions. Thank you for playing with this expansion! Your playing makes the mod better and motivates me to make future updates...remember the mod may recieve future updates (from @1_e0), so if you have any ideas, tell me on Discord! Anyway, keep enjoying this adventure...<br></font><b>Farewell...</b>', icon: [24, 1, "magixmod"] });
                    if (G.year == 9000) {
                        G.doFunc('>9000');
                    }
                    if (G.year >= 9 && !backupmesg) {
                        G.Message({ type: 'important', text: '<b>Don\'t forget to back up your save!</b><br>If you don\'t want to lose your save you can always back it up. Click the <b>Settings</b> tab, then the <b>Save to file</b> button. It will download a file with your save that you can load back in if your current save ever gets lost.', icon: [choose([25, 26, 27]), 22, "magixmod"] });
                        backupmesg = true
                    }
                    if (G.year >= 999 && G.year <= 1005 && !milleniummesg) {
                        G.Message({ type: 'good', text: 'Woah! It\'s been <b>1 thousand</b> years since your tribe started their existence!<br><b>Thank you, and wow ;)</b><br><font color="lime"><tt>Continue to enjoy the Magix expansion!</tt></font>', icon: [27, 23, "magixmod"] });
                        milleniummesg = true
                    }
                    if (G.year >= 1999 && G.year <= 2005 && !millenium2mesg) {
                        G.Message({ type: 'good', text: 'Amazing! It\'s been <b>2 thousand</b> years since your tribe started their wonderful existence! Also, I am sure that your adventure with Magix is not over yet.<br><b>Thank you ;)</b><br><font color="lime"><tt>Thanks so much for playing Magix!</tt></font>', icon: [32, 30, "magixmod"] });
                        millenium2mesg = true
                    }
                    if (G.year >= 4999 && G.year <= 5005 && !Fifthmilleniummesg) {
                        G.Message({ type: 'good', text: 'Stunning! It\'s been <b>5 thousand</b> years after your tribe began its existence. Congratulations for playing THIS long!<br><font color="lime"><tt>We hope that you will continue enjoying the Magix expansion!</tt></font>', icon: [32, 30, "magixmod"] });
                        Fifthmilleniummesg = true
                    }
                    ////STORYLINE////
                    if (G.getSetting('story messages') || G.resets < 3) {
                        if (G.techN > 37 && G.techN <= 49 && !st2) {
                            G.Message({ type: 'story2', text: 'All is as it should be.' });
                            st2 = true
                        }
                        if (G.resets > 0 && G.techN > 49 && G.techN <= 55 && !st3) {
                            G.Message({ type: 'story1', text: 'You want some mirrors. But sadly, no one can craft any mirrors yet.', icon: [32, 14, "magixmod"] });
                            st3 = true
                        }
                        if (G.techN > 60 && G.techN <= 74 && !st4) {
                            if (G.resets == 0) {
                                G.Message({ type: 'story2', text: 'You think that you should ascend someday no matter what. You feel it in your inner being.', icon: [32, 13, "magixmod"] });
                            } else {
                                G.Message({ type: 'story2', text: 'You wonder how your tribe will look and how advanced it will become within the next few centuries. (And hope nothing goes awry.)', icon: [32, 12, "magixmod"] });
                            }
                            st4 = true
                        }
                        if (G.techN > 74 && G.techN <= 77 && !st5) {
                            G.Message({ type: 'story1', text: 'You organize storytelling at the beach. Some wolf was lurking to wound some of your ' + G.getName('inhabs') + ', but a worker takes it down before a tragedy occurs.', icon: [7, 11] });
                            st5 = true
                        }
                        if (G.techN > 77 && G.techN <= 86 && !st6) {
                            G.Message({ type: 'good', text: 'Some of your people believe that our existence may make a lot of good for this world...And that hope spreads.', icon: [32, 11, "magixmod"] });
                            st6 = true
                        }
                        if (G.techN > 86 && G.techN <= 92 && !st7) {
                            if (G.resets == 0) {
                                G.Message({ type: 'story2', text: 'One of your dreamers sits down with you and passionately describes to you a world where magic and insight abounds. Upon reflecting on his story, you also get a feeling that ascension may be the key to unlock more.', icon: [32, 10, "magixmod"] });
                            } else {
                                G.Message({ type: 'story2', text: 'One of your dreamers asked you how you were feeling. You answered that you were all right! While you talking with this dreamer, some firekeeper comes to you with a water pot and some tasty cured seafood. Tasty ;)', icon: [32, 10, "magixmod"] });
                            }
                            st7 = true
                        }
                        if (G.techN > 93 && G.techN <= 99 && !st8) {
                            G.Message({ type: 'bad', text: 'You had a nightmare someday, which had a brutally wounded ' + G.getName('inhab') + '. It really shocked and made you scared.', icon: [32, 9, "magixmod"] });
                            st8 = true
                        }
                        if (G.techN > 99 && G.techN <= 106 && !st9) {
                            G.Message({ type: 'good', text: 'While wandering you noticed some angel waving at you. But you didn\'t understand what the angel did say to you. You are full of hope that it is some greeting.', icon: [32, 8, "magixmod"] });
                            st9 = true
                        }
                        if (G.techN > 108 && G.techN <= 112 && !st10) {
                            G.Message({ type: 'story1', text: 'An angel appears in your dreams. The angel speaks to you and tells you that Paradise will be open for you and your tribe. You clearly remembered his words:<br><b><font color="#FFFED6">\u201cDear ' + G.getName('ruler') + '. I am so proud of you and the and people you rule. They are a sign that shows how worthy you are.<br>You taught them a lot.<br>Someday the Paradise will be open for you, ' + G.getName('ruler') + ', and your ' + G.getName('inhabs') + ', so don\'t worry at all!\u201d</font></b>', icon: [32, 8, "magixmod"] });
                            st10 = true
                        }
                        if (G.techN > 112 && G.techN <= 119 && !st11) {
                            G.Message({ type: 'good', text: 'You see one of your carvers work on a gem block. You came closer to see the big gem block and even asked if he can teach you a little of carving. You spend some time with him and carved your first wooden statuette. Then you carved a little crown for the statuette and made a new friend.', icon: [32, 7, "magixmod"] });
                            st11 = true
                        }
                        if (G.techN > 119 && G.techN <= 127 && !st12) {
                            G.Message({ type: 'story2', text: 'He did a flip. lol', icon: [24, 2, "magixmod"] });
                            st12 = true
                        }
                        if (G.techN > 127 && G.techN <= 138 && !st13) {
                            G.Message({ type: 'story1', text: 'You look a little bit confused, but your presence still motivates your ' + G.getName('inhabs') + ' to discover more and more. But about what there is to discover...you don\'t know just yet.', icon: [7, 30, "magixmod"] });
                            st13 = true
                        }
                        if (G.techN > 139 && G.techN <= 143 && !st14) {
                            G.Message({ type: 'story2', text: 'People have written a book, and they call it "The Book of Grand Herbalists" (which is all about the herbalism profession). People related to druidism and gathering are pretty proud of that.', icon: [30, 30, "magixmod"] });
                            st14 = true
                        }
                        if (G.techN > 143 && G.techN <= 151 && !st15) {
                            G.Message({ type: 'story1', text: 'Their creativity has no limits. Your and your people are sure of that.', icon: [31, 30, "magixmod"] });
                            st15 = true
                        }
                        if (G.techN > 151 && G.techN <= 170 && !st16) {
                            G.Message({ type: 'story1', text: 'Your people will surpass all limits. You are quite sure of that.', icon: [31, 30, "magixmod"] });
                            st16 = true
                        }
                        if (G.techN > 171 && G.techN <= 200 && !st17) {
                            G.Message({ type: 'story1', text: 'You people think that you will be remembered forever as a great leader!', icon: [31, 30, "magixmod"] });
                            st17 = true
                        }
                        if (G.techN > 200 && (foolsToggle || G.techN <= 250) && !st18) {
                            G.Message({ type: 'story1', text: foolsToggle ? 'the end is never the end is never the end is never the end is never the end' : 'Your people say that they will remember you until the end of time.', icon: [31, 30, "magixmod"] });
                            st18 = true
                        }
                    }
                    if (G.has('t2')) {
                        if (G.getRes('population').amount >= Math.round(125 - (G.achievByName['unhappy'].won * 2.5) - (G.techN / 100))) {
                            var popinfo = Math.round(125 - (G.achievByName['unhappy'].won * 2.5) - (G.techN / 100))
                            G.gain('trial point', 1)
                            //Murdered by Madness
                            //G.getRes('population')/150+(G.year+G.achievByName['unhappy'].won*4/5)
                            /////////////////////
                            if (G.has('time measuring 1/2')) {
                                G.Message({ type: 'bad', text: 'Madness everywhere...people rob and kill. That\'s what Madness looks like.<br>Here comes this cruel year\'s report: <li>People murdered: ' + Math.round((G.getRes('population').amount / 80 + ((G.year / 5) + G.achievByName['unhappy'].won * 4 / 5))) + '</li><br>Population above <font color="#f60">' + popinfo + choose(['</font> will present cruel behaviours.', '</font> will do cruel things.', '</font> will be more cruel.']) })
                            } else if (rese == true) {
                                G.Message({ type: 'bad', text: 'Madness everywhere...people rob and kill. That\'s what Madness looks like.<br><li>People that got murdered: ' + Math.round((G.getRes('population').amount / 80 + ((G.year / 5) + G.achievByName['unhappy'].won * 4 / 5))) + '</li><br>Population above <font color="#f60">' + popinfo + choose(['</font> will present cruel behaviours.', '</font> will do cruel things.', '</font> will be more cruel.']) })
                            }
                            G.lose('adult', Math.round((G.getRes('population').amount / 80 + ((G.year / 5) + G.achievByName['unhappy'].won * 4 / 5))), 'The Madness')
                            G.gain('corpse', Math.round((G.getRes('corpse').amount / 80 + ((G.year / 5) + G.achievByName['unhappy'].won * 4 / 5))), 'The Madness')
                            G.gain('blood', Math.round((G.getRes('corpse').amount / 80 + ((G.year / 5) + G.achievByName['unhappy'].won * 4 / 5))), 'The Madness')
                            if (G.getRes('happiness').getDisplayAmount() == "-400%") {
                                G.lose('population', G.getRes('population').amount, 'The Madness')
                                G.dialogue.popup(function (div) {
                                    return '<div style="width:320x;min-height:200px;height:75%;">' +
                                        '<div class="fancyText title"><font color="#f70054">Trial failed</font></div>' +
                                        '<tt><div class="fancyText">You failed the Unhappy trial by reaching the -400% unhappiness cap.</tt>' +
                                        '<br>All people murdered themselves, leaving no one remaining.<br>This was quite cruel...<br>' +
                                        '<br><br>' +
                                        'But you can try again by reaching the Pantheon again and choosing Bersaria.</div><br>' +
                                        'Technical note: Start a new run by opening the settings.' +
                                        '</div></div>'
                                })
                            }
                        }
                    }
                    //SLEPPY INSIGHT v2 optimized and balanced
                    var insightName = 'insight' + (G.has("eotm") ? " II" : "")
                    switch (G.checkPolicy('sleepy insight')) {
                        case "-3":
                            var bonus = Math.floor(Math.random() * 14) + 13;
                            if (Math.random() * 100 <= 8.25 && G.getRes(insightName).amount < G.getRes('wisdom').amount - bonus)
                                G.gain(insightName, bonus, 'Sleepy insight');
                            break;
                        case "-2":
                            var bonus = Math.floor(Math.random() * 9) + 9;
                            if (Math.random() * 100 <= 13.5 && G.getRes(insightName).amount < G.getRes('wisdom').amount - bonus)
                                G.gain(insightName, bonus, 'Sleepy insight');
                            break;
                        case "-1":
                            var bonus = Math.floor(Math.random() * 7) + 5;
                            if (Math.random() * 100 <= 15 && G.getRes(insightName).amount < G.getRes('wisdom').amount - bonus)
                                G.gain(insightName, bonus, 'Sleepy insight');
                            break;
                        case "0":
                            var bonus = Math.floor(Math.random() * 6) + 3;
                            if (Math.random() * 100 <= 21 && G.getRes(insightName).amount < G.getRes('wisdom').amount - bonus)
                                G.gain(insightName, bonus, 'Sleepy insight');
                            break;
                        case "+1":
                            var bonus = Math.floor(Math.random() * 4) + 1;
                            if (Math.random() * 100 <= 24 && G.getRes(insightName).amount < G.getRes('wisdom').amount - bonus)
                                G.gain(insightName, bonus, 'Sleepy insight');
                            break;
                        case "+2":
                            var bonus = Math.random() * 1.75 + 0.25;
                            if (Math.random() * 100 <= 28.5 && G.getRes(insightName).amount < G.getRes('wisdom').amount - bonus)
                                G.gain(insightName, bonus, 'Sleepy insight');
                            break;
                        case "+3":
                            var bonus = Math.random() * 1.35 + 1.15;
                            if (Math.random() * 100 <= 30.75 && G.getRes(insightName).amount < G.getRes('wisdom').amount - bonus)
                                G.gain(insightName, bonus, 'Sleepy insight');
                            break;
                    }
                    if (G.has('t3')) {
                        if (G.getRes('cultural balance').amount >= 50 - (G.achievByName['cultural'].won / 2) || G.getRes('cultural balance').amount <= 0 + (G.achievByName['cultural'].won / 2)) {
                            G.lose('population', G.getRes('population').amount)
                            G.dialogue.popup(function (div) {
                                return '<div style="width:320x;min-height:200px;height:75%;">' +
                                    '<div class="fancyText title"><font color="#f70054">Trial failed</font></div>' +
                                    '<tt><div class="fancyText">You failed the Cultural trial by making your making your people too culturally unbalanced.</tt>' +
                                    '<br>You have been kicked out of this plane.<br>' +
                                    '<br><br>' +
                                    'But you can try again by reaching the Pantheon again and choosing Tu-ria!</div><br>' +
                                    'Technical note: Start a new run by opening the settings.' +
                                    '</div></div>'
                            })
                        }
                        var culture = Math.floor(Math.random() * 12);
                        if (G.has('time measuring 2/2')) {
                            G.Message({ type: 'important', text: 'During this year, Tu-ria has brought down to you:<br><b><font color="#aaffcc">' + B(culture) + ' Culture</font></b> and <b><font color="#fbb">' + (culture / 2) + ' Influence</font></b>', icon: [10, 11, "magixmod"] });
                        } else if (rese == true) {
                            G.Message({ type: 'important', text: 'Recently Tu-ria has brought down to you:<br><b><font color="#aaffcc">' + B(culture) + ' Culture</font></b> and <b><font color="#fbb">' + (culture / 2) + ' Influence</font></b>', icon: [10, 11, "magixmod"] });
                        }
                        if (G.getRes('culture').amount < G.getRes('inspiration').amount - culture) {
                            G.gain('culture', culture);
                        }
                        if (G.getRes('influence').amount < G.getRes('authority').amount - (culture / 2)) {
                            G.gain('influence', culture / 2);
                        }
                        G.gain('cultural balance', Math.random() / 2)
                        var relicChance = Math.round(Math.random() * 100);
                        if (relicChance <= 10 && G.has('digging')) {
                            var cultChance = Math.round(Math.random() * 100);
                            if (cultChance <= 10) {
                                G.Message({ type: 'bad', text: 'Your people found a relic while digging underground. Sadly, this relic isn\'t related to culture in any way.', icon: [3, 12, 8, 29, "magixmod"] })
                            } else {
                                G.Message({ type: 'good', text: 'Your people found a relic while digging underground. This relic is related to culture, increasing your <b>Cultural balance</b>. Fantastic!', icon: [4, 12, 8, 29, "magixmod"] })
                                G.gain('cultural balance', Math.round(Math.random() * 2) + 1)
                            }
                        }
                    }
                    if (G.has('t4')) G.lose('population', G.getRes('population').amount * 0.03, 'Trial');
                    if (G.has('t11')) G.lose('faith', 2.5 * (G.achievByName['faithful'].won + 1, 'Trial'));
                    if (G.has('t11') && G.getRes('faith').amount == 0) {
                        G.lose('population', G.getRes('population').amount);
                        G.dialogue.popup(function (div) {
                            return '<div style="width:320x;min-height:200px;height:75%;">' +
                                '<div class="fancyText title"><font color="#f70054">Trial failed</font></div>' +
                                '<tt><div class="fancyText">You failed the Faithful trial because you lost all Faith.</tt>' +
                                '<br>You have been kicked out of this plane.<br>' +
                                '<br><br>' +
                                'But you can try again by reaching the Pantheon again and choosing Enlightened!</div><br>' +
                                'Technical note: Start a new game by opening the settings.' +
                                '</div></div>'
                        })
                    }
                    if (G.has('t8') && G.year > 2) { //it'd be nearly impossible if dark decay occurred IMMEDIATELY
                        var lostHousing = Math.ceil(G.getRes('housing').amount * 0.03) + 1;
                        var lostPeople = Math.ceil(G.getRes('population').amount * 0.02 + 0.2 * Math.min(Math.pow(G.year, 1.3), 20 + Math.pow(G.year, 1.1) * 0.15) * (0.2 + Math.random())) + 1; //the wonder takes a while to build, so we can't have the exponents too large
                        var lostLand = Math.floor(G.getRes('land').amount * 0.016 + 0.8);
                        var darkGain = Math.round(lostHousing * 0.75) + lostPeople + lostLand;
                        G.lose('housing', lostHousing, 'Dark decay'); G.lose('population', lostPeople, 'Dark decay'); G.lose('land', lostLand, 'Dark decay');
                        G.gain('corpse', lostPeople, 'Dark deaths'); G.gain('dark essence', darkGain, 'Dark deaths');
                        G.Message({ type: 'story1', text: 'The conditions within this plane caused you to lose the following: <li>' + lostHousing + ' <b>Housing</b></li><li>' + lostPeople + ' <b>People</b></li>' + (lostLand > 0 ? '<li>' + lostLand + ' <b>Land</b>' : '') + '</li>However, these losses produced ' + darkGain + ' Dark essence for you. Use the Dark essence gained (which will not decay within this plane) to build the Temple of the Dead and finish the trial.', icon: [10, 32, "magixmod"] })
                    };
                    var multiplier = () => { if (G.achievByName['love for eternity'].won >= 1) return 1.2; else return 1 };
                    if (day + leap >= 40 && day + leap <= 46 && G.getRes('love').amount >= 10 && G.achievByName['so adorable'].won == 1) { G.achievByName['so adorable'].won = 1; G.middleText('- Completed <font color="pink">So adorable</font><br>seasonal achievement.', 'slow') };
                    if (day + leap >= 40 && day + leap <= 46 && G.getRes('love').amount >= 15 && G.achievByName['obsessed?'].won == 0) { G.achievByName['obsessed?'].won = 1; G.middleText('- Completed <font color="pink">Obsessed?</font><br>seasonal shadow achievement.', 'slow') };
                    if (day + leap >= 40 && day + leap <= 46) {
                        if (G.has('compliments') && !G.has('very artful compliments')) G.gain('love xp', G.getRes('child').amount * 0.8 * multiplier());
                        if (G.has('families full of love')) G.gain('love xp', G.getRes('elder').amount * 0.7 * multiplier());
                        if (G.has('very artful compliments')) G.gain('love xp', G.getRes('child').amount * 1.1 * multiplier());
                        if (G.has('discovery with love')) G.gain('love xp', G.techN * (Math.round(Math.random() * 21) + 1) - ((G.traitN - G.knowN) / 8) * multiplier());
                    }
                }
            };
            updateNewDayLines()
            /*=====================================================================================
            Halloween ToT
            =======================================================================================*/
            G.funcs['ToT'] = function () {
                if (G.on) {
                    if (G.has('pumpkins')) {
                        var pumpkinroulette = Math.round(Math.random() * 100) + 1;
                        var ic = Math.round(Math.random() * 1) + 7;
                        const loottabfcase = ['<b>Pieces of cooked meat</b>', '<b>Fruits</b>', '<b>Pieces of cooked seafood</b>', '<b>colored clothing</b>', '<b>Herbs</b>'];
                        const pumpkinnames = ['Etienne', 'Beth', 'Blushy', 'Dasher', 'Chester', 'Billy', 'Jimmy', 'Claire', 'Peter', 'Josh', 'Albert'];
                        var name = Math.round(Math.random() * 11); //Name of pumpkin that will be displayed in message
                        var loot = Math.round(Math.random() * 4); //What you will gain
                        var amount;

                        if (pumpkinroulette >= 1 && pumpkinroulette <= 15) {
                            if (loot == 0) { amount = randomFloor(G.getRes('cooked meat').amount / 3); G.gain('cooked meat', amount, '<font color="#f80">Treat</font>'); }; if (loot == 1) { amount = randomFloor(G.getRes('fruit').amount / 3); G.gain('fruit', amount, '<font color="#f80">Treat</font>'); }; if (loot == 2) { amount = G.getRes('cooked seafood').amount / 3; G.gain('cooked seafood', '<font color="#f80">Treat</font>'); }; if (loot == 3) { amount = randomFloor(G.getRes('colored clothing').amount * 0.6); G.gain('colored clothing', amount, '<font color="#f80">Treat</font>'); }; if (loot == 4) { amount = randomFloor(G.getRes('herbs').amount / 3); G.gain('herbs', amount, '<font color="#f80">Treat</font>'); };
                            G.Message({ type: 'tot', text: 'Oh a ' + pumpkinnames[name] + '\'o Pumpkin arrives there. After a strong smash your people managed to collect ' + B(amount) + ' <font color="pink">' + loottabfcase[loot] + '</font> outta it. <b>Noice!</b>', icon: [ic, 7, 'seasonal'] }); //7,8
                        } else if (pumpkinroulette > 15 && pumpkinroulette <= 28) {
                            G.Message({ type: 'tot', text: 'Oh a ' + pumpkinnames[name] + '\'o Pumpkin arrives there. After a loud, strong smash you see...the inside of this pumpkin...there was...nothing...<br><b>Trick!</b>', icon: [9, 7, 'seasonal'] });
                        } else if (pumpkinroulette > 28 && pumpkinroulette <= 36) {
                            var amount = randomFloor(G.getRes('water').amount * 0.4);
                            G.gain('water', amount, '<font color="#f80">Treat</font>');
                            G.Message({ type: 'tot', text: 'Oh a ' + pumpkinnames[name] + '\'o Pumpkin arrives there. Before the pumpkin got smashed, it unleashed from itself a lot of water (probably his tears). Without caring, someone smashes it and that\'s how you gain ' + B(amount) + ' <b>Water</b>.<br>That\'s it!', icon: [13, 7, 'seasonal'] });
                        } else if (pumpkinroulette > 36 && pumpkinroulette <= 38 && G.has('juicy expertise') && G.has('pumpkins II')) {
                            var amount = randomFloor(G.getRes('juices').amount * 0.9);
                            G.gain('juices', amount, '<font color="#f80">Treat</font>');
                            G.Message({ type: 'tot', text: 'Oh a ' + pumpkinnames[name] + '\'o Pumpkin arrives there. Before you smash the pumpkin, it unleashed from itself a lot of colorful juicy water (probably his tears). Without caring about it an elder smashes it and that\'s how you gain ' + B(amount) + ' <b>liters of tasty Juices</b>.<br>That\'s it!', icon: [14, 7, 'seasonal'] });
                        } else if (pumpkinroulette > 38 && pumpkinroulette <= 41 && G.has('pumpkins II') && G.getRes('insight').amount <= G.getRes('wisdom').amount && G.getRes('culture').amount <= G.getRes('inspiration').amount && G.getRes('faith').amount <= G.getRes('spirituality').amount && G.getRes('insight II').amount <= G.getRes('wisdom II').amount && G.getRes('culture II').amount <= G.getRes('inspiration II').amount && G.getRes('faith II').amount <= G.getRes('spirituality II').amount && G.getRes('influence').amount <= G.getRes('authority').amount && G.getRes('influence II').amount <= G.getRes('authority II').amount) { //ONCE A YEAR IT CAN OVERCAP. IT's fine :)
                            const loottabgcase = ['Insight', 'Culture', 'Faith', 'Influence'];
                            const loottabgcase2 = ['Insight II', 'Culture II', 'Faith II', 'Influence II'];
                            var lootg = Math.round(Math.random() * 3);
                            var amount;
                            if (!G.has('eotm')) {
                                if (lootg == 0) amount = 10 + (G.getRes('wisdom').amount / 7); G.gain('insight', amount, '<font color="#f80">Treat</font>');
                                if (lootg == 1) amount = 5 + (G.getRes('inspiration').amount / 7); G.gain('culture', amount, '<font color="#f80">Treat</font>');
                                if (lootg == 2) amount = 2.5 + (G.getRes('spirituality').amount / 7); G.gain('faith', amount, '<font color="#f80">Treat</font>');
                                if (lootg == 3) amount = 4 + (G.getRes('authority').amount / 7); G.gain('influence', amount, '<font color="#f80">Treat</font>');
                            } else {
                                if (lootg == 0) amount = 5 + (G.getRes('wisdom II').amount / 7); G.gain('insight II', amount, '<font color="#f80">Treat</font>');
                                if (lootg == 1) amount = 3 + (G.getRes('inspiration II').amount / 7); G.gain('culture II', amount, '<font color="#f80">Treat</font>');
                                if (lootg == 2) amount = 2.5 + (G.getRes('spirituality II').amount / 7); G.gain('faith II', amount, '<font color="#f80">Treat</font>');
                                if (lootg == 3) amount = 3 + (G.getRes('authority II').amount / 7); G.gain('influence II', amount, '<font color="#f80">Treat</font>');
                            }
                            if (!G.has('eotm')) {
                                G.Message({ type: 'tot', text: 'Oh a ' + pumpkinnames[name] + '\'o Pumpkin arrives there. After a smash the pumpkin was...not so empty. It had an essential. You gained <b>' + B(amount) + ' ' + loottabgcase[lootg] + '</b>.', icon: [11, 7, 'seasonal'] });
                            } else {
                                G.Message({ type: 'tot', text: 'Oh a ' + pumpkinnames[name] + '\'o Pumpkin arrives there. After a smash the pumpkin was...not so empty. It had an essential. You gained <b>' + B(amount) + ' ' + loottabgcase2[lootg] + '</b>.', icon: [12, 7, 'seasonal'] });
                            }
                        } else if (pumpkinroulette > 41 && pumpkinroulette <= 43 && G.has('pumpkins II')) {
                            var amount = G.getRes('fire pit').amount * 0.4;
                            G.gain('fire pit', amount, '<font color="#f80">Treat</font>');
                            G.Message({ type: 'tot', text: 'Oh a ' + pumpkinnames[name] + '\'o Pumpkin arrives there. This pumpkin is so warm and fire seems to blast out of it every so often. Ignoring that, someone smashes it and that\'s how you gain ' + B(amount) + ' <b>Fire pits</b> for your tribe.<br>Amazing!', icon: [15, 7, 'seasonal'] });
                        }
                    }
                }
            }
            G.funcs['new day'] = function () {
                if (G.on) {
                    if (!droughtmesg && G.has('droughtNew')) {
                        G.Message({ type: 'bad3', text: 'You are currently in ' + (G.has('trial') ? 'an eternal' : 'a') + ' <b>drought</b>! While in a <b>drought</b>, water will be a lot harder to obtain and store. In addition, these may to turn into famines (which will cause food to decay more rapidly). (Check the trait for more info.)', icon: [9, 10] })
                        droughtmesg = true
                    }
                    if (G.influenceTraitRemovalCooldown > 0) G.influenceTraitRemovalCooldown--;
                    if (G.techN >= 80) { //since these are earlygame only we won\'t want them anymore at some point unless they get adopted for good.
                        G.getDict('scavenging').req = { 'tribalism': false };
                        G.getDict('dreaming').req = { 'tribalism': false };
                        G.getDict('carcass-looting').req = { 'tribalism': false };
                        G.getDict('active exploration').req = { 'tribalism': false };
                    }
                    timeAchievs();
                    if (G.day % 10 == 0 || G.tab.id == 'tech') theme();
                    if (G.checkPolicy('se05') == 'on') {
                        if (G.getPolicy('se05').visible) {
                            G.policyByName['se05'].visible = false;
                            G.update['policy']();
                        }
                        G.setPolicyModeByName('se05', 'off');
                    }
                    if (G.checkPolicy('se05') == 'on') {
                        if (G.getPolicy('se04').visible) {
                            G.policyByName['se04'].visible = false;
                            G.update['policy']();
                        }
                        G.setPolicyModeByName('se04', 'off');
                    }
                    if (G.getRes("land").amount > 59) {
                        if (G.policyByName['far foraging'].visible) {
                            G.policyByName['far foraging'].visible = false;
                            G.update['policy']();
                        }
                        if (G.checkPolicy("far foraging") == 'on') {
                            G.setPolicyModeByName('far foraging', 'off');
                        }
                        G.getDict('far foraging').req = { 'tribalism': false };
                    }
                    var eatOnGatherVisible = G.getPolicy('eat on gather').visible
                    if (G.checkPolicy('food rations') == 'plentiful' || G.checkPolicy('water rations') == 'plentiful' || !G.has('rules of food')) {
                        if (eatOnGatherVisible) {
                            G.setPolicyModeByName('eat on gather', 'off');
                            G.getPolicy('eat on gather').visible = false;
                            G.update['policy']();
                        }
                    } else if (!eatOnGatherVisible && G.has('rules of food')) {
                        G.getPolicy('eat on gather').visible = true;
                        G.update['policy']();
                    }
                    if (G.getUnitAmount('archaeologist') > 0) G.getDict('out of relics').req = { 'archaeology': true, 'tribalism': true };
                    else G.getDict('out of relics').req = { 'archaeology': true, 'tribalism': false };//it would be stupid losing all relics while no archaeologists
                    if (G.day % 15 == 0 && G.checkPolicy('far foraging') == 'on' && G.getRes('land').amount < 80) changeHappiness(-0.03 * G.getUnitAmount('gatherer'), 'far foraging');
                    if (G.day % 30 == 0 && G.tab.id == "land") G.updateMapDisplay();

                    if (G.has('magic adept') && G.achievByName['man of essences'].won == 0) { //Man of essences achievement
                        G.achievByName['man of essences'].won = 1
                        G.middleText('- Completed <font color="indigo">Man of essences</font> achievement -')
                    }
                    //3rd party achievement's code
                    if (G.mods.length !== 2 || !(G.mods[0].url.includes("/magixUtils.js")) || !(G.mods[1].url.includes("/magix.js"))) {
                        if (G.achievByName['3rd party'].won === 0) {
                            G.achievByName['3rd party'].won = 2 //Fix for displaying over time middleText
                            G.middleText('- Completed <font color="pink">3rd party</font> achievement -', 'slow')
                        }
                    }
                    if (G.has('plain island mining strategies')) {
                        G.getDict('mine of the plain island').icon = [31, 8, "magixmod"]
                    }

                    if (G.checkPolicy('se12') == 'on')//Okar The Seer's backfire
                    {
                        G.getDict('guru').upkeep = { 'food': 10, 'water': 5 }
                        G.getDict('dreamer').upkeep = { 'food': 2, 'water': 1 }
                        G.getDict('guru').alternateUpkeep = { 'spoiled food': 4, 'muddy water': 2 }
                        G.getDict('dreamer').alternateUpkeep = { 'spoiled food': 2, 'muddy water': 1 }
                    }
                    if (G.has('t6') && G.has('ocean decay V') && G.has('golden crafting') && G.has('ocean reversion')) {
                        G.achievByName['an ocean\'s voyage'].won = 1
                        G.middleText('- Completed <font color="#0ac">An ocean\'s voyage</font> shadow achievement -<br><hr width="300"><small>What a journey!</small>', 'slow')
                    }
                    if (G.traitN - G.knowN >= 50 && G.achievByName['trait-or'].won == 0) { //Traitsman achievement
                        G.achievByName['trait-or'].won = 1
                        G.middleText('- Completed <font color="pink">Trait-or</font> achievement -', 'slow')
                    }
                    if (G.traitN - G.knowN >= 70 && G.achievByName['man o\' trait'].won == 0) { //Traitsman achievement
                        G.achievByName['man o\' trait'].won = 1
                        G.middleText('- Completed <font color="pink">Man\'o trait</font> achievement -', 'slow')
                    }
                    if ((G.getRes('worship point').amount) == 0 && G.achievByName['the first choice'].won == 0 && G.has('pantheon key')) {
                        G.achievByName['the first choice'].won = 1
                        G.middleText('- Completed <font color="cyan">The first choice</font> achievement -', 'slow')
                    }
                    if (G.checkPolicy('se04') == 'on' && G.checkPolicy('se05') == 'off') { G.getDict('se05').cost = { 'worship point': 1, 'faith II': 10, 'new world point': 1 } };
                    if (G.checkPolicy('se05') == 'on' && G.checkPolicy('se04') == 'off') { G.getDict('se04').cost = { 'worship point': 1, 'faith II': 10, 'new world point': 1 } };
                    //OSMIUM , MODERNIUM AND CARETAKIUM SPAWN

                    if (G.has('winter holidays')) {
                        G.getDict('snow cover').res['dig']['snow'] = 1;
                    }
                    if (G.has('t10')) {
                        G.getDict('grass').res['gather']['wooden coin'] = 0.2;
                        G.getDict('succulents').res['gather']['wooden coin'] = 0.1;
                    }
                    if (G.achievByName['mausoleum eternal'].won >= 1 && G.achievByName['extremely smart'].won >= 1 && G.achievByName['man of essences'].won >= 1 && G.achievByName['magical'].won >= 1 && G.achievByName['next to the God'].won >= 1 && G.achievByName['the first choice'].won >= 1 && G.achievByName['trait-or'].won >= 1 && G.achievByName['not so pious people'].won >= 1 && G.achievByName['talented?'].won == 0) { //Experienced
                        G.achievByName['talented?'].won = 1;
                        G.middleText('- All achievements from tier <font color="#f50">3</font> have been completed! -<br><hr><small>All crafting units and a few non-crafting units that use overworld land since the next run will use 15% less land. In addition, you can pick from <font color="#ebde64">five</font> researches instead of just four.</small>', 'slow')
                    }
                    if (G.has('outstanders club')) {
                        G.getDict('the outstander').limitPer = { 'population': 26500 }
                    }
                    //if (G.has('smaller shacks') && G.has('backshift at farms')) {
                    //    G.getDict('wheat farm').use = { 'worker': 12, 'land': 13.75 }
                    //}
                    if (!G.has('t10')) { G.getDict('precious metal ingot').partOf = 'misc materials' }//this resource will not decay during Pocket but normally without active trial will
                    G.getDict('seafood').turnToByContext = { 'eating': { 'health': -0.02, 'happiness': -2 - G.year * 0.04, 'bone': 0.02 }, 'decay': { 'spoiled food': 1 } }; //Gets worse over time
                    if (G.checkPolicy('reset health level') == 'activate') {  //hunted special policy
                        G.getDict('reset health level').cost = { 'land': 1e5 }; G.getRes('health').amount = 0; G.setPolicyModeByName('reset health level', 'alreadyused');
                    }
                    if (G.checkPolicy('reset health level') == 'alreadyused') { G.getDict('reset health level').cost = { 'land': 1e5 } };
                    G.getDict('bank').effects = [{ type: 'provide', what: { 'money storage': -G.getAchiev('pocket').won * 250 + 6000 } }];
                    if (G.has('caretaking')) {
                        if (G.has('mining II')) {
                            G.getDict('rocky substrate').res['deep mine']['caretakium ore'] = 0.02;
                            G.getDict('tundra rocky substrate').res['deep mine']['caretakium ore'] = 0.002;
                            G.getDict('ice desert rocky substrate').res['deep mine']['caretakium ore'] = 0.001;
                            G.getDict('badlands substrate').res['deep mine']['caretakium ore'] = 0.01;
                            G.getDict('lush rocky substrate').res['deep mine']['caretakium ore'] = 0.015;
                        }
                        G.getDict('grand mirror').wideIcon = [1, 30, "magixmod"], G.getDict('grand mirror').cost = { 'magic essences': 250000, 'cobalt ingot': 500, 'precious building materials': 1000, 'basic building materials': 250, 'platinum ingot': 350 }; G.getDict('grand mirror').costPerStep = { 'magic essences': 25000, 'precious building materials': 1000, 'basic building materials': 250, 'gems': 5000 };
                    } else if (G.has('moderation')) {
                        if (G.has('mining II')) {
                            G.getDict('rocky substrate').res['deep mine']['modernium ore'] = 0.01;
                            G.getDict('tundra rocky substrate').res['deep mine']['modernium ore'] = 0.002;
                            G.getDict('ice desert rocky substrate').res['deep mine']['modernium ore'] = 0.001;
                            G.getDict('badlands substrate').res['deep mine']['modernium ore'] = 0.01;
                            G.getDict('lush rocky substrate').res['deep mine']['modernium ore'] = 0.015;
                        }
                        G.getDict('maths IV').icon = [2, 39, "magixmod", 8, 21, "magixmod", 0, 18, "magixmod"];
                        G.getDict('grand mirror').wideIcon = [4, 30, "magixmod"]; G.getDict('grand mirror').cost = { 'strong metal ingot': 7500, 'cobalt ingot': 500, 'precious building materials': 1000, 'basic building materials': 250, 'basic factory equipment': 500 }; G.getDict('grand mirror').costPerStep = { 'magic essences': 25000, 'precious building materials': 1300, 'basic building materials': 250, 'hard metal ingot': 150, 'coal': 3000, 'log': 4000 };
                    }
                    ///UNIVERSITY LEVELLING
                    if (G.getUnitByName('university of science').mode == 4) {
                        if (G.has('bigger university') && G.getRes('university point').amount == 0 && G.getRes('victory point').amount >= 4) {
                            G.getUnitByName('university of science').mode = 0;
                            G.getDict('university of science').steps = 300;
                            G.getDict('university of science').cost = { 'basic building materials': 2400, 'precious building materials': 1200, 'magic essences': 3000, 'mana': 40000, 'science': 90 };
                            G.getDict('university of science').costPerStep = { 'basic building materials': 1450, 'precious metal ingot': 500, 'insight II': 320, 'science': 75, 'gems': 1000, 'wisdom II': -0.5, 'education': -0.2, 'mana': 4e4, 'university point': -1 };
                            G.getDict('university of science').finalStepCost = { 'population': 3000, 'insight II': 425, 'wisdom': 350, 'science': 100, 'university point': -100 };
                            G.getDict('university of science').icon = [16, 29, "magixmod"]; G.getDict('university of science').wideIcon = [15, 29, "magixmod"];
                        }
                    };
                    if (G.getUnitByName('university of science').mode == 4 && G.getRes('university point').amount == 0 && G.has('even bigger university') && G.has('bigger university')) {
                        G.getUnitByName('university of science').mode == 0;
                        G.getDict('university of science').icon = [19, 29, "magixmod"];
                        G.getDict('university of science').wideIcon = [18, 29, "magixmod"];
                        G.getDict('university of science').steps = 400;
                        G.getDict('university of science').finalStepCost = { 'population': 3000, 'insight II': 425, 'wisdom': 350, 'science': 100, 'university point': -100 };
                        G.getDict('university of science').cost = { 'basic building materials': 2400, 'precious building materials': 1200, 'magic essences': 90000, 'mana': 40000, 'science': 180 };
                        G.getDict('university of science').costPerStep = { 'magic essences': 30000, 'basic building materials': 2450, 'precious metal ingot': 800, 'insight II': 600, 'science': 200, 'gems': 1500, 'wisdom II': -0.6, 'education': -0.3, 'mana': 4e5, 'university point': -1 };
                    }
                    if (G.has('plain island building')) {
                        G.getDict('plain island portal').wideIcon = [7, 3, "magixmod"];
                    }
                    if (G.has('no knapping anymore')) {
                        G.getDict('healer').use = { 'stone tools': 1, 'worker': 1, 'knapped tools': -1 } //had to add knapped tools -1 because declaring
                        G.getDict('woodcutter').use = { 'stone tools': 1, 'worker': 1, 'knapped tools': -1 }//s.t and wrkr didn't make knapped tools usage disappear
                        G.getDict('digger').use = { 'stone tools': 1, 'worker': 1, 'knapped tools': -1 }//at least it works as it is supposed to now
                    }

                    if (G.has('plain island building')) {
                        if (!G.has('plain island ideas')) {
                            G.gainTech(G.techByName['plain island ideas']);
                        }
                        if (!G.has('the well of ideas')) {
                            G.gainTech(G.techByName['the well of ideas']);
                        }
                    }

                    ///On purpose crash. Occurs while playing market without magix utils
                    if (G.modsByName['Market mod'] && !(G.modsByName['Magix utils for market'] || G.modsByName['Magix market mod utils'])) {
                        console.log('Install Magix utilities for the market mod in order to use it!');
                        console.log('Link to paste: https://plasma4.github.io/magix-extras/MagixMarketUtils.js');
                        G.middleText('Install Magix utilities for the market mod (view the console for the link).<hr><br><small>(caused intentional game crash)</small>', 'slow')
                    }
                    const thieves = G.getDict("thief")//I slide in thieves stealing ability ;)
                    const chances = [
                        {
                            type: "steal",
                            below: 0.6
                        },
                        {
                            type: "hurt",
                            below: 0.9
                        },
                        {
                            type: "kill",
                            below: 0.92
                        },
                        {
                            type: "nothing",
                            below: 1
                        }
                    ]
                    const chance = Math.random()
                    let action
                    //Find what to do
                    for (let i = 0; !action; i++) {
                        if (chance < chances[i].below)
                            action = chances[i].type
                    }
                    //Execute
                    switch (action) {
                        case "steal":
                            G.lose("archaic building materials", thieves.amount * 0.8 * (Math.random() + 2), "theft")
                            G.lose("basic building materials", thieves.amount * 0.3 * (Math.random() + 1), "theft")
                            G.lose("advanced building materials", thieves.amount * 0.03 * Math.random(), "theft")
                            G.lose("precious building materials", thieves.amount * 0.05 * Math.random() * Math.random(), "theft")
                            changeHappiness(thieves.amount * -8, "thieves")
                            break
                        case "hurt":
                            G.lose("adult", thieves.amount * 0.25, "thieves hurting people")
                            G.gain("wounded", thieves.amount * 0.25, "thieves hurting people")
                            changeHappiness(thieves.amount * -12, "thieves")
                            break
                        case "kill":
                            G.lose("adult", thieves.amount * 0.06, "thieves killing people")
                            G.gain("wounded", thieves.amount * 0.06, "thieves killing people")
                            changeHappiness(thieves.amount * -30, "thieves")
                            break
                    }

                    if (G.checkPolicy('se07') == 'on') //HERBALIA BOOST
                    {
                        var n = randomFloor(G.getRes('population').amount * 0.05); G.gain('health', n, 'Herbalia');
                    }
                    ///////////HERBALIA BACKFIRE
                    if (G.checkPolicy('se07') == 'on') {
                        var toSpoil = -G.getRes('happiness').amount * 0.00155;
                        var spent = changeHappiness(-randomFloor(toSpoil), 'Herbalia');
                    }
                    ///////////BERSARIA BACKFIRE
                    if (G.checkPolicy('se02') == 'on') {
                        var toSpoil = -G.getRes('happiness').amount * 0.00295;
                        var spent = changeHappiness(-randomFloor(toSpoil), 'Bersaria');
                    }
                    //BURIODAK HEALTH HARM
                    if (G.checkPolicy('se08') == 'on') {
                        if (G.getRes('health').amount > 0) {
                            var toSpoil = G.getRes('health').amount * 0.000095;
                            var spent = G.lose('health', randomFloor(toSpoil), 'Buri\'o Dak');
                        } else {
                            var toSpoil = -G.getRes('health').amount * 0.000095;
                            var spent = G.lose('health', randomFloor(toSpoil), 'Buri\'o Dak');
                        }
                    }
                    if (G.has('handwashC')) {
                        if (G.getRes('health').amount < 0) { G.gain('health', -G.getRes('health').amount * 0.0004, 'handwashing') } else { G.gain('health', G.getRes('health').amount * 0.0004, 'handwashing') };
                    } else if (G.has('handwashM')) {
                        if (G.getRes('health').amount < 0) { G.gain('health', -G.getRes('health').amount * 0.0001, 'handwashing') } else { G.gain('health', G.getRes('health').amount * 0.0001, 'handwashing') };
                    }
                    if (G.has('healthy life')) //Healthy life trait power
                    {
                        var n = randomFloor(G.getRes('population').amount * 0.12); G.gain('health', n, 'healthy life');
                    }
                    if (G.has('supreme healthy life')) //Supreme healthy life trait power
                    {
                        var n = randomFloor(G.getRes('population').amount * 0.18); G.gain('health', n, 'supreme healthy life');
                    }

                    if (G.year >= 29)//Gear decaying at year 30 and later
                    {
                        var toSpoil = (G.getRes('metal tools').amount * 0.0001); G.lose(('metal tools'), randomFloor(toSpoil), 'decay');
                        if (!G.has('tool refinery 2/2')) {
                            var toSpoil = (G.getRes('stone tools').amount * 0.0004); G.lose(('stone tools'), randomFloor(toSpoil), 'decay');
                        } else {
                            var toSpoil = (G.getRes('stone tools').amount * 0.00015); G.lose(('stone tools'), randomFloor(toSpoil), 'decay');
                        };
                        var toSpoil = (G.getRes('knapped tools').amount * 0.00055); G.lose(('knapped tools'), randomFloor(toSpoil), 'decay');
                        if (!G.has('tool refinery 2/2')) {
                            var toSpoil = (G.getRes('stone weapons').amount * 0.0004 * (G.has('ground weapons') ? 1 : 0.95)); G.lose(('stone weapons'), randomFloor(toSpoil), 'decay');
                        } else {
                            var toSpoil = (G.getRes('stone weapons').amount * 0.0001 * (G.has('ground weapons') ? 1 : 0.95)); G.lose(('stone weapons'), randomFloor(toSpoil), 'decay');
                        };
                        var toSpoil = (G.getRes('bow').amount * 0.0005 * (G.has('ground weapons') ? 1 : 0.95)); G.lose(('bow'), randomFloor(toSpoil), 'decay');
                        var toSpoil = (G.getRes('wand').amount * 0.0006); G.lose(('wand'), randomFloor(toSpoil), 'decay');
                        var toSpoil = (G.getRes('crossbow').amount * 0.0006 * (G.has('ground weapons') ? 1 : 0.95)); G.lose(('crossbow'), randomFloor(toSpoil), 'decay');
                        var toSpoil = (G.getRes('arrow').amount * 0.0006); G.lose(('arrow'), randomFloor(toSpoil), 'decay');
                        var toSpoil = (G.getRes('metal weapons').amount * 0.0002 * (G.has('ground weapons') ? 1 : 0.95)); G.lose(('metal weapons'), randomFloor(toSpoil), 'decay');
                        var toSpoil = (G.getRes('armor set').amount * 0.0002); G.lose(('armor set'), randomFloor(toSpoil), 'decay');
                        var toSpoil = (G.getRes('fishing net').amount * 0.0003); G.lose(('fishing net'), randomFloor(toSpoil), 'decay');
                        var toSpoil = (G.getRes('basic factory equipment').amount * 0.0003); G.lose(('basic factory equipment'), randomFloor(toSpoil), 'decay');
                    }

                    if (G.policy.length >= 15 && !pol15 && G.policy.length <= 18) {
                        G.Message({ type: 'important', text: 'Your rules and the fact that you are leading this tribe has been accepted! People have become bound to you.', icon: [11, 4] }); pol15 = true;
                    }
                    if (G.getSetting('story messages') || G.resets < 3) {
                        if ((G.has('canoes') || G.has('rafts')) && !canoestory && !G.has('boat building')) {
                            G.Message({ type: 'important', text: 'From now, exploring through ocean shores is possible. You realize that the world is truly beautiful. You wonder what that "endless" ocean hides within it.', icon: [2, 28, "magixmod"] })
                            canoestory = true
                        }
                        if (G.has('sedentism') && !sedestory && !G.has('building')) {
                            G.Message({ type: 'important', text: 'Your people are now able to set up their very first dwellings. Aren\'t you happy that your tribe may finally grow larger?', icon: [12, 4] })
                            sedestory = true
                        }
                        if (G.has('boat building') && !boatstory && !G.has('stronger faith')) {
                            G.Message({ type: 'important', text: 'Remember the first time you could explore beaches? Since they can build and set up a boat, they can discover the secrets which lay at the depths of the ocean.', icon: [3, 28, "magixmod"] })
                            boatstory = true
                        }
                        if (G.has('ritualism') && !ritstory && !G.has('burial')) {
                            G.Message({ type: 'tutorial', text: 'You now have faced rituals. It is the first spark of belief that may eventually become a religion!', icon: [7, 4] })
                            ritstory = true
                        }
                        if (G.has('burial') && !burystory && !G.has('monument-building')) {
                            G.Message({ type: 'important', text: 'The view of unburied corpses unsettles you and your fellow settlers. Now they know that to calm down people, you can just bury it.', icon: [13, 2] })
                            burystory = true
                        }
                    }
                    if (G.getSetting('tutorial messages') || G.resets < 3) {
                        if (G.has('sewing') && !sewstory && !G.has('weaving')) {
                            G.Message({ type: 'important', text: 'You want some clothing. As long as you refuse to hire a single Clothier, only you know the secrets of making clothing and do so just for yourself.', icon: [15, 7] })
                            sewstory = true
                        }
                        if (G.has('weaving') && !weastory && !G.has('monument-building')) {
                            G.Message({ type: 'important', text: 'You smile, knowing that now your people can craft clothing that is slightly better than primitive pieces of hide or grass.', icon: [16, 7] })
                            weastory = true
                        }
                        if (G.has('skinning') && !skinnsto && !G.has('city planning')) {
                            G.Message({ type: 'important', text: 'You hope that primitive clothing from hide will make people happier. You think that this resource will make better clothing. You will likely ask some hunter to hunt some animal and get its hide to your tribe!', icon: [9, 7] })
                            skinnsto = true
                        }
                        if (G.getRes('gem block').amount >= 10 && !gem && !G.has('monument-building')) {
                            G.Message({ type: 'important', text: 'Oh, shiny gem blocks! You take one and hug it...So cute. And shiny. :>', icon: [choose([17, 18]), 8] })
                            gem = true
                        }
                        if (G.has('writing') && !writer && G.has('caligraphy') && G.has('alphabet 1/3') && !G.has('monument-building') && !G.has('alphabet 2/3')) {
                            G.Message({ type: 'important', text: 'You managed to make people able to write. Well...not everyone has readable writing...yet.', icon: [17, 27, "magixmod"] })
                            writer = true
                        }
                        if (G.traitN - G.knowN == 20 && !trait20) {
                            G.Message({ type: 'important', text: 'This tribe seems to be developing a lot of unique traits!', icon: [8, 12, 8, 4] })
                            trait20 = true
                        }
                        if (G.has('guru') && !guru && !G.has('dark side')) {
                            G.Message({ type: 'tutorial', text: 'After you unlock <b>Gurus</b>, you may start collecting a small amount of <font color="#ffaaff"><b>Science</b></font> from them. Just hire one or more Gurus and wait patiently until he gathers one for you. They are needed during the later stages of the game.', icon: [8, 12, choose([3, 4, 5, 6]), 27, "magixmod"] })
                            guru = true
                        }
                        if (G.has('rules of food') && !rofpopup && !G.has('sedentism')) {
                            G.Message({ type: 'tutorial', text: 'You can now control food and water rations. Your people seem a little angry and want to eat and drink more. Check the policies: here you may find a solution to this minor problem that may quickly become a major one if you will ignore this.<br>Make sure you unlocked policies first!', icon: [4, 28, "magixmod"] })
                            rofpopup = true
                        }
                        if (G.getRes('land').amount == 100 && !explorepop && G.getUnitAmount('scout') < 1) {
                            if (G.has('intuition')) {
                                G.Message({ type: 'tutorial', text: '<b>Maybe it is a good time to hire a Scout!</b><br>A wanderer can\'t discover new tiles. If you haven\'t hired a <b>Scout</b> yet, think about hiring one sometime and focus on getting the <b>Scouting</b> research if you don\'t already have it. Land becomes a must later on!', icon: [5, 28, "magixmod"] })
                            } else {
                                G.Message({ type: 'tutorial', text: '<b>You\'ll be able to get a scout in the future.</b><br>A wanderer can\'t discover new tiles and can only explore and discover secrets hidden in already discovered territory. Make sure you research as much as you can, get various resources, and wait for some traits to appear so you can unlock more techs!', icon: [5, 28, "magixmod"] })
                            }
                            explorepop = true
                        }
                        if (G.has('belief in the afterlife') && !bapopup && !G.has('monument-building')) {
                            G.Message({ type: 'tutorial', text: 'You obtained the <b>Belief in the afterlife</b> trait.<br>Now, your people may obtain the <b><font color="fuschia">Monument-building</font></b> research that will lead to your first wonder (or many more).<br>This belief may even evolve into <b>Culture of the afterlife</b>, unlocking more religion-related stuff.', icon: [32, 16, "magixmod"] })
                            bapopup = true
                        }
                        if (G.has('belief in the beforelife') && !bapopup && !G.has('monument-building')) {
                            G.Message({ type: 'tutorial', text: 'You obtained the <b>Belief in the beforelife</b> trait.<br>Now, your people may obtain the <b><font color="fuschia">Monument-building</font></b> research that will lead to your first wonder (or many more).<br>This belief may even evolve into <b>Culture of the beforelife</b>, unlocking more religion-related stuff.', icon: [11, 33, "magixmod"] })
                            bapopup = true
                        }
                        if (G.getRes('cured meat').amount >= 1 && G.getRes('cured seafood').amount >= 1 && !cure && G.has('curing') && !G.has('hunting II')) {
                            G.Message({ type: 'tutorial', text: 'You take a taste of cured meat. Yummy :) You are sure that people will love the taste of cured food just as much as you did!', icon: [32, 17, "magixmod"] })
                            cure = true
                        }
                    }

                    if (G.fps > 30) G.fastTicks--;






                    if (G.has('eotm') && G.achievByName['level up'].won == 0) { //Level up achievement
                        G.achievByName['level up'].won = 1
                        G.middleText('- Completed <font color="#c3a3eb">Level up</font> achievement -', 'slow')
                    }
                    if (G.has('dt9') && G.achievByName['lucky 9'].won == 0) { //Lucky 9 achievement
                        G.achievByName['lucky 9'].won = 1
                        G.middleText('- Completed <font color="#f70054">Lucky 9</font> achievement -', 'slow')
                    }
                    if (G.techN >= 20 && G.achievByName['how to, spear?'].won == 0) { //how to spear
                        G.achievByName['how to, spear?'].won = 1;
                        G.middleText('- Completed <font color="#bbffbb">how to, spear?</font> achievement -', 'slow')
                    }
                    if (G.techN >= 100 && G.achievByName['apprentice'].won == 0) { //Apprentice achievement
                        G.achievByName['apprentice'].won = 1
                        G.middleText('- Completed <font color="silver">Apprentice</font> achievement -', 'slow')
                    }
                    if (G.techN >= 200 && G.achievByName['familiar'].won == 0) { //Apprentice achievement
                        G.achievByName['familiar'].won = 1
                        G.middleText('- Completed <font color="lime">Familiar</font> achievement -', 'slow')
                    }
                    if (G.techN >= 250 && G.achievByName['A+ student'].won == 0) { //Apprentice achievement
                        G.achievByName['A+ student'].won = 1;
                        G.middleText('- Completed <font color="lime">A+ student</font> achievement -', 'slow')
                    }
                    if (G.traitN >= 30 && G.achievByName['traitsman'].won == 0) { //Traitsman achievement
                        G.achievByName['traitsman'].won = 1
                        G.middleText('- Completed <font color="lime">Traitsman</font> achievement -', 'slow')
                    }
                    if ((G.getRes('insight II').amount) == (G.getRes('wisdom II').amount) && G.achievByName['extremely smart'].won == 0 && G.has('eotm')) { //Extremely smart achievement
                        G.achievByName['extremely smart'].won = 1
                        G.middleText('- Completed <font color="purple">Extremely smart</font> achievement -', 'slow')
                    }
                    if (G.achievByName['mausoleum'].won >= 1 && G.achievByName['democration'].won >= 1 && G.achievByName['sacrificed for culture'].won >= 1 && G.achievByName['insight-ly'].won >= 1 && G.achievByName['first glory'].won >= 1 && G.achievByName['apprentice'].won >= 1 && G.achievByName['experienced'].won == 0) { //Experienced
                        G.achievByName['experienced'].won = 1
                        G.middleText('- All achievements from tier <font color="#fa0">1</font> completed! -<br><hr><small>Now, your people will start new runs with an extra 100 fruit!</small>', 'slow')
                    }
                    if (G.achievByName['heavenly'].won >= 1 && G.achievByName['deadly, revenantic'].won >= 1 && G.achievByName['in the underworld'].won >= 1 && G.achievByName['level up'].won >= 1 && G.achievByName['lucky 9'].won >= 1 && G.achievByName['traitsman'].won >= 1 && G.achievByName['smart'].won == 0 && G.achievByName['familiar'].won == 1 && G.achievByName['in the shadows'].won == 1) { //Smart
                        G.achievByName['smart'].won = 1
                        G.middleText('- All achievements from tier <font color="#f70">2</font> completed! -<br><hr><small>For the next run, basic housing uses less land.</small>', 'slow')
                    }
                    if (G.has('dt17') && G.has('sb4') && G.checkPolicy('se03') == 'on' && G.achievByName['not so pious people'].won == 0) {
                        G.achievByName['not so pious people'].won = 1
                        G.middleText('- Completed <font color="cyan">Not so pious people</font> achievement -', 'slow')
                    }
                    //0/0 insight fix
                    if (G.has('wizard wisdom') && G.getUnitAmount('wizard') >= 1) {
                        if (G.getRes('wisdom').amount < 100) {
                            G.gain('wisdom', 1)
                        }
                    }/*year1&2 nerf removed*/

                    if (G.has('t11')) { G.ca = 2; G.cb = 1; };
                    faicost = 1 * (G.getRes("new world point").amount / 6) * ((G.achievByName['faithful'].won / 2) + 1);
                    inscost = 1 * (G.getRes("new world point").amount / 3) * ((G.achievByName['faithful'].won / 2) + 1); //below: display shadows once completed

                    //JUST PLAIN LUCKY
                    var luckynumber = Math.round(Math.random() * 1777777) + 1;
                    if (luckynumber == 777777) {
                        G.achievByName['just plain lucky'].won++;
                        G.playSound(magixURL + 'JustPlainLucky.mp3');
                        G.middleText('<font color="#71cd62">- Congratulations: you struck the lucky number (777777). -<br><small>Completed "Just plain lucky" shadow achievement -<hr width="300">You struck the lucky number -' + G.achievByName['just plain lucky'].won + ' ' + (G.achievByName['just plain lucky'].won == 1 ? 'time' : 'times') + '<br>Impressive!<br>Anyway, enjoy the game!</small>', 'slow');
                    }
                    if (G.achievByName['speedresearcher'].won >= 1 || G.achievByName['speedresearcher II'].won >= 1 || G.achievByName['cruel goal'].won >= 1 || G.achievByName['that was so brutal'].won >= 1) G.achievByName['in the shadows'].won = 1;
                    if (G.traitTick("people", "when while becomes eternity")) {
                        if (G.has('symbI')) G.gain('culture', G.has('symbolic cultural colors') ? 2 : 1, 'symbolism');
                    };//gaining and removing traits every day what else to do if we obtained a trait
                    newDayLines();
                }
            };
            G.funcs['civ blurb'] = function () {
                var str = '';
                str += 'Somewhere in the world...<br>';
                str += '<div class="fancyText shadowed">' +
                    '<font color="#e4eb93"><div class="barred infoTitle">The land of ' + G.getName('civ') + ' </font></div>' +
                    '<div class="barred">Ruler: ' + G.getName('ruler') + '</div>';
                var toParse = '';
                var pop = G.getRes('population').amount;
                if (pop > 0) {
                    toParse += 'Population: <b>' + B(pop) + ' [population,' + G.getName((pop == 1 ? 'inhab' : 'inhabs')) + ']</b>//';
                    var stat = G.getRes('happiness').amount / pop;
                    var text = 'euphoric'; if (stat <= -200) text = G.has('t2') ? 'irreversibly miserable' : 'miserable'; else if (stat <= -100) text = 'mediocre'; else if (stat <= -50) text = 'low'; else if (stat < 50) text = 'average'; else if (stat < 100) text = 'pleasant'; else if (stat < 200) text = 'high';
                    toParse += 'Happiness: <b>' + text + '</b>//';
                    var stat = G.getRes('health').amount / pop;
                    var text = 'exemplary'; if (stat <= -200) text = 'dreadful'; else if (stat <= -100) text = 'sickly'; else if (stat <= -50) text = 'low'; else if (stat < 50) text = 'average'; else if (stat < 100) text = 'good'; else if (stat <= 200) text = 'gleaming';
                    toParse += 'Health: <b>' + text + '</b>//';
                    var stat = G.techN;
                    var text = 'the most advanced'; if (stat <= 28) text = 'pre-prehistoric'; else if (stat <= 50) text = 'prehistoric'; else if (stat <= 100) text = 'skilled'; else if (stat <= 100) text = 'proficient'; else if (stat <= 170) text = 'decent technologically'; else if (stat <= 240) text = 'expanded'; else if (stat <= 325) text = 'advanced'; else if (stat <= 400) text = 'modern'; else if (stat <= 425) text = 'truly advanced';
                    toParse += 'Technological stage: <b>' + text + '</b>//';
                    if (G.has('wizardry')) {
                        var text = 'None'; if (G.has('patron1')) text = '<font color="orange">Fire: ' + G.getTrait('patron1').displayName + '</font>'; else if (G.has('patron2')) text = '<font color="lime">Nature: ' + G.getTrait('patron2').displayName + '</font>'; else if (G.has('patron3')) text = '<font color="#bbbbff">Wind: ' + G.getTrait('patron3').displayName + '</font>'; else if (G.has('patron4')) text = '<font color="purple">Dark: ' + G.getTrait('patron4').displayName + '</font>'; else if (G.has('patron5')) text = '<font color="yellow">Lightning: ' + G.getTrait('patron5').displayName + '</font>'; else if (G.has('patron6')) text = '<font color="#6699FF">Water: ' + G.getTrait('patron6').displayName + '</font>'; else if (G.has('patron7')) text = '<font color="white">Time: ' + G.getTrait('patron7').displayName + '</font>'; else if (G.has('patron8')) text = '<font color="#FF9960">Homepeace: ' + G.getTrait('patron8').displayName + '</font>'; else if (G.has('unknown patron')) text = '<font color="#bbb">Unknown</font>';
                        toParse += 'Patron of the civilization: <b>' + text + '</b>//';
                    }
                }
                else {
                    toParse += 'All ' + G.getName('inhabs') + ' have died out.<br>';
                    if (G.has('wizardry') && (G.has('patron1') || G.has('patron2') || G.has('patron3') || G.has('patron4') || G.has('patron5') || G.has('patron6') || G.has('patron7') || G.has('patron8') || G.has('unknown patron') || G.has('nonpatronage'))) {
                        if (G.has('nonpatronage') && G.getRes('population').amount == 0) toParse += 'They did not have a patron!'; else if (G.getRes('population').amount == 0) toParse += 'Their patron involved ';
                        if (!G.has('nonpatronage')) { if (G.has('patron1')) toParse += '<font color="orange">Fire: ' + G.getTrait('patron1').displayName + '</font>'; else if (G.has('patron2')) toParse += '<font color="lime">Nature: ' + G.getTrait('patron2').displayName + '</font>'; else if (G.has('patron3')) toParse += '<font color="#bbbbff">Wind: ' + G.getTrait('patron3').displayName + '</font>'; else if (G.has('patron4')) toParse += '<font color="purple">Dark: ' + G.getTrait('patron4').displayName + '</font>'; else if (G.has('patron5')) toParse += '<font color="yellow">Lightning: ' + G.getTrait('patron5').displayName + '</font>'; else if (G.has('patron6')) toParse += '<font color="#6699FF">Water: ' + G.getTrait('patron6').displayName + '</font>'; else if (G.has('patron7')) toParse += '<font color="white">Time: ' + G.getTrait('patron7').displayName + '</font>'; else if (G.has('patron8')) toParse += '<font color="#FF9960">Homepeace: ' + G.getTrait('patron8').displayName + '</font>'; else if (G.has('unknown patron')) toParse += 'the unknown one</font>' };
                    }
                }
                str += G.parse(toParse);
                str += '</div>';
                return str;
            }

            G.funcs['found tile'] = function (tile) {
                if (G.getSetting('exploration messages') || G.resets < 3) {
                    G.Message({
                        type: 'good', mergeId: 'foundTile', textFunc: function (args) {
                            if (args.count == 1) {
                                return 'Our explorers have found a new tile: <b>' + args.tile.land.displayName + '</b>.'
                            } else { return 'Our explorers have found ' + B(args.count) + ' new tiles; the latest is <b>' + args.tile.land.displayName + '</b>.' };
                        }, args: { tile: tile, count: 1 }, icon: [14, 4]
                    });
                }
            }

            G.funcs['production multiplier'] = function () {
                var happiness = (G.getRes('happiness').amount / G.getRes('population').amount) / 100;
                happiness = Math.max(-2, Math.min(2, happiness));
                if (t1start == true) {
                    var mult = 1 - ((G.getRes('chranosweak').amount / 2500) * (G.achievByName['patience'].won + 1 / 4));
                    if (G.getRes('population').amount > 0) {
                        if (happiness >= 0) mult = (Math.pow(2, happiness + 1) / 2) - ((G.getRes('chranosweak').amount / 500) * G.achievByName['patience'].won);
                        else mult = 1 / (Math.pow(2, -happiness + 1) / 2) - ((G.getRes('chranosweak').amount / 500) * G.achievByName['patience'].won);
                    }
                    return mult;
                } else if (G.has('t2')) {
                    var mult = 1 - (G.techN / 100 - G.achievByName['unhappy'].won);
                    if (G.getRes('population').amount > 0) {
                        if (happiness >= 0) mult = (Math.pow(2, happiness + 1) / 2);
                        else mult = 1 / (Math.pow(2, -happiness + 1) / 2);
                    }
                    return mult;
                } else {
                    var mult = 1;
                    if (G.getRes('population').amount > 0) {
                        mult = 1.25 * Math.pow(2, 0.75 * happiness);
                    }
                }
                return mult;
            }
            /*=====================================================================================
            RESOURCES - HUMAN RACE
            =======================================================================================*/
            G.resCategories = {
                'main': {
                    name: '<font color="#E66900">Essentials</font>',
                    base: [],
                    side: ['population', 'worker', 'happiness', 'health', 'victory point', 'love', 'spookiness', 'heating capability'],
                },
                'terr': {
                    name: 'Territory',
                    base: ['land'],
                    side: ['tl', 'wtr'],
                },
                'demog': {
                    name: '<font color="#0DA42B">Demographics</font>',
                    base: ['baby', 'child', 'adult', 'elder', 'worker', 'sick', 'wounded'],
                    side: ['population', 'dark decay', 'housing', 'prison space', 'corpse', 'burial spot'],
                },
                'food': {
                    name: '<font color="#0080FF">Food & Water</font>',
                    base: [],
                    side: ['food', 'spoiled food', 'water', 'muddy water', 'food storage', 'juices', 'exotic juices', 'spoiled juices'],
                },
                'build': {
                    name: '<font color="#FFCCCC">Crafting & Construction</font>',
                    base: [],
                    side: ['archaic building materials', 'basic building materials', 'advanced building materials', 'precious building materials', 'material storage'],
                },
                'ore': {
                    name: '<font color="cyan">Ores</font>',
                    base: [],
                    side: [],
                },
                'gear': {
                    name: '<font color="#ddffdd">Gear</font>',
                    base: [],
                    side: [],
                },
                'misc': {
                    name: '<font color="#fdd">Miscellaneous</font>',
                    base: [],
                    side: ['relic'],
                },
                'magic': {
                    name: '<font color="#f83">Magic</font>',
                    base: [],
                    side: ['magic essences', 'mana'],
                },
                'alchemypotions': {
                    name: '<font color="#B266ff">Alchemy - Potions</font>',
                    base: [],
                    side: ['basic brews', 'alcohol brews', 'medicament brews', 'combat potions'],
                },
                'alchemyingredients': {
                    name: '<font color="#B266ff">Alchemy - Ingredients</font>',
                    base: [],
                    side: [],
                },
                'seasonal': {
                    name: 'Seasonal',
                    base: [],
                    side: [],
                },
            };

            new G.Res({ name: 'died this year', hidden: true });
            new G.Res({ name: 'born this year', hidden: true });


            var numbersInfo = '//The number on the left is how many are in use, while the number on the right is how many you have in total.';
            new G.Res({
                name: 'population',
                desc: 'Your [population] represents everyone living under your rule. These are the people that look to you for protection, survival, and glory.',
                meta: true,
                colorGood: '#3b4', colorBad: '#f44',
                visible: true,
                icon: [0, 3],
                tick: function (me, tick) {
                    // NOTE: This is the first tick function in the game executed for resource tick functions. Therefore, it's usually safest to stuff a bunch of stuff here.
                    // Update most people
                    if (me.amount > G.achievByName['mostPeopleDuringRun'].won) G.achievByName['mostPeopleDuringRun'].won = me.amount;
                    if (me.amount > G.achievByName['mostPeople'].won) G.achievByName['mostPeople'].won = me.amount;
                    //this.displayName=G.getName('inhabs');

                    // Update ungratefulness mult to positive happiness gain
                    ungrateful = (G.has('ungrateful tribe') ? G.achievByName['mausoleum'].won > 3 ? 1.4 : (G.achievByName['mausoleum'].won > 2 ? 1.2 : 1) : 1) * (G.has('ungrateful tribe II') ? 0.9 : 1)
                    ungrateful /= 5 / (1 + Math.exp(Math.pow(Math.max(G.year - 25, 0), 0.8) / -200)) - 0.75 // In Desmos: f\left(Y_{ear}\right)=\frac{M}{\left(\frac{5}{1+e^{\frac{\max\left(Y_{ear}-25,\ 0\right)^{0.8}}{-200}}}-0.75\right)}, doesn't factor in tribe of eaters/ungrateful tribe II
                    if (G.has('tribe of eaters')) {
                        //Decrease the effect by half
                        ungrateful = 1 - 0.5 * (1 - ungrateful)
                    }
                    G.getDict('ungrateful tribe').desc = '@people consume 3% less [food] and 2% less [water], but gain ' + (100 - ungrateful * 100).toFixed(1) + '% less [happiness] from <b>everything</b>. ([happiness] loss is not affected.) This negative effect can be decreased by upgrading the [mausoleum], but also gets worse over time.//<small>we\'re getting used to our resources...</small>'
                    if (G.has('t2')) {
                        G.getRes('happiness').amount = -1e100 //Unhappy trial
                    }
                    var amount = (this.displayedAmount / G.getRes('population').displayedAmount);
                    if (G.has('t4')) {
                        if (amount >= 98) {
                            changeHappiness(G.getRes('happiness').amount * -0.8)
                        }
                    }

                    if (me.amount > 0) {
                        //note : we also sneak in some stuff unrelated to population here
                        //policy ticks
                        if (G.checkPolicy('water rituals') == 'on') {
                            if (G.getRes('magic essences').amount <= 150) G.setPolicyModeByName('water rituals', 'off')
                            else G.lose('magic essences', 150, 'rituals')
                        }
                        if (G.checkPolicy('love of honey') == 'on') {
                            if (G.getRes('nature essence').amount <= 250) G.setPolicyModeByName('love of honey', 'off')
                            else G.lose('nature essence', 250, 'rituals')
                        }

                        // Update rituals
                        if (tick % 5 == 0) {
                            var rituals = ['trait rituals'];
                            for (var i in rituals) {
                                if (G.checkPolicy(rituals[i]) == 'on') {
                                    if (!G.has('policy revaluation')) {
                                        if (G.getRes('culture').amount < 1 || G.getRes('faith').amount < 1 || G.getRes('influence').amount < 1) G.setPolicyModeByName(rituals[i], 'off');
                                        else {
                                            G.lose('culture', 1, 'rituals');
                                            G.lose('faith', 1, 'rituals');
                                            G.lose('influence', 1, 'rituals');
                                        }
                                    } else {
                                        if (G.getRes('culture II').amount < 1 || G.getRes('faith II').amount < 1 || G.getRes('influence II').amount < 1) G.setPolicyModeByName(rituals[i], 'off');
                                        else {
                                            G.lose('culture II', 0.02, 'rituals');
                                            G.lose('faith II', 0.02, 'rituals');
                                            G.lose('influence II', 0.02, 'rituals');
                                        }
                                    }
                                }
                            }
                        }
                        if (tick % 20 == 0) {
                            if (!G.has('policy revaluation')) {
                                var rituals = ['fertility rituals', 'harvest rituals', 'flower rituals', 'wisdom rituals'];
                                for (var i in rituals) {
                                    if (G.checkPolicy(rituals[i]) == 'on') {
                                        if (G.getRes('faith').amount < 1) G.setPolicyModeByName(rituals[i], 'off');
                                        else G.lose('faith', 1, 'rituals');
                                    }
                                }
                            } else {
                                var rituals = ['fertility rituals', 'harvest rituals'];
                                for (var i in rituals) {
                                    if (G.checkPolicy(rituals[i]) == 'on') {
                                        if (G.getRes('faith II').amount < 1) G.setPolicyModeByName(rituals[i], 'off');
                                        else G.lose('faith II', 0.1, 'rituals');
                                    }
                                }
                            }
                            var rituals = ['harvest rituals for flowers'];
                            for (var i in rituals) {
                                if (G.checkPolicy(rituals[i]) == 'on') {
                                    if (!G.has('policy revaluation')) {
                                        if ((G.getRes('faith').amount < 1) || (G.getRes('influence').amount < 1)) {
                                            G.setPolicyModeByName(rituals[i], 'off');
                                        } else {
                                            G.lose('faith', 1, 'rituals')
                                            G.lose('influence', 1, 'rituals')
                                        }
                                    } else {
                                        if ((G.getRes('faith II').amount < 1) || (G.getRes('influence II').amount < 1)) {
                                            G.setPolicyModeByName(rituals[i], 'off');
                                        } else {
                                            G.lose('faith II', 0.1, 'rituals')
                                            G.lose('influence II', 0.05, 'rituals')
                                        }
                                    }
                                }
                            }
                            var rituals = ['discovery rituals'];
                            for (var i in rituals) {
                                if (G.checkPolicy(rituals[i]) == 'on') {
                                    if (!G.has('policy revaluation')) {
                                        if ((G.getRes('faith').amount < 2)) {
                                            G.setPolicyModeByName(rituals[i], 'off');
                                        } else {
                                            G.lose('faith', 2, 'rituals')
                                        }
                                    } else {
                                        if ((G.getRes('faith II').amount < 2)) {
                                            G.setPolicyModeByName(rituals[i], 'off');
                                        } else {
                                            G.lose('faith II', 0.2, 'rituals')
                                        }
                                    }
                                }
                            }
                            var rituals = ['crafting & farm rituals'];
                            for (var i in rituals) {
                                if (G.checkPolicy(rituals[i]) == 'on') {
                                    if (!G.has('policy revaluation')) {
                                        if ((G.getRes('faith').amount < 1) || (G.getRes('influence').amount < 1)) {
                                            G.setPolicyModeByName(rituals[i], 'off');
                                        } else {
                                            G.lose('faith', 10, 'rituals')
                                            G.lose('influence', 10, 'rituals')
                                        }
                                    } else {
                                        if ((G.getRes('faith II').amount < 1) || (G.getRes('influence II').amount < 1)) {
                                            G.setPolicyModeByName(rituals[i], 'off');
                                        } else {
                                            G.lose('faith II', 0.1, 'rituals')
                                            G.lose('influence II', 0.05, 'rituals')
                                        }
                                    }
                                }
                            }
                            if (G.has('ritualism II')) {
                                var rituals = ['wisdom rituals', 'flower rituals'];
                                for (var i in rituals) {
                                    if (G.checkPolicy(rituals[i]) == 'on') {
                                        if (G.getRes('faith II').amount < 1) G.setPolicyModeByName(rituals[i], 'off');
                                        else G.lose('faith II', 1, 'rituals');
                                    }
                                }
                            }
                        }

                        // Weird multiplier stuff
                        var eatongathermult = 0.5;
                        var happinessLevel = G.getRes('happiness').amount / me.amount;
                        if (G.checkPolicy('eat on gather') == 'on' && happinessLevel < 70 && G.getRes('food').amount > 0) changeHappiness(me.amount * eatongathermult * (G.has("t7") ? 0.2 : 1), 'instant eating');
                        var productionMult = G.doFunc('production multiplier', 1);

                        var deathUnhappinessMult = 1;
                        if (G.has('fear of death')) deathUnhappinessMult *= 2 * (G.has('bII(normal)') ? 0.95 : 1);
                        if (G.has('acceptance of death')) deathUnhappinessMult /= 2 * (G.has('bII(acceptance)') ? 1.05 : 1);
                        if (G.has('death scepticism')) (G.year % 40 > 20 ? deathUnhappinessMult *= (5 / 3) : deathUnhappinessMult *= 1 / 3);
                        if (G.has('belief in the afterlife')) deathUnhappinessMult /= 2;
                        if (G.has('culture of the afterlife')) deathUnhappinessMult /= 1.5;
                        if (G.has('culture of the beforelife')) { if (parseInt((G.year + 1) / 10) % 2 == 0) deathUnhappinessMult *= 0.9; else deathUnhappinessMult *= 1.1 };
                        if (G.has('hope of revenant abandoning')) deathUnhappinessMult /= 2;
                        if (G.has('dt12')) deathUnhappinessMult *= 1.5;
                        if (G.has('respect for the corpse')) deathUnhappinessMult /= 1.25;
                        if (tick % 3 == 0 && G.checkPolicy('disable eating') == 'off') {
                            //drink water
                            var toConsume = 0;
                            var consumeMult = 1;
                            var happinessAdd = 0;
                            if (G.has('droughtNew') && G.has('drought preparation')) { consumeMult *= 0.95 }
                            if (G.has('ungrateful tribe')) { consumeMult *= 0.98 }
                            if (G.has('dry throats')) { consumeMult *= 0.85; happinessAdd -= 0.04; }
                            else if (G.has('joy of drinking')) { consumeMult *= 1.15; happinessAdd += 0.04; }
                            else if (G.has('unstable drinking habits')) { consumeMult *= (G.year % 31 > 15 ? 1.05 : 0.95); happinessAdd += (G.year % 31 > 15 ? 0.003 : -0.003) } //fluid
                            else if (G.has('unstable consumption habits')) {
                                var n = G.year % 80;
                                if (n < 20) {
                                    consumeMult *= 1.05; happinessAdd += 0.004;
                                }
                                if (n >= 20 && n < 40) {
                                    consumeMult *= 0.95; happinessAdd -= 0.02;
                                } else if (n >= 40 && n < 60) consumeMult *= 1.025;
                                else consumeMult *= 0.975;
                            }//general fluid
                            var weights = {
                                'baby': 0.1 * (G.year == 0 ? 0.9 : 1),
                                'child of Christmas': 0.3 * (G.year == 0 ? 0.9 : 1),
                                'child': 0.3 * (G.year == 0 ? 0.9 : 1),
                                'adult': 0.5 * (G.year == 0 ? 0.9 : 1),
                                'elder': 0.5 * (G.year == 0 ? 0.9 : 1),
                                'sick': 0.4 * (G.year == 0 ? 0.9 : 1),
                                'wounded': 0.4 * (G.year == 0 ? 0.9 : 1),
                                'alchemist': 0.5 * (G.year == 0 ? 0.9 : 1),
                                'prisoner': 0.4 * (G.year == 0 ? 0.9 : 1)
                            };
                            for (var i in weights) { toConsume += G.getRes(i).amount * weights[i]; }
                            var rations = G.checkPolicy('water rations');
                            switch (rations) {
                                case 'none': toConsume = 0; changeHappiness((-me.amount * 3) / (happinessLevel < 0 ? 1 : (2 + happinessLevel / 4)), 'water rations'); G.gain('health', -me.amount * 2, 'water rations'); break;
                                case 'meager': toConsume *= 0.5; changeHappiness((-me.amount * (G.has("t7") ? 0.2 : 1)) / (happinessLevel < 0 ? 1 : (2 + happinessLevel / 4)), 'water rations'); G.gain('health', -me.amount * 0.5, 'water rations'); break;
                                case 'sufficient':
                                    toConsume *= 1;
                                    changeHappiness(((happinessLevel < 0 ? me.amount * 0.2 : -me.amount * 0.2) * (G.has("t7") ? 0.2 : 1)) / (happinessLevel < 0 ? 1 : (2 + happinessLevel / 4)), 'water rations'); break;
                                case 'plentiful': toConsume *= 1.5; changeHappiness((me.amount * (G.has("t7") ? 0.2 : 1)) / (happinessLevel < 0 ? 1.1 : Math.pow(0.5 + happinessLevel * 0.03, 0.4)), 'water rations'); break;
                            }
                            toConsume = randomFloor(toConsume * consumeMult);
                            var consumed = G.lose('water', toConsume, 'drinking');
                            changeHappiness(consumed * happinessAdd * (G.has("t7") ? 0.2 : 0.5), 'water culture');
                            var lacking = toConsume - consumed;
                            if (rations == 'none') lacking = me.amount * 0.5;
                            if (lacking > 0)//are we out of water?
                            {
                                //resort to muddy water
                                if (rations != 'none' && G.checkPolicy('drink muddy water') == 'on') lacking = lacking - G.lose('muddy water', lacking, 'drinking');
                                if (lacking > 0 && G.checkPolicy('disable aging') == 'off')//are we also out of muddy water?
                                {
                                    changeHappiness(-lacking * 5 * (G.has("t7") ? 0.2 : 1), 'no water');
                                    //die off
                                    var toDie = (lacking / 5) * 0.05;
                                    if (G.year < 1) toDie /= 5;//less deaths in the first year
                                    var died = 0;
                                    var weights = {
                                        'baby': 0.1,
                                        'child of Christmas': 0.2,
                                        'child': 0.2,
                                        'adult': 0.5,
                                        'elder': 1,
                                        'sick': 0.4,
                                        'wounded': 0.3,
                                        'alchemist': 0.5,
                                        'prisoner': 0.4
                                    };//the elderly are the first to starve off
                                    var sum = 0; for (var i in weights) { sum += weights[i]; } for (var i in weights) { weights[i] /= sum; }//normalize
                                    for (var i in weights) { var ratio = (G.getRes(i).amount / me.amount); weights[i] = ratio + (1 - ratio) * weights[i]; }
                                    for (var i in weights) { var n = G.lose(i, randomFloor((Math.random() * 0.8 + 0.2) * toDie * weights[i]), 'dehydration'); died += n; }
                                    G.gain('corpse', died, 'dehydration');
                                    changeHappiness(-died * 20 * deathUnhappinessMult, 'dehydration');
                                    G.getRes('died this year').amount += died;
                                    if (G.getSetting('death messages') || G.resets < 3) { //toggle
                                        if (died > 0) G.Message({ type: 'bad', mergeId: 'diedDehydration', textFunc: function (args) { return B(args.died) + ' ' + (args.died == 1 ? 'person' : 'people') + ' died from dehydration.'; }, args: { died: died }, icon: [5, 4] });
                                    };
                                }
                            }

                            //eat food
                            var toConsume = 0;
                            var consumeMult = 1;
                            var happinessAdd = 0;
                            if (G.has('culture of moderation')) { consumeMult *= 0.85; happinessAdd -= 0.1; }
                            if (G.has('ungrateful tribe')) { consumeMult *= 0.97 }
                            if (G.has('ungrateful tribe II')) { consumeMult *= 0.95 }
                            if (G.has('tribe of eaters')) { consumeMult *= 1.2 }
                            else if (G.has('joy of eating')) { consumeMult *= 1.15; happinessAdd += 0.1; }
                            else if (G.has('unstable eating habits')) { consumeMult *= (G.year % 31 > 15 ? 1.05 : 0.95); happinessAdd += (G.year % 31 > 15 ? 0.03 : -0.03) } //fluid
                            else if (G.has('unstable consumption habits')) {
                                var n = G.year % 80;
                                if (n < 20) {
                                    consumeMult *= 1.05; happinessAdd += 0.01;
                                }
                                if (n >= 20 && n < 40) {
                                    consumeMult *= 0.95; happinessAdd -= 0.05;
                                } else if (n >= 40 && n < 60) consumeMult *= 1.025;
                                else consumeMult *= 0.975;
                            }//general fluid

                            var weights = {
                                'baby': 0.2 * (G.year == 0 ? 0.9 : 1), 'child of Christmas': 0.5 * (G.year == 0 ? 0.9 : 1),
                                'child': 0.5 * (G.has('child workforce') ? 1.1 : 1) * (G.year == 0 ? 0.9 : 1),
                                'adult': 1 * (G.year == 0 ? 0.9 : 1),
                                'elder': 1 * (G.year == 0 ? 0.9 : 1),
                                'sick': 0.75 * (G.year == 0 ? 0.9 : 1),
                                'wounded': 0.75 * (G.year == 0 ? 0.9 : 1),
                                'alchemist': 0.5 * (G.year == 0 ? 0.9 : 1),
                                'prisoner': 0.4 * (G.year == 0 ? 0.9 : 1)
                            };
                            for (var i in weights) { toConsume += G.getRes(i).amount * weights[i]; }
                            var rations = G.checkPolicy('food rations');
                            switch (rations) {
                                case 'none': toConsume = 0; changeHappiness((-me.amount * 2) / (happinessLevel < 0 ? 1 : (2 + happinessLevel / 4)), 'food rations'); G.gain('health', -me.amount * 2, 'food rations'); break;
                                case 'meager': toConsume *= 0.5; changeHappiness((-me.amount * (G.has("t7") ? 0.2 : 1)) / (happinessLevel < 0 ? 1 : (2 + happinessLevel / 4)), 'food rations'); G.gain('health', -me.amount * 0.5, 'food rations'); break;
                                case 'sufficient':
                                    toConsume *= 1;
                                    if (Math.abs(happinessLevel) > 100)
                                        changeHappiness((happinessLevel < 0 ? me.amount * 0.5 : -me.amount * 0.5) * (G.has("t7") ? 0.2 : 1) / (happinessLevel < 0 ? 1 : (2 + happinessLevel / 4)), 'food rations'); break;
                                case 'plentiful': toConsume *= 1.5;
                                    changeHappiness((me.amount * (G.has("t7") ? 0.2 : 1)) / (happinessLevel < 0 ? 1 : Math.pow(0.5 + happinessLevel * 0.02, 0.4)), 'food rations'); break;
                            }
                            toConsume = randomFloor(toConsume * consumeMult);
                            var consumed = G.lose('food', toConsume, 'eating');
                            changeHappiness(G.lose('salt', randomFloor(consumed * 0.1), 'salting food') * 5, 'salting food');//use salt
                            changeHappiness(G.lose('spices', randomFloor(consumed * 0.00003), 'spicing food') * (G.has('love of spice') ? 36 : 30), 'spicing food');//use spice
                            changeHappiness(consumed * happinessAdd * (G.has("t7") ? 0.2 : 0.5), 'food culture');
                            var lacking = toConsume - consumed;
                            if (rations == 'none') lacking = me.amount * 1;

                            if (lacking > 0)//are we out of food?
                            {
                                //resort to spoiled food
                                if (rations != 'none' && G.checkPolicy('eat spoiled food') == 'on') lacking = lacking - G.lose('spoiled food', lacking, 'eating');
                                if (lacking > 0 && G.checkPolicy('disable aging') == 'off')//are we also out of spoiled food?
                                {
                                    changeHappiness(-lacking * 5 * (G.has("t7") ? 0.2 : 1), 'no food');
                                    //die off
                                    var toDie = (lacking / 5) * 0.05;
                                    if (G.year < 1) toDie /= 5;//less deaths in the first year
                                    var died = 0;
                                    var weights = {
                                        'baby': 0.1,
                                        'child of Christmas': 0.2,
                                        'child': 0.2,
                                        'adult': 0.5,
                                        'elder': 1,
                                        'sick': 0.4,
                                        'wounded': 0.3,
                                        'alchemist': 0.5,
                                        'prisoner': 0.65
                                    };//the elderly are the first to starve off
                                    var sum = 0; for (var i in weights) { sum += weights[i]; } for (var i in weights) { weights[i] /= sum; }//normalize
                                    for (var i in weights) { var ratio = (G.getRes(i).amount / me.amount); weights[i] = ratio + (1 - ratio) * weights[i]; }
                                    for (var i in weights) { var n = G.lose(i, randomFloor((Math.random() * 0.8 + 0.2) * toDie * weights[i]), 'starvation'); died += n; }
                                    G.gain('corpse', died, 'starvation');
                                    changeHappiness(-died * 20 * deathUnhappinessMult * (G.has("t7") ? 0.2 : 1), 'starvation');
                                    G.getRes('died this year').amount += died;
                                    if (G.getSetting('death messages') || G.resets < 3) { //toggle
                                        if (died > 0) G.Message({ type: 'bad', mergeId: 'diedStarvation', textFunc: function (args) { return B(args.died) + ' ' + (args.died == 1 ? 'person' : 'people') + ' died from starvation.'; }, args: { died: died }, icon: [5, 4] });
                                    };
                                }
                            }
                        }

                        //clothing
                        var objects = { 'hardened clothes': [0.14, 0.2], 'colored clothing': [0.125, 0.1], 'basic clothes': [0.1, 0.1], 'primitive clothes': [0.02, 0.03] };
                        var leftout = me.amount;
                        var prev = leftout;
                        var fulfilled = 0;
                        var happyDressModifier = 1;
                        var healthDressModifier = 1;
                        if (G.has('nudist culture')) { happyDressModifier *= (G.year % 31 > 25 ? 0.9 : 0.95); healthDressModifier *= (G.year % 31 > 25 ? 0.96 : 0.975) };
                        if (G.has('fluid dress code')) happyDressModifier *= (G.year % 31 > 15 ? 1.04 : 0.96);
                        for (var i in objects) {
                            fulfilled = Math.min(me.amount, Math.min(G.getRes(i).amount, leftout));
                            changeHappiness(fulfilled * objects[i][0] * happyDressModifier, 'clothing');
                            G.gain('health', fulfilled * objects[i][1] * healthDressModifier, 'clothing');
                            leftout -= fulfilled;
                        }
                        var dressLackModifierHap = 1;
                        if (G.has('nudist culture')) dressLackModifierHap *= 1.5;
                        if (G.has('strict dress code')) dressLackModifierHap *= 1.5;
                        if (G.has('fluid dress code')) heartModifier *= (G.year % 31 > 15 ? 1.25 : 0.75);
                        if (G.has('dt10')) {
                            changeHappiness(-leftout * 0.3 * (G.has("t7") ? 0.2 : 1) * dressLackModifierHap, 'no clothing'),
                                G.gain('health', -leftout * 0.3 * (G.has("t7") ? 0.2 : 1), 'no clothing');
                        } else {
                            changeHappiness(-leftout * 0.15 * (G.has("t7") ? 0.2 : 1) * dressLackModifierHap, 'no clothing'),
                                G.gain('health', -leftout * 0.15 * (G.has("t7") ? 0.2 : 1), 'no clothing');
                        }


                        //fire
                        var objects = { 'fire pit': [5, 0.1, 0.1] };
                        var leftout = me.amount;
                        var prev = leftout;
                        var fulfilled = 0;
                        var happyHeartModifier = 1;
                        var healthHeartModifier = 1;
                        if (G.has('cold heart')) { happyHeartModifier *= 0.9; healthHeartModifier *= (G.year % 31 > 25 ? 0.975 : 0.985) };
                        if (G.has('hot heart')) { happyHeartModifier *= 1.25 };
                        if (G.has('fluid heart')) happyHeartModifier *= (G.year % 31 > 15 ? 1.05 : 0.95);
                        for (var i in objects) {
                            fulfilled = Math.min(me.amount, Math.min(G.getRes(i).amount * objects[i][0] * (G.has('frost') ? 0.4 : 1), leftout));
                            changeHappiness(fulfilled * objects[i][1] * happyHeartModifier, 'warmth & light');
                            G.gain('health', fulfilled * objects[i][2] * healthHeartModifier, 'warmth & light');
                            leftout -= fulfilled;
                        }
                        var heartModifier = 1;
                        if (G.has('cold heart')) heartModifier *= 1.5;
                        if (G.has('hot heart')) heartModifier *= 0.5;
                        if (G.has('fluid heart')) heartModifier *= (G.year % 31 > 15 ? 1.25 : 0.75);
                        if (G.has('dt11')) {
                            changeHappiness(-leftout * 0.2 * (G.has("t7") ? 0.2 : 1) / heartModifier, 'cold & darkness'),
                                G.gain('health', -leftout * 0.2 * (G.has("t7") ? 0.2 : 1), 'cold & darkness');
                        } else {
                            changeHappiness(-leftout * 0.1 * (G.has("t7") ? 0.2 : 1) / heartModifier, 'cold & darkness'),
                                G.gain('health', -leftout * 0.1 * (G.has("t7") ? 0.2 : 1), 'cold & darkness');
                        }

                        //homelessness
                        var homeless = Math.max(0, (G.getRes('population').amount) - G.getRes('housing').amount);
                        if (G.has('sedentism') && me.amount > 15 && homeless > 0) {
                            if (G.getSetting('homelessness messages') || G.resets < 3) {
                                if (tick % 40 == 0) G.Message({ type: 'bad', mergeId: 'homeless', textFunc: function (args) { return B(args.n) + ' ' + (args.n == 1 ? 'person is' : 'people are') + ' homeless.<br>Homelessness with more than 15 population leads to lower birth rates.'; }, args: { n: homeless }, replaceOnly: true, icon: [12, 4] });
                            }
                        }

                        //age
                        if (G.checkPolicy('disable aging') == 'off') {
                            if (G.year >= 10)//no deaths of old age the first 10 years
                            {
                                var n = randomFloor(G.getRes('elder').amount * 0.00035);
                                G.gain('corpse', n, 'old age');
                                G.lose('elder', n, 'old age');
                                changeHappiness(-n * 5 * deathUnhappinessMult * (G.has("t7") ? 0.2 : 1), 'death');
                                if (G.getSetting('homelessness messages') || G.resets < 3) { //toggle
                                    if (n > 0) G.Message({ type: 'bad', mergeId: 'diedAge', textFunc: function (args) { return B(args.n) + ' ' + (args.n == 1 ? 'person' : 'people') + ' died of old age.'; }, args: { n: n }, icon: [13, 4] });
                                }
                                G.getRes('died this year').amount += n;
                            }
                            if (G.year >= 5)//no aging adults the first 5 years
                            {
                                var n = randomFloor(G.getRes('adult').amount * 0.0002);
                                G.gain('elder', n); G.lose('adult', n, 'aging up');
                            }
                            var n = randomFloor(G.getRes('child').amount * 0.002); G.gain('adult', n, 'aging up'); G.lose('child', n, 'aging up');
                            var n = randomFloor(G.getRes('baby').amount * 0.005); G.gain('child', n, 'aging up'); G.lose('baby', n, 'aging up');

                            //births
                            var parents = G.getRes('adult').amount + G.getRes('elder').amount;
                            if (parents >= 2)//can't make babies by yourself
                            {
                                var born = 0;
                                var birthRate = 1;
                                if (me.amount < 100) birthRate *= 3;//more births if low pop
                                if (me.amount < 10) birthRate *= 3;//even more births if very low pop
                                if (G.checkPolicy('fertility rituals') == 'on') birthRate *= 1.2;
                                if (G.checkPolicy('population control') == 'forbidden') birthRate *= 0;
                                else if (G.checkPolicy('population control') == 'limited') birthRate *= 0.5;
                                birthRate *= productionMult;
                                if (homeless > 0 && me.amount > 15) birthRate *= 0.01;//harder to make babies if you have more than 15 people and some of them are homeless
                                var n = randomFloor(G.getRes('adult').amount * 0.0003 * birthRate); G.gain('baby', n, 'birth'); changeHappiness(n * 10 * (G.has("t7") ? 0.75 : 1), 'birth'); born += n;
                                if (day + leap >= 40 && day + leap <= 46 && G.has('parental love')) G.gain('love xp', n, 'birth');
                                var n = randomFloor(G.getRes('elder').amount * 0.00003 * birthRate); G.gain('baby', n, 'birth'); changeHappiness(n * 10 * (G.has("t7") ? 0.75 : 1), 'birth'); born += n;
                                if (day + leap >= 40 && day + leap <= 46 && G.has('parental love')) G.gain('love xp', n / 2, 'birth');
                                G.getRes('born this year').amount += born;
                                if (G.getSetting('birth messages') || G.resets < 3) {
                                    if (born > 0) G.Message({ type: 'good', mergeId: 'born', textFunc: function (args) { return B(args.born) + ' ' + (args.born == 1 ? 'baby has' : 'babies have') + ' been born.'; }, args: { born: born }, icon: [2, 3] });
                                }
                            }

                            //health (diseases and wounds)
                            //note : when a sick or wounded person recovers, they turn into adults; this means you could get a community of old people fall sick, then miraculously age back. life is a mystery

                            //sickness
                            var toChange = 0.00003;
                            if (G.getRes('health').amount < 0) {
                                toChange *= (1 + Math.abs(G.getRes('health').amount / me.amount));
                            }
                            if (toChange > 0) {
                                if (G.year < 5) toChange *= 0.5;//less disease the first 5 years
                                if (me.amount <= 15) toChange *= 0.5;
                                if (G.checkPolicy('flower rituals') == 'on') toChange *= 0.8;
                                var changed = 0;
                                var handwashEffect = G.has('handwashC') ? 0.999 : (G.has('handwashM') ? 0.9996 : 1)
                                var weights = {
                                    'baby': 2,
                                    'child of Christmas': 1.5 * handwashEffect,
                                    'child': 1.5 * handwashEffect,
                                    'adult': 1 * handwashEffect,
                                    'elder': 2 * handwashEffect
                                };
                                if (G.checkPolicy('child workforce') == 'on') weights['child'] *= 2;
                                if (G.checkPolicy('elder workforce') == 'on') weights['elder'] *= 2;
                                if (G.year < 5) weights['adult'] = 0;//adults don't fall sick the first 5 years
                                for (var i in weights) { var n = G.lose(i, randomFloor(Math.random() * G.getRes(i).amount * toChange * weights[i])); changed += n; }
                                G.gain('sick', changed, 'disease');
                                if (G.getSetting('disease messages') || G.resets < 3) { //toggle
                                    if (changed > 0) G.Message({ type: 'bad', mergeId: 'fellSick', textFunc: function (args) { return B(args.n) + ' ' + (args.n == 1 ? 'person' : 'people') + ' fell sick.'; }, args: { n: changed }, icon: [6, 3] });
                                };
                            }
                            //sickness : death and recovery
                            var sickMortality = 0.005;
                            var changed = 0;
                            var n = G.lose('sick', randomFloor(Math.random() * G.getRes('sick').amount * sickMortality), 'disease'); G.gain('corpse', n, 'disease'); changed += n;
                            changeHappiness(-changed * 15 * deathUnhappinessMult * (G.has("t7") ? 0.2 : 1), 'death');
                            G.getRes('died this year').amount += changed;
                            if (G.getSetting('death messages') || G.resets < 3) { //toggle
                                if (changed > 0) G.Message({ type: 'bad', mergeId: 'diedSick', textFunc: function (args) { return B(args.n) + ' ' + (args.n == 1 ? 'person' : 'people') + ' died from disease.'; }, args: { n: changed }, icon: [5, 4] });
                            };
                            var sickHealing = 0.01;
                            if (G.checkPolicy('flower rituals') == 'on') sickHealing *= 1.25;
                            var changed = 0;
                            var n = G.lose('sick', randomFloor(Math.random() * G.getRes('sick').amount * sickHealing), '<font color="lime">healing</font>'); G.gain((G.checkPolicy('elder workforce') == 'on') ? 'elder' : 'adult', n, 'healing from sickness'); changed += n;
                            changeHappiness(changed * 10 * (G.has("t7") ? 0.2 : 1), 'recovery');
                            if (G.getSetting('disease messages') || G.resets < 3) {
                                if (changed > 0) G.Message({ type: 'good', mergeId: 'sickRecovered', textFunc: function (args) { return B(args.n) + ' sick ' + (args.n == 1 ? 'person' : 'people') + ' got better.'; }, args: { n: changed }, icon: [4, 3] });
                            };

                            //wounds
                            var toChange = 0.00003;
                            if (toChange > 0) {
                                if (G.year < 5) toChange *= 0.5;//less wounds the first 5 years
                                if (me.amount <= 15) toChange *= 0.5;
                                var changed = 0;
                                var weights = {
                                    'baby': 2,
                                    'child of Christmas': 1.5,
                                    'child': 1.5,
                                    'adult': G.checkPolicy('elder workforce') == 'on' ? 1.3 : 1,
                                    'elder': 2,
                                    'alchemist': 0.5
                                };
                                if (G.checkPolicy('child workforce') == 'on') weights['child'] *= G.checkPolicy('elder workforce') == 'on' ? 4 : 3;
                                if (G.checkPolicy('elder workforce') == 'on') weights['elder'] *= 3;
                                if (G.year < 5) weights['adult'] = 0;//adults don't get wounded the first 5 years
                                for (var i in weights) { var n = G.lose(i, randomFloor(Math.random() * G.getRes(i).amount * toChange * weights[i])); changed += n; }
                                G.gain('wounded', changed, 'accident');
                                if (G.getSetting('accident messages') || G.resets < 3) {
                                    if (changed > 0) G.Message({ type: 'bad', mergeId: 'gotWounded', textFunc: function (args) { return B(args.n) + ' ' + (args.n == 1 ? 'person' : 'people') + ' got wounded.'; }, args: { n: changed }, icon: [7, 3] });
                                };
                            }
                            //wounds : death and recovery
                            var woundMortality = 0.005;
                            var changed = 0;
                            var n = G.lose('wounded', randomFloor(Math.random() * G.getRes('wounded').amount * woundMortality), 'wounds'); G.gain('corpse', n, 'wounds'); changed += n;
                            changeHappiness(-changed * 15 * deathUnhappinessMult * (G.has("t7") ? 0.2 : 1), 'death');
                            G.getRes('died this year').amount += changed;
                            if (G.getSetting('death messages') || G.resets < 3) { //toggle
                                if (changed > 0) G.Message({ type: 'bad', mergeId: 'diedWounded', textFunc: function (args) { return B(args.n) + ' ' + (args.n == 1 ? 'person' : 'people') + choose([' died from their wounds.', ' died from their injuries.', ' died from being injured.', ' died from severe injuries.']); }, args: { n: changed }, icon: [5, 4] });
                            }
                            var sickHealing = 0.005;
                            var changed = 0;
                            var n = G.lose('wounded', randomFloor(Math.random() * G.getRes('wounded').amount * sickHealing), '<font color="lime">healing</font>'); G.gain(G.checkPolicy('elder workforce') == 'on' ? 'elder' : 'adult', n, 'healing from injury'); changed += n;
                            changeHappiness(changed * 10 * (G.has("t7") ? 0.2 : 1), 'recovery');
                            if (G.getSetting('accident messages') || G.resets < 3) {
                                if (changed > 0) G.Message({ type: 'good', mergeId: 'woundedRecovered', textFunc: function (args) { return B(args.n) + ' ' + (args.n == 1 ? 'person' : 'people') + choose([' recovered from their wounds.', ' recovered from their injuries.']); }, args: { n: changed }, icon: [4, 3] });
                            }
                        }
                    }
                    else if (G.T > 0 && G.day + (G.year * 300) > 1) { G.GameOver(); }
                    if (me.amount >= 1000 && G.achievByName['wild tribe'].won == 0) {
                        G.achievByName['wild tribe'].won = 1;
                        G.middleText('- Completed <font color="#ffb876">Wild tribe</font> achievement -');
                    }
                    if (me.amount >= 10000 && G.achievByName['rising star'].won == 0) {
                        G.achievByName['rising star'].won = 1;
                        G.middleText('- Completed <font color="pink">Rising star</font> achievement -');
                    }
                    if (me.amount >= 150000 && G.achievByName['progressive city'].won == 0) {
                        G.achievByName['progressive city'].won = 1;
                        G.middleText('- Completed <font color="#ffbc2b">Progressive city</font> achievement -');
                    }
                    if (me.amount >= 500000 && G.achievByName['metropoly'].won == 0) {
                        G.achievByName['metropoly'].won = 1;
                        G.middleText('- Completed <font color="#00c75c">Metropoly</font> achievement -');
                    }
                    if (me.amount >= 1000000 && G.achievByName['a huge city made of the smaller cities'].won == 0) {
                        G.achievByName['a huge city made of the smaller cities'].won = 1
                        G.middleText('- Completed <font color="#c4b400">A huge city made of the smaller cities</font> achievement -')
                    }

                    if (G.getRes('sick').amount > 0 && G.year < 1 && G.day < 10) {
                        var n = G.getRes('sick').amount;
                        G.lose('sick', n); G.gain('adult', n);
                    };

                    // Softcap happiness amounts (while rendering only goes from -200% to 200% internally they aren't capped by default)
                    if (me.amount > 1 && !G.has('t2')) {
                        var happiness = G.getRes('happiness').amount
                        var h = happiness / me.amount
                        if (h > 200) {
                            G.getRes('happiness').amount = (happiness - 200 * me.amount) * 0.9 + 200 * me.amount
                        } else if (h < -200) {
                            G.getRes('happiness').amount = (happiness + 200 * me.amount) * 0.9 - 200 * me.amount
                        }
                    }
                },
            });
            new G.Res({
                name: 'baby',
                desc: '[baby,Babies] are born when you have 2 or more [adult]s left to their own devices.//Any 2 adults can have babies, even if they are working. [elder]s can also have babies, though much slower.//[happiness] affects how many babies your people make.//Over time, babies will grow into [child,Children], although [baby,Babies] will only consume 40% as much as [child,Kids].',
                startWith: 0,
                visible: true,
                partOf: 'population',
                icon: [2, 3],
            });
            new G.Res({
                name: 'child',
                desc: '[baby,Babies] grow into [child,Children] gradually.//After a while, they will grow up into [adult]s.//Children will eat and drink half as much as adults.//Children do not count as [worker]s, unless special measures are in place.',
                startWith: 2,
                visible: true,
                partOf: 'population',
                icon: [3, 3],
            });
            new G.Res({
                name: 'adult',
                desc: '[adult]s grow from [child,Children] over time.//They eventually age into [elder,Elders].//Generally, adults make up most of your [worker,workforce].',
                startWith: 5,
                visible: true,
                partOf: 'population',
                icon: [4, 3],
            });
            new G.Res({
                name: 'elder',
                desc: '[adult]s that grow old are [elder,Elders].//Elders may end up [corpse,dying] of old age.//Elders do not count as [worker]s, unless special measures are in place.',
                startWith: 1,
                visible: true,
                partOf: 'population',
                icon: [5, 3],
            });
            new G.Res({
                name: 'sick',
                desc: '[adult,People] can fall [sick,sick] when your [health] levels are too low. They do not [worker,work], but may be healed over time.',
                partOf: 'population',
                icon: [6, 3],
                colorBad: 'lime', colorGood: '#f44'
            });
            new G.Res({
                name: 'wounded',
                desc: '[adult,People] may get [wounded,wounded] due to work injuries. They do not [worker,work], but may slowly get better over time.',
                partOf: 'population',
                icon: [7, 3],
                colorBad: 'lime', colorGood: '#f44'
            });
            new G.Res({
                name: 'corpse',
                desc: '[corpse,Corpses] are the remains of [population,people] that died, whether from old age, an accident, disease, starvation, or a brutal war.//Corpses left in the open air tend to spread diseases and make people unhappy, which tend to get even worse as superstitions develop. To mitigate this, you need a [burial spot] for each corpse.',
                startWith: 0,
                colorBad: 'lime', colorGood: '#f44',
                icon: [8, 3],
                tick: function (me, tick) {
                    var graves = G.getRes('burial spot');
                    if (G.getRes('population').amount > 0) {
                        if (!G.has('respect for the corpse') && !G.has("belief in the beforelife")) {
                            if (G.has('ritual necrophagy'))//butcher 3% of corpses every day, you weirdo
                            {
                                var changed = 0;
                                var n = G.lose('corpse', randomFloor(G.getRes('corpse').amount * 0.03), '<font color="#f70054">necrophagy</font>'); G.gain('meat', n * 30, '<font color="#f70054">necrophagy</font>'); G.gain('bone', n * 5, '<font color="#f70054">necrophagy</font>'); changed += n;
                                if (n > 0) {
                                    G.pseudoGather(G.getRes('faith'), changed);
                                    G.gain('health', -changed * 0.1 * (G.has('vampirism') && (day + leap >= 289 && day + leap <= 305) ? 1.1 : 1), 'necrophagy' + (G.has('vampirism') && (day + leap >= 289 && day + leap <= 305) ? ' & vampirism ' : ''));
                                }
                            }
                            if (G.has('art of death'))//use 1% of corpses every day for art purposes
                            {
                                AoD();
                            }
                        }
                        if (me.amount >= 1) {
                            //bury slowly

                            if (graves.amount > graves.used && G.getRes('dark decay').hidden == true) {
                                if (G.checkPolicy('se08') == 'off') {//BURI'O DAK
                                    var amount = Math.min(graves.amount - graves.used, Math.max(1, randomFloor(me.amount * 0.1)));
                                    graves.used += amount; G.lose('corpse', amount, 'burial');
                                    changeHappiness(amount * 2, 'burial');
                                } else {
                                    var amount = Math.min(graves.amount - graves.used, Math.max(1, randomFloor(me.amount * 0.1)));
                                    graves.used += amount; G.lose('corpse', amount * 1.1, 'burial');
                                    changeHappiness(amount * 2, 'burial');
                                }
                            }

                            if (G.has('revenants') && (day + leap <= 40 && day + leap >= 46 && !G.has('peace') || Math.random() < 0.1)) {
                                if (G.day % 25 === 0) {
                                    var wildCorpses = randomFloor(G.getRes('corpse').amount * 0.00125 * (G.traitByName['revenants'].yearOfObtainment ? (1 + Math.pow(G.year - G.traitByName['revenants'].yearOfObtainment, 0.9) * 0.001) : 1))
                                    G.lose('corpse', wildCorpses, 'revenge of corpses');
                                    G.lose('dark essence', Math.random() * 4 + 2, 'revenge of corpses');
                                    G.gain('wild corpse', wildCorpses, 'revenge of corpses');
                                } else if (G.day % 35 == 0) {
                                    G.lose('corpse', 1, 'revenge of corpses');
                                    G.gain('wild corpse', 1, 'revenge of corpses');
                                } else if (G.day % 60 == 0) {
                                    G.lose('corpse', 2, 'revenge of corpses');
                                    G.gain('wild corpse', 2, 'revenge of corpses');
                                }
                            }

                        }
                    }
                    if (graves.amount < graves.used) {
                        //more occupied burial spots than total burial spots? this means we've been deleting burial spot that was already containing corpses; exhume those suckers
                        var toExhume = randomFloor((graves.used - graves.amount) * 0.1);
                        graves.used -= toExhume;
                        G.gain('corpse', toExhume, 'not enough burial spots');
                        changeHappiness(-toExhume * 2, 'not enough burial spots');//this fixes a funny little thing where you can kinda cheese happiness by rapidly getting and removing burial spots (which are free)
                    }

                    //Very slow normal corpse decay
                    if (G.day % 30 == 0) {
                        var toSpoil = me.amount * 0.0075;
                        var spent = G.lose('corpse', randomFloor(toSpoil), 'decay');
                    }

                    var unhappiness = 0.01;
                    if (G.has('burial')) unhappiness *= 1.5;
                    if (G.has('belief in revenants')) unhappiness *= 2 * (G.has('bII(normal)') ? 0.95 : 1);
                    changeHappiness(-me.amount * unhappiness, 'corpses');
                    G.gain('health', -me.amount * 0.02, 'corpses');
                    //Corpse decay trait: Normal decay still works dark wormholes provide additional decay
                    if (G.has('corpse decay')) {
                        var toSpoil = me.amount * 0.002 * (G.getRes('corpsedecaypoint').amount);
                        var spent = G.lose('corpse', randomFloor(toSpoil), 'corpse decay from wormholes');
                    }
                },
            });
            new G.Res({
                name: 'burial spot',
                desc: 'Each [burial spot] has enough room for one [corpse], letting you prevent the spread of disease and unhappiness.//Your people will slowly bury [corpse]s if there are enough [burial spot]s.//The number on the left is how many burial spots are occupied, while the number on the right is how many you have in total.',
                icon: [13, 4],
                displayUsed: true,
            });
            new G.Res({
                name: 'tl',
                displayName: 'Total land',
                desc: 'This is the combined amount of land from <b>all</b> worlds that your people have discovered and explored this run.',
                icon: [23, 18, "magixmod"],
                meta: true,
            });
            new G.Res({
                name: 'housing',
                desc: 'Each [housing,Housing spot] accommodates one [population,Person].//Beyond the 15 people a basic nomad tribe can support, your population will only grow if you have unoccupied [housing].//Homelessness (having less housing than population) will lead to unhappiness and disease.//The number on the left is how much housing is occupied, while the number on the right is how much housing room you have in total.',
                icon: [12, 4],
                fractional: true,
                getDisplayAmount: function () {
                    return B(Math.min(this.displayedAmount, G.getRes('population').displayedAmount)) + '<wbr>/' + B(this.displayedAmount);
                },
            });
            new G.Res({
                name: 'land',
                desc: 'Each tile of territory you own grants you some [land] (100 per fully-explored non-ocean tile normally) upon which you can construct buildings. If, for some reason, you find yourself with less [land] than your buildings are using, some of them will start to crumble away.//The number on the left is how much [land] is occupied, while the number on the right is how much of it you have in total.',
                icon: [14, 4],
                displayUsed: true,
                partOf: 'tl',
                tick: function (me) {
                    if (!G.has('beyond the edge')) {
                        me.amount = Math.ceil(G.currentMap.territoryByOwner[1] * 100);
                    } else if (G.has('mirror world 2/2') && G.has('beyond the edge II') && G.has('beyond the edge')) {
                        me.amount = Math.ceil(G.currentMap.territoryByOwner[1] * 100) * 1.07 * 2;
                    } else if (G.has('beyond the edge II') && G.has('beyond the edge')) {
                        me.amount = Math.ceil(G.currentMap.territoryByOwner[1] * 100) * 1.07;
                    } else if (G.has('beyond the edge')) {
                        me.amount = Math.ceil(G.currentMap.territoryByOwner[1] * 100) * 1.015;
                    }
                    me.amount -= G.getRes('wtrDecay').amount
                    if (me.amount < 1) {
                        me.amount = 0
                        G.lose('population', G.getRes('population').amount, 'out of land')
                        G.dialogue.popup(function (div) {
                            return '<div style="width:320x;min-height:200px;height:75%;">' +
                                '<div class="fancyText title"><font color="#f70054">Trial failed</font></div>' +
                                '<tt><div class="fancyText">You failed the Ocean trial by running out of land.</tt>' +
                                '<br>Your people had nowhere to stay and perished...quite sad.<br>' +
                                '<br><br>' +
                                'But you can try again by reaching the Pantheon again and choosing Ocean.</div><br>' +
                                'Technical note: Start a new run by opening the settings.' +
                                '</div></div>'
                        })
                    }
                    if (!G.has('beyond the edge')) {
                        if (me.amount > G.achievByName['mostPeopleLand'].won) G.achievByName['mostPeopleLand'].won = me.amount;
                    } else if (G.has('mirror world 2/2') && G.has('beyond the edge II') && G.has('beyond the edge')) {
                        if (me.amount / 1.07 / 2 > G.achievByName['mostPeopleLand'].won) G.achievByName['mostPeopleLand'].won = me.amount / 1.07 / 2;
                    } else if (G.has('beyond the edge II') && G.has('beyond the edge')) {
                        if (me.amount / 1.07 > G.achievByName['mostPeopleLand'].won) G.achievByName['mostPeopleLand'].won = me.amount / 1.07;
                    } else if (G.has('beyond the edge') && !G.has('beyond the edge')) {
                        if (me.amount / 1.015 > G.achievByName['mostPeopleLand'].won) G.achievByName['mostPeopleLand'].won = me.amount / 1.015;
                    }
                },
                getDisplayAmount: function () {
                    return B(this.displayedUsedAmount) + '<wbr>/' + B(this.displayedAmount);
                },
            });
            new G.Res({
                name: 'wtr',
                displayName: 'Water',
                desc: 'Every tile of ocean you own grants you some [wtr] (100 for every fully explored ocean tile normally) upon which you...cannot construct a lot. //You can only use 10% of the water in the whole world! If, for some reason, you find yourself with less available water than your buildings are using, some of them will start to slowly crumble away.<>The number on the left is how much water is occupied, the number on the middle is how much [wtr] you can use, while the number on the right is how much explored water you have in total',
                icon: [25, 18, "magixmod"],
                displayUsed: true,
                getDisplayAmount: function () {
                    if (G.tick % 50 == 0) {
                        G.ocean = 0;
                        for (var I in G.currentMap.tilesByOwner[1]) {
                            if (G.currentMap.tilesByOwner[1][I].land.ocean == true) G.ocean += G.currentMap.tilesByOwner[1][I].explored;
                        };
                        G.ocean += (G.getRes('wtrDecay').amount - G.getRes('deep ocean').amount) * 0.01
                        var mult = 10 + (G.has('at2') ? 0.1 : 0);
                        if (!G.has('beyond the edge')) {
                            G.getRes('wtr').amount = G.ocean * mult;
                        } else if (G.has('mirror world 2/2') && G.has('beyond the edge II') && G.has('beyond the edge')) {
                            G.getRes('wtr').amount = G.ocean * mult * 1.07 * 2;
                        } else if (G.has('beyond the edge II') && G.has('beyond the edge')) {
                            G.getRes('wtr').amount = G.ocean * mult * 1.07;
                        } else if (G.has('beyond the edge')) {
                            G.getRes('wtr').amount = G.ocean * mult * 1.015;
                        }
                    }
                    return B(this.displayedUsedAmount) + '<wbr>/' + B(this.displayedAmount) + '<wbr>/' + B(this.displayedAmount * 10);
                },
            });
            new G.Res({
                name: 'worker',
                desc: 'Your [worker,Workforce] is the part of your [population] that is ready to work.//The number on the left is how many are currently being employed, while the number on the right is your total amount of workers.',
                startWith: 0,
                visible: true,
                icon: [1, 3],
                displayUsed: true,
                tick: function (me, tick) {
                    me.amount = G.getRes('adult').amount + G.getRes('prisoner').amount; //we'll change it in R55
                    if (G.checkPolicy('elder workforce') == 'on') me.amount += G.getRes('elder').amount - G.getRes('elder').used; //wizard can't work at factory and be wizard at the same time.
                    if (G.checkPolicy('child workforce') == 'on') me.amount += G.getRes('child').amount;
                    if (me.used > me.amount) {
                        //TODO maybe ?
                        //select all units that require workers
                        //pick some at random until we have enough people to reach the difference between workers and workers needed
                        //kill them if the unit has no gizmos, otherwise reduce the unit's percent by 1 rank
                        //maybe this could be generalized to work will all requirements
                        //or not ? some requirements have unique conditions, such as : 10 factories running at 50% only use half the workers and tools, but still need 10 land
                        //maybe this could just be a flag on land, reqIgnoresPercent=true
                        //but then how do we deal with the situation where we have less land available than land used (like after a war where we lost tiles) ? the desired behavior would be that buildings slowly die off until we're under the threshold
                        //maybe just implement a "onReqFail" function that overrides the default behavior
                    }
                },
            });

            new G.Res({
                name: 'happiness',
                desc: '[happiness] describes the global level of well-being of your [population].//Happy people work even harder and improve unit speeds, while unhappy people tend to slack off; at +100% happiness, most of your workers will work twice as fast, while at -100% happiness, they will work twice as slow. This goes on up to +200% and -200%.//Several things improve happiness, such as good [food], entertainment, or luxury items; things that bring down [happiness] are spoiled food, starvation, disease, death and harsh policies.//Happiness and unhappiness both tend to level off over time, or reach one of the limits.',
                startWith: 0,
                visible: true,
                icon: [3, 4],
                colorGood: 'lime', colorBad: '#f44',
                fractional: true,
                getDisplayAmount: function () {
                    if (G.getRes('population').amount <= 0) return '-';
                    var amount = (this.displayedAmount / G.getRes('population').displayedAmount);
                    if (G.checkPolicy('se07') == 'on') {//Herbalia's backfire
                        if (amount > 175) amount = 175;
                        if (amount < -200) amount = -200;
                    } else if (G.has('t2')) {
                        if (amount > 200) amount = 200;
                        if (amount < -200) amount = Math.max(-200 - (G.techN / 2) - G.getRes('trial point').amount, -400);
                    } else if (G.has('t4')) {
                        if (amount > 98) amount = 98;
                        if (amount < -200) amount = -200;
                    } else {
                        if (amount > 200) amount = 200;
                        if (amount < -200) amount = -200;
                    }
                    return B(amount) + '%';
                },
                getIcon: function (me) {
                    if (G.getRes('population').amount <= 0) return [5, 4];
                    else {
                        var amount = me.amount / G.getRes('population').amount;
                        if (amount >= 100) return [4, 4];
                        else if (amount >= 50) return [3, 4];
                        else if (amount >= -50) return [2, 4];
                        else if (amount >= -100) return [1, 4];
                        else return [0, 4];
                    }
                },
            });

            new G.Res({
                name: 'health',
                desc: '[health] represents the average physical condition of your [population].//Lower health tends to make people [sick] and unhappy, while higher health will make people happier.//Health can be affected by a number of things, including eating raw or spoiled [spoiled food], drinking [muddy water], poor living conditions, and ongoing plagues.',
                startWith: 0,
                visible: true,
                icon: [3, 5],
                colorGood: 'lime', colorBad: '#f44',
                fractional: true,
                tick: function (me, tick) {
                    if (tick % 99 == 44) {
                        if (G.getRes('health').amount <= -300 * G.getRes('population').amount) me.amount = -300 * G.getRes('population').amount; //balance change
                        if (G.getRes('health').amount >= 300 * G.getRes('population').amount) me.amount = 300 * G.getRes('population').amount;
                    }
                    if (G.getRes('population').amount > 0 && tick % 2 == 0) {
                        //note : this is "soft" sickness; it affects the chance of people falling sick
                        //G.getRes('happiness').amount+=(me.amount-G.getRes('happiness').amount)*0.01;

                        var sickness = 0.1;
                        sickness += Math.pow(Math.max(0, G.getRes('population').amount - 50), 0.1) * 0.1;//more people means more contagion
                        G.gain('health', -G.getRes('population').amount * (Math.random() * sickness), 'disease');//people randomly get sick
                        var recovery = 0.98;
                        me.amount *= recovery;//people recover over time
                    }
                    if (G.has('t4') && G.year >= 3) {
                        G.lose('health', 1 + (G.year * (G.achievByName['hunted'].won + 1.5) * 0.35), 'Trial')
                    }
                    changeHappiness(me.amount * 0.001, 'health');
                },
                getDisplayAmount: function () {
                    if (G.getRes('population').amount <= 0) return '-';
                    var amount = this.displayedAmount / G.getRes('population').displayedAmount;
                    if (amount > 200) amount = 200;
                    if (amount < -200) amount = -200;
                    return B(amount) + '%';
                },
                getIcon: function (me) {
                    if (day >= 40 && day <= 46) {
                        if (G.getRes('population').amount <= 0) return [8, 17, 'seasonal'];
                        else {
                            var amount = me.amount / G.getRes('population').amount;
                            if (amount >= 100) return [7, 17, 'seasonal'];
                            else if (amount >= 50) return [6, 17, 'seasonal'];
                            else if (amount >= -50) return [5, 17, 'seasonal'];
                            else if (amount >= -100) return [4, 17, 'seasonal'];
                            else return [3, 17, 'seasonal'];
                        }
                    } else {
                        if (G.getRes('population').amount <= 0) return [5, 5];
                        else {
                            var amount = me.amount / G.getRes('population').amount;
                            if (amount >= 100) return [4, 5];
                            else if (amount >= 50) return [3, 5];
                            else if (amount >= -50) return [2, 5];
                            else if (amount >= -100) return [1, 5];
                            else return [0, 5];
                        }
                    }
                },
            });

            new G.Res({
                name: 'food storage',
                desc: 'Each [food storage] unit slows down decay for one piece of [food].//The number on the left is how much food storage is occupied, while the number on the right is how much you have in total.',
                icon: [12, 5],
                tick: function (me, tick) {
                    var amount = 0;
                    amount += G.getRes('precious pot').amount * 30;
                    amount += G.getRes('basket').amount * 10;
                    amount += G.getRes('pot').amount * 25;
                    amount += G.getRes('ice').amount;
                    amount += G.getRes('added food storage').amount;
                    me.amount = amount;
                },
                getDisplayAmount: function () {
                    return B(Math.min(this.displayedAmount, G.getRes('food').displayedAmount)) + '<wbr>/' + B(this.displayedAmount);
                },
            });
            new G.Res({
                name: 'added food storage',
                //food storage added by buildings
                desc: '',
                icon: [12, 5],
                hidden: true,
            });

            new G.Res({
                name: 'material storage',
                desc: 'Each [material storage] unit lowers the rate of decay or theft for one unit of your materials.//The number on the left is how much material storage is occupied, while the number on the right is how much you have in total.',
                icon: [14, 5],
                tick: function (me, tick) {
                    var amount = 0;
                    amount += G.getRes('added material storage').amount;
                    me.amount = amount;

                    var materials = 0;
                    for (var i in G.props['perishable materials list']) {
                        var mat = G.props['perishable materials list'][i];
                        materials += mat.amount;
                    }
                    me.used = materials;

                    if (materials > 0) {
                        var stored = Math.min(materials, amount) / materials;
                        var notStored = 1 - stored;

                        for (var i in G.props['perishable materials list']) {
                            var mat = G.props['perishable materials list'][i];

                            var toSpoil = mat.amount * 0.002 * notStored + mat.amount * 0.0001 * stored;
                            var spent = G.lose(mat.name, randomFloor(toSpoil), 'decay');
                        }
                    }

                    G.props['perishable materials list'] = [];
                },
                getDisplayAmount: function () {
                    return B(Math.min(this.displayedAmount, this.displayedUsedAmount)) + '<wbr>/' + B(this.displayedAmount);
                },
                displayUsed: true,
            });
            new G.Res({
                name: 'added material storage',
                //material storage added by buildings
                desc: '',
                icon: [14, 5],
                hidden: true,
            });

            new G.Res({
                name: 'water',
                desc: '[water] is required to keep your [population,people] hydrated, at the rate of half a unit per person every 3 ticks (although babies and children drink less).//Without water, people will resort to drinking [muddy water], which is unhealthy; if that runs out too, your people will start to die off.//Most terrains have some fresh water available for gathering, such as ponds, streams and rain, but drier locations may have to rely on [well] digging.//Water also turns into [muddy water] over time, if it is not consumed.',
                icon: [7, 6],
                startWith: 250,
                visible: true,
                turnToByContext: { 'drinking': { 'health': 0.01, 'happiness': 0 } },
                tick: function (me, tick) {
                    var toSpoil = 0
                    if (G.checkPolicy('disable spoiling') == 'off') {
                        //CHRA-NOS
                        if (G.checkPolicy('se01') == 'on') {
                            if (G.achievByName['patience'].won == 0) {
                                toSpoil = me.amount * (0.02 - (G.getRes('chranospts').amount / 1000) / 2);
                            } else {
                                toSpoil = me.amount * 0.02;
                            }
                        } else if (G.achievByName['patience'].won >= 1) {
                            toSpoil = me.amount * (0.02 - (G.getRes('chranospts').amount / 1000) / 2);
                        } else {
                            toSpoil = me.amount * 0.02;
                        }
                        spent = G.lose('water', randomFloor(toSpoil * (G.checkPolicy('se06') == 'on' ? 0.4 : 1) * (G.has('droughtNew') ? Math.pow(((G.year - getObj('droughtNew')) * 3 + G.day * 0.01) * (G.has('careful water storage') ? 0.6 : 1) + 1.2, 0.9) : 1)), 'decay');
                        G.gain('muddy water', randomFloor(spent), 'decay');
                    }
                },
            });
            new G.Res({
                name: 'muddy water',
                desc: '[muddy water] tastes awful and is unhealthy, but is better than dying of thirst. Your people will default to drinking it in the absence of fresh [water].//It can be collected while gathering from stagnant pools or old rainwater. In addition, [water] also turns into [muddy water] over time. [muddy water] itself will slowly dry out.',
                icon: [8, 6],
                visible: true,
                turnToByContext: { 'drinking': { 'health': -0.03, 'happiness': -0.05 } },
                tick: function (me, tick) {
                    if (G.checkPolicy('disable spoiling') == 'off') {
                        var toSpoil = me.amount * 0.01;
                        var spent = G.lose('muddy water', randomFloor(toSpoil), 'decay');
                    }
                },
            });

            new G.Res({
                name: 'food',
                desc: '[food] is consumed by your [population,people] when they get hungry, at the rate of 1 unit per person every 3 ticks (although babies and children eat less).//Some types of food are tastier or healthier than others.//Note that some food types may or may not be eaten depending on policies in place.//Food will slowly decay into [spoiled food] if you lack proper food storage.',
                meta: true,
                visible: true,
                icon: [3, 6],
                tick: function (me, tick) {
                    if (me.amount > 0 && G.checkPolicy('disable spoiling') == 'off') {
                        var stored = Math.min(me.amount, G.getRes('food storage').amount) / me.amount;
                        var notStored = 1 - stored;
                        var toSpoil = me.amount * 0.01 * notStored + me.amount * 0.0005 * stored * (G.checkPolicy('se10') == 'on' ? 1.15 : 1) * (G.checkPolicy('se06') == 'on' ? 1.3 : 1) * (G.has('famine') ? 10 : 1) * (G.has('frost') ? 0.3 : 1);
                        var spent = G.lose('food', randomFloor(toSpoil * (0.02 - (G.getRes('chranospts').amount / 1000))), 'decay');
                    }
                },
            });
            new G.Res({
                name: 'spoiled food',
                desc: '[spoiled food] is eaten when no other [food] is available, in a last-ditch effort to fend off starvation.//[spoiled food] is terribly unhealthy and tastes just as bad. Over time, it will decay even further into inedibility.',
                icon: [3, 7],
                visible: true,
                turnToByContext: { 'eating': { 'health': -0.3, 'happiness': -0.5 } },
                tick: function (me, tick) {
                    if (G.checkPolicy('disable spoiling') == 'off') {
                        var toSpoil = me.amount * 0.001;
                        var spent = G.lose('spoiled food', randomFloor(toSpoil), 'decay');
                    }
                },
            });

            //a trick to make different food types spoil at different speeds : turnToByContext:{'decay':{'fruit':0.2}} would make fruit last 20% longer (note : the food may still produce spoiled food)

            new G.Res({
                name: 'herbs',
                desc: '[herbs] are various plants and roots collected by simply foraging around. While relatively healthy to eat, they tend to taste unpleasant.',
                icon: [4, 6],
                startWith: 300,
                turnToByContext: { 'eating': { 'health': 0.005, 'happiness': -0.03 }, 'decay': { 'herbs': 0.2, 'spoiled food': 0.8 } },
                partOf: 'food',
                category: 'food',
            });
            new G.Res({
                name: 'fruit',
                desc: '[fruit,Fruits], whether gathered from berry bushes or fruit trees, are both sweet-tasting and good for you.',
                icon: [4, 7],
                turnToByContext: { 'eating': { 'health': 0.02, 'happiness': 0.011 }, 'decay': { 'spoiled food': 1 } },
                partOf: 'food',
                category: 'food',
            });
            new G.Res({
                name: 'vegetables',
                desc: '[vegetables], whether gathered from bushes or gardens, are both healthy and good for you.',
                icon: [11, 11, "magixmod"],
                turnToByContext: { 'eating': { 'health': 0.02, 'happiness': 0.01 }, 'decay': { 'spoiled food': 1 } },
                partOf: 'food',
                category: 'food',
            });
            new G.Res({
                name: 'meat',
                desc: '[meat,Raw meat] is gathered from dead animals and, while fairly tasty, can harbor a variety of diseases.',
                icon: [5, 7],
                turnToByContext: { 'eating': { 'health': -0.03, 'happiness': 0.008, 'bone': 0.1 }, 'decay': { 'spoiled food': 1 } },
                partOf: 'food',
                category: 'food',
            });
            new G.Res({
                name: 'cooked meat',
                desc: 'Eating [cooked meat] is deeply satisfying and may even produce a [bone] once eaten.',
                icon: [6, 7],
                turnToByContext: { 'eating': { 'health': 0.02, 'happiness': 0.03, 'bone': 0.1 }, 'decay': { 'cooked meat': 0.2, 'spoiled food': 0.8 } },
                partOf: 'food',
                category: 'food',
            });
            new G.Res({
                name: 'cured meat',
                desc: '[cured meat] is interestingly tough and can keep for months without spoiling. It also provides a curious flavor and tastes a bit better than [cooked meat].',
                icon: [11, 6],
                turnToByContext: { 'eating': { 'health': 0.02, 'happiness': 0.035, 'bone': 0.1 }, 'decay': { 'cured meat': 0.95, 'spoiled food': 0.05 } },
                partOf: 'food',
                category: 'food',
            });
            new G.Res({
                name: 'seafood',
                desc: '[seafood,Raw seafood] such as fish, clams, and shrimps aren\'t exactly the best for the body but have a little bit of mild flavor.',
                icon: [5, 6],
                turnToByContext: { 'eating': { 'health': -0.02, 'happiness': 0.0065, 'bone': 0.02 }, 'decay': { 'spoiled food': 1 } },
                partOf: 'food',
                category: 'food',
            });
            new G.Res({
                name: 'cooked seafood',
                desc: '[cooked seafood] tastes delicious and has various [health] benefits.',
                icon: [6, 6],
                turnToByContext: { 'eating': { 'health': 0.03, 'happiness': 0.02, 'bone': 0.02 }, 'decay': { 'cooked seafood': 0.2, 'spoiled food': 0.8 } },
                partOf: 'food',
                category: 'food',
            });
            new G.Res({
                name: 'cured seafood',
                desc: '[cured seafood] has a nice smoky flavor and lasts incredibly long, making your people even happier!',
                icon: [12, 6],
                turnToByContext: { 'eating': { 'health': 0.02, 'happiness': 0.0275, 'bone': 0.02 }, 'decay': { 'cured seafood': 0.95, 'spoiled food': 0.05 } },
                partOf: 'food',
                category: 'food',
            });

            new G.Res({
                name: 'bread',
                desc: '[bread] is filling, nutritious, and usually not unpleasant to eat; for these reasons, it is often adopted as staple food by those who can produce it in large amounts.',
                icon: [7, 7],
                turnToByContext: { 'eating': { 'health': 0.02, 'happiness': 0.0175 }, 'decay': { 'spoiled food': 1 } },
                partOf: 'food',
                category: 'food',
            });

            new G.Res({
                name: 'bugs',
                desc: 'Worms, insects, spiders, and other creatures belong here. They are easily caught, but are usually not considered proper [food].',
                icon: [8, 11],
                turnToByContext: { 'eating': { 'health': 0, 'happiness': -0.05 }, 'decay': { 'spoiled food': 0.5 } },
                //partOf:'food',
                category: 'food',
                tick: function (me, tick) {
                    var toLose = me.amount * 0.003;//bugs don't like to stick around
                    var spent = G.lose(me.name, randomFloor(toLose), 'decay');
                }
            });


            G.props['perishable materials list'] = [];

            var loseMaterialsTick = function (me, tick) {
                if (G.checkPolicy('disable spoiling') == 'off') {
                    G.props['perishable materials list'].push(me);
                }
            };
            //MAMUUN'S PENALTY/BACKFIRE
            var loseArchaicMaterialsTick = function (me, tick) {
                if (!G.has("t10"))
                    if (G.checkPolicy('se10') == 'on') {
                        var toSpoil = G.getRes('archaic building materials').amount * 0.002 * 1.4;
                        var spent = G.lose('archaic building materials', randomFloor(toSpoil), 'decay');
                    } else {
                        var toSpoil = G.getRes('archaic building materials').amount * 0.002;
                        var spent = G.lose('archaic building materials', randomFloor(toSpoil), 'decay');
                    }
            };
            var loseBasicMaterialsTick = function (me, tick) {
                if (!G.has("t10"))
                    if (G.checkPolicy('se10') == 'on') {
                        var toSpoil = G.getRes('basic building materials').amount * 0.003 * 1.12;
                        var spent = G.lose('basic building materials', randomFloor(toSpoil), 'decay');
                    } else {
                        var toSpoil = G.getRes('basic building materials').amount * 0.003;
                        var spent = G.lose('basic building materials', randomFloor(toSpoil), 'decay');
                    }
            };
            var loseAdvancedMaterialsTick = function (me, tick) {
                if (!G.has("t10"))
                    if (G.checkPolicy('se10') == 'on') {
                        var toSpoil = G.getRes('advanced building materials').amount * 0.003 * 1.03;
                        var spent = G.lose('advanced building materials', randomFloor(toSpoil), 'decay');
                    } else {
                        var toSpoil = G.getRes('advanced building materials').amount * 0.003;
                        var spent = G.lose('advanced building materials', randomFloor(toSpoil), 'decay');
                    }
            };
            //MAMUUN'S POSITIVE EFFECT
            var losePreciousMaterialsTick = function (me, tick) {
                if (!G.has("t10"))
                    if (G.checkPolicy('se10') == 'on') {
                        var toSpoil = G.getRes('precious building materials').amount * 0.0009 * 0.9;
                        var spent = G.lose('precious building materials', randomFloor(toSpoil), 'decay');
                    } else {
                        var toSpoil = G.getRes('precious building materials').amount * 0.0009;
                        var spent = G.lose('precious building materials', randomFloor(toSpoil), 'decay');
                    }
            };

            new G.Res({
                //hidden, used for every material that can be stored in a warehouse that isn't part of any other material
                name: 'misc materials',
                meta: true,
                tick: loseMaterialsTick,
                hidden: true,
            });

            new G.Res({
                name: 'archaic building materials',
                desc: 'Materials such as a [stick] and a [stone] are used to build rudimentary structures.',
                icon: [2, 7],
                meta: true,
                tick: loseArchaicMaterialsTick
            });
            new G.Res({
                name: 'stone',
                desc: 'Just a simple little rock. Found regularly when foraging, and even more commonly when digging, mining or quarrying.',
                icon: [2, 6],
                partOf: 'archaic building materials',
                category: 'build',
            });
            new G.Res({
                name: 'stick',
                desc: 'A short but sturdy branch. Obtained when foraging or when chopping a tree.',
                icon: [0, 6],
                partOf: 'archaic building materials',
                category: 'build',
            });
            new G.Res({
                name: 'limestone',
                desc: 'A fairly soft mineral. Can be foraged from some places, but is more commonly extracted while mining or quarrying.',
                icon: [6, 8],
                partOf: 'archaic building materials',
                category: 'build',
            });
            new G.Res({
                name: 'mud',
                desc: 'Dirt saturated with water that is found often when foraging or digging.',
                icon: [0, 7],
                partOf: 'archaic building materials',
                category: 'build',
            });

            new G.Res({
                name: 'basic building materials',
                desc: 'Processed materials such as [cut stone,Stone blocks], [brick]s and [lumber], used to build basic structures belong here.',
                icon: [2, 8],
                meta: true,
                tick: loseBasicMaterialsTick,
            });
            new G.Res({
                name: 'cut stone',
                desc: '[stone]s carved into blocks for easier hauling and building.',
                icon: [0, 8],
                partOf: 'basic building materials',
                category: 'build',
            });
            new G.Res({
                name: 'log',
                desc: 'Chopped wood that can be directly used in construction, but can also be processed into [lumber].',
                icon: [1, 6],
                partOf: 'basic building materials',
                category: 'build',
            });
            new G.Res({
                name: 'lumber',
                desc: '[log]s that have been processed into planks, making them an adaptable and resilient building material.',
                icon: [1, 8],
                partOf: 'basic building materials',
                category: 'build',
            });
            new G.Res({
                name: 'clay',
                desc: 'Found by digging in damp soil; can be baked into [brick]s.',
                icon: [1, 7],
                partOf: 'misc materials',
                category: 'build',
                tick: function (me, tick) {
                    var toLose = me.amount * 0.0025;
                    var spent = G.lose(me.name, randomFloor(toLose), 'decay');
                }
            });
            new G.Res({
                name: 'brick',
                desc: 'Made from fired [clay] and can be used to construct solid walls efficiently.',
                icon: [3, 8],
                partOf: 'basic building materials',
                category: 'build',
            });

            new G.Res({
                name: 'advanced building materials',
                desc: 'Building materials such as [concrete] and [glass] are often used to build more advanced structures.',
                icon: [3, 9],
                meta: true,
                tick: loseAdvancedMaterialsTick,
            });
            new G.Res({
                name: 'sand',
                desc: 'Can be harvested from deserts and beaches and can be processed into [glass].',
                icon: [4, 9],
                partOf: 'misc materials',
                category: 'build',
                tick: function () {
                    if (G.has('sandy shores')) {
                        //The cap is at 100 because your discovered [wtr] is ten times that amount!
                        G.gain('sand', unitAmount('digger', 'wtr', 100) * (G.has('sandy shores II') ? 0.02 : 0.01), 'sand digging');
                    }
                }
            });
            new G.Res({
                name: 'glass',
                desc: 'Obtained by melting [sand]; can be used to construct windows, which are part of most advanced buildings.',
                icon: [4, 8],
                partOf: 'advanced building materials',
                category: 'build',
            });
            new G.Res({
                name: 'concrete',
                desc: 'An exceptionally sturdy construction material, made by mixing [limestone] with [water] and letting it set.',
                icon: [5, 8],
                partOf: 'advanced building materials',
                category: 'build',
            });

            new G.Res({
                name: 'precious building materials',
                desc: 'Building materials such as [marble], used to build monuments.',
                icon: [16, 8],
                meta: true,
                tick: losePreciousMaterialsTick,
            });
            new G.Res({
                name: 'marble',
                desc: 'A construction material prized for its decorative properties. It can also be employed in sculptures.',
                icon: [7, 8],
                partOf: 'precious building materials',
                category: 'build',
            });
            new G.Res({
                name: 'gold block',
                desc: 'A valuable, if unreliable construction material.',
                icon: [14, 8],
                partOf: 'precious building materials',
                category: 'build',
            });
            new G.Res({
                name: 'gem block',
                desc: 'A precious building material used only for the finest monuments. Interestingly, there are two sprites for this block. Can you find them both?',
                icon: [choose([17, 18]), 8],//i can't pick
                partOf: 'precious building materials',
                category: 'build',
            });

            new G.Res({
                name: 'copper ore',
                desc: 'Ore that can be processed into [soft metal ingot]s.',
                icon: [9, 8],
                partOf: 'misc materials',
                category: 'ore',
            });
            new G.Res({
                name: 'iron ore',
                desc: 'Ore that can be processed into [hard metal ingot]s.',
                icon: [10, 8],
                partOf: 'misc materials',
                category: 'ore',
            });
            new G.Res({
                name: 'gold ore',
                desc: 'Ore that can be processed into [precious metal ingot]s.',
                icon: [11, 8],
                partOf: 'misc materials',
                category: 'ore',
            });
            new G.Res({
                name: 'tin ore',
                desc: 'Ore that can be processed into [soft metal ingot]s.',
                icon: [13, 8],
                partOf: 'misc materials',
                category: 'ore',
            });

            new G.Res({
                name: 'gems',
                desc: 'Shiny, valuable minerals from deep beneath the earth.',
                icon: [7, 9],
                partOf: 'misc materials',
                category: 'build',
            });

            new G.Res({
                name: 'coal',
                desc: 'Extracted from mines, coal provides a good source of energy and can be used in alloying.',
                icon: [12, 8],
                partOf: 'misc materials',
                category: 'build',
            });

            new G.Res({
                name: 'soft metal ingot',
                desc: 'A soft, malleable metal that can be used to make basic [metal tools].//Includes tin and copper.',
                icon: [9, 9],
                partOf: 'misc materials',
                category: 'build',
            });
            new G.Res({
                name: 'hard metal ingot',
                desc: 'A tough, durable metal that can be used to craft [metal tools] and weapons.//Includes iron and bronze.',
                icon: [10, 9],
                partOf: 'misc materials',
                category: 'build',
            });
            new G.Res({
                name: 'strong metal ingot',
                desc: 'Solid metal possessing high tensile strength.//Includes steel.',
                icon: [12, 9],
                partOf: 'misc materials',
                category: 'build',
            });
            new G.Res({
                name: 'precious metal ingot',
                desc: 'Metal with little industrial use but imbued with valuable aesthetics.//Includes gold and silver.',
                icon: [11, 9],
                category: 'build',
            });

            new G.Res({
                name: 'knapped tools',
                desc: 'Rudimentary tools made by hitting [stone]s, usually flint, until their edges are sharp enough.' + numbersInfo,
                icon: [0, 9],
                displayUsed: true,
                category: 'gear',
            });
            new G.Res({
                name: 'stone tools',
                desc: 'Simple tools made of [stone]s and [stick]s for a variety of purposes - hammering, cutting, piercing, crushing.' + numbersInfo,
                icon: [1, 9],
                displayUsed: true,
                category: 'gear',
            });
            new G.Res({
                name: 'metal tools',
                desc: 'Solid, durable tools made of metal and wood.' + numbersInfo,
                icon: [2, 9],
                displayUsed: true,
                category: 'gear',
            });

            new G.Res({
                name: 'stone weapons',
                desc: 'Simple weapons made of [stone]s and [stick]s.' + numbersInfo,
                icon: [5, 9],
                displayUsed: true,
                category: 'gear',
            });
            new G.Res({
                name: 'bow',
                desc: 'A weapon made of [stick,Wood] that fires [stone]-tipped arrows at a distance.' + numbersInfo,
                icon: [6, 9],
                displayUsed: true,
                category: 'gear',
            });

            var clothesInfo = '//Your people automatically wear the highest-quality clothing available, moving on to the next type if there isn\'t enough.';
            new G.Res({
                name: 'primitive clothes',
                desc: 'Made out of rudimentary materials such as [hide]s or [herbs].//Each [population,Person] wearing clothing is slightly happier and healthier.' + clothesInfo,
                icon: [15, 7],
                category: 'gear',
                tick: function (me, tick) {
                    var toSpoil = me.amount * 0.005;
                    var spent = G.lose(me.name, randomFloor(toSpoil), 'decay');
                },
            });
            new G.Res({
                name: 'basic clothes',
                desc: 'Sewn together from [leather] or textile fiber.//Each [population,Person] wearing clothing is slightly happier and healthier.' + clothesInfo,
                icon: [16, 7],
                category: 'gear',
                tick: function (me, tick) {
                    var toSpoil = me.amount * 0.002;
                    var spent = G.lose(me.name, randomFloor(toSpoil), 'decay');
                },
            });

            new G.Res({
                name: 'bone',
                desc: 'Obtained from the corpse of an animal, or discarded from eating flesh.',
                icon: [8, 7],
                partOf: 'misc materials',
                category: 'build',
            });
            new G.Res({
                name: 'hide',
                desc: 'A pelt obtained by slicing the skin off a dead animal.',
                icon: [9, 7],
                partOf: 'misc materials',
                category: 'build',
            });
            new G.Res({
                name: 'leather',
                desc: '[hide] that has been cured and worked to make it strong and durable for a variety of uses.',
                icon: [10, 7],
                partOf: 'misc materials',
                category: 'build',
            });
            new G.Res({
                name: 'statuette',
                desc: 'A small carved statue that was rudimentarily carved from [stone] or [bone].//May be used up over time, creating [culture].',
                icon: [8, 9],
                partOf: 'misc materials',
                category: 'misc',
                tick: function (me, tick) {
                    var toSpoil = me.amount * 0.01;
                    var spent = G.lose(me.name, randomFloor(toSpoil), 'decay');
                    G.pseudoGather(G.getRes('culture'), randomFloor(spent));
                },
            });
            new G.Res({
                name: 'salt',
                desc: 'Gives flavor to [food], rendering it more enjoyable to eat; may also be used to preserve food and make it last longer.',
                icon: [11, 7],
                partOf: 'misc materials',
                category: 'misc',
                tick: function () {
                    if (G.has('salty sand')) {
                        //The cap is at 100 because your discovered [wtr] is ten times that amount!
                        G.gain('salt', unitAmount('digger', 'wtr', 100) * (G.has('salty sand II') ? 0.012 : 0.07), 'salty sand');
                    }
                }
            });
            new G.Res({
                name: 'ice',
                desc: 'Can be used to preserve 1 piece of [food] longer.//Will also melt into [water] eventually.',
                icon: [12, 7],
                partOf: 'misc materials',
                category: 'misc',
                tick: function (me, tick) {
                    var toSpoil = me.amount * 0.01;
                    var spent = G.lose(me.name, randomFloor(toSpoil), 'decay');
                    G.gain('water', randomFloor(spent * 10), 'ice melting');
                },
            });

            new G.Res({
                name: 'basket',
                desc: 'Each basket stores 10 [food].//Will decay over time.',
                icon: [14, 7],
                category: 'misc',
                tick: function (me, tick) {
                    var toSpoil = me.amount * 0.005;
                    var spent = G.lose(me.name, randomFloor(toSpoil), 'decay');
                },
            });
            new G.Res({
                name: 'pot',
                desc: 'Each pot stores 25 [food].//Will itself decay gradually over time.',
                icon: [13, 5],
                category: 'misc',
                tick: function (me, tick) {
                    var toSpoil = me.amount * 0.0005;
                    var spent = G.lose(me.name, randomFloor(toSpoil), 'decay');
                },
            });

            new G.Res({
                name: 'fire pit',
                desc: 'Keeps your tribe warm; each fire reduces illness for 5 people.//Used by some types of crafting.//Will burn out over time.',
                icon: [13, 7],
                category: 'misc',
                tick: function (me, tick) {
                    var toSpoil = me.amount * 0.01 * (G.has('frost') ? 3 : 1);
                    var spent = G.lose(me.name, randomFloor(toSpoil), 'decay');
                },
            });


            var limitDesc = function (limit) { return 'It is limited by your ' + limit + '; the closer to the limit, the slower it is to produce more.'; };
            var researchGetDisplayAmount = function () {
                var limit = G.getDict(this.limit).displayedAmount;
                return B(this.displayedAmount) + '<wbr>/' + B(limit);
            };
            var researchWhenGathered = function (me, amount) {
                var limit = G.getDict(this.limit).amount;
                if (limit > 0) {
                    var mult = 1;
                    if (G.year < 5) mult = 1.25;//faster research the first 5 years
                    me.amount += randomFloor(Math.pow(1 - me.amount / limit, 2) * (Math.random() * amount * me.mult * mult));
                    me.amount = Math.min(me.amount, limit);
                }
            };
            new G.Res({
                name: 'insight',
                desc: '[insight] represents your people\'s ideas and random sparks of intuition.//' + limitDesc('[wisdom]') + '//Many technologies require [insight] to be researched.',
                icon: [8, 4],
                category: 'main',
                limit: 'wisdom',
                tick: function (me, tick) {
                    if (G.has('eotm')) {
                        me.hidden = true
                    }
                },
                colorGood: '#d4af37',
                getDisplayAmount: researchGetDisplayAmount,
                whenGathered: researchWhenGathered,
            });
            new G.Res({
                name: 'wisdom',
                hidden: true,
                icon: [8, 5],
                fractional: true,
                category: 'main',
            });

            new G.Res({
                name: 'science',
                desc: '[science] is the product of experiments and discoveries.//' + limitDesc('[education]') + '//A variety of advanced technologies will require [science] to be researched.',
                icon: [choose([3, 4, 5, 6]), 27, "magixmod"],
                category: 'main',
                limit: 'education',
                colorGood: '#d4af37',
                getDisplayAmount: researchGetDisplayAmount,
                whenGathered: researchWhenGathered,
                tick: function (me, tick) {
                    if (G.has('scientific minds')) {
                        G.gain('science', Math.pow(1 - me.amount / G.getRes('education').amount, 1.6) * (Math.random() * 0.00008 * Math.sqrt(G.getRes('culture II').amount)), 'scientific minds')
                    }
                },
            });
            new G.Res({
                name: 'education',
                hidden: true,
                icon: [6, 5],
                fractional: true,
                category: 'main',
            });

            new G.Res({
                name: 'culture',
                desc: '[culture] is produced when your people create beautiful and thought-provoking things.//' + limitDesc('[inspiration]') + '//Culture is used to develop cultural traits.',
                icon: [10, 4],
                category: 'main',
                limit: 'inspiration',
                colorGood: '#d4af37',
                tick: function (me, tick) {
                    if (G.has('dt15')) {
                        var toSpoil = me.amount * 0.005;
                        var spent = G.lose(me.name, randomFloor(toSpoil), 'culture sapping');
                    }
                    if (G.has('eotm')) {
                        me.hidden = true
                    }
                },
                getDisplayAmount: researchGetDisplayAmount,
                whenGathered: researchWhenGathered,
            });
            new G.Res({
                name: 'inspiration',
                hidden: true,
                icon: [10, 5],
                fractional: true,
                category: 'main',
            });

            new G.Res({
                name: 'faith',
                desc: '[faith] derives from all things divine, from meditation to sacrifices.//' + limitDesc('[spirituality]') + '//Some cultural traits and technologies depend on faith.',
                icon: [7, 4],
                category: 'main',
                limit: 'spirituality',
                colorGood: '#d4af37',
                tick: function (me, tick) {
                    if (G.has('dt13')) {
                        var toSpoil = me.amount * 0.005;
                        var spent = G.lose(me.name, randomFloor(toSpoil), 'faith sapping');
                    }
                    if (G.has('eotm')) {
                        me.hidden = true
                    }
                },
                getDisplayAmount: researchGetDisplayAmount,
                whenGathered: researchWhenGathered,
            });
            new G.Res({
                name: 'spirituality',
                hidden: true,
                icon: [7, 5],
                fractional: true,
                category: 'main',
            });

            new G.Res({
                name: 'influence',
                desc: '[influence] is generated by power structures.//You also get 1 free influence point at the start of every year.//' + limitDesc('[authority]') + '//Influence is required to enact most policies or remove traits.',
                icon: [11, 4],
                category: 'main',
                limit: 'authority',
                colorGood: '#d4af37',
                startWith: 5,
                tick: function (me, tick) {
                    if (G.has('dt14')) {
                        var toSpoil = me.amount * 0.005;
                        var spent = G.lose(me.name, randomFloor(toSpoil), 'influence sapping');
                    }
                    if (G.has('eotm')) {
                        me.hidden = true
                    }
                },
                getDisplayAmount: researchGetDisplayAmount,
                whenGathered: researchWhenGathered,
            });
            new G.Res({
                name: 'authority',
                hidden: true,
                icon: [11, 5],
                fractional: true,
                category: 'main',
            });
            //MAGIX
            new G.Res({
                name: 'mana',
                desc: '[mana] is used to make [magic essences,Essences]. It is a very important part of wizardry and magic in many, many ways!',
                icon: [2, 3, "magixmod"],
                partOf: 'misc materials',
                whenGathered: researchWhenGathered,
                limit: 'mana capacity',
            });
            new G.Res({
                name: 'wand',
                desc: 'Wands are the basis of wizardry, and of course are used by wizards. Without it, most spells cannot be casted.' + numbersInfo,
                icon: [6, 4, "magixmod"],
                category: 'gear',
                displayUsed: true,
            });
            new G.Res({
                name: 'painting',
                desc: 'Made by [painter]s. Your [population,people] are proud to see it. Provides [culture] upon decay.',
                icon: [12, 4, "magixmod"],
                category: 'misc',
                tick: function (me, tick) {
                    var toSpoil = me.amount * 0.0001;
                    var spent = G.lose(me.name, randomFloor(toSpoil), 'decay');
                    G.pseudoGather(G.getRes('culture'), randomFloor(spent * 2));
                },
            });
            new G.Res({
                name: 'land of the Plain Island',
                desc: 'The land you got from activating a portal to the new island: Plain Island. A place for new buildings.',
                icon: [7, 0, "magixmod"],
                displayUsed: true,
                partOf: 'tl',
                category: 'terr',
                tick: function (me, tick) {
                    G.getDict('land of the Plain Island').displayName = 'Land of the ' + islandName()
                    G.getDict('land of the Plain Island').desc = 'The land you got from activating a portal to the new island: ' + islandName() + '. A place for new buildings.'
                    for (i in G.unitCategories) {
                        if (G.unitCategories[i].id === 'plainisleunit') {
                            G.unitCategories[i].name = islandName() // Rename the unit category too
                            break
                        }
                    }
                },
            });
            new G.Res({
                name: 'land of the Paradise',
                desc: 'The land you got from activating a portal to the Paradise. A great place for new and unique buildings.',
                icon: [20, 4, "magixmod"],
                displayUsed: true,
                category: 'terr',
                partOf: 'tl'
            });
            new G.Res({
                name: 'fire essence',
                desc: '[fire essence] is quite warm and dangerous. Could be used to fight against cold winters.',
                icon: [0, 2, "magixmod"],
                partOf: 'magic essences',
                tick: function (me, tick) {
                    var toSpoil = me.amount * 0.0001;
                    var spent = G.lose(me.name, randomFloor(toSpoil), 'decay');
                    G.getRes('fire essence limit').displayedAmount = G.getRes('fire essence limit').amount; // limit display fix
                },
                whenGathered: researchWhenGathered,
                limit: 'fire essence limit',
                category: 'magic',
            });
            new G.Res({
                name: 'water essence',
                desc: '[water essence] is undrinkable but can be used for obtaining [mana] and small rains!',
                icon: [0, 1, "magixmod"],
                partOf: 'magic essences',
                tick: function (me, tick) {
                    var toSpoil = me.amount * 0.0001;
                    var spent = G.lose(me.name, randomFloor(toSpoil), 'decay');
                    G.getRes('water essence limit').displayedAmount = G.getRes('water essence limit').amount; // limit display fix
                },
                whenGathered: researchWhenGathered,
                limit: 'water essence limit',
                category: 'magic',
            });
            new G.Res({
                name: 'nature essence',
                desc: '[nature essence] is used by wizards to collect their beloved [honey] or make harvests more plentiful.',
                icon: [1, 2, "magixmod"],
                partOf: 'magic essences',
                tick: function (me, tick) {
                    var toSpoil = me.amount * 0.0001;
                    var spent = G.lose(me.name, randomFloor(toSpoil), 'decay');
                    G.getRes('nature essence limit').displayedAmount = G.getRes('nature essence limit').amount; // limit display fix
                },
                whenGathered: researchWhenGathered,
                limit: 'nature essence limit',
                category: 'magic',
            });
            new G.Res({
                name: 'dark essence',
                desc: '[dark essence] may be used to make black holes for graves or for even bigger spells like a mirror world.',
                icon: [1, 3, "magixmod"],
                partOf: 'magic essences',
                tick: function (me, tick) {
                    if (!G.has('t8')) {
                        var toSpoil = me.amount * 0.0001;
                        var spent = G.lose(me.name, randomFloor(toSpoil), 'decay');
                        if (G.has('liberating darkness')) {
                            if (me.amount < G.getRes('dark essence limit').amount - 20) {
                                G.gain(me.name, 20, 'The Cemetarium');
                            }
                        }
                        G.getRes('dark essence limit').displayedAmount = G.getRes('dark essence limit').amount; // limit display fix
                    }
                },
                whenGathered: researchWhenGathered,
                limit: 'dark essence limit',
                category: 'magic',
            });
            new G.Res({
                name: 'lightning essence',
                desc: '[lightning essence] can make storms safer and provide a little automation.',
                icon: [0, 3, "magixmod"],
                partOf: 'magic essences',
                tick: function (me, tick) {
                    var toSpoil = me.amount * 0.0001;
                    var spent = G.lose(me.name, randomFloor(toSpoil), 'decay');
                    G.getRes('lightning essence limit').displayedAmount = G.getRes('lightning essence limit').amount; // limit display fix
                },
                whenGathered: researchWhenGathered,
                limit: 'lightning essence limit',
                category: 'magic',
            });
            new G.Res({
                name: 'wind essence',
                desc: '[wind essence] must be used carefully due to a risk of tornado disasters. It may be used to move [boat]s and large objects around!',
                icon: [1, 1, "magixmod"],
                partOf: 'magic essences',
                tick: function (me, tick) {
                    var toSpoil = me.amount * 0.0001;
                    var spent = G.lose(me.name, randomFloor(toSpoil), 'decay');
                    G.getRes('wind essence limit').displayedAmount = G.getRes('wind essence limit').amount; // limit display fix
                },
                whenGathered: researchWhenGathered,
                limit: 'wind essence limit',
                category: 'magic',
            });
            new G.Res({
                name: 'holy essence',
                desc: '[holy essence] should not be used by the average person due to a risk of mass blindness. However, this resource will still have its faithful uses.',
                icon: [20, 6, "magixmod"],
                partOf: 'magic essences',
                tick: function (me, tick) {
                    var toSpoil = me.amount * 0.0001;
                    var spent = G.lose(me.name, randomFloor(toSpoil), 'decay');
                    G.getRes('holy essence limit').displayedAmount = G.getRes('holy essence limit').amount; // limit display fix
                },
                whenGathered: researchWhenGathered,
                limit: 'holy essence limit',
                category: 'magic',
            });
            new G.Res({
                name: 'cobalt ore',
                desc: 'A unique and rather hard mineral. At least you may be able to smelt some cobalt and turn them into cobalt ingots in the mortal world.',
                icon: [8, 2, "magixmod"],
                partOf: 'misc materials',
                category: 'ore',
            });
            new G.Res({
                name: 'scobs',
                desc: 'Scobs are effect of carver working at [wooden statuette] and cutting trees.',
                icon: [13, 2, "magixmod"],
                partOf: 'misc materials',
                category: 'misc',
            });
            new G.Res({
                name: 'colored clothing',
                desc: 'Sewn together and colored with the help of [dyes].//Each [population,Person] wearing clothing is slightly happier and healthier.',
                icon: [13, 0, "magixmod"],
                category: 'gear',
                tick: function (me, tick) {
                    var toSpoil = me.amount * 0.002;
                    var spent = G.lose(me.name, randomFloor(toSpoil), 'decay');
                },
            });
            new G.Res({
                name: 'wooden statuette',
                desc: 'A small carved statue that was rudimentarily carved from [log] or [lumber].//May be used up over time, creating [culture].',
                icon: [13, 1, "magixmod"],
                partOf: 'misc materials',
                category: 'misc',
                tick: function (me, tick) {
                    var toSpoil = me.amount * 0.03;
                    var spent = G.lose(me.name, randomFloor(toSpoil), 'decay');
                    G.pseudoGather(G.getRes('culture'), randomFloor(spent));
                },
            });
            new G.Res({
                name: 'dried leather',
                desc: 'Hardened version of [leather]. The only way to make it is to put [leather] onto a [drying rack].',
                icon: [13, 4, "magixmod"],
                category: 'build',
                tick: function (me, tick) {
                    var toSpoil = me.amount * 0.03;
                    var spent = G.lose(me.name, randomFloor(toSpoil), 'decay');
                },
            });
            new G.Res({
                name: 'crossbow',
                desc: 'A more effective weapon that is easier to use. Your hunter or soldier will now need to just click to release their belt.' + numbersInfo,
                icon: [13, 6, "magixmod"],
                category: 'gear',
                displayUsed: true,
            });
            new G.Res({
                name: 'arrow',
                desc: 'A piece of ammo for ranged weapons like [bow]s and [crossbow]s. //Required to keep units that use this stuff working properly.',
                icon: [13, 7, "magixmod"],
                category: 'gear',
            });
            new G.Res({
                name: 'fishing net',
                desc: 'Another alternative way to obtain [seafood]. Fishing nets can be used to catch more fish. They can gather a little more fish than using line fishing.' + numbersInfo,
                icon: [13, 8, "magixmod"],
                category: 'gear',
                displayUsed: true,
            });
            new G.Res({
                name: 'thread',
                desc: 'You\'ll need this item to get your people better at sewing.',
                icon: [13, 9, "magixmod"],
                category: 'misc',
                tick: function (me, tick) {
                    var toSpoil = me.amount * 0.01;
                    var spent = G.lose(me.name, randomFloor(toSpoil), 'decay');
                },
            });
            new G.Res({
                name: 'cobalt ingot',
                desc: 'An ingot made out of [cobalt ore]. Does not have much of a use, except maybe as a potential building material.',
                icon: [14, 0, "magixmod"],
                category: 'build',
                tick: function (me, tick) {
                    var toSpoil = me.amount * 0.01;
                    var spent = G.lose(me.name, randomFloor(toSpoil), 'decay');
                },
            });
            new G.Res({
                name: 'juices',
                desc: '[juices] will provide more [happiness] and [health] than [water] and will also take longer to spoil.',
                icon: [14, 3, "magixmod"],
                tick: function (me, tick) {
                    if (G.checkPolicy('disable spoiling') == 'off') {
                        var toSpoil = me.amount * 0.01;
                        var spent = G.lose(me.name, randomFloor(toSpoil), 'drinking juices');
                        G.gain('health', spent * 0.2, 'drinking juices');
                        changeHappiness(spent * 0.3, 'drinking juices');
                        G.gain('spoiled juices', randomFloor(spent * 0.4), 'decay');
                    }
                },
            });
            new G.Res({
                name: 'spoiled juices',
                desc: 'This stat shows you how many of all [juices] have spoiled. These nasty little drinks decrease [happiness] and [health] even faster than plain old [muddy water]!',
                icon: [14, 5, "magixmod"],
                tick: function (me, tick) {
                    var toSpoil = me.amount * 0.01;
                    var spent = G.lose('spoiled juices', randomFloor(toSpoil), 'decay');
                    if (G.checkPolicy('drink spoiled juice') == 'on') {
                        changeHappiness(randomFloor(spent * -1.17), 'drinking spoiled juice');
                        G.gain('health', randomFloor(spent * -1.35), 'drinking spoiled juice');
                    }
                },
            });
            new G.Res({
                name: 'bamboo',
                desc: 'This tropical material can be used for archaic constructions, but decays somewhat quickly.',
                icon: [14, 4, "magixmod"],
                partOf: 'archaic building materials',
                tick: function (me, tick) {
                    var toSpoil = me.amount * 0.08;
                    var spent = G.lose(me.name, randomFloor(toSpoil), 'decay');
                },
                category: 'build',
            });
            new G.Res({
                name: 'sugar cane',
                desc: 'These canes contain valuable [sugar] within, which you can obtain by giving this task to an [artisan of juice] later on.',
                icon: [15, 4, "magixmod"],
                partOf: 'misc materials',
                category: 'misc',
                tick: function (me, tick) {
                    var toLose = me.amount * 0.03;
                    var spent = G.lose(me.name, randomFloor(toLose), 'decay');
                }
            });
            new G.Res({
                name: 'sugar',
                desc: 'If you want to start crafting tasty [juices], [sugar] is a must.',
                icon: [15, 2, "magixmod"],
                partOf: 'misc materials',
                category: 'misc',
            });
            new G.Res({
                name: 'chranospts',
                startWith: 1,
                hidden: true
            });
            new G.Res({//REMOVED AND USED AS CHRANOS WEAKNESS (DOWNGRADES YOU EACH YEAR WHILE IN PATIENCE TRIAL...well it is one of its rules tho)
                name: 'chranosweak',
                hidden: true
            });
            let madeUnlockMessage = false
            new G.Res({
                name: 'plain island tablet',
                displayName: 'Plain Island tablet',
                desc: 'A heavy tablet that you will get after activating a Plain Island portal. It is needed to unlock further researching as a pass for further things. You can obtain only one Tablet of this type. <b>@Your adventure may be finished for now...but this portal hides a secret. And that means...your adventure has not ended yet.</b>',
                icon: [14, 9, "magixmod"],
                startWith: 0,
                tick: function (me, tick) {
                    if (me.amount >= 1 && !madeUnlockMessage) {
                        G.Message({ type: 'tabletobtain', text: '<b>You and your people activated the passage to the Plain Island. Out of the portal a Tablet falls and hits a rock next to you. Within the square portal, you can finally see what is beyond it! It appears to be a bunch of flat plains, but you are sure there are a variety of new discoveries that you can find. Some small text at the bottom of the tablet tells you that can also rename this island (in the Traits tab).</b>', icon: [8, 3, "magixmod"] });
                        madeUnlockMessage = true
                        G.playSound(magixURL + 'GainedEmblem.mp3');
                    }
                    if (G.has('plain island building')) {
                        me.hidden = true
                    }
                },
                category: 'main',
            });
            new G.Res({
                name: 'precious pot',
                desc: 'A harder and more beautiful version of a [pot]. Each one stores 30 [food]. It decays quite slowly and grants a little [culture] on decay.',
                icon: [15, 8, "magixmod"],
                category: 'misc',
                tick: function (me, tick) {
                    var toSpoil = me.amount * 0.0008;
                    var spent = G.lose(me.name, randomFloor(toSpoil), 'decay');
                    G.pseudoGather(G.getRes('culture'), randomFloor(spent * 0.8));
                },
            });
            new G.Res({
                name: 'potion pot',
                desc: 'Pot made specifically for [alchemist]s. Hard and a little bit heavy, but pretty safe.',
                icon: [14, 8, "magixmod"],
                category: 'misc',
                tick: function (me, tick) {
                    var toSpoil = me.amount * 0.0008;
                    var spent = G.lose(me.name, randomFloor(toSpoil), 'decay');
                },
            });
            new G.Res({
                name: 'ink',
                desc: 'Can be used in writing. Not drinkable, not tasty.',
                icon: [18, 6, "magixmod"],
                category: 'misc',
                tick: function (me, tick) {
                    var toSpoil = me.amount * 0.0008;
                    var spent = G.lose(me.name, randomFloor(toSpoil), 'decay');
                },
            });
            new G.Res({
                name: 'wheat',
                desc: 'Not edible, but useful in the crafting of [bread].',
                icon: [23, 10, "magixmod"],
                category: 'misc',
                tick: function (me, tick) {
                    var toSpoil = me.amount * 0.001;
                    var spent = G.lose(me.name, randomFloor(toSpoil), 'decay');
                },
            });
            new G.Res({
                name: 'flour',
                desc: 'Made out of [wheat]. Now that you have [flour], you can make hearty [bread].',
                icon: [23, 11, "magixmod"],
                category: 'misc',
                tick: function (me, tick) {
                    var toSpoil = me.amount * 0.001;
                    var spent = G.lose(me.name, randomFloor(toSpoil), 'decay');
                },
            });
            new G.Res({
                name: 'alchemy zone',
                desc: 'This part of the land can be occupied by [alchemist]s (and their units) that uses [land of the Plain Island]. Here they can brew potions, mana, and concoctions!',
                icon: [17, 7, "magixmod"],
                category: 'terr',
                displayUsed: true,
            });
            new G.Res({
                name: 'first aid things',
                desc: 'More advanced tools to help the [wounded] that are used by [healer]s.',
                icon: [9, 4, "magix2"],
                tick: function (me, tick) {
                    var toSpoil = me.amount * 0.01;
                    var spent = G.lose(me.name, randomFloor(toSpoil), 'decay');
                },
                category: 'misc',
            });
            new G.Res({
                name: 'cloudy water',
                desc: 'Water which cannot spoil in any way (however, it can still slowly decay). It is gathered from Paradise\'s lakes, ponds, rivers and tastes the same as water.',
                icon: [11, 14, "magixmod"],
                tick: function (me, tick) {
                    var toSpoil = me.amount * 0.004 * (G.has('droughtNew') ? Math.pow(((G.year - getObj('droughtNew')) * 3 + G.day * 0.01) * (G.has('careful water storage') ? 0.85 : 1) + 1.2, 0.6) : 1);
                    var spent = G.lose(me.name, randomFloor(toSpoil), 'decay');
                },
                category: 'food',
            });
            new G.Res({
                name: 'basic brews',
                desc: '[basic brews] may be used to craft more advanced potions.',
                icon: [6, 10, "magixmod"],
                meta: true,
            });
            new G.Res({
                name: 'sweet water pot',
                desc: 'Sweet brew. Can be used to craft more advanced brews/potions.',
                icon: [0, 10, "magixmod"],
                category: 'alchemypotions',
                tick: function (me, tick) {
                    var toSpoil = me.amount * 0.01;
                    var spent = G.lose(me.name, randomFloor(toSpoil), 'decay');
                },
                partOf: 'basic brews',
            });
            new G.Res({
                name: 'mundane water pot',
                desc: 'Mundane water. Can be used to craft more advanced brews/potions. Tastes a little bit like [muddy water] but it is not poisonous.',
                icon: [1, 10, "magixmod"],
                category: 'alchemypotions',
                tick: function (me, tick) {
                    var toSpoil = me.amount * 0.01;
                    var spent = G.lose(me.name, randomFloor(toSpoil), 'decay');
                },
                partOf: 'basic brews',
            });
            new G.Res({
                name: 'salted water pot',
                desc: 'Salted water. Can be used to craft more advanced brews/potions.//<small>It is not tasty water, all right? It\'s like the ocean, but worse.</small>',
                icon: [2, 10, "magixmod"],
                category: 'alchemypotions',
                tick: function (me, tick) {
                    var toSpoil = me.amount * 0.01;
                    var spent = G.lose(me.name, randomFloor(toSpoil), 'decay');
                },
                partOf: 'basic brews',
            });
            new G.Res({
                name: 'bubbling water pot',
                desc: 'Bubbling water. Can be used to craft more advanced brews/potions. So hot, so do not drink. At least it releases bubbles.',
                icon: [3, 10, "magixmod"],
                category: 'alchemypotions',
                tick: function (me, tick) {
                    var toSpoil = me.amount * 0.01;
                    var spent = G.lose(me.name, randomFloor(toSpoil), 'decay');
                },
                partOf: 'basic brews',
            });
            new G.Res({
                name: 'alcohol brews',
                desc: 'The main reason of alcoholism. But some of the alcohol brews will have its use to make other potions.',
                icon: [11, 10, "magixmod"],
                meta: true,
            });
            new G.Res({
                name: 'alcohol pot',
                desc: 'Can be used to craft [wine] or [pot of vodka,Pots of vodka]. Let\'s not forget about its uses to other potions.',
                icon: [7, 10, "magixmod"],
                category: 'alchemypotions',
                tick: function (me, tick) {
                    var toSpoil = me.amount * 0.01;
                    var spent = G.lose(me.name, randomFloor(toSpoil), 'decay');
                },
                partOf: 'alcohol brews',
            });
            new G.Res({
                name: 'wine',
                desc: 'Tasty alcohol. Drinking it will increase [happiness] slightly, but harm [health].',
                icon: [8, 10, "magixmod"],
                category: 'alchemypotions',
                tick: function (me, tick) {
                    var toSpoil = me.amount * 0.01;
                    var spent = G.lose(me.name, randomFloor(toSpoil), 'decay');
                },
                partOf: 'alcohol brews',
            });
            new G.Res({
                name: 'pot of vodka',
                desc: 'Dangerous for [health]: a somewhat bad alcohol drink.',
                icon: [10, 10, "magixmod"],
                category: 'alchemypotions',
                tick: function (me, tick) {
                    var toSpoil = me.amount * 0.01;
                    var spent = G.lose(me.name, randomFloor(toSpoil), 'decay');
                },
                partOf: 'alcohol brews',
            });
            new G.Res({
                name: 'herb syrup',
                desc: 'Pretty bad to taste. Made out of healthy [herbs] and [flowers,Various flowers]. Can be used to cure diseases.',
                icon: [5, 10, "magixmod"],
                category: 'alchemypotions',
                partOf: 'medicament brews',
                tick: function (me, tick) {
                    var toSpoil = me.amount * 0.01;
                    var spent = G.lose(me.name, randomFloor(toSpoil), 'decay');
                },
            });
            new G.Res({
                name: 'essenced herb syrup',
                desc: 'A little bit tastier than [herb syrup]. Made out of healthy [herbs], [flowers,Various flowers] with a little [water essence] and [nature essence] added. Can be used to cure diseases.',
                icon: [9, 10, "magixmod"],
                category: 'alchemypotions',
                partOf: 'medicament brews',
                tick: function (me, tick) {
                    var toSpoil = me.amount * 0.01;
                    var spent = G.lose(me.name, randomFloor(toSpoil), 'decay');
                },
            });
            new G.Res({
                name: 'antidotum',
                desc: 'Made using a [mundane water pot], a small amount of [alcohol pot,Alcohol], a little bit of [herbs] and a little [salt].',
                icon: [4, 10, "magixmod"],
                category: 'alchemypotions',
                partOf: 'medicament brews',
                tick: function (me, tick) {
                    var toSpoil = me.amount * 0.01;
                    var spent = G.lose(me.name, randomFloor(toSpoil), 'decay');
                },
            });
            new G.Res({
                name: 'metal weapons',
                desc: 'Solid, durable weapons made of metal and wood. One of the many parts of a soldier\'s equipment.' + numbersInfo,
                icon: [15, 11, "magixmod"],
                displayUsed: true,
                category: 'gear',
            });
            new G.Res({
                name: 'armor set',
                desc: 'A solid, durable [armor set] made for soldiers can protect against common threats like ambushes.' + numbersInfo,
                icon: [16, 11, "magixmod"],
                displayUsed: true,
                category: 'gear',
            });
            new G.Res({
                name: 'urn',
                desc: 'These can be used to store cremated [corpse] remains. People can store 4 [urn]s for every [burial spot]. [urn]s will also decay, requiring a new one to store the [corpse] remains again.',
                icon: [31, 6, "magixmod"],
                category: 'misc',
                tick: function (me, tick) {
                    var graves = G.getRes('burial spot');
                    if (me.amount > 0) {
                        //bury slowly
                        if (graves.amount > graves.used) {
                            if (G.checkPolicy('se08') == 'off') {
                                var amount = Math.min(graves.amount - graves.used, Math.max(1, randomFloor(me.amount * 0.1)));
                                graves.used += amount; G.lose('urn', amount * 4, 'burial');
                                changeHappiness(amount * 2, 'burial');
                            } else {
                                var amount = Math.min(graves.amount - graves.used, Math.max(1, randomFloor(me.amount * 0.1)));
                                graves.used += amount; G.lose('urn', amount * 5, 'burial');
                                changeHappiness(amount * 2, 'burial');
                            };
                        }
                    }
                    if (G.has('dark urn decay')) {
                        var toSpoil = me.amount * 0.002 * (G.getRes('corpsedecaypoint').amount);
                        var spent = G.lose('corpse', randomFloor(toSpoil), 'dark urn decay');
                    }
                    var toSpoil = me.amount * 0.001;
                    var spent = G.lose('urn', randomFloor(toSpoil), 'decay');
                }
            });
            new G.Res({
                name: 'seeds',
                desc: 'Some mixed seeds that may allow you to set up farms of [vegetables,Lettuce] or [sugar cane].',
                icon: [4, 4, "magix2"],
                partOf: 'misc materials',
                category: 'misc',
            });
            new G.Res({
                name: 'medicament brews',
                desc: 'A brew used to heal people from sickness.',
                icon: [12, 10, "magixmod"],
                meta: true,
            });
            new G.Res({
                name: 'various stones',
                desc: 'Different types of stones that can be used like a plain [stone].',
                icon: [3, 12, "magixmod"],
                category: 'build',
                partOf: 'archaic building materials',
            });
            new G.Res({
                name: 'various cut stones',
                desc: 'Different types of cut stones that can be used like regular [cut stone].',
                icon: [2, 12, "magixmod"],
                category: 'build',
                partOf: 'basic building materials',
            });
            new G.Res({
                name: 'nickel ore',
                desc: '[nickel ore,Nickel] can be found with better prospecting. They may be processed into [hard metal ingot]s.',
                icon: [9, 12, "magixmod"],
                tick: function (me, tick) {
                    var toSpoil = me.amount * 0.01;
                    var spent = G.lose(me.name, randomFloor(toSpoil), 'decay');
                },
                category: 'ore',
            });
            new G.Res({
                name: 'platinum ore',
                desc: '[platinum ore,Platinum] can be found with better prospecting and with some luck, but only by a [quarry]. May be processed into [precious metal ingot]s.',
                icon: [8, 12, "magixmod"],
                tick: function (me, tick) {
                    var toSpoil = me.amount * 0.01;
                    var spent = G.lose(me.name, randomFloor(toSpoil), 'decay');
                },
                category: 'ore',
            });
            new G.Res({
                name: 'platinum ingot',
                desc: '[platinum ingot]s are used to craft precious items, building materials, and more.',
                icon: [3, 11, "magixmod"],
                tick: function (me, tick) {
                    var toSpoil = me.amount * 0.01;
                    var spent = G.lose(me.name, randomFloor(toSpoil), 'decay');
                },
                category: 'build',
            });
            new G.Res({
                name: 'platinum block',
                desc: 'A valuable, if unreliable construction material. Made from [platinum ingot]. Similar to [gold block]s and [gem block]s, albeit more expensive.',
                icon: [4, 11, "magixmod"],
                partOf: 'precious building materials',
                category: 'build',
            });
            new G.Res({
                name: 'paper',
                desc: 'The amount of all paper types you currently have.',
                icon: [14, 12, "magixmod"],
                tick: function (me, tick) {
                    var toSpoil = me.amount * 0.01;
                    var spent = G.lose(me.name, randomFloor(toSpoil), 'decay');
                },
                category: 'misc'
            });
            new G.Res({
                name: 'bone dust',
                desc: 'Made with knapping in bone. It is an ingredient used to make strenghtening brews or brews of revenant.',
                icon: [18, 11, "magixmod"],
                tick: function (me, tick) {
                    var toSpoil = me.amount * 0.01;
                    var spent = G.lose(me.name, randomFloor(toSpoil), 'decay');
                },
                category: 'alchemyingredients',
            });
            new G.Res({
                name: 'enchanted ice',
                desc: 'Made from [mana], [ice], and [wind essence].',
                icon: [17, 11, "magixmod"],
                tick: function (me, tick) {
                    var toSpoil = me.amount * 0.01;
                    var spent = G.lose(me.name, randomFloor(toSpoil), 'decay');
                },
                category: 'alchemyingredients',
            });
            new G.Res({
                name: 'flowered sugar',
                desc: 'Made using some [sugar] and [flowers]. Not safe to eat!',
                icon: [18, 10, "magixmod"],
                tick: function (me, tick) {
                    var toSpoil = me.amount * 0.01;
                    var spent = G.lose(me.name, randomFloor(toSpoil), 'decay');
                },
                category: 'alchemyingredients',
            });
            new G.Res({
                name: 'dark fire pit',
                desc: 'Crafted from [fire pit]s and [dark essence]. This type of fire does not provide light or much warmth, but that may be for the better...',//Coming very very soon types of potions
                icon: [20, 12, "magixmod"],
                tick: function (me, tick) {
                    var toSpoil = me.amount * 0.01;
                    var spent = G.lose(me.name, randomFloor(toSpoil), 'decay');
                },
                category: 'alchemyingredients',
            });
            new G.Res({
                name: 'withering salt',
                desc: 'A result of combining [salt] and [dark essence]. Do not use it for any food, as it is very deadly to the body!',
                icon: [20, 10, "magixmod"],
                tick: function (me, tick) {
                    var toSpoil = me.amount * 0.01;
                    var spent = G.lose(me.name, randomFloor(toSpoil), 'decay');
                },
                category: 'alchemyingredients',
            });
            new G.Res({
                name: 'herb of the undead',
                desc: 'Crafted using a mysterious recipe that merges [herbs], [fruit], and [dark essence] into something new. Quite poisonous.',//Coming very very soon types of potions
                icon: [20, 11, "magixmod"],
                tick: function (me, tick) {
                    var toSpoil = me.amount * 0.01;
                    var spent = G.lose(me.name, randomFloor(toSpoil), 'decay');
                },
                category: 'alchemyingredients',
            });
            new G.Res({
                name: 'scobs of life',
                desc: 'Created using [scobs], [nature essence], [mana], and a little [water]. These are used in potions involving nature. Most people, however, seem to be allergic to it!',
                icon: [17, 13, "magixmod"],
                tick: function (me, tick) {
                    var toSpoil = me.amount * 0.01;
                    var spent = G.lose(me.name, randomFloor(toSpoil), 'decay');
                },
                category: 'alchemyingredients',
            });
            new G.Res({
                name: 'grass of growing',
                desc: 'Made by combining [herbs], [mana], and [nature essence]. Used in various nature-based potions. This grass can be the friend of soldiers and people who are trying to hide!',
                icon: [16, 13, "magixmod"],
                tick: function (me, tick) {
                    var toSpoil = me.amount * 0.01;
                    var spent = G.lose(me.name, randomFloor(toSpoil), 'decay');
                },
                category: 'alchemyingredients',
            });
            new G.Res({
                name: 'windy sugar',
                desc: 'A strange and hard-to-store material created by using [sugar], [mana], and [wind essence] and can sometimes be used to fend off annoying creatures. Sweet and tasty but pretty unstable (because it moves, swirls, and levitates all over the place).',
                icon: [14, 13, "magixmod"],
                tick: function (me, tick) {
                    var toSpoil = me.amount * 0.01;
                    var spent = G.lose(me.name, randomFloor(toSpoil), 'decay');
                },
                category: 'alchemyingredients',
            });
            let madeUnlockMessageP = false
            new G.Res({
                name: 'paradise tablet',
                desc: 'A heavy tablet that you will get after activating a Paradise portal. Needed to unlock further researching. It is a pass for further adventures and discoveries. You can obtain only one Tablet of this type. <b>@God called you to his world...</b>',
                icon: [20, 9, "magixmod"],
                startWith: 0,
                tick: function (me, tick) {
                    if (me.amount >= 1 && !madeUnlockMessageP) {
                        G.Message({ type: 'tabletobtain', text: '<b>You and your people activated the passage to Paradise. Out of the portal a Tablet falls and falls next to your feet. A large golden portal shines and you can see what is beyond it. You come through and notice it is perfect to live. It feels like now it is the time for more discoveries.</b>', icon: [8, 4, "magixmod"] });
                        madeUnlockMessageP = true
                        G.playSound(magixURL + 'GainedEmblem.mp3');
                    }
                    if (G.has('paradise building')) {
                        me.hidden = true
                    }
                },
                category: 'main',
            });
            new G.Res({
                name: 'combat potion pot',
                displayName: 'Pot of darkness',
                desc: 'A harmful type of liquid that is best to stay away from normally, but used as un upkeep for some large structures.',//soldiers are InFartherDev
                icon: [17, 16, "magixmod"],
                tick: function (me, tick) {
                    var toSpoil = me.amount * 0.0008;
                    var spent = G.lose(me.name, randomFloor(toSpoil), 'decay');
                },
                category: 'misc',
            });
            new G.Res({
                name: 'jar for concoctions',
                desc: 'Concoctions are used as an ingredient for stronger potions or to store potions that cannot be stored in a normal [potion pot].',//soldiers are InFartherDev
                icon: [18, 16, "magixmod"],
                tick: function (me, tick) {
                    var toSpoil = me.amount * 0.0008;
                    var spent = G.lose(me.name, randomFloor(toSpoil), 'decay');
                },
                category: 'misc',
            });
            new G.Res({
                name: 'black fog',
                desc: 'This potion makes fog around a victim after the pot is opened. It is particularly dangerous when released near the eyes.',
                icon: [11, 16, "magixmod"],
                tick: function (me, tick) {
                    var toSpoil = me.amount * 0.0008;
                    var spent = G.lose(me.name, randomFloor(toSpoil), 'decay');
                },
                category: 'alchemypotions',
                partOf: 'combat potions'
            });
            new G.Res({
                name: 'point of venom',
                desc: 'This item is carefully crafed from some [magic essences,Essences] and acts as a pretty strong poison.',
                icon: [10, 16, "magixmod"],
                tick: function (me, tick) {
                    var toSpoil = me.amount * 0.0008;
                    var spent = G.lose(me.name, randomFloor(toSpoil), 'decay');
                },
                category: 'alchemypotions',
                partOf: 'combat potions'
            });
            new G.Res({
                name: 'windy spikes',
                desc: 'Releases spikes made out of [wind essence] around and shatters in many directions, causing a risk of injury to those too close.',
                icon: [9, 16, "magixmod"],
                tick: function (me, tick) {
                    var toSpoil = me.amount * 0.0008;
                    var spent = G.lose(me.name, randomFloor(toSpoil), 'decay');
                },
                category: 'alchemypotions',
                partOf: 'combat potions'
            });
            new G.Res({
                name: 'back to grave',
                desc: 'Send a [wild corpse] to its permanent death. This item can be used to counter them later on...',
                icon: [8, 16, "magixmod"],
                tick: function (me, tick) {
                    var toSpoil = me.amount * 0.0008;
                    var spent = G.lose(me.name, randomFloor(toSpoil), 'decay');
                },
                category: 'alchemypotions',
                partOf: 'combat potions'
            });
            new G.Res({
                name: 'dark concoction',
                desc: 'Releases darkness from itself. If wrongly crafted, it may explode.',
                icon: [12, 16, "magixmod"],
                tick: function (me, tick) {
                    var toSpoil = me.amount * 0.0008;
                    var spent = G.lose(me.name, randomFloor(toSpoil), 'decay');
                    //Platinum and nickel patch
                    if (G.has('prospecting II')) {
                        G.getDict('rocky substrate').res['mine']['nickel ore'] = 0.03;
                        G.getDict('lush rocky substrate').res['mine']['nickel ore'] = 0.025;
                        G.getDict('tundra rocky substrate').res['mine']['nickel ore'] = 0.032;
                        G.getDict('warm rocky substrate').res['mine']['nickel ore'] = 0.029;
                        G.getDict('ice desert rocky substrate').res['mine']['nickel ore'] = 0.035;
                        G.getDict('jungle rocky substrate').res['mine']['nickel ore'] = 0.01;
                        G.getDict('badlands substrate').res['mine']['nickel ore'] = 0.011;
                    }
                    if (G.has('quarrying II')) {
                        G.getDict('rocky substrate').res['quarry']['platinum ore'] = 0.00001;
                        G.getDict('ice desert rocky substrate').res['quarry']['platinum ore'] = 0.00001;
                        G.getDict('warm rocky substrate').res['quarry']['platinum ore'] = 0.00001;
                        G.getDict('lush rocky substrate').res['quarry']['platinum ore'] = 0.000012;
                        G.getDict('tundra rocky substrate').res['quarry']['platinum ore'] = 0.0000125;
                        G.getDict('jungle rocky substrate').res['quarry']['platinum ore'] = 0.000007;
                        G.getDict('dead rocky substrate').res['quarry']['platinum ore'] = 0.00002;
                        G.getDict('badlands substrate').res['quarry']['platinum ore'] = 0.000013;
                    }
                },
                category: 'alchemypotions',
            });
            new G.Res({
                name: 'nature concoction',
                desc: 'Can be used to grow flowers. But don\'t hold it in your hands for too long or it may start growing vines on you!',
                icon: [13, 16, "magixmod"],
                tick: function (me, tick) {
                    var toSpoil = me.amount * 0.0008;
                    var spent = G.lose(me.name, randomFloor(toSpoil), 'decay');
                },
                category: 'alchemypotions',
            });
            new G.Res({
                name: 'combat potions',
                desc: 'This is how many <b>combat potions</b> you have in total currently.',
                icon: [16, 16, "magixmod"],
                meta: true,
            });
            new G.Res({
                name: 'magic essences',
                desc: 'This is the total amount of all [magic essences,Essence types] you currently have. These are important to [wizard]s and are greatly respected among them, and require their respective essence storage.',
                icon: [20, 13, "magixmod"],
                meta: true
            });
            //Currency
            new G.Res({
                name: 'industry point',
                desc: 'You can use these points to set up some industries in the Paradise. Depending on the path that your civilization took, you will have a different limit for these points!',
                icon: [0, 14, "magixmod"],
                displayUsed: true,
                category: 'main'
            });
            new G.Res({
                name: 'worship point',
                desc: '<font color="#ffd71d">You can use these points to decide which Seraphins will be trusted by your people.</font>',
                icon: [1, 14, "magixmod"],
                category: 'main',
            });
            //Essence limits which can be increased by buying storages for essences

            new G.Res({
                name: 'fire essence limit',
                desc: 'The higher the limit, the more essence you can store.',
                icon: [0, 2, "magixmod"],
                hidden: true,
            });
            new G.Res({
                name: 'water essence limit',
                desc: 'The higher the limit, the more essence you can store.',
                icon: [0, 1, "magixmod"],
                hidden: true,
            });
            new G.Res({
                name: 'lightning essence limit',
                desc: 'The higher the limit, the more essence you can store.',
                icon: [0, 3, "magixmod"],
                hidden: true,
            });
            new G.Res({
                name: 'wind essence limit',
                desc: 'The higher the limit, the more essence you can store.',
                icon: [1, 1, "magixmod"],
                hidden: true,
            });
            new G.Res({
                name: 'nature essence limit',
                desc: 'The higher the limit, the more essence you can store.',
                icon: [1, 2, "magixmod"],
                hidden: true,
            });
            new G.Res({
                name: 'dark essence limit',
                desc: 'The higher the limit, the more essence you can store.',
                icon: [1, 3, "magixmod"],
                hidden: true,
            });
            new G.Res({
                name: 'mana capacity',
                desc: 'The higher the limit, the more mana can be stored.',
                icon: [2, 3, "magixmod"],
                hidden: true,
            });
            new G.Res({
                name: 'holy essence limit',
                desc: 'The higher the limit, the more essence can be stored.',
                icon: [20, 6, "magixmod"],
                hidden: true,
            });
            new G.Res({
                name: 'cemetarium construction point',
                displayName: 'Cemetarium points',
                icon: [0, 2, "magix2"],
                hidden: true,
            });
            new G.Res({
                name: 'pagoda construction point',
                displayName: 'Pagoda points',
                icon: [1, 2, "magix2"],
                hidden: true
            });
            new G.Res({
                name: 'fortress construction point',
                displayName: 'Fortress Points',
                icon: [2, 2, "magix2"],
                hidden: true
            });
            new G.Res({
                name: 'complex construction point',
                displayName: 'Complex points',
                icon: [choose([1, 4, 7]), 17, "magixmod"],
                hidden: true
            });
            //New content
            new G.Res({
                name: 'florist\'s notes',
                icon: [36, 35, "magixmod"],
                tick: function (me, tick) {
                    var toSpoil = me.amount * 0.01;
                    var spent = G.lose(me.name, randomFloor(toSpoil), 'decay');
                },
                category: 'misc',
                hidden: true,
            });
            new G.Res({
                name: 'heating capability',
                desc: 'Each unit of [heating capability] allows you to keep moderate temperature for one [population,Person].//The number on the left is how much capability is occupied, while the number on the right is how much you have in total.',
                icon: [22, 2, "magixmod"],
                tick: function (me, tick) {
                    var amount = 0;
                    amount += G.getRes('fire pit').amount * 5;
                    me.amount = amount;
                    if (me.amount > 0) me.hidden = false;
                },
                getDisplayAmount: function () {
                    return B(Math.min(this.displayedAmount, G.getRes('population').displayedAmount)) + '<wbr>/' + B(this.displayedAmount);
                },
                hidden: true,
            });
            new G.Res({
                name: 'poet\'s notes',
                icon: [34, 35, "magixmod"],
                tick: function (me, tick) {
                    var toSpoil = me.amount * 0.01;
                    var spent = G.lose(me.name, randomFloor(toSpoil), 'decay');
                },
                category: 'misc',
                hidden: true,
            });
            new G.Res({
                name: 'lawyer\'s notes',
                icon: [35, 35, "magixmod"],
                tick: function (me, tick) {
                    var toSpoil = me.amount * 0.01;
                    var spent = G.lose(me.name, randomFloor(toSpoil), 'decay');
                },
                category: 'misc',
                hidden: true,
            });
            new G.Res({
                name: 'empty book',
                desc: 'A book which can be filled with knowledge, instructions, and much much more.',
                icon: [13, 12, "magixmod"],
                tick: function (me, tick) {
                    var toSpoil = me.amount * 0.01;
                    var spent = G.lose(me.name, randomFloor(toSpoil), 'decay');
                },
                category: 'misc',
                partOf: 'books',
            });
            //Types of books
            new G.Res({
                name: 'nature book',
                desc: 'A book written by writers with the help of a [florist]\'s notes.',
                icon: [2, 13, "magixmod"],
                tick: function (me, tick) {
                    var toSpoil = me.amount * (G.getRes('nature book').amount + G.getRes('spellbook').amount + G.getRes('novel').amount + G.getRes('book of law').amount > G.getUnitAmount('library') * 2000 ? 0.02 : 0.002);
                    var spent = G.lose(me.name, randomFloor(toSpoil), 'decay');
                },
                category: 'misc',
            });
            new G.Res({
                name: 'spellbook',
                desc: 'A book written by writers with the help of a [wizard]\'s notes.',
                icon: [3, 13, "magixmod"],
                tick: function (me, tick) {
                    var toSpoil = me.amount * (G.getRes('nature book').amount + G.getRes('spellbook').amount + G.getRes('novel').amount + G.getRes('book of law').amount > G.getUnitAmount('library') * 2000 ? 0.02 : 0.002);
                    var spent = G.lose(me.name, randomFloor(toSpoil), 'decay');
                },
                partOf: 'books',
                category: 'misc',
            });
            new G.Res({
                name: 'novel',
                desc: 'A book written by writers with the help of the beautiful notes of your [poet]s.',
                icon: [5, 6, "magix2"],
                tick: function (me, tick) {
                    var toSpoil = me.amount * (G.getRes('nature book').amount + G.getRes('spellbook').amount + G.getRes('novel').amount + G.getRes('book of law').amount > G.getUnitAmount('library') * 2000 ? 0.02 : 0.002);
                    var spent = G.lose(me.name, randomFloor(toSpoil), 'decay');
                },
                partOf: 'books',
                category: 'misc',
            });
            new G.Res({
                name: 'book of law',
                desc: 'The book written with the help of a [lawyer]\'s thoughts.',
                icon: [0, 13, "magixmod"],
                tick: function (me, tick) {
                    var toSpoil = me.amount * (G.getRes('nature book').amount + G.getRes('spellbook').amount + G.getRes('novel').amount + G.getRes('book of law').amount > G.getUnitAmount('library') * 2000 ? 0.02 : 0.002);
                    var spent = G.lose(me.name, randomFloor(toSpoil), 'decay');
                },
                partOf: 'books',
                category: 'misc',
            });
            new G.Res({
                name: 'ambrosium leaf',
                desc: 'These leaves may be used to gather [ambrosium shard]s with the help of some other magical materials.',
                icon: [12, 14, "magixmod"],
                tick: function (me, tick) {
                    var toSpoil = me.amount * 0.003;
                    var spent = G.lose(me.name, randomFloor(toSpoil), 'decay');
                },
                category: 'misc',
            });
            new G.Res({
                name: 'ambrosium shard',
                desc: 'It is a merged and hardened form of [ambrosium leaf,Ambrosium leaves], it seems. These shiny objects will have their own use!',
                icon: [14, 14, "magixmod"],
                tick: function (me, tick) {
                    var toSpoil = me.amount * 0.003;
                    var spent = G.lose(me.name, randomFloor(toSpoil), 'decay');
                },
                category: 'misc',
            });
            new G.Res({
                name: 'sulfur',
                desc: 'Something used to craft pyromaniac-related toys. They make quite a nice show.',
                icon: [17, 15, "magixmod"],
                tick: function (me, tick) {
                    var toSpoil = me.amount * 0.0075;
                    var spent = G.lose(me.name, randomFloor(toSpoil), 'decay');
                },
                category: 'misc',
            });

            new G.Res({
                name: 'light explosives',
                desc: 'These are dangerous and decay over time, but can be used to break a wall or used in mining. These little things have a small blast radius <b>but are still dangerous</b> for humans. It\'s best for the average person to leave them untouched.',
                icon: [19, 15, "magixmod"],
                tick: function (me, tick) {
                    var toSpoil = me.amount * 0.009;
                    var spent = G.lose(me.name, randomFloor(toSpoil), 'decay');
                },
                category: 'misc',
            });
            new G.Res({
                name: 'meals',
                desc: '[meals] are tastier than most types of [food]. All [meals] will make people happy and provide some bonus [health] benefits.',
                icon: [7, 2, "magix2"],
                turnToByContext: { 'eating': { 'health': 0.03, 'happiness': 0.05, 'bone': 0.1 }, 'decay': { 'meals': 0.2, 'spoiled food': 0.8 } },
                category: 'food',
                partOf: 'food',
                tick: function (me, tick) {
                    if (G.has('art of cooking II')) G.getDict('meals').turnToByContext['decay'] = { 'meals': 0.3, 'spoiled food': 0.7 }
                    if (G.has('art of cooking III')) {
                        //People cooking meals
                        var recipes1 = ['cooked meat', 'cooked meat', 'cooked meat', 'cooked seafood', 'cooked seafood', 'cooked seafood']
                        var recipes2 = ['herbs', 'fruit', 'vegetables', 'herbs', 'fruit', 'vegetables']
                        var cookingAmount = Math.ceil(G.getRes('population').amount / 750)
                        var index = Math.floor(0.1 * (G.day % 60))
                        var spent1 = G.lose(recipes1[index], cookingAmount, 'people cooking')
                        var spent2 = G.lose(recipes2[index], cookingAmount * 0.5, 'people cooking')
                        G.gain('meals', Math.min(spent1, spent2), 'people cooking')
                    }
                }
            });
            new G.Res({
                name: 'cloud',
                desc: 'Useful with big bunches of it, and can be obtained when filtering [cloudy water].',
                icon: [25, 9, "magixmod"],
                tick: function (me, tick) {
                    var toSpoil = me.amount * 0.009;
                    var spent = G.lose(me.name, randomFloor(toSpoil), 'decay');
                },
                category: 'misc',
            });
            new G.Res({
                name: 'basic factory equipment',
                displayName: 'Basic factory part',
                desc: 'Without these parts, some complicated machines would be impossible to put together! These parts include metal hooks, weights, or conveyor pieces.',
                icon: [choose([9, 10]), 18, "magixmod"],
                category: 'gear',
            });
            //But books has to be stored somewhere right?
            new G.Res({
                name: 'book storage',
                desc: 'Each unit of [book storage] slows decay for one [books,Book].',
                icon: [21, 4, "magixmod"],
                getDisplayAmount: function () {
                    return B(Math.min(this.displayedAmount, G.getRes('books').displayedAmount)) + '<wbr>/' + B(this.displayedAmount);
                },
                meta: true
            });
            new G.Res({
                name: 'books',
                desc: 'All the books that you own.',
                icon: [13, 12, "magixmod"],
                meta: true,
                hidden: true,
                category: 'misc',
            });
            //To make game not crash by precious pots i had to add it
            new G.Res({
                name: 'wizard',
                desc: 'Your [elder]s can become [wizard]s, who are essential to upkeep [fire wizard tower,Wizard towers], [Wizard Complex,Wizard Complexes] and other buildings related to magic constructions. //Some constructions will need many, many [wizard]s to upkeep it.',
                icon: [2, 7, "magixmod"],
                displayUsed: true,
                category: 'demog',
            });
            new G.Res({
                name: 'alchemist',
                desc: 'Adult alchemists can be hired to a special category of jobs that are similar to their younger visages. After they become an [elder], they will retire.//The number on the left is how many are currently being employed, while the number on the right is your total amount of adult alchemists.',
                icon: [12, 5, "magixmod"],
                partOf: 'population',
                displayUsed: true,
                tick: function (me, tick) {
                    var n = randomFloor(G.getRes('alchemist').amount * 0.0002); G.gain('elder', n, 'aging up'); G.lose('alchemist', n, 'aging up');
                },
                category: 'demog',
            });
            new G.Res({
                name: 'prisoner',
                desc: 'Some [adult]s will commit various crimes and get arrested because of them. To prevent [prisoner]s from escaping, causing more damage to your civilization, you need to set up some [prison]s. //Prisoners are usually [thief,Thieves] sentenced for their crimes. The amount of [prisoner]s that escape, get freed, and get a death sentence will vary based on the crime and punishment level you choose.',
                partOf: 'population',
                icon: [17, 0, "magixmod"],
                tick: function (me, tick) {
                    //Various things about prisoners added properly by @1_e0 (pretty complex, right?)
                    var punishmentLevel = G.has('CaP(light)') ? 0.7 : (G.has('CaP(cruel)') ? 1.4 : 1)
                    var fleeMult = (G.has('sharp edges') ? 0.0075 : (G.has('fragile bars') ? 0.0125 : 0.01)) * (G.has('longer prison sentences') ? 1.2 : (G.has('shorter prison sentences') ? 0.6 : 1))
                    var freedAmount = randomFloor(G.getRes('prisoner').amount * 0.012 / punishmentLevel) * (G.has('longer prison sentences') ? 0.6 : (G.has('shorter prison sentences') ? 1.2 : 1))
                    G.lose('prisoner', freedAmount, 'serving their sentence');
                    G.gain('adult', freedAmount, 'serving their sentence');
                    var freedAmount = randomFloor(G.getRes('prisoner').amount * fleeMult * punishmentLevel / (G.has('imprisonment III') ? 3 : 1))
                    G.lose('prisoner', freedAmount, 'escaping prison');
                    G.gain('thief', freedAmount, 'escaping prison');
                    if (!G.has('CaP(light)') && Math.random() < (G.has('CaP(cruel)') ? 0.18 : 0.1)) G.lose('prisoner', G.getRes('prisoner').amount * 0.3 * fleeMult, 'death sentence');
                },
                category: 'demog',
            });
            let madeWarnCorpseMesg = false
            new G.Res({
                name: 'wild corpse',//InDevelopment
                desc: 'Effect of the [revenants] trait. They will kill your normal population, so think about hiring soldiers!',
                icon: [19, 11, "magixmod"],
                tick: function (me, tick) {
                    if (me.amount >= 300 && !madeWarnCorpseMesg) {
                        G.Message({ type: 'bad', text: '<b>Beware of Wild corpses!</b> Ever since you obtained <font color="#d21"><b>Revenants</b></font>, you noticed some insane corpses began to appear. They cause your dark essence to leak and, even worse, they will kill your people! Slay them at any opportunity that you can. Note that you\'ll be able to use <b>Back to grave</b> items from combat potion brewing to defend against them...', icon: [24, 0, "magixmod"] });
                        madeWarnCorpseMesg = true
                    }

                    //More content for wild corpses by @1_e0 because it's a shame all this code only had 2 chance types
                    const corpses = G.getDict('wild corpse').amount
                    const chances = [
                        {
                            type: "hurt",
                            below: 0.91
                        },
                        {
                            type: "hurt2",
                            below: 0.9105
                        },
                        {
                            type: "died",
                            below: 0.992
                        },
                        {
                            type: "nothing",
                            below: 1000
                        }
                    ]
                    const chance = Math.random()
                    let action
                    //Find what to do
                    for (let i = 0; !action; i++) {
                        if (chance < chances[i].below * (G.has('liberating darkness') ? 0.97 : 1))
                            action = chances[i].type
                    }
                    //Execute
                    if (day + leap <= 40 && day + leap >= 46 && !G.has('peace')) {
                        if (action === "nothing") {
                            G.lose("dark essence", randomFloor(G.getRes('dark essence') * 0.0002), "wild corpse essence sapping")
                        }
                        switch (action) {
                            case "hurt":
                                var cAmount = corpses * 0.004
                                if (G.getRes('back to grave').amount >= cAmount * 0.16) {
                                    G.lose('back to grave', cAmount * 0.16, 'back to grave items')
                                    G.lose("adult", randomFloor(cAmount * 0.2 * Math.random()), "wild corpse encounter")
                                    G.gain("wounded", randomFloor(cAmount * 0.2 * Math.random()), "wild corpse encounter")
                                } else {
                                    G.lose("adult", cAmount, "wild corpse encounter")
                                    G.gain("wounded", cAmount, "wild corpse encounter")
                                }
                                break
                            case "hurt2":
                                var cAmount = corpses * 0.0125
                                if (G.getRes('back to grave').amount >= cAmount * 0.4) {
                                    G.lose('back to grave', cAmount * 0.4, 'back to grave items')
                                    G.lose("adult", randomFloor(cAmount * 0.18 * Math.random()), "wild corpse battle")
                                    G.gain("wounded", randomFloor(cAmount * 0.18 * Math.random()), "wild corpse battle")
                                } else {
                                    G.lose("adult", cAmount, "wild corpse battle")
                                    G.gain("wounded", cAmount, "wild corpse battle")
                                }
                                break
                            case "died":
                                G.lose("adult", corpses * 0.0004, "wild corpse attack")
                                G.lose("elder", corpses * 0.001, "wild corpse attack")
                                break
                        }
                    }
                },
                category: 'demog',
            });

            new G.Res({
                name: 'wounded alchemist',
                desc: '[alchemist]s may get [wounded,wounded] due to work injuries. They do not [worker,work] but may slowly get better over time.',
                partOf: 'population', //There we may add a message for thieves!
                icon: [21, 2, "magixmod"],
                hidden: true
            });
            new G.Res({
                name: 'thief',
                desc: '[thief,Thieves] are angry or evil-minded adults that commit crimes. Even 200% [happiness] won\'t decrease their spawn rate to zero! They can steal resources and may wound or even <b>kill</b> your [population,people]. Without enough [guard]s they will quickly get out of hand!',
                icon: [23, 0, "magixmod"],
                category: 'demog',
                partOf: 'population',
                tick: function (me, tick) {
                    if (!(day + leap <= 40 && day + leap >= 46 && !G.has('peace')) || Math.random() < 0.1) {
                        if (G.year >= (G.has('t10') ? 80 - G.achievByName['pocket'].won * 2 : (G.has('t2') ? 100 - G.achievByName['unhappy'].won * 2 : 110)) && !G.has('t1') && G.resets > 0) { //The spawning rate is increased or decreased by various factors
                            var n = (G.getRes('adult').amount * 0.000001 * Math.min(300 - Math.min(G.getRes('happiness').amount / G.getRes('population').amount, 200), 160) * (G.has('at5') ? 0.75 : 1) * Math.pow(Math.min(Math.max(0.012 * G.year - 0.3, 0.9), 1.2), 3.5)) * (Math.random() * 0.4 + 0.8);
                            if (G.checkPolicy('se02') == 'on') {
                                G.gain('thief', n * 1.02, 'anger');
                            } else {
                                G.gain('thief', n, 'anger');
                            }
                            changeHappiness(-n * (Math.random() * 5 + 10), 'anger');
                        }
                    }
                    var toCalm = me.amount * 0.003 * (Math.random() + 0.4);
                    var spent = G.lose(me.name, randomFloor(toCalm), 'thief calmdown'); G.gain('adult', (toCalm), 'thief calmdown');
                    var toNeut = Math.random() < 0.2 ? randomFloor(me.amount * (0.0006 + Math.random() * 0.0005)) : 0;
                    if (G.has('CaP(cruel)')) {
                        var spent = G.lose(me.name, toNeut, 'exiled by a civilian');
                    } else {
                        var spent = G.lose(me.name, toNeut, 'civilian\'s kindness');
                        G.gain('adult', spent, 'civilian\'s kindness')
                    }
                }
            });
            //FLOWERS!,DYES!
            new G.Res({
                name: 'flowers',
                desc: 'Flowers gathered by a [florist] can be used in healing, and can also be used to make various [dyes].',
                icon: [11, 8, "magixmod"],
                partOf: 'misc materials',
                tick: function (me, tick) {
                    var toSpoil = me.amount * 0.02;
                    var spent = G.lose(me.name, randomFloor(toSpoil), 'decay');
                },
                visible: false,
                category: 'misc'
            });
            new G.Res({
                name: 'dyes',
                desc: 'Can be used for various things. Mostly used by painters or to add up some colour to something.',
                icon: [11, 7, "magixmod"],
                partOf: 'misc materials',
                category: 'misc',
                tick: function (me, tick) {
                    var toSpoil = me.amount * 0.01;
                    var spent = G.lose(me.name, randomFloor(toSpoil), 'decay');
                },
            });
            new G.Res({
                name: 'underworld tablet',
                desc: 'A heavy tablet that you will get after entering the Underworld. Needed to unlock further researches. (You can obtain only one Tablet of this type.) <b>@You brought plagues in exchange for discoveries. I hope you won\'t regret this choice later!</b>',
                icon: [13, 19, "magixmod"],
                startWith: 0,
                tick: function (me, tick) {
                    if (me.amount >= 1 && !UnderworldMESG) {
                        G.Message({ type: 'tabletobtain', text: '<b>You and your people activated a way to the Underworld. Out of nowhere, a Tablet appears behind you. It is hot to the touch and its red glowing is only something that will attract curses.</b><br><font color="fuschia">Prepare to tame 6 Devil\'s traits in order to continue your adventure! Without this tablet, the Underworld won\'t allow you discover its secrets...</font>', icon: [12, 19, "magixmod"] });
                        UnderworldMESG = true
                        G.playSound(magixURL + 'GainedEmblem.mp3');
                    }
                    if (G.has('underworld building 2/2')) {
                        me.hidden = true
                    }
                },
                category: 'main',
            });
            let u1popup = false
            let u2popup = false
            let u3popup = false
            let u4popup = false
            let u5popup = false
            let finalupopup = false
            new G.Res({
                name: 'new world point',
                displayName: "Devil's traits",
                icon: [9, 19, "magixmod"],
                startWith: 0,
                hidden: true,
                tick: function (me, tick) {
                    if (me.amount == 150 && !G.has('a feeling from the Underworld') && !u1popup) {
                        G.Message({ type: 'underworldig', text: 'As your people keep digging down, they start to feel rising temperatures, but not too hot yet. It feels like a fire is burning nearby! It feels like some soul from an earlier world really wants to say something...</b>', icon: [0, 19, "magixmod"] });
                        u1popup = true
                    }
                    if (me.amount == 350 && !G.has('a feeling from the Underworld') && !u2popup) {
                        G.Message({ type: 'underworldig', text: 'People continue digging down and more souls want to tell you things that you don\'t understand. A green soul that seems like a creation Nature essence also bit you (and then ran away)! People complain about the incessant heat.<br><b><font color="fuschia">The world you want to meet<br>will not give all it has right before your feet</font><br><font color="#f70054">Danger for people abounds<br>and the forbidden will become crowds!</font></b>', icon: [1, 19, "magixmod"] });
                        u2popup = true
                    }
                    if (me.amount == 600 && !G.has('a feeling from the Underworld') && !u3popup) {
                        G.Message({ type: 'underworldig', text: 'You see wizards using magic to cool down the world so people can continue digging down. Dark voices yell and make many people nearby scared. This doesn\'t seem good at all!<br><b><font color="teal">You want to see fear...but it keeps happening. Strange yells echo, clearly trying to cause fear in the minds of your people...</font></b>', icon: [2, 19, "magixmod"] });
                        u3popup = true
                    }
                    if (me.amount == 750 && !G.has('a feeling from the Underworld') && !u4popup) {
                        G.Message({ type: 'underworldig', text: 'Out of nowhere, people yell and run away in panic except small group of brave people who still dig down. Souls start to behave weird...or you just don\'t understand them yet. Suddenly an echo rings:<br><b><font color="red">Don\'t let the Gods<br>Send there his crowds<br>The danger for YOUR people abounds.</font></b>', icon: [3, 19, "magixmod"] });
                        u4popup = true
                    }
                    if (me.amount == 950 && !G.has('a feeling from the Underworld') && !u5popup) {
                        G.Message({ type: 'underworldig', text: 'A huge cavern starts to show while braves continued digging down. They run away to you...empowered weirdly by these souls. Another lightning essence creature paralyses you and water essence creatures have started behaving insane. Is this a greeting from a new world?<br><b><font color="silver">Alright ' + G.getName('ruler') + '...<br>Call your soul and make it go...<br>Right down to the <font color="red">UNDERWORLD</font></font></b>', icon: [4, 19, "magixmod"] });
                        u5popup = true
                    }
                    if (me.amount == 1500 && !G.has('a feeling from the Underworld') && !finalupopup) {
                        G.middleText('<font color="fuschia">Now ascend through the Underworld to continue unlocking the new world!</font>', 'slow')
                        finalupopup = true
                    }
                },
            });
            new G.Res({
                name: 'land of the Underworld',
                desc: 'The land you got from activating a portal to the Underworld, which is a place with new buildings. You may get more after unlocking new researches...',
                icon: [10, 19, "magixmod"],
                displayUsed: true,
                partOf: 'tl',
                category: 'terr'
            });
            //2nd tier essentials
            new G.Res({
                name: 'insight II',
                desc: '[insight II] represents your people\'s best ideas and random sparks of intuition.//' + limitDesc('[wisdom II]') + '//A variety of technologies require this higher tier of essential to be researched. <><font color="#bce8eb">Every 500 [insight] can be converted into 1 [insight II] point.</font>',
                icon: [18, 19, "magixmod"],
                category: 'main',
                limit: 'wisdom II',
                fractional: true, // Prevent RNG from ruining stuff at times
                getDisplayAmount: researchGetDisplayAmount,
                whenGathered: researchWhenGathered,
            });
            new G.Res({
                name: 'wisdom II',
                hidden: true,
                icon: [23, 19, "magixmod"],
                category: 'main',
            });
            new G.Res({
                name: 'culture II',
                desc: '[culture II] is produced when your people create truly beautiful and thought-provoking things.//' + limitDesc('[inspiration II]') + '//Culture is used to develop cultural traits. This is a higher tier essential. <><font color="#92eba0">Every 500 [culture] can be converted into 1 [culture II] point.</font>',
                icon: [19, 19, "magixmod"],
                category: 'main',
                limit: 'inspiration II',
                fractional: true,
                tick: function (me, tick) {
                    if (G.has('dt15')) {
                        var toSpoil = me.amount * 0.0002;
                        var spent = G.lose(me.name, randomFloor(toSpoil), 'culture sapping');
                    }
                },
                getDisplayAmount: researchGetDisplayAmount,
                whenGathered: researchWhenGathered,
            });
            new G.Res({
                name: 'inspiration II',
                hidden: true,
                icon: [10, 5],
                category: 'main',
            });
            new G.Res({
                name: 'faith II',
                desc: '[faith II] derives from all things highly divine, from meditation to sacrifices.//' + limitDesc('[spirituality II]') + '//Some cultural traits and technologies depend on faith. This is a higher tier essential. <><font color="#d7d4a2">Every 500 [faith] can be converted into 1 [faith II] point.</font>',
                icon: [17, 19, "magixmod"],
                category: 'main',
                limit: 'spirituality II',
                fractional: true,
                getDisplayAmount: researchGetDisplayAmount,
                whenGathered: researchWhenGathered,
                tick: function (me, tick) {
                    if (G.has('dt13')) {
                        var toSpoil = me.amount * 0.0002;
                        var spent = G.lose(me.name, randomFloor(toSpoil), 'faith sapping');
                    }
                }
            });
            new G.Res({
                name: 'spirituality II',
                hidden: true,
                icon: [22, 19, "magixmod"],
                category: 'main',
            });
            new G.Res({
                name: 'influence II',
                desc: '[influence II] is generated by significant power structures.//' + limitDesc('[authority II]') + '//Influence is required to enact most policies or remove traits. This is a higher tier essential. <><font color="#ffb0c8">Every 500 [influence] can be converted into 1 [influence II] point.</font>',
                icon: [20, 19, "magixmod"],
                category: 'main',
                limit: 'authority II',
                fractional: true,
                tick: function (me, tick) {
                    if (G.has('dt14')) {
                        var toSpoil = me.amount * 0.0002;
                        var spent = G.lose(me.name, randomFloor(toSpoil), 'influence sapping');
                    }
                },
                getDisplayAmount: researchGetDisplayAmount,
                whenGathered: researchWhenGathered,
            });
            new G.Res({
                name: 'authority II',
                hidden: true,
                icon: [24, 19, "magixmod"],
                category: 'main',
            });
            new G.Res({
                name: 'hardened clothes',
                desc: 'Sewn together from [dried leather] and embroidered with [thread]s, allowing it to decay much, much slower.//[population,People] that wear [hardened clothes,Hardened clothing] become more happy and healthy, and also feel quite safe. Having [hardened clothes,Hardened clothing] will change the icon of your [gatherer]s every so often.' + clothesInfo,
                icon: [choose([27, 28]), choose([0, 1]), "magixmod"],
                category: 'gear',
                tick: function (me, tick) {
                    if (G.has('magical presence') && !G.has('t7') && G.getRes('hardened clothes').amount >= 1) {
                        var toSpoil = me.amount * 0.00008
                        var spent = G.lose(me.name, randomFloor(toSpoil), 'decay')
                        var iconTick = +getObj('iconTick')
                        var chosenIcon = getObj('gatherIcon')
                        if (chosenIcon != null && isFinite(chosenIcon) && G.getDict('gatherer').icon[0] !== chosenIcon) {
                            G.getDict('gatherer').icon = [chosenIcon, 24, "magixmod"]
                        }
                        if (!isFinite(iconTick)) {
                            setObj('iconTick', 1)
                        } else if (iconTick === 100) {
                            setObj('iconTick', 0)
                            chosenIcon = choose([9, 10, 11, 12, 13])
                            setObj('gatherIcon', chosenIcon)
                            G.getDict('gatherer').icon = [chosenIcon, 24, "magixmod"]
                            if (l('unit-icon-0')) {
                                l('unit-icon-0').style.backgroundPosition = (chosenIcon * -24) + "px -576px"
                            }
                        } else {
                            setObj('iconTick', iconTick + 1)
                        }
                    }
                },
            });
            new G.Res({
                name: 'essenced seeds',
                desc: '[essenced seeds] are a magic-infused creation that uses [magic essences], [mana], and [seeds,Normal seeds]. These can be used to start farming magic flowers that will allow you to gather even more [magic essences,Magic essence].',
                icon: [27, 10, "magixmod"],
                category: 'misc',
                tick: function (me, tick) {
                    var toSpoil = me.amount * 0.008;
                    var spent = G.lose(me.name, randomFloor(toSpoil), 'decay');
                },
            });
            new G.Res({
                name: 'oil',
                displayName: 'Petroleum',
                desc: '[oil] is a flammable liquid hydrocarbon mixture. //<small>Mixtures labelled naphtha have been produced from natural gas condensates, petroleum distillates, and the distillation of coal tar and peat. (Or, in other words, it does something.)</small>',
                icon: [9, 6],
                category: 'misc',
                tick: function (me, tick) {
                    var toSpoil = me.amount * 0.001;
                    var spent = G.lose(me.name, randomFloor(toSpoil), 'decay');
                },
            });
            new G.Res({
                name: 'blue firework',
                desc: 'Happy New Year! You can launch this firework high into the sky...Provides [happiness] for every firework launched into the sky.',
                icon: [2, 0, 'seasonal'],
                tick: function (me, tick) {
                    var toSpoil = me.amount * 0.009;
                    var spent = G.lose(me.name, randomFloor(toSpoil), 'decay');
                },
                category: 'seasonal',
                hidden: true,
            });
            new G.Res({
                name: 'orange firework',
                desc: 'Happy New Year! You can launch this firework high into the sky...Provides [happiness] for every firework launched into the sky.',
                icon: [1, 0, 'seasonal'],
                tick: function (me, tick) {
                    var toSpoil = me.amount * 0.009;
                    var spent = G.lose(me.name, randomFloor(toSpoil), 'decay');
                },
                category: 'seasonal',
                hidden: true,
            });

            new G.Res({
                name: 'dark blue firework',
                desc: 'Happy New Year! You can launch this firework high into the sky...Provides [happiness] for every firework launched into the sky. This is a [dark essence,Dark-essenced] firework so that it can unleash its spectacular show during the day too!', icon: [5, 0, 'seasonal'],
                tick: function (me, tick) {
                    var toSpoil = me.amount * 0.009;
                    var spent = G.lose(me.name, randomFloor(toSpoil), 'decay');
                },
                category: 'seasonal',
                hidden: true,
            });
            new G.Res({
                name: 'dark orange firework',
                desc: 'Happy New Year! You can launch this firework high into the sky...Provides [happiness] for every firework launched into the sky. This is a [dark essence,Dark-essenced] firework so that it can unleash its spectacular show during the day too!',
                icon: [4, 0, 'seasonal'],
                tick: function (me, tick) {
                    var toSpoil = me.amount * 0.009;
                    var spent = G.lose(me.name, randomFloor(toSpoil), 'decay');
                },
                category: 'seasonal',
                hidden: true,
            });
            new G.Res({
                name: 'firecracker',
                desc: '[firecracker]s are fireworks but without [thread] attached.',
                icon: [3, 0, 'seasonal'],
                tick: function (me, tick) {
                    var toSpoil = me.amount * 0.009;
                    var spent = G.lose(me.name, randomFloor(toSpoil), 'decay');
                },
                category: 'seasonal',
                hidden: true,
            });
            new G.Res({
                name: 'corpsedecaypoint',
                displayName: 'Corpse decay point',
                icon: [3, 2, "magix2"],
                hidden: true,
            });
            new G.Res({
                name: 'deitytemplePoint',
                displayName: 'Deity temple points',
                icon: [4, 2, "magix2"],
                hidden: true,
            });
            new G.Res({
                name: 'godTemplePoint',
                displayName: 'God temple points',
                icon: [5, 2, "magix2"],
                hidden: true,
            });
            new G.Res({
                name: 'trial point',
                icon: [8, 27, "magixmod"],
                fractional: true,
                hidden: true,
            });
            new G.Res({
                name: 'blood',
                desc: 'You gain [blood] each year from trial victims (equal to the amount of murdered people). //<small>You start with 200 blood.</small>',
                icon: [33, 6, "magixmod"],
                startWith: 200,
                category: 'main',
                hidden: true
            });

            new G.Res({
                name: 'cultural balance',
                desc: '[cultural balance] is the main rule of the Cultural trial. It defines the rate of cultural stability in this plane.',
                startWith: 25,
                icon: [33, 7, "magixmod"],
                fractional: true,
                category: 'main',
                hidden: true,
                tick: function (me, tick) {
                },
                getIcon: function (me) {
                    var amount = me.amount;
                    if (amount <= 10) return [33, 11, "magixmod"];
                    else if (amount <= 20) return [33, 10, "magixmod"];
                    else if (amount > 20 && amount < 30) return [33, 7, "magixmod"];
                    else if (amount >= 30) return [33, 8, "magixmod"];
                    else if (amount >= 40) return [33, 9, "magixmod"];
                },
            });

            new G.Res({
                name: 'beyond',
                tick: function (me, tick) {
                    if (G.has('beyond the edge') && G.getRes('beyond').amount == 0) {
                        G.gain('beyond', 1)
                        G.lose('population', G.getRes('population').amount * 0.3, 'beyond the edge');
                        G.getRes('happiness').amount = 0; G.getRes('health').amount = 0;
                        G.getRes('insight').amount = 0; G.getRes('insight II').amount = 0;
                        G.getRes('culture').amount = 0; G.getRes('culture II').amount = 0;
                        G.getRes('faith').amount = 0; G.getRes('faith II').amount = 0;
                        G.getRes('influence').amount = 0; G.getRes('influence II').amount = 0;
                        G.getRes('science').amount = 0;
                    }
                    if (G.has('beyond the edge II') && G.getRes('beyond').amount == 1) {
                        G.gain('beyond', 1)
                        var toSick = G.getRes('adult').amount;
                        G.lose('adult', toSick);
                        G.gain('sick', toSick);
                        G.lose('population', G.getRes('population').amount * 0.4, 'beyond the edge II');
                        G.getRes('happiness').amount = 0; G.getRes('health').amount = 0;
                        G.getRes('insight').amount = 0; G.getRes('insight II').amount = 0;
                        G.getRes('culture').amount = 0; G.getRes('culture II').amount = 0;
                        G.getRes('faith').amount = 0; G.getRes('faith II').amount = 0;
                        G.getRes('influence').amount = 0; G.getRes('influence II').amount = 0;
                        G.getRes('science').amount = 0;
                    }
                }
            });
            new G.Res({
                name: 'wooden coin',
                desc: 'The lowest tier of currency used by the Pocket trial. To get 1 [silver coin] you will need 50 \u00D7 (Pocket trial completions \u00D7 3 + 1) [wooden coin]s. Can be used to buy primary and archaic resources.',
                category: 'misc',
                icon: [5, 25, "magixmod"],
                tick: function (me, tick) {
                    if (G.getRes('money storage').used >= G.getRes('money storage').amount) {
                        var toSpoil = me.amount * 0.004 * G.achievByName['pocket'].won;
                        var spent = G.lose(me.name, randomFloor(toSpoil), 'decay');
                    }
                },
            });
            new G.Res({
                name: 'silver coin',
                desc: 'The second tier of currency used by the Pocket trial. To get 1 [golden coin] you will need 50 \u00D7 (Pocket trial completions \u00D7 3 + 1) [silver coin]s. Can be used to buy basic resources.',
                category: 'misc',
                icon: [6, 25, "magixmod"],
                tick: function (me, tick) {
                    if (G.getRes('money storage').used >= G.getRes('money storage').amount) {
                        var toSpoil = me.amount * 0.004 * G.achievByName['pocket'].won;
                        var spent = G.lose(me.name, randomFloor(toSpoil), 'decay');
                    }
                },
            });
            new G.Res({
                name: 'golden coin',
                desc: 'The third and highest tier of currency used by the Pocket trial. Can be used to buy the most expensive resources of all...',
                category: 'misc',
                icon: [7, 25, "magixmod"],
                tick: function (me, tick) {
                    if (G.getRes('money storage').used >= G.getRes('money storage').amount) {
                        var toSpoil = me.amount * 0.004 * G.achievByName['pocket'].won;
                        var spent = G.lose(me.name, randomFloor(toSpoil), 'decay');
                    }
                },
            });
            new G.Res({
                name: 'university point',
                icon: [8, 12, 6, 4]
            });
            let MirrorMESG = false
            new G.Res({
                name: 'tablet \'o mirror',
                desc: 'A heavy tablet that you will get from opening the <b>Grand mirror</b> that allows you to double your [land] and [wtr]. (You can obtain only <b>one</b> Tablet of this type!) //<small><b>You are cloning the world via magic, but the more portals you open, the more unstable the world might become, which may lead to huge disasters!</b></small>',
                icon: [11, 30, "magixmod"],
                tick: function (me, tick) {
                    if (me.amount >= 1 && !MirrorMESG) {
                        G.Message({ type: 'tabletobtain', text: '<b>Your people finally made the Grand Mirror work like a normal portal. Out of nowhere, a bright Emblem appears behind you, followed by a smooth Tablet. The Tablet is cold to the touch and perfectly symmetrical and has a warning carved into it: "It is time to stop now...before something terrible happens."</b>', icon: [12, 19, "magixmod"] });
                        MirrorMESG = true
                        G.playSound(magixURL + 'GainedEmblem.mp3');
                    }
                    if (G.has('mirror world 2/2')) {
                        me.hidden = true
                    }
                },
                category: 'main',
            });
            new G.Res({
                name: 'money storage',
                desc: 'Each [money storage] unit lowers the rate of decay or theft for one unit of your money. A [wooden coin] uses 0.1 points of storage, a [silver coin] uses 1 point, and a valuable [golden coin] uses 5 points.//The number on the left is how much material storage is occupied, while the number on the right is how much you have in total. //Note: This is only available while in the Pocket trial.',
                icon: [12, 30, "magixmod"],
                tick: function (me, tick) {
                    me.used = (G.getRes('wooden coin').amount / 10) + (G.getRes('silver coin').amount) + (G.getRes('golden coin').amount * 5);
                },
                getDisplayAmount: function () {
                    return B(Math.min(this.displayedAmount, this.displayedUsedAmount)) + '<wbr>/' + B(this.displayedAmount);
                },
                displayUsed: true,
                category: 'demog'
            });
            new G.Res({
                name: 'lead ore',
                desc: 'Ore that can be processed into [hard metal ingot]s.',
                icon: [10, 4, "magixmod"],
                partOf: 'misc materials',
                category: 'ore',
            });
            new G.Res({
                name: 'mythril ore',
                desc: 'Ore that is harder to find than gold and silver. Can be processed into [mystical metal ingot]s.',
                icon: [10, 3, "magixmod"],
                partOf: 'misc materials',
                category: 'ore',
            });
            new G.Res({
                name: 'zinc ore',
                desc: 'Ore that can be processed into [hard metal ingot]s. Zinc is a slightly brittle metal at room temperature.',
                icon: [11, 3, "magixmod"],
                partOf: 'misc materials',
                category: 'ore',
            });
            new G.Res({
                name: 'osmium ore',
                desc: 'Ore that can be processed into [soft metal ingot]s. It is a hard, brittle, and bluish-white metal.',
                icon: [10, 2, "magixmod"],
                partOf: 'misc materials',
                category: 'ore',
            });
            new G.Res({
                name: 'blackium ore',
                desc: 'Ore that can be processed into [strong metal ingot]s.',
                icon: [11, 2, "magixmod"],
                partOf: 'misc materials',
                category: 'ore',
            });
            new G.Res({
                name: 'mystical metal ingot',
                desc: 'Can be used to craft [various metal block]s.',
                icon: [11, 6, "magixmod"],
                partOf: 'misc materials',
                category: 'build',
            });
            new G.Res({
                name: 'unknownium ore',
                desc: 'unknown ore \xaf\\_(\u30c4)_/\xaf //<small>we are not sure what it is</small>', //yeah I think the character encoding makes it even more unknownium, eh, pelletsstar?
                icon: [10, 5, "magixmod"],
                partOf: 'misc materials',
                category: 'ore',
            });
            new G.Res({
                name: 'dinium ore',
                desc: 'What can you even do with this ore? Seems like furnaces can\'t smelt it.',
                icon: [11, 5, "magixmod"],
                partOf: 'misc materials',
                category: 'ore',
            });
            new G.Res({
                name: 'pyrite',
                desc: 'A fool\'s gold. Cannot be smelted for [precious metal ingot]. Normally an annoying waste.',
                icon: [11, 4, "magixmod"],
                category: 'ore',
                partOf: 'misc materials',
            });
            new G.Res({
                name: 'slain corpse',
                icon: [3, 16, "magixmod"],
            });
            new G.Res({
                name: 'prison space',
                desc: 'Determines how many [thief,Thieves] and other criminals you can keep imprisoned. It is an important stat, as a lack of prison space will lead to an increased crime rate, which will cause unhappiness.',
                icon: [17, 2, "magixmod"],
                displayUsed: true,
                hidden: true,
                tick: function (me, tick) {
                    me.used = G.getRes('prisoner').amount > me.amount ? me.amount : G.getRes('prisoner').amount;
                }
            });
            new G.Res({
                name: 'various metal block',
                desc: 'A valuable, if unreliable construction material. Can be crafted by using [mythril ore], [dinium ore], [blackium ore], and various other materials.',
                icon: [10, 6, "magixmod"],
                partOf: 'precious building materials',
                category: 'build',
            });
            new G.Res({//WIP
                name: 'modernium ore',
                desc: 'A red ore with a pinkish tint. Interesting but is sadly a waste.',
                //desc: 'A red ore with a pinkish tint. Getting an ingot from it, however, requires a bit of luck. At least it can be smelt into random things like [coal]. Only obtainable if people will be led by [moderation]. Mind you, work on this ore isn\'t complete!',
                icon: [10, 8, "magixmod"],
                category: 'ore',
            });
            new G.Res({//WIP
                name: 'caretakium ore',
                desc: 'A dark green ore that is of some interest but has no use.',
                //desc: 'A dark green ore. Getting an ingot from it, however, requires a bit of luck. At least it can be used in some other purposes like forging blocks. Some people say it can be like a herb...but unedible. Only obtainable if people will be led by [caretaking]. Mind you, work on this ore isn\'t complete!',
                icon: [10, 7, "magixmod"],
                category: 'ore',
            });
            new G.Res({
                name: 'golden insight',
                desc: '[golden insight] is an essential required to research in the Faithful plane. You\'ll be able to purchase this strange resource! //To buy [golden insight], purchase this strange resource in the <b>Production</b> tab. But be careful...it costs [faith] and [insight]. Also, it can increase its cost by itself! //Just like [insight], [golden insight] will be limited by [wisdom].',
                icon: [35, 16, "magixmod"],
                category: 'main',
                limit: 'wisdom',
                getDisplayAmount: researchGetDisplayAmount,
                whenGathered: researchWhenGathered,
            });
            new G.Res({
                name: 'relic',
                desc: '[relic]s can be found underground and analyzed by [archaeologist]s. These are leftovers of civilizations you ruled in previous ascensions or previous generations in current one. Each [relic] has its own rarity, and any [relic] with a rarity above or equal to <font color="#8888ff">Rare</font> will be counted here. Just note that they slowly decay and are mainly used for providing various essentials.',
                icon: [8, 29, "magixmod"],
                tick: function (me, tick) {
                    var toSpoil = me.amount * 0.0001;
                    var spent = G.lose(me.name, randomFloor(toSpoil), 'decay');
                },
            });
            new G.Res({
                name: 'scoutW',
                displayName: 'Scout',
                icon: [24, 3],
                hidden: true,
            });
            new G.Res({
                name: 'snow',
                desc: 'Cold snow can be used to craft snowmen and make snowball fights, increasing the [happiness] of children slightly. Hire a [digger] to gather it.',
                icon: [9, 12, 'seasonal'],
                category: 'seasonal',
                hidden: true,
                turnToByContext: { 'Snow': { 'happiness': 0.001 } },
                tick: function (me, tick) {
                    var toSpoil = me.amount * 0.01;
                    var spent = G.lose(me.name, randomFloor(toSpoil), 'decay');
                },
            });
            new G.Res({
                name: 'christmas essence',
                desc: 'A part of Christmas. Can be gathered in ways related to it. Has its uses. Does not belong to [magic essences] officially until you unlock [sleep-speech] and [villas of victory].',
                icon: [3, 11, 'seasonal'],
                category: 'magic',
                hidden: true,
                tick: function (me, tick) {
                    var toSpoil = me.amount * 0.01;
                    var spent = G.lose(me.name, randomFloor(toSpoil), 'decay');
                    G.getRes('christmas essence limit').displayedAmount = G.getRes('christmas essence limit').amount; // limit display fix
                },
                limit: 'christmas essence limit',
                whenGathered: researchWhenGathered,
                partOf: 'magic essences',
            });
            new G.Res({
                name: 'christmas essence limit',
                icon: [8, 12, 3, 11, 'seasonal'],
                hidden: true,
            });
            new G.Res({
                name: 'child of Christmas',
                desc: '[child of Christmas,Children of Christmas] leave after many meetings with each other. Some of them even say they are elves, although this isn\'t confirmed!//After a while, they will grow up into [adult]s.//These children also eat and drink half as much as adults.//They can work as an [artisan of christmas,Artisan of Christmas], can be hired to take care about [christmas essence storage], and can also craft gifts for people, bringing [happiness]. @They are happy, despite being assigned to work (as long as their work is related to their favorite season, of course).',
                partOf: 'population',
                icon: [11, 3, "magix2"],
                hidden: true,
                displayUsed: true,
                category: 'demog'
            });
            new G.Res({
                name: 'christmas ornament',
                desc: 'The [artisan of christmas,Artisan of Christmas] can craft this. It is used to decorate Christmas trees, lamps, and many more. On decay, these may provide some [christmas essence].',
                icon: [choose([6, 7]), 11, 'seasonal'],
                category: 'seasonal',
                hidden: true,
                tick: function (me, tick) {
                    var toSpoil = me.amount * 0.01;
                    var spent = G.lose(me.name, randomFloor(toSpoil), 'decay');
                    if (G.getRes('christmas essence').amount < (G.getRes('christmas essence limit').amount - spent)) {
                        G.gain('christmas essence', randomFloor(toSpoil) * 3, 'festive ornament decay');
                    };
                },
            });
            new G.Res({
                name: 'festive light',
                desc: 'Used to decorate [house]s, streets, and many other places! Brings festivity to your civilization. Provides some [christmas essence] on decay.',
                icon: [choose([6, 7]), 12, 'seasonal'],
                category: 'seasonal',
                hidden: true,
                tick: function (me, tick) {
                    var toSpoil = me.amount * 0.007;
                    var spent = G.lose(me.name, randomFloor(toSpoil), 'decay');
                    if (G.getRes('christmas essence').amount < (G.getRes('christmas essence limit').amount - spent)) {
                        G.gain('christmas essence', randomFloor(toSpoil) / 4, 'festive light decor decay');
                    };
                },
            });
            new G.Res({
                name: 'snowman',
                desc: 'Used to decorate streets, [house]s, and many other buildings! Brings festivity to your civilization. Provides some [christmas essence] on decay.',
                icon: [12, 11, 'seasonal'],
                category: 'seasonal',
                hidden: true,
                tick: function (me, tick) {
                    if (G.has('snowmen')) G.gain('snowman', randomFloor(Math.pow(G.getRes('child').amount, 0.97) / 1700), 'children building snowmen');
                    var toSpoil = me.amount * (0.003 + 0.01 * Math.random());
                    var spent = G.lose(me.name, randomFloor(toSpoil), 'decay');
                },
            });
            new G.Res({ //debug res
                name: 'research',
                displayName: 'Researches',
                icon: [35, 3, "magixmod"],
                tick: function (me, tick) {
                    me.amount = G.techN;
                },
            });
            new G.Res({
                name: 'love',
                desc: 'Seasonal essential. //[love] can unlock new bonuses on some levels. //Obtaining unique valentine traits will allow you to gain points for that essential from more sources. The rate of gain depends on the [happiness] of your civilization.',
                icon: [10, 17, 'seasonal'],
                tick: function (me, tick) {
                    var xpreq = ((((G.getRes('love').amount + 10) * 35000) ^ (G.getRes('love').amount + 1)) * (G.getRes('love').amount + 3)) * ((G.getRes('love').amount + 1) / 1.85);
                    if (G.getRes('love xp').amount >= xpreq) {
                        G.getRes('love xp').amount = 0; me.amount++;
                    }
                },
                getDisplayAmount: function (me) {
                    if (G.getRes('population').amount <= 0) return '<b>None</b>';
                    var amount = G.getRes('love').amount;
                    var xpreq = ((((G.getRes('love').amount + 10) * 35000) ^ (G.getRes('love').amount + 1)) * (G.getRes('love').amount + 3)) * ((G.getRes('love').amount + 1) / 1.85);
                    return '<font color="yellow"><b>Lvl ' + B(amount + 1) + '</b></font> ' + B(G.getRes('love xp').amount) + '/<br>' + B(xpreq) + '';
                },
                getIcon: function (me) {
                    if (G.getRes('population').amount <= 0) return [17, 17, 'seasonal'];
                    else {
                        var amount = G.getRes('love').amount;
                        if (amount >= 15) return [16, 17, 'seasonal'];
                        else if (amount >= 12) return [15, 17, 'seasonal'];
                        else if (amount >= 10) return [14, 17, 'seasonal'];
                        else if (amount >= 8) return [13, 17, 'seasonal'];
                        else if (amount >= 5) return [12, 17, 'seasonal'];
                        else if (amount >= 3) return [11, 17, 'seasonal'];
                        else return [10, 17, 'seasonal'];
                    }
                },
                hidden: true,
            });
            new G.Res({ //debug res
                name: 'love xp',
                displayName: 'Love',
                icon: [10, 17, 'seasonal']
            });
            new G.Res({
                name: 'dark decay',
                desc: 'Completing <b>Buried</b> grants you [dark decay]! Starting with 150 slots and capping at 500, dark decay will take away [corpse]s. The cap of [dark decay] slots can be increased by gaining various early-game traits such as [fear of death]/[acceptance of death], or afterlife traits. @gaining this resource also activates the bonus from [voodoo spirit], if you have completed <b>Buried</b>',
                icon: [23, 5, "magixmod"],
                displayUsed: true,
                startWith: 50,
                tick: function (me) {
                    if (G.achievByName['buried'].won > 0 && me.amount > 0) {
                        if (!G.has('voodoo spirit')) {
                            G.gainTrait(G.traitByName['voodoo spirit'])
                        }
                        me.hidden = false;
                        if (G.getRes('corpse').amount > 0 && me.used < me.amount) {
                            G.getRes('corpse').amount--;
                            G.getRes('dark decay').used++;
                        }
                    }
                },
                hidden: true,
            });
            new G.Res({ //debug res
                name: 'tragedy',
                tick: function (me) {
                    if (me.amount == 1 && G.achievByName['???'].won == 0 && G.has('constellations')) {
                        G.Message({ type: 'story1', text: '<big>THIS IS THE END!</big>', icon: [10, 32, "magixmod"] });
                    }
                },
            });
            new G.Res({
                name: 'spookiness',
                desc: 'Seasonal essential. //[spookiness] is able to unlock new bonuses if you progress far enough! //Obtaining Halloween traits will allow you to gain points for that essential! Depending on [happiness], you may gain it slower or faster.',
                icon: [12, 8, 'seasonal'],
                tick: function (me, tick) {
                    var xpreq = ((((G.getRes('spookiness').amount + 10) * 55500) ^ (G.getRes('spookiness').amount + 1)) * (G.getRes('spookiness').amount + 3)) * ((G.getRes('spookiness').amount + 1) / 1.85);
                    if (G.getRes('spookiness xp').amount >= xpreq) {
                        G.getRes('spookiness xp').amount = 0; me.amount++;
                    }
                },
                getDisplayAmount: function (me) {
                    if (G.getRes('population').amount <= 0) return '<b>None</b>';
                    var amount = G.getRes('spookiness').amount;
                    var xpreq = ((((G.getRes('spookiness').amount + 10) * 55500) ^ (G.getRes('spookiness').amount + 1)) * (G.getRes('spookiness').amount + 3)) * ((G.getRes('spookiness').amount + 1) / 1.85);
                    return '<font color="yellow"><b>Lvl ' + B(amount + 1) + '</b></font> ' + B(G.getRes('spookiness xp').amount) + '/<br>' + B(xpreq) + '';
                },
                getIcon: function (me) {
                    if (G.getRes('population').amount <= 0) return [11, 8, 'seasonal'];
                    else {
                        var amount = G.getRes('spookiness').amount;
                        if (amount >= 14) return [18, 8, 'seasonal'];
                        else if (amount >= 12) return [17, 8, 'seasonal'];
                        else if (amount >= 10) return [16, 8, 'seasonal'];
                        else if (amount >= 7) return [15, 8, 'seasonal'];
                        else if (amount >= 4) return [14, 8, 'seasonal'];
                        else if (amount >= 2) return [13, 8, 'seasonal'];
                        else return [12, 8, 'seasonal'];
                    }
                },
                hidden: true,
            });
            new G.Res({
                name: 'spookiness xp',
                displayName: 'Spookiness',
                icon: [12, 8, 'seasonal'],
            });
            new G.Res({
                name: 'candy',
                desc: 'Sweet, tasty [candy,Candies] made just for Halloween. Spoils quite quickly but counts as [food], providing [happiness] at the cost of a little [health].',
                icon: [choose([3, 4]), 8, 'seasonal'],
                category: 'seasonal',
                hidden: true,
                partOf: 'food',
                turnToByContext: { 'eating': { 'happiness': 0.035, 'health': -0.01 } },
                tick: function (me, tick) {
                    var toSpoil = me.amount * 0.08;
                    var spent = G.lose(me.name, randomFloor(toSpoil), 'decay');
                },
            });
            new G.Res({
                name: 'halloween essence',
                desc: 'A part of Halloween. Can be gathered in ways related to it. Has usages. Does not belong to [magic essences] since it is a seasonal essence.',
                icon: [5, 8, 'seasonal'],
                category: 'magic',
                hidden: true,
                tick: function (me, tick) {
                    var toSpoil = me.amount * 0.01;
                    var spent = G.lose(me.name, randomFloor(toSpoil), 'decay');
                    G.getRes('halloween essence limit').displayedAmount = G.getRes('halloween essence limit').amount; // limit display fix
                },
                limit: 'halloween essence limit',
                partOf: 'magic essences',
                whenGathered: researchWhenGathered,
            });
            new G.Res({
                name: 'halloween essence limit',
                icon: [8, 12, 5, 8, 'seasonal'],
                hidden: true,
            });
            new G.Res({
                name: 'wandererW',
                displayName: 'Wanderer',
                icon: [2, 2],
                hidden: true,
            });
            new G.Res({
                name: 'land of the Past',
                desc: 'The land you got from activating a portal to the ancestors world. //It is said that this atmosphere is autumnal year-long.',
                icon: [18, 33, "magixmod"],
                displayUsed: true,
                category: 'terr',
                partOf: 'tl'
            });
            new G.Res({
                name: 'ancestors tablet',
                desc: 'A heavy tablet that you will get after activating the Ancestors portal. Needed to unlock further researching. It is a pass for further adventures and discoveries. You can obtain only one Tablet of this type. <b>@Ancestors called you to his world...</b>',
                icon: [3, 7, "magixmod"],
                startWith: 0,
                tick: function (me, tick) {
                    if (me.amount >= 1 && !madeUnlockMessageP) {
                        G.Message({ type: 'tabletobtain', text: '<b>You and your people activated a passage to the ancestors world. Out of the portal, a strange Tablet falls and falls next to your feet. A large ruby portal shines and you can now see what is beyond it! A comforting glow and autumn feel emits from the portal. It feels like now it is the time for more discoveries.</b>', icon: [30, 33, "magixmod"] });
                        madeUnlockMessageP = true
                        G.playSound(magixURL + 'GainedEmblem.mp3');
                    }
                    if (G.has('ancestors world building')) {
                        me.hidden = true
                    }
                },
                category: 'main',
            });
            new G.Res({
                name: 'herb essence',
                desc: '[herb essence] is a natural essence obtainable exclusively in Herbalia\'s plane. It is a requirement to please your population and to build the wonder of this plane!',
                icon: [36, 19, "magixmod"],
                partOf: 'magic essences',
                tick: function (me, tick) {
                    if (G.has('t7') && G.day % 10 == 0) {
                        var toSpoil = me.amount * 0.004;
                        var spent = G.lose(me.name, randomFloor(toSpoil), 'decay');
                    }
                },
                category: 'magic',
            });
            new G.Res({
                name: 'demon decay' //debug res to track if devil's trait 29 or ancestor 10 already worked or not
            });
            /*=====================================================================================
            UNITS
            =======================================================================================*/
            new G.Unit({
                name: 'gatherer',
                startWith: 4,
                desc: '@forages for basic [food], [water] and [archaic building materials,Various interesting things]<>A vital part of an early tribe, [gatherer]s venture in the wilderness to gather food, wood, and other things of note.',
                icon: [0, 2],
                cost: {},
                use: { 'worker': 1 },
                //upkeep:{'food':0.2},
                //alternateUpkeep:{'food':'spoiled food'},
                effects: [
                    { type: 'gather', context: 'gather', amount: 1.5, max: 3 },
                    { type: 'mult', value: 0.5, req: { 'frost': true } }, // added by Garchmop
                    { type: 'gather', context: 'hunt', amount: 0.1, max: 0.2, chance: 0.1, req: { 'carcass-looting': true } },
                    { type: 'gather', context: 'gather', what: { 'herbs': 2.5 }, req: { 'herbalism': false } },//To keep early game possible (there is a function within herbalism that provides more methods of herb gathering)
                    { type: 'gather', context: 'gather', what: { 'herbs': 3 }, req: { 't7': true } },//For the trial
                    //{type:'gather',context:'gather',what:{'water':1,'muddy water':1},amount:1,max:3,req:{'gathering focus':'water'}},
                    { type: 'gather', context: 'gather', what: { 'water': 0.8, 'muddy water': 0.8 }, amount: 1, max: 3, req: { 'droughtNew': false } },
                    { type: 'gather', context: 'gather', what: { 'water': 0.8 * 0.15, 'muddy water': 0.5 }, amount: 1, max: 3, req: { 'droughtNew': true } },
                    { type: 'gather', context: 'gather', what: { 'herbs': 0.5, 'fruit': 0.25, 'vegetables': 0.25 }, amount: 1, max: 1, req: { 'plant lore': true, 'fruit identification II': false } },
                    { type: 'gather', context: 'exotic', what: { 'herbs': 0.55, 'fruit': 0.275, 'vegetables': 0.25 }, amount: 1, max: 1, req: { 'fruit identification II': true } },
                    { type: 'gather', context: 'exotic', amount: 0.015, max: 1, req: { 'fruit identification': true, 'fruit identification II': false } },
                    { type: 'gather', context: 'exotic', amount: 0.015 * 1.25, max: 1, req: { 'fruit identification II': true } },
                    { type: 'gather', context: 'gather', what: { 'spices': 0.002 }, amount: 1, max: 1, req: { 'spicy foods': true, 'spicy foods II': false } },
                    { type: 'gather', context: 'gather', what: { 'spices': 0.003 }, amount: 1, max: 1, req: { 'spicy foods II': true, 'spicy foods III': false } },
                    { type: 'gather', context: 'gather', what: { 'spices': 0.009 }, amount: 1, max: 1, req: { 'spicy foods III': true } },
                    { type: 'gather', context: 'kelp', amount: 0.03, req: { 'aquatic food': true } },
                    { type: 'addFree', what: { 'worker': 0.1 }, req: { 'scavenging': true } },
                    { type: 'mult', value: 1.2, req: { 'harvest rituals': 'on' } },
                    { type: 'mult', value: 1.075, req: { 'focused gathering': true, 'moderation': true } },
                    { type: 'mult', value: 1.125, req: { 'focused gathering': true, 'caretaking': true } },
                    { type: 'mult', value: 0.2, req: { 'eat on gather': 'on' } },
                    //Random trends
                    { type: 'gather', context: 'gather', what: { 'stick': 0.035 }, req: { 'gtt1': true } },
                    { type: 'gather', context: 'gather', what: { 'water': 0.035 }, req: { 'gtt2': true } },
                    //Trial/Seraphin stuff
                    { type: 'gather', context: 'gather', what: { 'seafood': 35 }, req: { 't5': true } },
                    { type: 'mult', value: 0.2, req: { 't5': true } },
                    { type: 'mult', value: 0.4, req: { 't6': true } },
                    { type: 'mult', value: 0.8, req: { 'se12': 'on' } },
                    { type: 'mult', value: 0.85, req: { 'se07': 'on' } },
                    { type: 'gather', what: { 'health': 2 }, req: { 'mentors of nature III': true }, chance: 1 / 1000000 },
                    //Far foraging
                    { type: 'explore', explored: 0.008, unexplored: 0, req: { 'far foraging': 'on' }, chance: 1 / 4 },
                    { type: 'function', func: unitGetsConverted({}, 0.001, 0.03, true, '[X] [people] lost in terrain while foraging very far', 'gatherer got', 'gatherers got'), chance: 1 / 35, req: { 'far foraging': 'on' } },
                ],
                req: { 'tribalism': true, 't4': false },
                category: 'production',
                priority: 10,
            });

            new G.Unit({
                name: 'dreamer',
                desc: '@generates [insight] every now and then, which you can use to research early technologies<>A [dreamer] spends their time observing, thinking, and wondering why things are the way they are.',
                icon: [1, 2],
                cost: {},
                use: { 'worker': 1 },
                effects: [
                    { type: 'gather', what: { 'insight': 0.1 } },
                    { type: 'gather', what: { 'insight': 0.04 }, req: { 'symbolism': true } },
                    { type: 'gather', what: { 'insight': 0.04 }, req: { 'symbI': true } },
                    { type: 'gather', what: { 'insight': 0.05 }, req: { 'philosophy': true, 'symbolism II': false } },
                    { type: 'gather', what: { 'insight': 0.07 }, req: { 'symbolism II': true } },
                    { type: 'addFree', what: { 'worker': 0.1 }, req: { 'dreaming': true } },
                    { type: 'mult', value: 1.2, req: { 'wisdom rituals': 'on', 'ritualism II': false } },
                    { type: 'mult', value: 1.25, req: { 'wisdom rituals': 'on', 'ritualism II': true } },
                    { type: 'mult', value: 1.05, req: { 'knowledgeable': true } }, // NOTE: rootKnowEvolve() RELIES ON FIRST MULT VALUE TO BE EQUAL TO 1.05
                    { type: 'mult', value: 1.1, req: { 'bonus5': true } },
                    { type: 'mult', value: 1.3, req: { 'bonus6': true } },
                    { type: 'mult', value: 1.75, req: { 'philosophy II': true } },
                    { type: 'mult', value: 2 / 3, req: { 'dt18': true } },
                    { type: 'mult', value: 0.1, req: { 'eotm': true } },
                    { type: 'mult', value: 1.5, req: { 'se12': 'on' } },
                    { type: 'mult', value: 0.75, req: { 'se11': 'on' } },
                    { type: 'mult', value: 0.95, req: { 'se03': 'on' } },
                ],
                req: { 'speech': true, 't1': false/*Patience trial condition*/ },
                category: 'discovery',
                priority: 5,
            });

            new G.Unit({
                name: 'storyteller',
                desc: '@generates [culture] every now and then<>[storyteller]s gather the tribe around at nightfall to tell the tales of their ancestors.',
                icon: [14, 2],
                cost: {},
                use: { 'worker': 1 },
                upkeep: { 'food': 0.1 },
                effects: [
                    { type: 'gather', what: { 'culture': 0.1 } },
                    { type: 'gather', what: { 'culture': 0.05 }, req: { 'symbolism': true, 'symbolism II': false } },
                    { type: 'gather', what: { 'culture': 0.07 }, req: { 'symbolism II': true } },
                    { type: 'addFree', what: { 'worker': 0.05 }, req: { 'artistic gray cells': true, 'oral tradition': true } },
                    { type: 'mult', value: 1.3, req: { 'artistic thinking': true } },
                    { type: 'mult', value: 1.2, req: { 'wisdom rituals': 'on', 'ritualism II': false } },
                    { type: 'mult', value: 1.25, req: { 'wisdom rituals': 'on', 'ritualism II': true } },
                    { type: 'mult', value: 1.05, req: { 'culture rise': true } }, // NOTE: rootCultureEvolve() RELIES ON FIRST MULT VALUE TO BE EQUAL TO 1.05
                    { type: 'mult', value: 0.1, req: { 'eotm': true } },
                    { type: 'mult', value: 0.9, req: { 'se12': 'on' } },
                    { type: 'mult', value: 2, req: { 'se03': 'on' } },
                ],
                req: { 'oral tradition': true, 't3': false/*Cultural trial condition*/ },
                category: 'cultural',
            });

            new G.Unit({
                name: 'artisan',
                desc: '@starts with the ability to turn [stone]s into [knapped tools]@gains more modes as technology progresses<>An [artisan] dedicates their life to crafting various little objects by hand.//Note: [artisan]s will gain new modes of operation when you discover new technologies, such as crafting stone tools; you can press the button with 3 dots on the side of this unit to switch between those modes.',
                icon: [6, 2],
                cost: {},
                use: { 'worker': 1 },
                upkeep: { 'food': 0.1 },
                gizmos: true,
                modes: {
                    'knap': { name: 'Knap flint', icon: [0, 9], desc: 'Turn [stone]s into [knapped tools].' },
                    'knap bone': { name: 'Knap bone', icon: [0, 9, 8, 7], desc: 'Turn [bone]s into [knapped tools].', req: { 'bone-working': true } },
                    'stone tools': { name: 'Craft stone tools', icon: [1, 9], desc: 'Turn [stick]s and [stone]s into [stone tools].', req: { 'tool-making': true, 'tool refinery 2/2': false, 'manufacture units II': false, 'factories II': false }, use: { 'knapped tools': 1 } },
                    'stone weapons': { name: 'Craft stone weapons', icon: [5, 9], desc: 'Turn [stone]s and [stick]s into [stone weapons].', req: { 'spears': true, 'tool refinery 2/2': false, 'manufacture units II': false, 'factories II': false }, use: { 'knapped tools': 1 } },
                    'bows': { name: 'Craft bows', icon: [6, 9], desc: 'Turn [stone]s and [stick]s into [bow]s.', req: { 'bows': true, 'manufacture units II': false, 'factories II': false }, use: { 'stone tools': 1 } },
                    'arrows': { name: 'Craft arrows', icon: [13, 7, "magixmod"], desc: 'Turn [lumber] and [stone]s into [arrow]s.', req: { 'bows': true, 'manufacture units II': false, 'factories II': false }, use: { 'stone tools': 1 } },
                    'baskets': { name: 'Weave baskets', icon: [14, 7], desc: 'Turn [stick]s into [basket]s.', req: { 'basket-weaving': true }, use: { 'knapped tools': 1 } },
                    'candies': { name: 'Craft candies', icon: [4, 8, 'seasonal'], desc: 'Your artisan will craft [candy,Candies] using [sugar] and a little bit of [paper].', req: { 'candy-crafting': true, 'tribalism': false } },
                    'wheat': { name: 'Craft flour', icon: [23, 10, "magixmod"], desc: 'Turn [wheat] into [flour].', req: { 'flour-crafting I': true }, use: { 'knapped tools': 1 } },
                    'wands': { name: 'Craft wands', icon: [6, 4, "magixmod"], desc: 'Your artisan will craft an important tool used by wizards. Uses 4 [stick]s and 1 [stone] for each [wand].', req: { 'wizardry': true }, use: { 'stone tools': 2 } },
                    'ink': { name: 'Craft ink', icon: [18, 6, "magixmod"], desc: 'Your artisan will craft [ink] using [water] and [dyes,Dark dyes].', req: { 'ink crafting': true } },
                    'net': { name: 'Craft fishing net', icon: [13, 8, "magixmod"], desc: 'Your artisan will craft [fishing net]s using 30 wool [thread]s and a piece of [dried leather] to make it stronger.', req: { 'fishing II': true }, use: { 'stone tools': 2, 'worker': 1 } },
                    'firstaid': { name: 'Craft first aid things', icon: [9, 4, "magix2"], desc: 'Your artisan will craft equipment for [healer]s by producing [first aid things].', req: { 'first aid': true }, use: { 'stone tools': 1 } },
                    'dyes': { name: 'Craft dyes', desc: 'Your artisan will convert [flowers] into [dyes].', req: { 'plant lore II': true, 'manufacture units I': false, 'a gift from the mausoleum': true }, icon: [11, 7, "magixmod"] },
                    'book': { name: 'Craft books', icon: [13, 12, "magixmod"], desc: 'Your artisan will craft [empty book,books].', req: { 'bookcrafting': true }, use: { 'stone tools': 1 } },
                    'enchseeds': { name: 'Enchant seeds', icon: [27, 10, "magixmod"], desc: 'Enchant [seeds,Normal seeds] using [magic essences] and [mana]. These seeds can be useful for starting essence farms!', req: { 'seed-enchanting': true }, use: { 'wand': 1 } },
                },
                effects: [
                    { type: 'convert', from: { 'stone': 1 }, into: { 'knapped tools': 1 }, every: 5, mode: 'knap' },
                    { type: 'convert', from: { 'bone': 1 }, into: { 'knapped tools': 1 }, every: 5, mode: 'knap bone' },
                    //NO KNAPPING ANYMORE EFFECT
                    { type: 'mult', value: 0.05, req: { 'no knapping anymore': true, 'moderation': true }, mode: 'knap' },
                    { type: 'mult', value: 0.05, req: { 'no knapping anymore': true, 'moderation': true }, mode: 'knap bone' },
                    { type: 'mult', value: 0.15, req: { 'no knapping anymore': true, 'caretaking': true }, mode: 'knap' },
                    { type: 'mult', value: 0.15, req: { 'no knapping anymore': true, 'caretaking': true }, mode: 'knap bone' },
                    //////////
                    { type: 'convert', from: { 'stick': 1, 'stone': 1 }, into: { 'stone tools': 1 }, every: 10, mode: 'stone tools', req: { 'tool refinery 2/2': false, 'manufacture units II': false, 'factories II': false } },
                    { type: 'convert', from: { 'stick': 1, 'stone': 1 }, into: { 'stone weapons': 1 }, every: 10, mode: 'stone weapons', req: { 'tool refinery 2/2': false, 'manufacture units II': false, 'factories II': false } },
                    { type: 'convert', from: { 'stick': 1, 'stone': 1 }, into: { 'bow': 1 }, every: 12, mode: 'bows', req: { 'tool refinery 2/2': false, 'manufacture units II': false, 'factories II': false } },
                    { type: 'convert', from: { 'stick': 15 }, into: { 'basket': 1 }, every: 12, mode: 'baskets' },
                    { type: 'convert', from: { 'stick': 4, 'stone': 1 }, into: { 'wand': 1 }, every: 8, mode: 'wands' },
                    { type: 'convert', from: { 'dyes': 1, 'mud': 0.0015, 'water': 0.015 }, into: { 'ink': 0.75 }, every: 6, mode: 'ink' },
                    { type: 'convert', from: { 'thread': 30, 'dried leather': 1 }, into: { 'fishing net': 1 }, every: 7, mode: 'net' },
                    { type: 'convert', from: { 'thread': 1.5, 'herbs': 0.75 }, into: { 'first aid things': 1 }, every: 7, mode: 'firstaid' },
                    { type: 'convert', from: { 'thread': 0.5, 'herbs': 1 }, into: { 'first aid things': 1 }, every: 7, mode: 'firstaid' },
                    { type: 'convert', from: { 'thread': 2, 'herbs': 1.5, 'hide': 1 }, into: { 'first aid things': 1 }, every: 9, mode: 'firstaid' },
                    { type: 'convert', from: { 'stick': 3, 'stone': 2 }, into: { 'crossbow': 1 }, every: 7, req: { 'hunting II': true, 'manufacture units II': false, 'factories II': false }, mode: 'bows' },
                    { type: 'convert', from: { 'lumber': 2, 'stone': 10 }, into: { 'arrow': 10 }, every: 7, req: { 'manufacture units II': false, 'factories II': false }, mode: 'arrows' },
                    { type: 'convert', from: { 'flowers': 12 }, into: { 'dyes': 4 }, every: 7, mode: 'dyes' },
                    { type: 'convert', from: { 'paper': 30, 'hide': 1 }, into: { 'empty book': 1 }, every: 9, mode: 'book' },
                    { type: 'convert', from: { 'wheat': 1 }, into: { 'flour': 0.5 }, every: 5, mode: 'wheat' },
                    { type: 'convert', from: { 'magic essences': 2, 'seeds': 1, 'mana': 0.5 }, into: { 'essenced seeds': 1 }, every: 9, mode: 'enchseeds' },
                    { type: 'mult', value: 1.2, req: { 'ground tools': true } },
                    { type: 'mult', value: 1.1, req: { 'ground pots': true }, mode: 'baskets' },
                    { type: 'mult', value: 1.08, req: { 'motivation for artisans': true, 'moderation': true } },
                    { type: 'mult', value: 1.04, req: { 'motivation for artisans': true, 'caretaking': true } },
                    { type: 'mult', value: 1.03, req: { 'crafting & farm rituals': 'on', 'power of the faith': true } },
                    { type: 'mult', value: 1.03, req: { 'xmas1': true } },
                    { type: 'mult', value: 0.915, req: { 'se09': 'on' } },
                ],
                req: { 'stone-knapping': true, 't10': false },
                category: 'crafting',
            });
            new G.Unit({
                name: 'carver',
                desc: '@starts with the ability to turn [stone]s or [bone]s into [statuette]s@gains more modes as technology progresses<>[carver]s use fine hand-crafting to produce goods out of wood, stone and bone.',
                icon: [21, 2],
                cost: {},
                use: { 'worker': 1 },
                upkeep: { 'food': 0.1 },
                gizmos: true,
                modes: {
                    'stone statuettes': { name: 'Carve stone statuettes', icon: [8, 9], desc: 'Turn 10 [stone]s into [statuette]s.', use: { 'knapped tools': 1 } },
                    'bone statuettes': { name: 'Carve bone statuettes', icon: [8, 9], desc: 'Turn 2 [bone]s into [statuette]s.', use: { 'knapped tools': 1 } },
                    'cut stone': { name: 'Cut stones', icon: [0, 8], desc: 'Slowly turn 10 [stone]s into 1 [cut stone].', req: { 'masonry': true }, use: { 'stone tools': 1 } },
                    'smash cut stone': { name: 'Smash stone blocks', icon: [2, 6], desc: 'Your carver will smash [cut stone]s into 9 [stone]s each.', req: { 'quarrying': true }, use: { 'stone tools': 1 } },
                    'gem blocks': { name: 'Carve gem blocks', icon: [7, 9], desc: 'Slowly turn 10 [gems] into 1 [gem block].', req: { 'gem-cutting': true }, use: { 'stone tools': 1 } },
                    'wood statuettes': { name: 'Carve wooden statuettes', icon: [13, 1, "magixmod"], desc: 'Your carver will now use carve statuettes out of a [log].', use: { 'knapped tools': 1 } },
                    'gdablockscraft': { name: 'Cut other stones', icon: [2, 12, "magixmod"], desc: 'Your carver will craft [various cut stones] out of 10 [various stones] each.', use: { 'knapped tools': 1 }, req: { 'masonry': true } },
                    'gdablockssmash': { name: 'Smash other stone blocks', icon: [3, 12, "magixmod"], desc: 'Your carver will smash a single [various cut stones,Various cut stone] into 9 [various stones].', use: { 'knapped tools': 1 }, req: { 'masonry': true } },
                    'vgems': { name: 'Carve valuable gem blocks', icon: [2, 4, "magix2"], desc: 'Slowly turn 10 [valuable gems] into 1 [valuable gem block], which also provides some [happiness]. Has a chance to fail!', use: { 'stone tools': 1 }, req: { 'culture of gems': true } },
                },
                effects: [
                    { type: 'convert', from: { 'stone': 1 }, into: { 'statuette': 1 }, every: 5, mode: 'stone statuettes' },
                    { type: 'convert', from: { 'bone': 2 }, into: { 'statuette': 1 }, every: 5, mode: 'bone statuettes' },
                    { type: 'convert', from: { 'stone': 10 }, into: { 'cut stone': 1 }, every: 15, mode: 'cut stone' },
                    { type: 'convert', from: { 'cut stone': 1 }, into: { 'stone': 9 }, every: 5, mode: 'smash cut stone' },
                    { type: 'convert', from: { 'gems': 10 }, into: { 'gem block': 1 }, every: 15, mode: 'gem blocks', req: { 'culture of gems III': false } },
                    { type: 'convert', from: { 'gems': 10 }, into: { 'gem block': 1 }, every: 5, mode: 'gem blocks', req: { 'culture of gems III': true } },
                    { type: 'convert', from: { 'gems': 10 }, into: { 'gem block': 1 }, every: 15, mode: 'gem blocks' },
                    { type: 'convert', from: { 'log': 1 }, into: { 'wooden statuette': 1, 'scobs': 3 }, every: 7, mode: 'wood statuettes' },
                    { type: 'convert', from: { 'various stones': 10 }, into: { 'various cut stones': 1 }, every: 5, mode: 'gdablockscraft' },
                    { type: 'convert', from: { 'various cut stones': 1 }, into: { 'various stones': 9 }, every: 5, mode: 'gdablockssmash' },
                    { type: 'convert', from: { 'valuable gems': 10 }, into: { 'valuable gem block': 1, 'happiness': 0.5, 'culture II': 0.001 }, every: 15, chance: 8 / 10, mode: 'vgems', req: { 'culture of gems II': false } },
                    { type: 'convert', from: { 'valuable gems': 10 }, into: { 'valuable gem block': 1, 'happiness': 0.5, 'culture II': 0.002 }, every: 15, chance: 9.6 / 10, mode: 'vgems', req: { 'culture of gems II': true, 'culture of gems III': false } },
                    { type: 'convert', from: { 'valuable gems': 10 }, into: { 'valuable gem block': 1, 'happiness': 0.5, 'culture II': 0.002 }, every: 5, chance: 9.6 / 10, mode: 'vgems', req: { 'culture of gems III': true } },
                    { type: 'mult', value: 1.2, req: { 'ground tools': true } },
                    { type: 'mult', value: 0.95, req: { 'dt3': true } },
                    { type: 'mult', value: 1.03, req: { 'inspirated carvers': true, 'moderation': true } },
                    { type: 'mult', value: 1.03, req: { 'xmas4': true } },
                    { type: 'mult', value: 1.06, req: { 'inspirated carvers': true, 'caretaking': true } },
                    ////////////////////
                    //MOAI BOOSTS
                    { type: 'mult', value: 1.03, req: { 'se09': 'on' }, mode: 'stone statuettes' },
                    { type: 'mult', value: 1.03, req: { 'se09': 'on' }, mode: 'cut stone' },
                    { type: 'mult', value: 1.03, req: { 'se09': 'on' }, mode: 'smash cut stone' },
                    { type: 'mult', value: 1.03, req: { 'se09': 'on' }, mode: 'gdablockscraft' },
                    { type: 'mult', value: 1.03, req: { 'se09': 'on' }, mode: 'gdablockssmash' },
                    /////////////
                    //Trends
                    { type: 'convert', from: { 'stone': 0.05 }, into: { 'statuette': 0.05 }, every: 5, mode: 'stone statuettes', req: { 'cart1': true } },
                    { type: 'convert', from: { 'log': 0.05 }, into: { 'wooden statuette': 0.05 }, every: 5, mode: 'wood statuettes', req: { 'cart2': true } },
                ],
                req: { 'carving': true, 't10': false },
                category: 'crafting',
            });

            new G.Unit({
                name: 'clothier',
                desc: '@works with textiles, notably producing all kinds of clothes<>A [clothier] can make and use fabrics to keep your people clothed, and therefore warm and happy.',
                icon: [19, 2],
                cost: {},
                use: { 'worker': 1 },
                upkeep: { 'food': 0.2 },
                gizmos: true,
                modes: {
                    'sew grass clothing': { name: 'Sew grass clothing', icon: [15, 7], desc: 'Craft [primitive clothes] from 30 [herbs] each.', use: { 'stone tools': 1 } },
                    'sew hide clothing': { name: 'Sew hide clothing', icon: [15, 7], desc: 'Craft [primitive clothes] from 3 [hide]s each.', use: { 'stone tools': 1 } },
                    'weave fiber clothing': { name: 'Weave fiber clothing', icon: [16, 7], desc: 'Craft [basic clothes] from 50 [herbs] each.', use: { 'stone tools': 1 }, req: { 'weaving': true } },//TODO : implement fibers
                    'weave leather clothing': { name: 'Weave leather clothing', icon: [16, 7], desc: 'Craft [basic clothes] from 2 [leather] each.', use: { 'stone tools': 1 }, req: { 'weaving': true, 'leather-working': true } },
                    'make leather': { name: 'Make leather', icon: [10, 7], desc: 'Produce [leather] from [hide]s, [water], [salt], and [log]s.', use: { 'stone tools': 1 }, req: { 'leather-working': true, 'factories I': false } },
                    'cheap make leather': { name: 'Make leather (cheap)', icon: [10, 7], desc: 'Slowly produce [leather] from [hide]s, [muddy water] and [herbs].', use: { 'stone tools': 1 }, req: { 'factories I': false } },
                    'weave leather colored clothing': { name: 'Weave leather colored clothing', icon: [13, 0, "magixmod"], desc: 'Your clothier will now weave [colored clothing] out of [leather].', req: { 'weaving': true }, use: { 'stone tools': 1 } },
                    'weave fiber colored clothing': { name: 'Weave fiber colored clothing', icon: [13, 0, "magixmod"], desc: 'Your clothier will now weave [colored clothing] out of [herbs].', req: { 'weaving': true }, use: { 'stone tools': 1 } },
                    'dye already made clothing': { name: 'Dye already made clothing', icon: [13, 0, "magixmod"], desc: 'Your clothier will now dye already made [basic clothes], turning them into [colored clothing].', req: { 'weaving': true }, use: { 'stone tools': 1 } },
                    'craft thread': { name: 'Craft thread', icon: [13, 9, "magixmod"], desc: 'Your clothier will now craft [thread] out of [herbs].', req: { 'weaving II': true }, use: { 'stone tools': 1 } },
                    'weave hardened clothes': { name: 'Weave hardened clothes', icon: [choose([27, 28]), choose([0, 1]), "magixmod"], desc: 'Craft [hardened clothes] out of [dried leather] and [thread].', req: { 'weaving III': true, 'sewing II': true }, use: { 'stone tools': 1 } },
                },
                effects: [
                    { type: 'convert', from: { 'hide': 3 }, into: { 'primitive clothes': 1 }, every: 12, mode: 'sew hide clothing' },
                    { type: 'convert', from: { 'herbs': 30 }, into: { 'primitive clothes': 1 }, every: 35, mode: 'sew grass clothing' },
                    { type: 'convert', from: { 'leather': 2 }, into: { 'basic clothes': 1 }, every: 12, mode: 'weave leather clothing' },
                    { type: 'convert', from: { 'herbs': 50 }, into: { 'basic clothes': 1 }, every: 25, mode: 'weave fiber clothing' },
                    { type: 'convert', from: { 'hide': 1, 'water': 5, 'salt': 1, 'log': 0.1 }, into: { 'leather': 1 }, every: 25, mode: 'make leather' },
                    { type: 'convert', from: { 'hide': 1, 'muddy water': 5, 'herbs': 10 }, into: { 'leather': 1 }, every: 40, mode: 'cheap make leather' },
                    { type: 'convert', from: { 'leather': 2, 'dyes': 3 }, into: { 'colored clothing': 1 }, every: 18, mode: 'weave leather colored clothing' },
                    { type: 'convert', from: { 'herbs': 52, 'dyes': 4 }, into: { 'colored clothing': 1 }, every: 30, mode: 'weave fiber colored clothing' },
                    { type: 'convert', from: { 'basic clothes': 1, 'dyes': 4 }, into: { 'colored clothing': 1 }, every: 3, mode: 'dye already made clothing' },
                    { type: 'convert', from: { 'herbs': 18 }, into: { 'thread': 3 }, every: 8, mode: 'craft thread' },
                    { type: 'convert', from: { 'dried leather': 4, 'thread': 7 }, into: { 'hardened clothes': 1 }, every: 6, mode: 'weave hardened clothes' },
                    { type: 'mult', value: 1.03, req: { 'xmas2': true } },
                    { type: 'mult', value: 1.1, req: { 'knitting': true } }
                ],
                req: { 'sewing': true, 't10': false },
                category: 'crafting',
            });
            new G.Unit({
                name: 'hunter',
                desc: '@hunts wild animals for [meat], [bone]s and [hide]s@may get wounded<>[hunter]s go out into the wilderness and come back days later covered in blood and the meat of a fresh kill.',
                icon: [18, 2],
                cost: {},
                use: { 'worker': 1 },
                upkeep: { 'food': 0.2 },
                gizmos: true,
                modes: {
                    'endurance hunting': { name: 'Endurance hunting', icon: [0, 6], desc: 'Hunt animals by simply running after them until they get exhausted.//Slow and tedious.', req: { 'hunting III': false } },
                    'spear hunting': { name: 'Spear hunting', icon: [5, 9], desc: 'Hunt animals with spears.', use: { 'stone weapons': 1 }, req: { 'spears': true } },
                    'bow hunting': { name: 'Bow hunting', icon: [6, 9], desc: 'Hunt animals with bows. <>This mode has an upkeep of 6 [arrow]s.', use: { 'bow': 1, 'arrow': 6 }, req: { 'bows': true } },
                    'crossbow hunting': { name: 'Crossbow hunting', icon: [13, 6, "magixmod"], desc: 'Hunt animals with crossbows. <>This mode has upkeep of 6 [arrow]s.', req: { 'hunting II': true }, use: { 'crossbow': 1, 'arrow': 150 } },
                },
                effects: [
                    {
                        type: 'function', func: function (me) {
                            var arrowUpkeep = 6;
                            if (G.getRes('arrow').amount < arrowUpkeep * me.amount) {
                                G.killUnitByName('hunter', me.amount, 'bow hunting')
                            } else {
                                G.lose('arrow', arrowUpkeep, 'unit upkeep');
                            }
                        }, mode: 'bow hunting'
                    },
                    {
                        type: 'function', func: function (me) {
                            var arrowUpkeep = 6;
                            if (G.getRes('arrow').amount < arrowUpkeep * me.amount) {
                                G.killUnitByName('hunter', me.amount, 'crossbow hunting')
                            } else {
                                G.lose('arrow', arrowUpkeep, 'unit upkeep');
                                return
                            }
                        }, mode: 'crossbow hunting'
                    },
                    { type: 'gather', context: 'hunt', amount: 1, max: 5, mode: 'endurance hunting', req: { 'hunting III': false } },
                    //SPEARS
                    { type: 'gather', context: 'hunt', amount: 2, max: 4, mode: 'spear hunting', req: { 'aiming': false } },
                    { type: 'gather', context: 'hunt', amount: 2.5, max: 5, mode: 'spear hunting', req: { 'aiming': true } },
                    //BOW
                    { type: 'gather', context: 'hunt', amount: 1.6, max: 2, mode: 'bow hunting', req: { 'aiming': false } },
                    { type: 'gather', context: 'hunt', amount: 4, max: 5, mode: 'bow hunting', req: { 'aiming': true } },
                    //CROSSBOW
                    { type: 'gather', context: 'hunt', amount: 1.8, max: 2.2, mode: 'crossbow hunting', req: { 'aiming': false } },
                    { type: 'gather', context: 'hunt', amount: 4.5, max: 5.5, mode: 'crossbow hunting', req: { 'aiming': true } },
                    { type: 'function', func: unitGetsConverted({ 'wounded': 1 }, 0.001, 0.03, true, '[X] [people] wounded while hunting.', 'hunter was', 'hunters were'), chance: 1 / 30, req: { 'hunting III': false } },
                    { type: 'function', func: unitGetsConverted({ 'wounded': 1 }, 0.001, 0.03, true, '[X] [people] wounded while hunting.', 'hunter was', 'hunters were'), chance: 1 / 40, req: { 'hunter\'s coordination': true, 'an armor for Hunter': false } },
                    { type: 'function', func: unitGetsConverted({ 'wounded': 1 }, 0.001, 0.03, true, '[X] [people] wounded while hunting.', 'hunter was', 'hunters were'), chance: 1 / 65, req: { 'an armor for Hunter': true } },
                    { type: 'mult', value: 1.35, req: { 'se04': true } },
                    { type: 'mult', value: 1.2, req: { 'harvest rituals': 'on', 'hunters & fishers unification': false } },
                    { type: 'mult', value: 0.5, req: { 'frost': true } }, // added by Garchmop
                    { type: 'mult', value: 0.2, req: { 'eat on gather': 'on' } },
                    { type: 'mult', value: 0.2, req: { 'hunters & fishers unification': true } },
                    { type: 'mult', value: 2, req: { 'hunter\'s coordination': true } },
                    //Trait trends
                    { type: 'gather', context: 'hunt', what: { 'hide': 1 }, req: { 'htt1': true } },
                    { type: 'gather', context: 'hunt', what: { 'meat': 1 }, req: { 'htt2': true } },
                ],
                req: { 'hunting': true, 't10': false },
                category: 'production',
                priority: 5,
            });
            new G.Unit({
                name: 'fisher',
                desc: '@catches [seafood] from rivers and shores<>[fisher]s arm themselves with patience and whatever bait they can find, hoping to trick another creature into becoming a potential dinner.',
                icon: [17, 2],
                cost: {},
                use: { 'worker': 1 },
                //upkeep:{'food':0.2},
                gizmos: true,
                modes: {
                    'catch by hand': { name: 'Catch by hand', icon: [0, 6], desc: 'Catch fish with nothing but bare hands.//Slow and tedious.', req: { 'fishing III': false } },
                    'spear fishing': { name: 'Spear fishing', icon: [5, 9], desc: 'Catch fish with spears.', use: { 'stone weapons': 1 }, req: { 'spears': true, 'fishing III': false } },
                    'line fishing': { name: 'Line fishing', icon: [7, 21, "magixmod"], desc: 'Catch fish with fishing poles.', use: { 'stone tools': 1, 'bugs': 10 }, req: { 'fishing hooks': true } },
                    'net fishing': { name: 'Net fishing', icon: [13, 8, "magixmod"], desc: 'Catch fish with [fishing net].', req: { 'fishing II': true }, use: { 'fishing net': 1 } },
                },
                effects: [
                    { type: 'gather', context: 'fish', amount: 1.5, max: 5, mode: 'catch by hand', req: { 'fishing III': false } },
                    //SPEARS
                    { type: 'gather', context: 'fish', amount: 2, max: 4, mode: 'spear fishing', req: { 'aiming': false, 'fishing III': false } },
                    { type: 'gather', context: 'fish', amount: 2.5, max: 5, mode: 'spear fishing', req: { 'aiming': true } },
                    { type: 'gather', context: 'fish', amount: 2.5, max: 5, mode: 'line fishing' },
                    { type: 'gather', context: 'fish', what: { 'seafood': 6 }, amount: 6, max: 8, mode: 'net fishing' },
                    { type: 'mult', value: 1.2, req: { 'harvest rituals': 'on', 'hunters & fishers unification': false } },
                    { type: 'mult', value: 1.5, req: { 't6': true } },
                    { type: 'mult', value: 0.5, req: { 'frost': true } }, // added by Garchmop
                    { type: 'mult', value: 0.2, req: { 'eat on gather': 'on' } },
                    { type: 'mult', value: 0.2, req: { 'hunters & fishers unification': true } },
                    { type: 'mult', value: 2, req: { 'fisher\'s smartness': true } },
                ],
                req: { 'fishing': true, 't4': false },
                upkeep: { 'bugs': 0.5 },
                category: 'production',
                priority: 5,
            });
            new G.Unit({
                name: 'firekeeper', //Added beekeeping
                desc: '@creates [fire pit]s from fuel@gains more fuel types as technology progresses@handles other fire-related tasks<>The [firekeeper] is tasked with starting and maintaining fires to keep the snug and cozy.',
                icon: [16, 2],
                cost: {},
                use: { 'worker': 1 },
                staff: { 'knapped tools': 1 },
                upkeep: { 'food': 0.1 },
                gizmos: true,
                modes: {
                    'stick fires': { name: 'Start fires from sticks', icon: [0, 6, 13, 7], desc: 'Craft [fire pit]s from 20 [stick]s each.', req: { 'factories II': false } },
                    'cook': { name: 'Cook', icon: [6, 7, 13, 7], desc: 'Turn [meat] and [seafood] into [cooked meat] and [cooked seafood] in the embers of [fire pit]s.', req: { 'cooking': true } },
                    'cure': { name: 'Cure & smoke', icon: [11, 6, 12, 6], desc: 'Turn 1 [meat] or [seafood] into 2 [cured meat] or [cured seafood] using [salt] in the embers of [fire pit]s.', req: { 'curing': true } },
                    'honey': { name: 'Collect honey', icon: [3, 1, "magix2"], desc: 'Attempt to collect [honey] from bee nests. The chance of success and [honey] gain can be increased through more techs.', req: { 'beekeeping': true } },
                    'honey2': { name: 'Collect honey (advanced)', icon: [3, 1, "magix2"], desc: 'Try to collect [honey] from bee nests while using [nature essence].', req: { 'beekeeping III': true } },
                    'honeycombs': { name: 'Collect honeycombs', icon: [0, 1, "magix2"], desc: 'Slowly get [honeycomb]s from bee nests.', req: { 'beekeeping III': true } },
                    'frame': { name: 'Collect honey and honeycombs', icon: [8, 1, "magix2"], desc: 'Gain both [honey] and [honeycomb]s from bee nests quickly using [essenced hive frame]s and some [nature essence].', req: { 'magical hive frames': true } },
                    'firesfromessence': { name: 'Set up fires out of its essence', icon: [0, 2, "magixmod"], desc: 'Craft 6 [fire pit]s by using 1 [fire essence] and 13 [stick]s.', req: { 'Wizard complex': true, 'factories II': false }, use: { 'wand': 1, 'knapped tools': 1 } },
                    'log fires': { name: 'Start fires from logs', icon: [9, 21, "magixmod"], desc: 'Craft [fire pit]s from 2 [log]s each.', req: { 'fires from logs': true, 'factories II': false } },
                },
                effects: [
                    { type: 'convert', from: { 'stick': 20 }, into: { 'fire pit': 1 }, every: 5, mode: 'stick fires', req: { 'factories II': false } },
                    { type: 'convert', from: { 'log': 2 }, into: { 'fire pit': 1 }, every: 5, mode: 'log fires', req: { 'factories II': false } },
                    { type: 'convert', from: { 'meat': 1, 'fire pit': 0.01 }, into: { 'cooked meat': 1 }, every: 1, repeat: 5, mode: 'cook' },
                    { type: 'convert', from: { 'seafood': 1, 'fire pit': 0.01 }, into: { 'cooked seafood': 1 }, every: 1, repeat: 5, mode: 'cook' },
                    { type: 'convert', from: { 'meat': 1, 'salt': 0.5, 'fire pit': 0.01 }, into: { 'cured meat': 2 }, every: 1, repeat: 10, mode: 'cure' },
                    { type: 'convert', from: { 'seafood': 1, 'salt': 0.5, 'fire pit': 0.01 }, into: { 'cured seafood': 2 }, every: 1, repeat: 10, mode: 'cure' },
                    { type: 'gather', context: 'honey', what: { 'honey': 4 }, amount: 1, every: 2, max: 50, mode: 'honey', chance: 3 / 16, req: { 'beekeeping II': false } },
                    { type: 'gather', context: 'honey', what: { 'honey': 5 }, amount: 1, every: 2, max: 62.5, mode: 'honey', chance: 3 / 16, req: { 'beekeeping II': true, 'plant-loving bees': false } },
                    { type: 'gather', context: 'honey', what: { 'honey': 7.5 }, amount: 1, every: 2, max: 93.75, mode: 'honey', chance: 3 / 16, req: { 'beekeeping II': true, 'plant-loving bees': true } },
                    { type: 'convert', from: { 'hive frame': 0.02 }, into: { 'honey': 12 }, amount: 1, every: 2, chance: 5 / 16, mode: 'honey', req: { 'hive frames': true } },
                    { type: 'gather', context: 'honey', what: { 'honeycomb': 2 }, amount: 1, every: 1, max: 4, chance: 1 / 4, mode: 'honeycombs' },
                    { type: 'convert', from: { 'nature essence': 3 }, into: { 'honey': 8 }, amount: 1, every: 2, chance: 6 / 16, mode: 'honey2', req: { 'plant-loving bees': false } },
                    { type: 'convert', from: { 'nature essence': 3 }, into: { 'honey': 12 }, amount: 1, every: 2, chance: 6 / 16, mode: 'honey2', req: { 'plant-loving bees': true } },
                    { type: 'convert', from: { 'hive frame': 0.02, 'nature essence': 3 }, into: { 'honey': 24 }, amount: 1, every: 2, chance: 6 / 32, mode: 'honey2', req: { 'hive frames': true } },
                    { type: 'convert', from: { 'essenced hive frame': 0.05, 'nature essence': 3 }, into: { 'honey': 50, 'honeycomb': 5 }, amount: 1, every: 2, chance: 0.5, mode: 'frame', req: { 'magical hive frames': true, 'beekeeping IV': false } },
                    { type: 'convert', from: { 'essenced hive frame': 0.05, 'nature essence': 3 }, into: { 'honey': 60, 'honeycomb': 6 }, amount: 1, every: 2, chance: 0.5, mode: 'frame', req: { 'beekeeping IV': true } },
                    { type: 'gather', context: 'honey', what: { 'honey': 1 }, amount: 1, every: 4, max: 0.2, chance: 1 / 200, req: { 'beekeeping V': true } },
                    { type: 'convert', from: { 'fire essence': 1, 'stick': 13 }, into: { 'fire pit': 6 }, mode: 'firesfromessence', req: { 'factories II': false } },
                    { type: 'mult', value: 0.97, req: { 'dt2': true } },
                    { type: 'mult', value: 1.05, req: { 'bigger fires': true, 'moderation': true } },
                    { type: 'mult', value: 1.08, req: { 'bigger fires': true, 'caretaking': true } },
                    { type: 'gather', what: { 'health': 0.0225 }, req: { 'mentors of nature III': true } },
                    { type: 'mult', value: 1.25, req: { 'love of honey': 'on' }, mode: 'honeycomb' },
                    { type: 'mult', value: 1.6, req: { 'love of honey': 'on' }, mode: 'honey2' },
                    { type: 'mult', value: 1.6, req: { 'love of honey': 'on' }, mode: 'frame' },
                ],
                req: { 'fire-making': true },
                category: 'crafting',
                priority: 3,
            });

            new G.Unit({
                name: 'potter',
                desc: '@uses [clay] or [mud] to craft goods<>The [potter] shapes their clay with great care, for it might mean the difference between fresh water making it to their home safely or spilling uselessly into the dirt.',
                icon: [20, 2],
                cost: {},
                use: { 'worker': 1 },
                staff: { 'stone tools': 1 },
                upkeep: { 'food': 0.2 },
                gizmos: true,
                modes: {
                    'clay pots': { name: 'Craft pots out of clay', icon: [1, 7, 13, 5], desc: 'Craft [pot]s from 3 [clay] each; requires [fire pit]s.' },
                    'mud pots': { name: 'Craft pots out of mud', icon: [0, 7, 13, 5], desc: 'Craft [pot]s from 10 [mud] each; requires [fire pit]s.' },
                    'craft precious pots': { name: 'Craft precious pots', icon: [15, 8, "magixmod"], desc: 'Your potter will craft [precious pot]s out of both [clay] and [mud], requiring an additional [worker].', req: { 'precious pottery': true }, use: { 'knapped tools': 1, 'stone tools': 1, 'worker': 1 } },
                    'craft potion pots': { name: 'Craft potion pots', icon: [14, 8, "magixmod"], desc: 'Your potter will craft [potion pot]s out of both [clay] and [mud]. These pots do not provide additional [food storage] and require 2 additional [worker]s to craft.', req: { 'precious pottery': true }, use: { 'knapped tools': 1, 'stone tools': 1, 'worker': 2 } },
                },
                effects: [
                    { type: 'convert', from: { 'clay': 3, 'fire pit': 0.01 }, into: { 'pot': 1 }, every: 3, repeat: 2, mode: 'clay pots' },
                    { type: 'convert', from: { 'mud': 10, 'fire pit': 0.01 }, into: { 'pot': 1 }, every: 6, mode: 'mud pots' },
                    { type: 'convert', from: { 'clay': 5, 'mud': 12, 'fire pit': 0.03 }, into: { 'precious pot': 1 }, every: 3, repeat: 2, mode: 'craft precious pots' },
                    { type: 'convert', from: { 'clay': 4, 'mud': 11, 'fire pit': 0.025 }, into: { 'potion pot': 1 }, every: 2, repeat: 1, mode: 'craft potion pots' },
                    { type: 'mult', value: 1.03, req: { 'xmas3': true } },
                    { type: 'mult', value: 1.2, req: { 'ground pots': true } },
                ],
                req: { 'pottery': true, 't10': false },
                category: 'crafting',
            });
            new G.Unit({
                name: 'kiln',
                desc: '@processes goods with fire<>A [kiln] is an impressive edifice for those not yet accustomed to its roaring fire.',
                icon: [23, 2],
                cost: { 'archaic building materials': 50, 'basic building materials': 20 },
                use: { 'land': 1 },
                upkeep: { 'log': 0.5 },
                modes: {
                    'off': G.MODE_OFF,
                    'bricks': { name: 'Fire bricks', icon: [3, 8], desc: 'Produce 10 [brick]s out of 3 pieces of [clay].', use: { 'worker': 1, 'stone tools': 1 } },
                    'glass': { name: 'Craft glass', icon: [4, 8], desc: 'Your kiln will now use 10 pieces of [sand] to make 1 [glass] pane.', req: { 'glass-crafting': true }, use: { 'stone tools': 1 } },
                    'charcoal': { name: 'Craft charcoal', icon: [5, 4, "magix2"], desc: 'Your kiln will now convert 1 [log] into 5 [charcoal] pieces.', req: { 'charcoal production I': true }, use: { 'metal tools': 1 } },
                },
                effects: [
                    { type: 'convert', from: { 'clay': 3 }, into: { 'brick': 10 }, every: 5, mode: 'bricks' },
                    { type: 'convert', from: { 'sand': 10 }, into: { 'glass': 1 }, every: 5, mode: 'glass' },
                    { type: 'convert', from: { 'log': 1 }, into: { 'charcoal': 5 }, every: 5, mode: 'charcoal', req: { 'charcoal production II': false } },
                    { type: 'convert', from: { 'log': 1 }, into: { 'charcoal': 6.25 }, every: 5, mode: 'charcoal', req: { 'charcoal production II': true } },
                    { type: 'mult', value: 1.5, req: { 'bigger kilns': true } },
                    { type: 'mult', value: 1.1, req: { 'better kiln construction': true, 'moderation': true } },
                    { type: 'mult', value: 1.05, req: { 'better kiln construction': true, 'caretaking': true } },
                ],
                gizmos: true,
                req: { 'masonry': true, 't10': false },
                category: 'crafting',
            });

            new G.Unit({
                name: 'well',
                desc: '@produces fresh [water] daily, unaffected by [happiness]<>The [well] is a steady source of drinkable [water].',
                icon: [25, 3],
                cost: { 'stone': 50, 'archaic building materials': 20 },
                use: { 'land': 1 },
                //require:{'worker':2,'stone tools':2},
                //upkeep:{'food':0.2},
                effects: [
                    { type: 'gather', what: { 'water': 35 } },
                    { type: 'gather', what: { 'water': 5 }, chance: 0.4 },
                    { type: 'mult', value: 0.3, req: { 'droughtNew': true } },
                    { type: 'mult', value: 1.05, req: { 'deeper wells': true } },
                    { type: 'mult', value: 1.5, req: { 'deeper wells II': true } },
                    { type: 'mult', value: 1.25, req: { 'se06': 'on' } },
                    { type: 'mult', value: 1.15, req: { 'water rituals': 'on' } },
                    { type: 'mult', value: 1.6, req: { 'water rituals': 'on', 'droughtNew': true } },
                    { type: 'mult', value: 0.85, req: { 'se09': 'on' } },
                ],
                category: 'production',
                req: { 'well-digging': true },
                limitPer: { 'land': 10 },
            });

            new G.Unit({
                name: 'digger',
                desc: '@digs the soil for [mud] and [stone]<>[digger]s yield various materials that can be used for tool-making and rudimentary construction.',
                icon: [7, 2],
                cost: {},
                use: { 'worker': 1 },
                staff: { 'knapped tools': 1 },
                upkeep: { 'food': 0.1 },
                effects: [
                    { type: 'gather', context: 'dig', amount: 1, max: 1 },
                    { type: 'gather', context: 'dig', what: { 'clay': 5 }, max: 1, req: { 'pottery': true } },
                    { type: 'mult', value: 1.125, req: { 'enchanted shovels': true } },
                    { type: 'mult', value: 1.02, req: { 'se09': 'on' } },
                    //Random trends
                    { type: 'gather', context: 'dig', what: { 'ice': 1 }, req: { 'dtt1': true } },
                    { type: 'gather', context: 'dig', what: { 'sand': 1 }, req: { 'dtt2': true } },
                    { type: 'gather', context: 'dig', what: { 'ice': 4 }, req: { 'frost': true } },
                ],
                req: { 'digging': true },
                category: 'production',
            });
            new G.Unit({
                name: 'quarry',
                desc: '@carves [cut stone] out of the ground@may find various other minerals such as [limestone] and [marble]<>The [quarry] dismantles the ground we stand on so that our children may reach higher heights.',
                icon: [22, 3],
                cost: { 'archaic building materials': 100 },
                use: { 'land': 4 },
                modes: {
                    'off': G.MODE_OFF,
                    'quarry': { name: 'Quarry stone', icon: [0, 8], desc: 'Produce [cut stone] and other minerals.', use: { 'worker': 3, 'stone tools': 3 } },
                    'advanced quarry': { name: 'Advanced quarry stone', icon: [8, 12, 0, 8], desc: 'Produce [cut stone] and other minerals at a superior rate with metal tools.', use: { 'worker': 3, 'metal tools': 3 } },
                    'quarryotherstones': { name: 'Quarry other stones', icon: [3, 12, "magixmod"], desc: 'Strike the Earth for [various cut stones] rather than normal [cut stone].', req: { 'quarrying II': true }, use: { 'worker': 3, 'metal tools': 3 } },
                    'quarrydeepores': { name: 'Quarry deep for minerals', icon: [8, 12, 33, 30, "magixmod"], desc: 'Quarry for resources that require quarrying deep underground. In this mode you will gather three times more ores but six times less of non-ore materials.', req: { 'prospecting III': true }, use: { 'worker': 8, 'metal tools': 8 } },
                },
                effects: [
                    { type: 'gather', context: 'quarry', amount: 5, max: 10, every: 3, mode: 'quarry' },
                    { type: 'gather', context: 'quarry', what: { 'cut stone': 1 }, max: 5, notMode: 'off' },
                    { type: 'gather', context: 'mine', amount: 0.005, max: 0.05, notMode: 'off' },
                    { type: 'gather', context: 'quarry', amount: 10, max: 30, every: 3, mode: 'advanced quarry' },
                    { type: 'gather', context: 'quarry', what: { 'various cut stones': 5 }, mode: 'quarryotherstones' },
                    { type: 'gather', context: 'quarry', what: { 'oil': 8 }, req: { 'oil-digging': true }, every: 2 },
                    //deepquarry
                    { type: 'gather', context: 'quarry', what: { 'cut stone': 0.17 }, max: 0.88, mode: 'quarrydeepores' },
                    { type: 'gather', context: 'quarry', what: { 'various cut stones': 0.17 }, max: 0.88, mode: 'quarrydeepores' },
                    { type: 'gather', context: 'quarry', what: { 'lead ore': 10 }, max: 30, mode: 'quarrydeepores' },
                    { type: 'gather', context: 'quarry', what: { 'blackium ore': 10 }, max: 30, mode: 'quarrydeepores' },
                    { type: 'gather', context: 'quarry', what: { 'mythril ore': 10 }, max: 30, mode: 'quarrydeepores' },
                    { type: 'gather', context: 'quarry', what: { 'unknownium ore': 10 }, max: 30, mode: 'quarrydeepores' },
                    { type: 'gather', context: 'quarry', what: { 'salt': 1 }, max: 3, mode: 'quarrydeepores', chance: 1 / 6 },
                    /////
                    { type: 'mult', value: 1.1, req: { 'quarrying III': true } },
                    { type: 'function', func: unitGetsConverted({ 'wounded': 1 }, 0.001, 0.01, true, '[X] [people].', 'quarry collapsed, wounding its workers', 'quarries collapsed, wounding their workers'), chance: 1 / 50, req: { 'quarrying IV': false } },
                    { type: 'function', func: unitGetsConverted({ 'wounded': 1 }, 0.00075, 0.0075, true, '[X] [people].', 'quarry collapsed, wounding its workers', 'quarries collapsed, wounding their workers'), chance: 1 / 250, req: { 'quarrying IV': true } }
                ],
                gizmos: true,
                req: { 'quarrying': true, 't10': false },
                category: 'production',
            });
            new G.Unit({
                name: 'mine',
                desc: '@extracts ores, [coal] and [stone] out of the ground@may occasionally collapse<>The workers that work in [mine]s burrow deep into the earth to provide all kinds of minerals.',
                icon: [22, 2],
                cost: { 'archaic building materials': 100 },
                use: { 'land': 3 },
                //require:{'worker':3,'stone tools':3},
                modes: {
                    'off': G.MODE_OFF,
                    'any': { name: 'Any', icon: [8, 8], desc: 'Mine without focusing on specific ores.', use: { 'worker': 3, 'stone tools': 3 } },
                    'any(deepmine)': { name: 'Any', icon: [24, 18, "magixmod", 8, 8], desc: 'Mine without focusing on specific ores deeper beneath the ground.', use: { 'worker': 6, 'metal tools': 6 }, req: { 'mining II': true } },
                    'coal': { name: 'Coal', icon: [12, 8], desc: 'Mine for [coal] with five times the efficiency.', req: { 'prospecting': true }, use: { 'worker': 3, 'metal tools': 3 } },
                    'salt': { name: 'Salt', icon: [11, 7], desc: 'Mine for [salt].', req: { 'prospecting': true }, use: { 'worker': 3, 'metal tools': 3 } },
                    'copper': { name: 'Copper', icon: [9, 8], desc: 'Mine for [copper ore] with five times the efficiency.', req: { 'prospecting': true }, use: { 'worker': 3, 'metal tools': 3 } },
                    'tin': { name: 'Tin', icon: [13, 8], desc: 'Mine for [tin ore] with five times the efficiency.', req: { 'prospecting': true }, use: { 'worker': 3, 'metal tools': 3 } },
                    'iron': { name: 'Iron', icon: [10, 8], desc: 'Mine for [iron ore] with five times the efficiency.', req: { 'prospecting': true }, use: { 'worker': 3, 'metal tools': 3 } },
                    'gold': { name: 'Gold', icon: [11, 8], desc: 'Mine for [gold ore] with five times the efficiency.', req: { 'prospecting': true }, use: { 'worker': 3, 'metal tools': 3 } },
                    'zinc': { name: 'Zinc', icon: [11, 3, "magixmod"], desc: 'Mine for [zinc ore] with five times the efficiency.', req: { 'prospecting III': true }, use: { 'worker': 3, 'metal tools': 3 } },
                    'dinium': { name: 'Dinium', icon: [11, 5, "magixmod"], desc: 'Mine for [dinium ore] with tripled efficiency.', req: { 'prospecting III': true }, use: { 'worker': 3, 'metal tools': 3 } },
                    'nickel': { name: 'Nickel', icon: [9, 12, "magixmod"], desc: 'Mine for [nickel ore] with five times efficiency.', req: { 'prospecting II': true }, use: { 'worker': 3, 'metal tools': 3 } },
                    'ostones': { name: 'Other stones', icon: [3, 12, "magixmod"], desc: 'Mine for [various stones] with tripled efficiency.', req: { 'prospecting II': true }, use: { 'worker': 3, 'metal tools': 3 } },
                    'platinum': { name: 'Platinum', icon: [8, 12, "magixmod"], desc: 'Mine for [platinum ore]. Exclusive to this specific trial.', req: { 't5': true, 'prospecting': true }, use: { 'worker': 3, 'metal tools': 3 } }
                },
                effects: [
                    { type: 'gather', context: 'mine', amount: 10, max: 30, mode: 'any' },
                    { type: 'gather', context: 'mine', what: { 'stone': 10 }, max: 30, notMode: 'off' },
                    { type: 'gather', context: 'mine', what: { 'coal': 50 }, max: 30, mode: 'coal' },
                    { type: 'gather', context: 'mine', what: { 'salt': 50 }, max: 30, mode: 'salt' },
                    { type: 'gather', context: 'mine', what: { 'copper ore': 50 }, max: 30, mode: 'copper' },
                    { type: 'gather', context: 'mine', what: { 'tin ore': 50 }, max: 30, mode: 'tin' },
                    { type: 'gather', context: 'mine', what: { 'iron ore': 50 }, max: 30, mode: 'iron' },
                    { type: 'gather', context: 'mine', what: { 'zinc ore': 50 }, max: 10, mode: 'zinc' },
                    { type: 'gather', context: 'mine', what: { 'dinium ore': 30 }, max: 10, mode: 'dinium' },
                    { type: 'gather', context: 'mine', what: { 'gold ore': 50 }, max: 30, mode: 'gold' },
                    { type: 'gather', context: 'mine', what: { 'nickel ore': 40 }, max: 25, mode: 'nickel' },
                    { type: 'gather', context: 'mine', what: { 'various stones': 30 }, max: 25, mode: 'ostones' },
                    { type: 'gather', context: 'mine', what: { 'platinum ore': 0.6 }, max: 30, mode: 'platinum' },
                    { type: 'gather', context: 'mine', what: { 'sulfur': 35 }, max: 50, req: { 'explosive crafting & mining': true }, notMode: 'off' },
                    { type: 'mult', value: 0.95, req: { 'dt4': true }, mode: 'gold' },
                    { type: 'mult', value: 0.95, req: { 'dt5': true }, mode: 'iron' },
                    { type: 'mult', value: 0.95, req: { 'dt5': true }, mode: 'nickel' },
                    { type: 'mult', value: 0.95, req: { 'dt6': true }, mode: 'copper' },
                    { type: 'mult', value: 0.95, req: { 'dt6': true }, mode: 'tin' },
                    { type: 'mult', value: 1.05, req: { 'mining strategy': true } },
                    ///////
                    //Deepmining
                    { type: 'gather', context: 'mine', what: { 'iron ore': 50 }, max: 30, mode: 'iron' },
                    /////////////////////////
                    //MOAI BOOSTS
                    { type: 'mult', value: 1.25, req: { 'se09': 'on' }, mode: 'tin' },
                    { type: 'mult', value: 1.25, req: { 'se09': 'on' }, mode: 'coal' },
                    { type: 'mult', value: 1.25, req: { 'se09': 'on' }, mode: 'salt' },
                    { type: 'mult', value: 1.25, req: { 'se09': 'on' }, mode: 'copper' },
                    { type: 'mult', value: 1.25, req: { 'se09': 'on' }, mode: 'iron' },
                    { type: 'mult', value: 1.25, req: { 'se09': 'on' }, mode: 'gold' },
                    //////////////////////////
                    { type: 'function', func: unitGetsConverted({ 'wounded': 1 }, 0.001, 0.01, true, '[X] [people].', 'mine collapsed, wounding its miners', 'mines collapsed, wounding their miners'), chance: 1 / 50, req: { 'mining strategy': false } },
                    { type: 'function', func: unitGetsConverted({ 'wounded': 1 }, 0.001, 0.01, true, '[X] [people].', 'mine collapsed, wounding its miners', 'mines collapsed, wounding their miners'), chance: 1 / 70, req: { 'mining strategy': true } },
                ],
                gizmos: true,
                req: { 'mining': true },
                category: 'production',
            });
            new G.Unit({
                name: 'furnace',
                desc: '@converts metal ores into ingots that can be used for further crafting<>The [furnace] is employed in various processes to extract the metal in raw ore, as well as for alloying those metals.',
                icon: [24, 2],
                cost: { 'basic building materials': 100 },
                use: { 'land': 1 },
                upkeep: { 'log': 1 },
                modes: {
                    'off': G.MODE_OFF,
                    'copper': { name: 'Copper smelting', icon: [9, 9], desc: 'Cast [soft metal ingot]s out of 5 [copper ore] each.', use: { 'worker': 2, 'stone tools': 2 }, req: {} },
                    'tin': { name: 'Tin smelting', icon: [9, 9], desc: 'Cast [soft metal ingot]s out of 10 [tin ore] each.', use: { 'worker': 2, 'stone tools': 2 }, req: {} },
                    'iron': { name: 'Iron smelting', icon: [10, 9], desc: 'Cast [hard metal ingot]s out of 5 [iron ore] each.', use: { 'worker': 2, 'metal tools': 2 }, req: { 'iron-working': true } },
                    'gold': { name: 'Gold smelting', icon: [11, 9], desc: 'Cast [precious metal ingot]s out of 5 [gold ore] each.', use: { 'worker': 2, 'metal tools': 2 }, req: { 'gold-working': true } },
                    'bronze': { name: 'Bronze alloying', icon: [10, 9], desc: 'Cast [hard metal ingot]s out of 8 [copper ore] and 2 [tin ore] each.', use: { 'worker': 2, 'metal tools': 2 }, req: { 'bronze-working': true } },
                    'steel': { name: 'Steel alloying', icon: [12, 9], desc: 'Cast [strong metal ingot]s out of 19 [iron ore] and 1 [coal] each.', use: { 'worker': 2, 'metal tools': 2 }, req: { 'steel-making': true } },
                    'cobalt': { name: 'Cobalt smelting', icon: [14, 0, "magixmod"], desc: 'Cast 1 [cobalt ingot] out of 8 [cobalt ore].', req: { 'cobalt-working': true }, use: { 'worker': 2, 'metal tools': 2, 'stone tools': 1 } },
                    'nickel': { name: 'Nickel smelting', icon: [10, 9], desc: 'Cast 1 [hard metal ingot] out of 6 [nickel ore] each.', req: { 'nickel-working': true }, use: { 'worker': 2, 'metal tools': 2 } },
                    'platinum': { name: 'Platinum smelting', icon: [3, 11, "magixmod"], desc: 'Cast 1 [platinum ingot] out of 5 [platinum ore] each.', req: { 'platinum-working': true }, use: { 'worker': 2, 'metal tools': 2 } },
                    //deep quarrymining
                    'osmium': { name: 'Osmium smelting', icon: [9, 9], desc: 'Cast [soft metal ingot]s out of 4 [osmium ore] each.', req: { 'deep mining & quarrying': true, 'osmium-working': true, 'furnace modernization': true }, use: { 'metal tools': 2, 'worker': 2 } },
                    'lead': { name: 'Lead smelting', icon: [10, 9], desc: 'Cast [hard metal ingot]s out of 6 [lead ore] each.', req: { 'deep mining & quarrying': true, 'lead-working': true, 'furnace modernization': true }, use: { 'metal tools': 2, 'worker': 2 } },
                    'mythril': { name: 'Mythril smelting', icon: [11, 6, "magixmod"], desc: 'Cast [mystical metal ingot]s out of 6 [mythril ore] and 1 [gold ore] each.', req: { 'deep mining & quarrying': true, 'mythril-working': true, 'furnace modernization': true }, use: { 'metal tools': 2, 'worker': 2 } },
                    'blackium': { name: 'Blackium alloying', icon: [12, 9], desc: 'Cast [strong metal ingot]s out of 6 [blackium ore] each.', req: { 'deep mining & quarrying': true, 'blackium-working': true, 'furnace modernization': true }, use: { 'metal tools': 2, 'worker': 2 } },
                    'zinc': { name: 'Zinc smelting', icon: [10, 9], desc: 'Cast [hard metal ingot]s out of 7 [zinc ore] each.', req: { 'deep mining & quarrying': true, 'zinc-working': true, 'furnace modernization': true }, use: { 'metal tools': 2, 'worker': 2 } },
                    'unk': { name: 'Dinium & unknownium alloying', icon: [11, 6, "magixmod"], desc: 'Cast 2 [mystical metal ingot]s out of 4 [dinium ore], 3 [copper ore], 1 [coal] and 4 [unknownium ore] each with a 95% chance of success.', req: { 'deep mining & quarrying': true, 'dinium & unknownium working': true, 'furnace modernization': true }, use: { 'metal tools': 2, 'worker': 2 } },
                },
                effects: [
                    { type: 'convert', from: { 'copper ore': 5 }, into: { 'soft metal ingot': 1 }, repeat: 3, mode: 'copper' },
                    { type: 'convert', from: { 'tin ore': 10 }, into: { 'soft metal ingot': 1 }, repeat: 3, mode: 'tin' },
                    { type: 'convert', from: { 'iron ore': 5 }, into: { 'hard metal ingot': 1 }, repeat: 3, mode: 'iron' },
                    { type: 'convert', from: { 'gold ore': 5 }, into: { 'precious metal ingot': 1 }, repeat: 1, mode: 'gold' },
                    { type: 'convert', from: { 'tin ore': 2, 'copper ore': 8 }, into: { 'hard metal ingot': 1 }, repeat: 3, mode: 'bronze' },
                    { type: 'convert', from: { 'iron ore': 19, 'coal': 1 }, into: { 'strong metal ingot': 1 }, repeat: 1, mode: 'steel' },
                    { type: 'convert', from: { 'cobalt ore': 8 }, into: { 'cobalt ingot': 1 }, every: 5, mode: 'cobalt' },
                    { type: 'convert', from: { 'nickel ore': 6 }, into: { 'hard metal ingot': 1 }, every: 5, mode: 'nickel' },
                    { type: 'convert', from: { 'platinum ore': 5 }, into: { 'platinum ingot': 1 }, every: 5, mode: 'platinum' },
                    //Deep ores
                    { type: 'convert', from: { 'osmium ore': 4 }, into: { 'hard metal ingot': 1 }, every: 5, mode: 'osmium' },
                    { type: 'convert', from: { 'lead ore': 6 }, into: { 'hard metal ingot': 1 }, every: 5, mode: 'lead' },
                    { type: 'convert', from: { 'mythril ore': 6, 'gold ore': 1 }, into: { 'mystical metal ingot': 1 }, every: 5, mode: 'mythril' },
                    { type: 'convert', from: { 'blackium ore': 6 }, into: { 'strong metal ingot': 1 }, every: 5, mode: 'blackium' },
                    { type: 'convert', from: { 'zinc ore': 7 }, into: { 'hard metal ingot': 1 }, every: 5, mode: 'zinc' },
                    { type: 'convert', from: { 'dinium ore': 4, 'copper ore': 3, 'coal': 1, 'unknownium ore': 4 }, into: { 'mystical metal ingot': 2 }, every: 3, mode: 'unk', chance: 95 / 100 },
                    //Mults
                    { type: 'mult', value: 0.95, req: { 'dt4': true }, mode: 'gold' },
                    { type: 'mult', value: 0.95, req: { 'dt5': true }, mode: 'iron' },
                    { type: 'mult', value: 0.95, req: { 'dt5': true }, mode: 'bronze' },
                    { type: 'mult', value: 0.95, req: { 'dt5': true }, mode: 'nickel' },
                    { type: 'mult', value: 0.95, req: { 'dt6': true }, mode: 'tin' },
                    { type: 'mult', value: 0.95, req: { 'dt6': true }, mode: 'copper' },
                    { type: 'waste', chance: 0.001 / 1000, req: { 'construction III': false } },
                    { type: 'waste', chance: 0.0002 / 1000, req: { 'construction III': true, 'improved construction': false } },
                    { type: 'waste', chance: 0.00014 / 1000, req: { 'improved construction': true } },
                    { type: 'mult', value: 1.1, req: { 'alchemical fuels': true } },
                    { type: 'mult', value: 1.25, req: { 'bellows': true } },
                    { type: 'mult', value: 1.2, req: { 'improved furnace construction': true, 'moderation': true } },
                    { type: 'mult', value: 1.1, req: { 'improved furnace construction': true, 'caretaking': true } },
                ],
                gizmos: true,
                req: { 'smelting': true, 't10': false },
                category: 'crafting',
            });
            new G.Unit({
                name: 'blacksmith workshop',
                desc: '@forges metal goods out of ingots<>The [blacksmith workshop,Blacksmith] takes the same pride in shaping the tool that tills as they do the sword that slays.',
                icon: [26, 2, 25, 2],
                cost: { 'basic building materials': 100 },
                use: { 'land': 1 },
                //require:{'worker':2,'stone tools':2},
                modes: {
                    'off': G.MODE_OFF,
                    'metal tools': { name: 'Forge tools from soft metals', icon: [2, 9], desc: 'Forge [metal tools] out of 2 [soft metal ingot]s each.', use: { 'worker': 1, 'stone tools': 1 }, req: {} },
                    'hard metal tools': { name: 'Forge tools from hard metals', icon: [2, 9], desc: 'Forge 3 [metal tools] out of 1 [hard metal ingot].', use: { 'worker': 1, 'metal tools': 1 }, req: {} },
                    'gold blocks': { name: 'Forge gold blocks', icon: [14, 8], desc: 'Forge [gold block]s out of 10 [precious metal ingot]s each.', use: { 'worker': 1, 'stone tools': 1 }, req: { 'gold-working': true, 'block-smithery': false } },
                    'forgeweapon': { name: 'Forge weapons out of soft metals', icon: [15, 11, "magixmod"], desc: 'Forge [metal weapons] out of 2 [soft metal ingot]s each.', req: { 'weapon blacksmithery': true }, use: { 'worker': 2, 'metal tools': 1, 'stone tools': 1 } },
                    'forgeweaponhard': { name: 'Forge weapons out of hard metals', icon: [15, 11, "magixmod"], desc: 'Forge [metal weapons] out of 1 [hard metal ingot] each.', req: { 'weapon blacksmithery': true }, use: { 'worker': 2, 'metal tools': 1, 'stone tools': 1 } },
                    'forgearmor': { name: 'Forge armor out of soft metals', icon: [16, 11, "magixmod"], desc: 'Forge [armor set] out of 8 [soft metal ingot]s each.', req: { 'armor blacksmithery': true }, use: { 'worker': 2, 'metal tools': 1, 'stone tools': 1 } },
                    'forgearmorhard': { name: 'Forge armor out of hard metals', icon: [16, 11, "magixmod"], desc: 'Forge [armor set] out of 5 [hard metal ingot]s each.', req: { 'armor blacksmithery': true }, use: { 'worker': 2, 'metal tools': 1, 'stone tools': 1 } },
                    'platinum blocks': { name: 'Craft platinum blocks', icon: [4, 11, "magixmod"], desc: 'Forge [platinum block]s out of 10 [platinum ingot]s each.', req: { 'platinum-working': true, 'block-smithery': false }, use: { 'worker': 1, 'metal tools': 1, 'stone tools': 1 } },
                    'factgear': { name: 'Forge factory equipment', icon: [9, 18, "magixmod"], desc: 'Forge [basic factory equipment] out of 11 [hard metal ingot]s each.', req: { 'advanced casting': true }, use: { 'worker': 3, 'metal tools': 3 } },
                    'golden fish': { name: 'Craft golden fish', icon: [5, 0, "magix2"], desc: 'Make [golden fish] by using 1 [seafood,Fish] and 2 yellow [fruit]. Has a chance to fail!', use: { 'worker': 1, 'metal tools': 1, 'stone tools': 1 }, req: { 't6': true } },
                    'golden mushrooms': { name: 'Craft golden mushrooms', icon: [6, 5, "magix2"], desc: 'Make [golden mushroom]s by using 1 [mushroom] and 2 [gold block]s. Has a large chance to fail, though.', use: { 'worker': 1, 'metal tools': 1, 'stone tools': 1 }, req: { 'mushroom crafting': true } },
                },
                effects: [
                    { type: 'convert', from: { 'soft metal ingot': 2 }, into: { 'metal tools': 1 }, repeat: 3, mode: 'metal tools' },
                    { type: 'convert', from: { 'hard metal ingot': 1 }, into: { 'metal tools': 3 }, repeat: 3, mode: 'hard metal tools' },
                    { type: 'convert', from: { 'precious metal ingot': 10 }, into: { 'gold block': 1 }, mode: 'gold blocks' },
                    { type: 'convert', from: { 'soft metal ingot': 2 }, into: { 'metal weapons': 1 }, repeat: 2, mode: 'forgeweapon' },
                    { type: 'convert', from: { 'hard metal ingot': 1 }, into: { 'metal weapons': 1 }, every: 3, repeat: 1, mode: 'forgeweaponhard' },
                    { type: 'convert', from: { 'soft metal ingot': 8 }, into: { 'armor set': 1 }, every: 4, mode: 'forgearmor' },
                    { type: 'convert', from: { 'hard metal ingot': 5 }, into: { 'armor set': 2 }, every: 4, mode: 'forgearmorhard' },
                    { type: 'mult', value: 0, req: { 'block-smithery': true }, mode: 'gold blocks' },
                    { type: 'mult', value: 0, req: { 'block-smithery': true }, mode: 'platinum block' },
                    { type: 'convert', from: { 'platinum ingot': 10 }, into: { 'platinum block': 1 }, every: 4, mode: 'platinum blocks' },
                    { type: 'convert', from: { 'hard metal ingot': 11 }, into: { 'basic factory equipment': 1 }, every: 4, mode: 'factgear' },
                    { type: 'convert', from: { 'precious metal ingot': 1, 'seafood': 1 }, into: { 'golden fish': 1 }, chance: 0.2, mode: 'golden fish', req: { 'golden crafting': false } },
                    { type: 'convert', from: { 'precious metal ingot': 2, 'seafood': 1 }, into: { 'golden fish': 1 }, chance: 0.6, mode: 'golden fish', req: { 'golden crafting': true } },
                    { type: 'convert', from: { 'gold block': 2, 'mushroom': 1 }, into: { 'golden mushroom': 1 }, chance: 0.3, mode: 'golden mushrooms', req: { 'mushroom crafting': true, 'ultimate mushroom crafting': false } },
                    { type: 'convert', from: { 'gold block': 2, 'mushroom': 1 }, into: { 'golden mushroom': 1 }, chance: 0.6, mode: 'golden mushrooms', req: { 'ultimate mushroom crafting': true } },
                    { type: 'mult', value: 0.95, req: { 'dt1': true } },
                    { type: 'mult', value: 1.17, req: { 'crafting & farm rituals': 'on', 'power of the faith': true } },
                    { type: 'mult', value: 1.2, req: { 'ground weapons': true } },
                    { type: 'waste', chance: 0.001 / 1000, req: { 'construction III': false } },
                    { type: 'waste', chance: 0.0002 / 1000, req: { 'construction III': true, 'improved construction': false } },
                    { type: 'waste', chance: 0.00014 / 1000, req: { 'improved construction': true } },
                    //TODO : better metal tools, weapons etc
                ],
                gizmos: true,
                req: { 'smelting': true, 't10': false },
                category: 'crafting',
            });

            new G.Unit({
                name: 'woodcutter',
                desc: '@cuts trees, producing [log]s<>[woodcutter]s turn forests into precious wood that can be used as fuel...or construction materials.',
                icon: [8, 2],
                cost: {},
                use: { 'worker': 1 },
                staff: { 'knapped tools': 1 },
                upkeep: { 'food': 0.1 },
                effects: [
                    { type: 'gather', context: 'chop', amount: 1, max: 1 },
                    { type: 'gather', context: 'gather', what: { 'scobs': 0.1 }, amount: 1, max: 1 }
                ],
                req: { 'woodcutting': true, 't10': false },
                category: 'production',
            });
            new G.Unit({
                name: 'carpenter workshop',
                desc: '@processes wood<>The [carpenter workshop,Carpenter] is equipped with all kinds of tools to coerce wood into more useful shapes.',
                icon: [27, 2, 25, 2],
                cost: { 'basic building materials': 100 },
                //require:{'worker':2,'stone tools':2},
                modes: {
                    'off': G.MODE_OFF,
                    'lumber': { name: 'Cut logs into lumber', icon: [1, 8], desc: 'Cut [log]s into 3 [lumber] each.', use: { 'worker': 1, 'stone tools': 1, 'land': 1 }, req: {} },
                    'lumberW': { name: 'Settle a workshop on water to cut logs', icon: [2, 28, "magixmod", 1, 8], desc: 'Cut [log]s into 3 [lumber] each.', use: { 'worker': 1, 'stone tools': 1, 'wtr': 1 }, req: { 'construction II': true, 'water construction': true } },
                    'frames': { name: 'Cut lumber into hive frames', icon: [6, 1, "magix2"], desc: 'Cut a piece of [lumber] into 2 ready-made [hive frame]s.', use: { 'worker': 1, 'stone tools': 1, 'land': 1 }, req: { 'hive frames': true } },
                    'essence': { name: 'Add essence to hive frames', icon: [8, 1, "magix2"], desc: 'Add 10 [nature essence] into a single [hive frame] to turn it into an [essenced hive frame]. Has a chance to fail and requires two [worker]s.', use: { 'worker': 2, 'land': 1 }, req: { 'magical hive frames': true } },
                },
                effects: [
                    { type: 'convert', from: { 'log': 1 }, into: { 'lumber': 3 }, repeat: 2, mode: 'lumber' },
                    { type: 'convert', from: { 'log': 1 }, into: { 'lumber': 3 }, repeat: 2, mode: 'lumberW' },
                    { type: 'convert', from: { 'lumber': 1 }, into: { 'hive frame': 2 }, every: 5, mode: 'frames' },
                    { type: 'convert', from: { 'hive frame': 1, 'nature essence': 10 }, into: { 'essenced hive frame': 1 }, every: 5, chance: 0.8, mode: 'essence' },
                    { type: 'mult', value: 0.8, req: { 'dt17': true } },
                    { type: 'mult', value: 3, req: { 'moderated carpentry': true } },
                    { type: 'mult', value: 1.17, req: { 'crafting & farm rituals': 'on', 'power of the faith': true } },
                    { type: 'waste', chance: 0.001 / 1000, req: { 'construction III': false } },
                    { type: 'waste', chance: 0.0002 / 1000, req: { 'construction III': true, 'improved construction': false } },
                    { type: 'waste', chance: 0.00014 / 1000, req: { 'improved construction': true } },
                ],
                gizmos: true,
                req: { 'carpentry': true, 't10': false },
                category: 'crafting',
            });

            new G.Unit({
                name: 'soothsayer',
                desc: '@generates [faith] and [happiness] with a large chance to fail<>[soothsayer]s tell the tales of the dead, helping the tribe deal with grief every now and then.',
                icon: [15, 2],
                cost: {},
                use: { 'worker': 1 },
                upkeep: { 'food': 0.2 },
                effects: [
                    { type: 'gather', what: { 'faith': 0.012, 'happiness': 0.075 }, chance: 1 / 9.25, req: { 'enlightenment': false, 'eotm': false } },
                    { type: 'gather', what: { 'faith': 0.012, 'happiness': 0.075 }, chance: 1 / 7.25, req: { 'enlightenment': true, 'eotm': false } },
                    { type: 'gather', what: { 'faith': 0.012, 'happiness': 0.075 }, chance: 1 / 9.25, req: { 'enlightenment': true, 'eotm': true } },
                    { type: 'gather', what: { 'faith': 0.05 }, req: { 'symbolism': true, 'symbolism II': false }, chance: 1 / 6.5 },
                    { type: 'gather', what: { 'faith': 0.07 }, req: { 'symbolism II': true }, chance: 1 / 6.5 },
                    { type: 'mult', value: 2 / 3, req: { 'dt16': true } },
                    { type: 'mult', value: 1.25, req: { 'se11': 'on' } },
                    { type: 'mult', value: 0.95, req: { 'se03': 'on' } },
                ],
                req: { 'ritualism': true },
                category: 'spiritual',
            });
            new G.Unit({
                name: 'healer',
                desc: '@uses some [herbs] to heal the [sick] and the [wounded] slowly<>The [healer] knows the secrets of many special plants that make illness stay away.',
                icon: [23, 3],
                cost: {},
                use: { 'worker': 1 },
                //staff:{'knapped tools':1},
                upkeep: { 'food': 0.4 },
                modes: {
                    'off': G.MODE_OFF,
                    'normal': { name: 'Normal', icon: [16, 1, "magixmod"], desc: 'This [healer] will heal [population,people] both [sick] and [wounded] but very slowly.', use: { 'knapped tools': 1 }, req: {} },
                    'wounded': { name: 'Heal the wounded', icon: [18, 1, "magixmod"], desc: 'This [healer] will heal only [wounded] people but with doubled efficiency (faster with [first aid]).', use: { 'knapped tools': 1, 'flowers': 1 }, req: { 'plant lore II': true } },
                    'sick': { name: 'Heal the sick', icon: [18, 0, "magixmod"], desc: 'This [healer] will heal only [sick] people but with doubled efficiency, requiring [flowers] as well.', use: { 'knapped tools': 1 }, req: { 'plant lore II': true } },
                    'brews': { name: 'Heal the sick with brews', icon: [18, 0, "magixmod"], desc: 'This [healer] will heal only [sick] people using [medicament brew]s, which is 20% faster than with [flowers].', use: { 'stone tools': 1 }, req: { 'plant lore II': true, 'medicament brews': true } },
                },
                effects: [
                    { type: 'convert', from: { 'sick': 1, 'herbs': 3 }, into: { 'adult': 1 }, chance: 1 / 4, every: 10, mode: 'normal', req: { 'elder workforce': 'off' } },
                    { type: 'convert', from: { 'wounded': 1, 'herbs': 3 }, into: { 'adult': 1 }, chance: 1 / 6, every: 13, mode: 'normal', req: { 'elder workforce': 'off' } },
                    { type: 'convert', from: { 'wounded': 1, 'herbs': 1 }, into: { 'adult': 1 }, chance: 1 / 3, every: 8, mode: 'wounded', req: { 'first aid': false, 'elder workforce': 'off' } },
                    { type: 'convert', from: { 'wounded': 1, 'herbs': 1, 'first aid things': 3 }, into: { 'adult': 1 }, chance: 1.2 / 3, every: 6, mode: 'wounded', req: { 'first aid': true, 'elder workforce': 'off' } },
                    { type: 'convert', from: { 'sick': 1, 'herbs': 3, 'flowers': 1 }, into: { 'adult': 1 }, chance: 2 / 4, every: 5, mode: 'sick', req: { 'elder workforce': 'off' } },
                    { type: 'convert', from: { 'sick': 1, 'herbs': 1, 'medicament brews': 2.5 }, into: { 'adult': 1 }, chance: 1.2 / 2, every: 5, mode: 'brews', req: { 'elder workforce': 'off', 'healing with brews': false } },
                    { type: 'convert', from: { 'sick': 1, 'herbs': 1, 'medicament brews': 2.5 }, into: { 'adult': 1 }, chance: 1.55 / 2, every: 5, mode: 'brews', req: { 'elder workforce': 'off', 'healing with brews': true } },
                    { type: 'convert', from: { 'sick': 1, 'herbs': 3 }, into: { 'elder': 1 }, chance: 1 / 4, every: 10, mode: 'normal', req: { 'elder workforce': 'on' } },
                    { type: 'convert', from: { 'wounded': 1, 'herbs': 3 }, into: { 'elder': 1 }, chance: 1 / 6, every: 13, mode: 'normal', req: { 'elder workforce': 'on' } },
                    { type: 'convert', from: { 'wounded': 1, 'herbs': 1 }, into: { 'elder': 1 }, chance: 1 / 3, every: 8, mode: 'wounded', req: { 'first aid': false, 'elder workforce': 'on' } },
                    { type: 'convert', from: { 'wounded': 1, 'herbs': 1, 'first aid things': 3 }, into: { 'elder': 1 }, chance: 1.2 / 3, every: 6, mode: 'wounded', req: { 'first aid': true, 'elder workforce': 'on' } },
                    { type: 'convert', from: { 'sick': 1, 'herbs': 3, 'flowers': 1 }, into: { 'elder': 1 }, chance: 2 / 4, every: 5, mode: 'sick', req: { 'elder workforce': 'on' } },
                    { type: 'convert', from: { 'sick': 1, 'herbs': 1, 'medicament brews': 2.5 }, into: { 'elder': 1 }, chance: 1.2 / 2, every: 5, mode: 'brews', req: { 'elder workforce': 'on', 'healing with brews': false } },
                    { type: 'convert', from: { 'sick': 1, 'herbs': 1, 'medicament brews': 2.5 }, into: { 'elder': 1 }, chance: 1.55 / 2, every: 5, mode: 'brews', req: { 'elder workforce': 'on', 'healing with brews': true } },
                    { type: 'gather', what: { 'health': 0.014 }, req: { 'nutrition': true } },
                    { type: 'gather', what: { 'health': 0.014 }, req: { 'meat diet': true } },
                    { type: 'mult', value: 1.03, req: { 'more experienced healers': true, 'moderation': true } },
                    { type: 'mult', value: 1.06, req: { 'more experienced healers': true, 'caretaking': true } },
                    { type: 'mult', value: 1.25, req: { 'se07': 'on' } },
                    { type: 'mult', value: 0.95, req: { 'se08': 'on' } },
                    { type: 'gather', what: { 'health': 0.0225 }, req: { 'mentors of nature III': true } },
                ],
                gizmos: true,
                req: { 'healing': true },
                category: 'spiritual',
                priority: 5,
            });

            new G.Unit({
                name: 'chieftain',
                desc: '@generates [influence] every now and then<>Each [chieftain] will lead a small group of people, guiding them in their decisions.',
                icon: [18, 3],
                cost: { 'food': 50 },
                use: { 'worker': 1 },
                upkeep: { 'food': 0.5 },
                effects: [
                    { type: 'gather', what: { 'influence': 0.1 } },
                    { type: 'gather', what: { 'influence': 0.05 }, req: { 'code of law': true } },
                    { type: 'mult', value: 1.05, req: { 'trustworthy influence': true } }, // NOTE: rootPolicyEvolve() RELIES ON FIRST MULT VALUE TO BE EQUAL TO 1.05
                    { type: 'mult', value: 0.1, req: { 'eotm': true } },
                    { type: 'mult', value: 1.1, req: { 'glory': true } },
                    { type: 'mult', value: 0.75, req: { 'se11': 'on' } },
                ],
                limitPer: { 'population': 100 },
                req: { 'chieftains': true, 't3': false/*Cultural trial condition*/ },
                category: 'political',
                priority: 5,
            });
            new G.Unit({
                name: 'clan leader',
                desc: '@generates [influence] every now and then<>The [clan leader] is followed by many and is trusted with defending the honor and safety of their people.',
                icon: [19, 3],
                cost: { 'food': 100 },
                use: { 'worker': 1 },
                upkeep: { 'food': 1 },
                effects: [
                    { type: 'gather', what: { 'influence': 0.2 } },
                    { type: 'gather', what: { 'influence': 0.05 }, req: { 'code of law': true } },
                    { type: 'mult', value: 1.05, req: { 'trustworthy influence': true } }, // NOTE: rootPolicyEvolve() RELIES ON FIRST MULT VALUE TO BE EQUAL TO 1.05
                    { type: 'mult', value: 0.1, req: { 'eotm': true } },
                    { type: 'mult', value: 1.1, req: { 'glory': true } },
                    { type: 'mult', value: 0.75, req: { 'se11': 'on' } },
                ],
                limitPer: { 'population': 500 },
                req: { 'clans': true, 't3': false/*Cultural trial condition*/ },
                category: 'political',
                priority: 5,
            });

            new G.Unit({
                name: 'grave',
                desc: '@provides 1 [burial spot], in which the [corpse,dead] are automatically interred one by one@graves with buried corpses decay over time, freeing up land for more graves<>A simple grave dug into the earth, where the dead may find rest.//Burying your dead helps prevent [health,disease] and makes your people slightly [happiness,happier].',
                icon: [13, 2],
                cost: {},
                use: { 'land': 1 },
                //require:{'worker':1,'knapped tools':1},
                effects: [
                    { type: 'provide', what: { 'burial spot': 1 }, req: { 'spiritual piety': false } },
                    { type: 'provide', what: { 'burial spot': 3 }, req: { 'spiritual piety': true } },
                    { type: 'provide', what: { 'burial spot': 2 }, req: { 'spiritual piety': false, 'voodoo spirit': true } },
                    { type: 'provide', what: { 'burial spot': 6 }, req: { 'spiritual piety': true, 'voodoo spirit': true } },
                ],
                req: { 'burial': true },
                category: 'civil',
            });

            new G.Unit({
                name: 'mud shelter',
                desc: '@provides 3 [housing]<>Basic, frail dwelling in which a small family can live.',
                icon: [9, 2],
                cost: { 'mud': 75 },
                use: { 'land': 1 },
                //require:{'worker':1,'knapped tools':1},
                effects: [
                    { type: 'provide', what: { 'housing': 3 } },
                    { type: 'provide', what: { 'housing': 1 }, req: { 'gt1': true } },
                    { type: 'waste', chance: 3 / 1000, req: { 'construction III': false } },
                    { type: 'waste', chance: 0.6 / 1000, req: { 'construction III': true, 'improved construction': false } },
                    { type: 'waste', chance: 0.42 / 1000, req: { 'improved construction': true } },
                ],
                req: { 'sedentism': true },
                category: 'housing',
            });
            new G.Unit({
                name: 'branch shelter',
                desc: '@provides 3 [housing]<>Basic, very frail dwelling in which a small family can live. The weakest shelter.',
                icon: [10, 2],
                cost: { 'stick': 75 },
                use: { 'land': 1 },
                effects: [
                    { type: 'provide', what: { 'housing': 3 } },
                    { type: 'provide', what: { 'housing': 1 }, req: { 'gt1': true } },
                    { type: 'waste', chance: 3 / 1000 },
                ],
                req: { 'sedentism': true },
                category: 'housing',
            });
            new G.Unit({
                name: 'hut',
                desc: '@provides 5 [housing]<>A small dwelling built out of various materials.',
                icon: [11, 2],
                cost: { 'archaic building materials': 100 },
                use: { 'land': 1 },
                effects: [
                    { type: 'provide', what: { 'housing': 5 } },
                    { type: 'provide', what: { 'housing': 1 }, req: { 'gt1': true } },
                    { type: 'waste', chance: 3 / 1000, req: { 'construction III': false } },
                    { type: 'waste', chance: 0.6 / 1000, req: { 'construction III': true, 'improved construction': false } },
                    { type: 'waste', chance: 0.42 / 1000, req: { 'improved construction': true } },
                ],
                req: { 'building': true },
                category: 'housing',
            });
            new G.Unit({
                name: 'hovel',
                desc: '@provides 8 [housing]<>A simple home for a family of villagers.',
                icon: [20, 3],
                cost: { 'basic building materials': 75 },
                use: { 'land': 1 },
                effects: [
                    { type: 'provide', what: { 'housing': 8 } },
                    { type: 'provide', what: { 'housing': 0.5 }, req: { 'gt1': true } },
                    { type: 'waste', chance: 0.03 / 1000, req: { 'construction III': false } },
                    { type: 'waste', chance: 0.006 / 1000, req: { 'construction III': true, 'improved construction': false } },
                    { type: 'waste', chance: 0.0042 / 1000, req: { 'improved construction': true } },
                ],
                req: { 'cities': true },
                category: 'housing',
            });
            new G.Unit({
                name: 'house',
                desc: '@provides 10 [housing]<>A sturdy home built to last.',
                icon: [21, 3],
                cost: { 'basic building materials': 100 },
                use: { 'land': 1 },
                //require:{'worker':3,'metal tools':3},
                effects: [
                    { type: 'provide', what: { 'housing': 10 } },
                    { type: 'provide', what: { 'housing': 0.125 }, req: { 'better house construction': true } },
                    { type: 'gather', what: { 'fruit': 1 }, req: { 'next-to house fruitbushes': true } },
                    { type: 'gather', what: { 'fruit': 0.2 }, req: { 'fertile bushes': true } },
                    { type: 'waste', chance: 0.01 / 1000, req: { 'construction III': false } },
                    { type: 'waste', chance: 0.02 / 1000, req: { 'construction III': true, 'improved construction': false } },
                    { type: 'waste', chance: 0.14 / 1000, req: { 'improved construction': true } },
                ],
                req: { 'construction': true },
                category: 'housing',
            });

            new G.Unit({
                name: 'storage pit',
                desc: '@provides 400 [food storage] and 400 [material storage]<>A simple hole in the ground, lined with stones.//Prevents some food from perishing and some goods from being stolen, but may itself crumble away over time.',
                icon: [12, 2],
                cost: { 'archaic building materials': 50 },
                use: { 'land': 2 },
                //require:{'worker':2,'knapped tools':2},
                effects: [
                    { type: 'provide', what: { 'added food storage': 400 } },
                    { type: 'provide', what: { 'added material storage': 400 } },
                    { type: 'provide', what: { 'added food storage': 80, 'added material storage': 80 }, req: { 'spell of capacity': true } },
                    { type: 'provide', what: { 'added food storage': 140, 'added material storage': 140 }, req: { 'well stored': true } },
                    { type: 'provide', what: { 'added food storage': 220, 'added material storage': 200 }, req: { 'well stored 2': true } },
                    { type: 'waste', chance: 0.8 / 1000 }
                ],
                req: { 'stockpiling': true },
                category: 'storage',
            });
            new G.Unit({
                name: 'stockpile',
                desc: '@provides 1,000 [material storage]<>A simple building where resources are stored.//Slows material decay and deters theft somewhat, but may itself decay over time.',
                icon: [22, 4],
                cost: { 'archaic building materials': 100 },
                use: { 'land': 2 },
                //require:{'worker':2,'stone tools':2},
                effects: [
                    { type: 'provide', what: { 'added material storage': 1000 } },
                    { type: 'provide', what: { 'added material storage': 200 }, req: { 'spell of capacity': true } },
                    { type: 'provide', what: { 'added material storage': 350 }, req: { 'well stored': true } },
                    { type: 'provide', what: { 'added material storage': 550 }, req: { 'well stored 2': true } },
                    { type: 'waste', chance: 0.1 / 1000, req: { 'construction III': false } },
                    { type: 'waste', chance: 0.02 / 1000, req: { 'construction III': true, 'improved construction': false } },
                    { type: 'waste', chance: 0.014 / 1000, req: { 'improved construction': true } },
                ],
                req: { 'stockpiling': true, 'building': true },
                category: 'storage',
            });
            new G.Unit({
                name: 'warehouse',
                desc: '@provides 4,000 [material storage]<>A large building for storing materials. Staffed with two guards to prevent theft.',
                icon: [25, 4],
                cost: { 'basic building materials': 500 },
                use: { 'land': 3 },
                staff: { 'worker': 2 },
                //require:{'worker':3,'stone tools':3},
                effects: [
                    { type: 'provide', what: { 'prison space': 5 } },
                    { type: 'provide', what: { 'added material storage': 4000 } },
                    { type: 'provide', what: { 'added material storage': 800 }, req: { 'spell of capacity': true } },
                    { type: 'provide', what: { 'added material storage': 1400 }, req: { 'well stored': true } },
                    { type: 'provide', what: { 'added material storage': 2200 }, req: { 'well stored 2': true } },
                    { type: 'waste', chance: 0.001 / 1000, req: { 'construction III': false } },
                    { type: 'waste', chance: 0.0002 / 1000, req: { 'construction III': true, 'improved construction': false } },
                    { type: 'waste', chance: 0.00014 / 1000, req: { 'improved construction': true } },
                ],
                req: { 'stockpiling': true, 'construction': true },
                category: 'storage',
            });
            new G.Unit({
                name: 'granary',
                desc: '@provides 1,000 [food storage]<>A grain storage building with stilts to prevent pests from getting in.',
                icon: [23, 4],
                cost: { 'archaic building materials': 50, 'basic building materials': 50, 'pot': 15 },
                use: { 'land': 2 },
                //require:{'worker':2,'stone tools':2},
                effects: [
                    { type: 'provide', what: { 'added food storage': 1000 } },
                    { type: 'provide', what: { 'added food storage': 200 }, req: { 'spell of capacity': true } },
                    { type: 'provide', what: { 'added food storage': 350 }, req: { 'well stored': true } },
                    { type: 'provide', what: { 'added food storage': 550 }, req: { 'well stored 2': true } },
                    { type: 'waste', chance: 0.01 / 1000, req: { 'construction III': false } },
                    { type: 'waste', chance: 0.002 / 1000, req: { 'construction III': true, 'improved construction': false } },
                    { type: 'waste', chance: 0.0014 / 1000, req: { 'improved construction': true } },
                ],
                req: { 'stockpiling': true, 'pottery': true },
                category: 'storage',
            });
            new G.Unit({
                name: 'barn',
                desc: '@provides 4,000 [food storage]<>A large wooden building for storing food. A worker manages the [food] inside to prevent rot.',
                icon: [24, 4],
                cost: { 'basic building materials': 500 },
                use: { 'land': 2 },
                staff: { 'worker': 1 },
                //require:{'worker':2,'stone tools':2},
                effects: [
                    { type: 'provide', what: { 'added food storage': 4000 } },
                    { type: 'provide', what: { 'added material storage': 800 }, req: { 'spell of capacity': true } },
                    { type: 'provide', what: { 'added food storage': 1400 }, req: { 'well stored': true } },
                    { type: 'provide', what: { 'added food storage': 2200 }, req: { 'well stored 2': true } },
                    { type: 'waste', chance: 0.001 / 1000, req: { 'construction III': false } },
                    { type: 'waste', chance: 0.0002 / 1000, req: { 'construction III': true, 'improved construction': false } },
                    { type: 'waste', chance: 0.00014 / 1000, req: { 'improved construction': true } },
                ],
                req: { 'stockpiling': true, 'carpentry': true },
                category: 'storage',
            });

            new G.Unit({
                name: 'architect',
                desc: '@can be set to manage automatic building construction<>The [architect] is tasked with fulfilling your people\'s housing needs so that you don\'t have to worry about it too much.',
                icon: [26, 4],
                cost: {},
                use: { 'worker': 1 },
                upkeep: { 'food': 0.5 },
                gizmos: true,
                modes: {
                    'off': G.MODE_OFF,
                    'house building': { name: 'House building', icon: [21, 3], desc: 'Build [house]s as long as there is homelessness and the right materials are available.' },
                    'undertaker': { name: 'Undertaker', icon: [13, 2], desc: 'Dig [grave]s as long as there are unburied corpses.' },
                    'floored houser': { name: 'Floored house building', icon: [9, 1, "magixmod"], desc: 'This architect will build compact [floored house]s.', req: { 'architects knowledge': true, 'city planning': true } },
                    'brickhouser': { name: 'Brick house building', icon: [5, 1, "magixmod"], desc: 'This architect will build useful [brick house with a silo,Brick houses].', req: { 'architects knowledge': true, 'city planning': true } }
                },
                effects: [
                    {
                        type: 'function', func: function (me) {
                            var wiggleRoom = 10 + (G.has('city planning II') ? 2 : 0) + (G.has('city planning III') ? 3 : 0) + (G.has('city planning III(m)') ? 2 : 0);
                            var homeless = Math.max(0, (G.getRes('population').amount + wiggleRoom) - G.getRes('housing').amount);
                            var toMake = me.amount - me.idle;
                            if (homeless > 0 && toMake > 0 && G.canBuyUnitByName('house', toMake)) {
                                G.buyUnitByName('house', toMake, true);
                                if (G.has('city planning III')) changeHappiness(toMake * 1.5, 'architect trust');
                            }
                        }, mode: 'house building'
                    },
                    {
                        type: 'function', func: function (me) {
                            var wiggleRoom = 5 + (G.has('city planning II') ? 2 : 0) + (G.has('city planning III') ? 3 : 0) + (G.has('city planning III(m)') ? 2 : 0);
                            var toMake = Math.min(me.amount - me.idle, Math.max(0, (G.getRes('corpse').amount + wiggleRoom) - (G.getRes('burial spot').amount - G.getRes('burial spot').used)));
                            if (toMake > 0 && G.canBuyUnitByName('grave', toMake)) {
                                G.buyUnitByName('grave', toMake, true);
                            }
                        }, mode: 'undertaker'
                    },
                    {
                        type: 'function', func: function (me) {
                            var wiggleRoom = 5 + (G.has('city planning II') ? 2 : 0) + (G.has('city planning III') ? 3 : 0) + (G.has('city planning III(m)') ? 2 : 0);
                            var homeless = Math.max(0, (G.getRes('population').amount + wiggleRoom) - G.getRes('housing').amount);
                            var toMake = me.amount - me.idle;
                            if (homeless > 0 && toMake > 0 && G.canBuyUnitByName('floored house', toMake)) {
                                G.buyUnitByName('floored house', toMake, true);
                                if (G.has('city planning III')) changeHappiness(toMake * 1.5, 'architect trust');
                            }
                        }, mode: 'floored houser'
                    },
                    {
                        type: 'function', func: function (me) {
                            var wiggleRoom = 8 + (G.has('city planning II') ? 2 : 0) + (G.has('city planning III') ? 3 : 0) + (G.has('city planning III(m)') ? 2 : 0);
                            var homeless = Math.max(0, (G.getRes('population').amount + wiggleRoom) - G.getRes('housing').amount);
                            var toMake = me.amount - me.idle;
                            if (homeless > 0 && toMake > 0 && G.canBuyUnitByName('brick house with a silo', toMake)) {
                                G.buyUnitByName('brick house with a silo', toMake, true);
                                if (G.has('city planning III')) changeHappiness(toMake * 1.5, 'architect trust');
                            }
                        }, mode: 'brickhouser'
                    },
                ],
                limitPer: { 'land': 100 },
                req: { 'city planning': true },
                category: 'civil',
            });

            new G.Unit({
                name: 'lodge',
                desc: 'A [lodge] is where people of all professions gather to rest and store their tools. Lodges also increase the [happiness] of your tribe! They do not provide your workers with tools, and if you have workers not assigned to a [lodge], they will automatically be assigned if possible. Lodges, unless upgraded, can help out 5 people. <b>You should remove these before removing workers!</b>',
                icon: [17, 3],
                cost: { 'archaic building materials': 50 },
                use: { 'land': 1 },
                gizmos: true,
                modes: {
                    'off': G.MODE_OFF,
                    'gatherers': { name: 'Gatherer\'s lodge', icon: [0, 2], desc: 'Hire [gatherer]s until there are 5 for each of this lodge.', req: { 'tribalism': true } },
                    'hunters': { name: 'Hunter\'s lodge', icon: [18, 2], desc: 'Hire [hunter]s until there are 5 for each of this lodge.', req: { 'hunting': true } },
                    'fishers': { name: 'Fisher\'s lodge', icon: [17, 2], desc: 'Hire [fisher]s until there are 5 for each of this lodge.', req: { 'fishing': true } },
                    'diggers': { name: 'Digger\'s lodge', icon: [7, 2], desc: 'Hire [digger]s until there are 5 for each of this lodge.', req: { 'digging': true } },
                    'woodcutters': { name: 'Woodcutter\'s lodge', icon: [8, 2], desc: 'Hire [woodcutter]s until there are 5 for each of this lodge.', req: { 'woodcutting': true } },
                    'artisans': { name: 'Artisan\'s lodge', icon: [6, 2], desc: 'Hire [artisan]s until there are 5 for each of this lodge.', req: { 'stone-knapping': true } },
                },
                effects: [
                    { type: 'gather', what: { 'happiness': 1.25 } },
                    { type: 'provide', what: { 'housing': 2 }, req: { 'guilds unite': true } },
                    {
                        type: 'function', func: function (me) {
                            if (me.amount * (G.has("guilds unite") ? 100 : 5) > G.unitsOwned[G.unitsOwnedNames.indexOf('gatherer')].targetAmount) G.buyUnitByName('gatherer', 1, true);
                        }, mode: 'gatherers'
                    },
                    {
                        type: 'function', func: function (me) {
                            if (me.amount * (G.has("guilds unite") ? 100 : 5) > G.unitsOwned[G.unitsOwnedNames.indexOf('hunter')].targetAmount) G.buyUnitByName('hunter', 1, true);
                        }, mode: 'hunters'
                    },
                    {
                        type: 'function', func: function (me) {
                            if (me.amount * (G.has("guilds unite") ? 100 : 5) > G.unitsOwned[G.unitsOwnedNames.indexOf('fisher')].targetAmount) G.buyUnitByName('fisher', 1, true);
                        }, mode: 'fishers'
                    },
                    {
                        type: 'function', func: function (me) {
                            if (me.amount * (G.has("guilds unite") ? 100 : 5) > G.unitsOwned[G.unitsOwnedNames.indexOf('digger')].targetAmount) G.buyUnitByName('digger', 1, true);
                        }, mode: 'diggers'
                    },
                    {
                        type: 'function', func: function (me) {
                            if (me.amount * (G.has("guilds unite") ? 100 : 5) > G.unitsOwned[G.unitsOwnedNames.indexOf('woodcutter')].targetAmount) G.buyUnitByName('woodcutter', 1, true);
                        }, mode: 'woodcutters'
                    },
                    {
                        type: 'function', func: function (me) {
                            if (me.amount * (G.has("guilds unite") ? 100 : 5) > G.unitsOwned[G.unitsOwnedNames.indexOf('artisan')].targetAmount) G.buyUnitByName('artisan', 1, true);
                        }, mode: 'artisans'
                    },
                ],
                req: { 'sedentism': true },
                category: 'civil',
            });
            new G.Unit({
                name: 'guild quarters',
                desc: 'Groups of people sharing the same profession can meet in these to share their craft and trade secrets, providing some [happiness]. These [guild quarters] do not provide your workers with tools, and if you have workers not assigned here, they will automatically be assigned if possible. <b>You should remove these before removing workers!</b>',
                icon: [26, 3, 25, 2],
                cost: { 'basic building materials': 75 },
                use: { 'land': 1 },
                staff: { 'worker': 1 },
                //require:{'worker':2,'stone tools':2},
                upkeep: { 'food': 0.5 },
                gizmos: true,
                modes: {
                    'off': G.MODE_OFF,
                    'potters': { name: 'Potters\' guild', icon: [20, 2], desc: 'Hire [potter]s until there are 5 for each of this guild.', req: { 'pottery': true } },
                    'carpenters': { name: 'Carpenters\' guild', icon: [27, 2, 25, 2], desc: 'Build [carpenter workshop]s until there are 5 for each of this guild.', req: { 'carpentry': true } },
                    'blacksmiths': { name: 'Blacksmiths\' guild', icon: [26, 2, 25, 2], desc: 'Build [blacksmith workshop]s until there are 5 for each of this guild.', req: { 'smelting': true } }
                },
                effects: [
                    { type: 'gather', what: { 'happiness': 0.5 } },
                    {
                        type: 'function', func: function (me) {
                            if (me.amount * (G.has("guilds unite") ? 100 : 5) > G.unitsOwned[G.unitsOwnedNames.indexOf('potter')].targetAmount) G.buyUnitByName('potter', 1, true);
                        }, mode: 'potters'
                    },
                    {
                        type: 'function', func: function (me) {
                            if (me.amount * (G.has("guilds unite") ? 100 : 5) > G.unitsOwned[G.unitsOwnedNames.indexOf('carpenter workshop')].targetAmount) G.buyUnitByName('carpenter workshop', 1, true);
                        }, mode: 'carpenters'
                    },
                    {
                        type: 'function', func: function (me) {
                            if (me.amount * (G.has("guilds unite") ? 100 : 5) > G.unitsOwned[G.unitsOwnedNames.indexOf('blacksmith workshop')].targetAmount) G.buyUnitByName('blacksmith workshop', 1, true);
                        }, mode: 'blacksmiths'
                    }
                ],
                req: { 'guilds': true },
                category: 'civil',
            });

            new G.Unit({
                name: 'wanderer',
                desc: '@explores occupied tiles for [land]@cannot discover new tiles normally@may sometimes get lost<>[wanderer]s walk about in search of new places to settle, reporting what they saw when they come back.',
                icon: [2, 2],
                cost: { 'food': 20 },
                gizmos: true,
                use: { 'worker': 1 },
                modes: {
                    'explore land': { name: 'Explore land', icon: [5, 28, "magixmod"], desc: 'This [wanderer] will explore lands as usual.', req: { 'tribalism': true } },
                    'trips': { name: 'Send on exploration trip', icon: [5, 28, "magixmod"], desc: 'This [wanderer] will discover new tiles if your primary land is decently explored.', req: { 'exploration trips': true } },
                    'crew loadout': { name: 'Explore oceans with a boat', icon: [9, 33, "magixmod"], desc: 'This [wanderer] will wait until a voyage so they will explore oceans the same way as normally they would explore land.', req: { 'boat building': true } },
                },
                effects: [
                    { type: 'gather', context: 'gather', amount: 0.13, max: 0.27, req: { 'active exploration': true } },
                    { type: 'gather', what: { 'insight': 0.007 }, req: { 'active exploration': true } },
                    { type: 'explore', explored: 0.08, unexplored: 0, mode: 'explore land' },
                    //{type:'exploreAlt',explored:0,unexplored:0.06,mode:'trips'},
                    { type: 'explore', explored: 0, unexplored: 0.06, mode: 'trips', req: { 'around the world': false } },
                    { type: 'explore', explored: 0, unexplored: 0.072, mode: 'trips', req: { 'around the world': true } },
                    { type: 'provide', what: { 'wandererW': 1 }, mode: 'crew loadout' },
                    { type: 'mult', value: 2.5, req: { 't10': true } },
                    { type: 'mult', value: 1.02, req: { 'hallow1': true } },
                    { type: 'mult', value: 1.05, req: { 'discovery rituals': 'on' } },
                    { type: 'function', func: unitGetsConverted({}, 0.01, 0.05, true, '[X] [people].', 'wanderer got lost', 'wanderers got lost'), chance: 1 / 100, mode: 'explore land', req: { 'trails': false } },
                    { type: 'function', func: unitGetsConverted({}, 0.01, 0.05, true, '[X] [people].', 'wanderer got lost', 'wanderers got lost'), chance: 1 / 150, mode: 'explore land', req: { 'trails': true } }
                ],
                req: { 'speech': true },
                category: 'exploration',
            });
            new G.Unit({
                name: 'scout',
                desc: '@discovers new tiles of [land]@will not explore occupied tiles@may sometimes get lost<>[scout]s explore the world in search of new and exciting territories.',
                icon: [24, 3],
                cost: { 'food': 100 },
                use: { 'worker': 1 },
                gizmos: true,
                modes: {
                    'explore land': { name: 'Explore land', icon: [5, 28, "magixmod"], desc: 'This [scout] will discover new land as usual.', req: { 'tribalism': true } },
                    'crew loadout': { name: 'Explore oceans with a boat', icon: [9, 33, "magixmod"], desc: 'This [scout] will wait until a voyage so they will discover more ocean tiles the same way as normally they would discover more land tiles.', req: { 'boat building': true } },
                },
                staff: { 'stone tools': 1 },
                effects: [
                    { type: 'explore', explored: 0, unexplored: 0.008, mode: 'explore land' },
                    { type: 'provide', what: { 'scoutW': 1 }, mode: 'crew loadout' },
                    { type: 'mult', value: 2.5, req: { 't10': true } },
                    { type: 'mult', value: 1.03, req: { 'discovery rituals': 'on' } },
                    { type: 'function', func: unitGetsConverted({}, 0.01, 0.05, true, '[X] [people].', 'scout got lost', 'scouts got lost'), chance: 1 / 200, mode: 'explore land', req: { 'horses': false } },
                    { type: 'function', func: unitGetsConverted({}, 0.01, 0.05, true, '[X] [people].', 'scout got lost', 'scouts got lost'), chance: 1 / 300, mode: 'explore land', req: { 'horses': true } }
                ],
                req: { 'scouting': true },
                category: 'exploration',
            });

            //wonders

            new G.Unit({
                name: 'mausoleum',
                desc: '@leads to the <b>Mausoleum Victory</b><>A mystical monument where the dead lie.//A temple housing a tomb deep under its rocky platform, the Mausoleum stands tall, its eternal shadow forever reminding your people of your greatness.',
                wonder: 'mausoleum',
                icon: [1, 14],
                wideIcon: [0, 14],
                cost: { 'basic building materials': 1000 },
                costPerStep: { 'basic building materials': 200, 'precious building materials': 20 },
                steps: 100,
                messageOnStart: 'You begin the construction of the Mausoleum. Its towering mass already dominates the city, casting fear and awe wherever its shadow reaches.',
                finalStepCost: { 'population': 100, 'housing': -2000 },
                finalStepDesc: 'To complete the Mausoleum, 100 of your [population,people] must be sacrificed to accompany you as servants in your afterlife. //Finishing the Mausoleum also gives 2,000 extra [housing].',
                use: { 'land': 10, 'worker': 5, 'metal tools': 5 },
                //require:{'worker':10,'stone tools':10},
                req: { 'monument-building': true, 'trial': false },
                category: 'wonder',
            });

            //debug units
            new G.Unit({
                name: 'auto nanny',
                desc: '@generates 25 [fruit]s, 25 [vegetables], 50 [cooked meat,Meat], and 100 [water]<>Keeps your people fed so you don\'t have to.//Powered by strange energies.',
                icon: [4, 2],
                cost: {},
                effects: [
                    { type: 'gather', what: { 'fruit': 25, 'vegetables': 25, 'cooked meat': 50, 'water': 100 } }
                ],
                category: 'debug',
            });
            new G.Unit({
                name: 'auto brain',
                desc: '@generates 50 [insight], [culture], [faith], [science] and [influence]<>Educates your people so you don\'t have to.//Powered by strange and unexplained energies.',
                icon: [5, 2],
                cost: {},
                effects: [
                    { type: 'gather', what: { 'insight': 50, 'culture': 50, 'faith': 50, 'science': 50, 'influence': 50 } }
                ],
                category: 'debug',
            });
            new G.Unit({
                name: 'auto brain tier 2',
                desc: '@generates 50 of [insight II], [culture II], [faith II] and [influence II]<>Educates your people so you don\'t have to.//Powered by strange and unexplained energies.',
                icon: [22, 21, "magixmod"],
                cost: {},
                effects: [
                    { type: 'gather', what: { 'insight II': 50, 'culture II': 50, 'faith II': 50, 'influence II': 50 } }
                ],
                category: 'debug',
            });
            new G.Unit({
                name: 'auto wizard',
                desc: '@gathers 105 [magic essences] and 150 [mana]<>Makes magical ingredients for your people that are ready to use.//Powered by strange and unexplained energies.',
                icon: [24, 21, "magixmod"],
                cost: {},
                effects: [
                    { type: 'gather', what: { 'fire essence': 15, 'water essence': 15, 'wind essence': 15, 'lightning essence': 15, 'dark essence': 15, 'nature essence': 15, 'holy essence': 15, 'mana': 150 } }
                ],
                category: 'debug',
            });
            //MAGIX
            new G.Unit({
                name: 'hovel of colours',
                desc: 'Does the same thing as an [artisan] crafting dyes.',
                icon: [19, 18, "magixmod"],
                cost: { 'basic building materials': 975 },
                upkeep: { 'fire pit': 1 },
                use: { 'worker': 22, 'land': 1, 'stone tools': 25 },
                req: { 'caretaking': true, 'manufacture units I': true },
                category: 'crafting',
                effects: [
                    ({ type: 'convert', from: { 'flowers': 21 }, into: { 'dyes': 8 }, every: 4 }),
                    //Production influence
                    { type: 'mult', value: 1.25, req: { 'gt5': true } },
                ],
            });
            new G.Unit({
                name: 'hut of potters',
                desc: 'Does same thing as [potter] was. All 4 modes he had are active all the time in this unit!',
                icon: [20, 18, "magixmod"],
                cost: { 'basic building materials': 475, 'archaic building materials': 500 },
                upkeep: { 'fire pit': 1 },
                use: { 'worker': 22, 'land': 1, 'stone tools': 25 },
                req: { 'caretaking': true, 'manufacture units I': true },
                category: 'crafting',
                effects: [
                    { type: 'convert', from: { 'clay': 100, 'mud': 70, 'fire pit': 8 }, into: { 'pot': 60 }, every: 24 },
                    { type: 'convert', from: { 'clay': 120, 'mud': 130, 'dyes': 24, 'fire pit': 5 }, into: { 'precious pot': 100 }, every: 36 },
                    { type: 'convert', from: { 'clay': 60, 'mud': 40 }, into: { 'potion pot': 30 }, every: 64 },
                    { type: 'mult', value: 1.25, req: { 'gt4': true } },
                    { type: 'mult', value: 1.2, req: { 'ground pots': true } },
                ],
            });
            new G.Unit({
                name: 'factory of pots',
                desc: 'Does same thing as [potter] was. All 4 modes he had are active all the time in this unit!',
                icon: [14, 18, "magixmod"],
                cost: { 'basic building materials': 775, 'basic factory equipment': 400 },
                upkeep: { 'coal': 2, 'fire pit': 1 },
                use: { 'worker': 16, 'land': 1, 'stone tools': 32 },
                req: { 'moderation': true, 'factories I': true },
                category: 'crafting',
                effects: [
                    { type: 'convert', from: { 'clay': 140, 'mud': 140, 'fire pit': 14 }, into: { 'pot': 120 }, every: 20 },
                    { type: 'convert', from: { 'clay': 170, 'mud': 120, 'dyes': 50, 'fire pit': 15 }, into: { 'precious pot': 120 }, every: 40 },
                    { type: 'convert', from: { 'clay': 100, 'mud': 100, 'fire pit': 10 }, into: { 'potion pot': 40 }, every: 15 },
                    { type: 'mult', value: 1.25, req: { 'gt4': true } },
                    { type: 'mult', value: 1.2, req: { 'ground pots': true } },
                ],
            });
            new G.Unit({
                name: 'leather factory',
                desc: 'Does the same thing as [clothier]s making [leather] and [drying rack]s at the same time.',
                icon: [15, 18, "magixmod"],
                cost: { 'basic building materials': 775, 'basic factory equipment': 400 },
                upkeep: { 'coal': 2, 'fire pit': 1 },
                use: { 'worker': 16, 'land': 1, 'stone tools': 32 },
                req: { 'moderation': true, 'factories I': true },
                category: 'crafting',
                effects: [
                    { type: 'convert', from: { 'leather': 20 }, into: { 'dried leather': 20 }, every: 7, req: { 'bigger factory racks': false } },
                    { type: 'convert', from: { 'leather': 40 }, into: { 'dried leather': 40 }, every: 7, req: { 'bigger factory racks': true } },
                    { type: 'convert', from: { 'hide': 250, 'water': 1000, 'salt': 150, 'log': 15 }, into: { 'leather': 235 }, every: 15 },
                    { type: 'convert', from: { 'hide': 250, 'muddy water': 1000, 'herbs': 145 }, into: { 'leather': 235 }, every: 20 },
                ],
            });
            new G.Unit({
                name: ';cloudy water filter',
                displayName: 'Cloudy water filter',
                desc: 'A filter that uses [land of the Paradise]. Because the upkeep uses [coal] and [mana], you gain 82% of the converted water. <>A [moderation] path unit. Has research techs that can improve the power and efficiency of the [;cloudy water filter]. <>This filter converts [cloudy water] into [water].',
                icon: [25, 11, "magixmod"],
                cost: { 'basic building materials': 275 },
                upkeep: { 'coal': 1, 'mana': 1.5 },
                use: { 'worker': 1, 'land of the Paradise': 1, 'industry point': 1 },
                req: { 'moderation': true, 'cloudy water filtering': true },
                category: 'paradiseunit',
                effects: [
                    { type: 'convert', from: { 'cloudy water': 37 }, into: { 'water': 28, 'cloud': 2 }, every: 1 },
                    { type: 'mult', value: 1.75, req: { 'better filtering': true } },
                    { type: 'mult', value: 1.1, req: { 'faithful cloudy water filtering': true } },
                    { type: 'mult', value: 1.75, req: { 'magical filtering': true } },
                    { type: 'mult', value: 2, req: { 'magical filtering II': true } },
                    { type: 'mult', value: 2, req: { 'supreme cloudy fast filtering': true } },
                ],
            });
            new G.Unit({
                name: 'cloudy water filter',
                desc: 'A filter that uses [land of the Paradise]. Because the upkeep uses [sand] and [mana], you gain 95% of the converted water. <>A [caretaking] path unit. Has research techs that can improve the power and efficiency of the [cloudy water filter]. <>This filter converts [cloudy water] into [water].',
                icon: [25, 12, "magixmod"],
                cost: { 'basic building materials': 75 },
                upkeep: { 'sand': 1, 'mana': 1 },
                use: { 'worker': 1, 'land of the Paradise': 0.75, 'industry point': 0.5 },
                req: { 'caretaking': true, 'cloudy water filtering': true },
                category: 'paradiseunit',
                effects: [
                    { type: 'convert', from: { 'cloudy water': 15 }, into: { 'water': 14, 'cloud': 1 }, every: 1 },
                    { type: 'mult', value: 1.75, req: { 'better filtering': true } },
                    { type: 'mult', value: 1.1, req: { 'faithful cloudy water filtering': true } },
                    { type: 'mult', value: 1.75, req: { 'magical filtering': true } },
                    { type: 'mult', value: 2, req: { 'magical filtering II': true } },
                    { type: 'mult', value: 2, req: { 'supreme cloudy fast filtering': true } },
                ],
            });
            new G.Unit({
                name: ';water filter',
                displayName: 'Water filter',
                desc: 'A rather simple filter for [muddy water]. Because the upkeep uses [coal], you gain 82% of the converted water. <>A [moderation] path unit. Has research techs that can improve the power and efficiency of the [;water filter]. <>This filter converts [muddy water] into [water].',
                icon: [24, 16, "magixmod"],
                cost: { 'basic building materials': 275 },
                upkeep: { 'coal': 1 },
                use: { 'worker': 1, 'land': 1 },
                req: { 'moderation': true, 'water filtering': true },
                category: 'crafting',
                effects: [
                    { type: 'convert', from: { 'muddy water': 37 }, into: { 'water': 28 }, every: 1 },
                    { type: 'mult', value: 1.75, req: { 'better filtering': true } },
                    { type: 'mult', value: 1.5, req: { 'non-magical filters improvement': true } },
                    { type: 'mult', value: 1.75, req: { 'magical filtering': true } },
                    { type: 'mult', value: 2, req: { 'supreme fast filtering': true } },
                ],
            });
            new G.Unit({
                name: 'water filter',
                desc: 'A rather simple filter for [muddy water]. Because the upkeep uses [sand], you gain 95% of the converted water. <>A [caretaking] path unit. Has research techs that can improve the power and efficiency of the [water filter]. <>This filter converts [muddy water] into [water].',
                icon: [23, 16, "magixmod"],
                cost: { 'basic building materials': 75 },
                upkeep: { 'sand': 1 },
                use: { 'worker': 1, 'land': 0.75 },
                req: { 'caretaking': true, 'water filtering': true },
                category: 'crafting',
                effects: [
                    { type: 'convert', from: { 'muddy water': 15 }, into: { 'water': 14 }, every: 1 },
                    { type: 'mult', value: 1.75, req: { 'better filtering': true } },
                    { type: 'mult', value: 1.5, req: { 'non-magical filters improvement': true } },
                    { type: 'mult', value: 1.75, req: { 'magical filtering': true } },
                    { type: 'mult', value: 2, req: { 'supreme fast filtering': true } },
                ],
            });
            new G.Unit({
                name: 'guard',
                desc: '@protects your civilization from [thief,Thieves]. @with [prison]s unlocked, [guard]s will be able to send captured bad guys into a [prison], turning them into [prisoner]s. //[guard]s are essential for your people\'s safety and prevent theft!',
                icon: [4, 13, "magixmod"],
                cost: {},
                use: { 'worker': 1, 'metal weapons': 1, 'armor set': 1 },
                req: { 'battling thieves': true },
                category: 'guard',
                priority: 5,
                effects: [
                    {
                        type: 'function', func: function (me) {
                            if (Math.random() < 1.05 - Math.min(G.year, 500) * 0.001) { // Thieves become smarter over time, so they get harder to catch
                                var toNeuMax = (me.amount > G.getRes('thief').amount ? G.getRes('thief').amount : me.amount);
                                var toNeu = randomFloor(Math.sqrt(Math.random() + 0.25) * toNeuMax * (G.has('battling thieves III') ? 0.5 : 0.25) * (G.has('coordination') ? 1.2 : 1));
                                if (Math.random() < 1.05 - Math.min(G.year, 500) * 0.0012) {
                                    toNeu /= 3 + Math.random();
                                }
                                if (G.getRes('prison space').used <= G.getRes('prison space').amount && G.getRes('prison space').amount > 0) { G.lose('thief', toNeu, 'arrest'); G.gain('prisoner', toNeu, 'being arrested') }
                                else if (Math.random() < 0.3) {
                                    var loss = randomFloor(toNeu * (0.8 + Math.random()));
                                    G.lose('thief', loss, 'neutralization'); G.gain('adult', loss, 'neutralization');
                                };
                            }

                            if (Math.random() < 1.05 - Math.min(G.year, 500) * 0.001) {
                                var extraNeu1 = 0
                                var extraNeu2 = 0
                                if (G.has('battling thieves II')) {
                                    extraNeu1 = toNeuMax * (30 + 10 * Math.random())
                                    extraNeu2 = toNeuMax * (15 + 3 * Math.random())
                                    if (G.getRes('windy spikes').amount < extraNeu1 * 2) {
                                        extraNeu1 = 0
                                    }
                                    if (G.getRes('dark concoction').amount < extraNeu2 * 2) {
                                        extraNeu2 = 0
                                    }
                                    toNeu = extraNeu1 + extraNeu2
                                    if (G.getRes('thief').amount > toNeu * (1 + 0.4 * Math.random())) {
                                        G.lose('windy spikes', extraNeu1 * 2)
                                        G.lose('dark concoction', extraNeu2 * 2)
                                        if (G.getRes('prison space').used <= G.getRes('prison space').amount && G.getRes('prison space').amount > 0) { G.lose('thief', toNeu, 'being arrested'); G.gain('prisoner', toNeu, 'being arrested') }
                                        else if (Math.random() < 0.28) {
                                            var neutralized = toNeu * (0.8 + 0.3 * Math.random())
                                            G.lose('thief', neutralized, 'neutralization');
                                            G.gain('adult', neutralized, 'neutralization')
                                        };
                                    }
                                }
                            }

                            if (G.getRes('prisoner').amount > G.getRes('prison space').amount) {
                                var loss = randomFloor((G.getRes('prisoner').amount - G.getRes('prison space').amount) * 0.2)
                                G.lose('prisoner', loss, 'lack of prison space')
                                G.gain('thief', loss, 'lack of prison space')
                            }
                        }, every: 4
                    },
                    { type: 'convert', from: { 'thief': 1 }, into: { 'corpse': 1 }, every: 4, chance: 1 / 48 },
                    { type: 'convert', from: { 'thief': 1 }, into: { 'corpse': 1 }, every: 4, chance: 1 / 96, req: { 'at5': true } },
                    { type: 'function', func: unitGetsConverted({ 'wounded': 1 }, 0.001, 0.03, false, '', '', ''), chance: 1 / 40, req: { 'coordination': true } },
                    { type: 'function', func: unitGetsConverted({ 'wounded': 1 }, 0.001, 0.03, false, '', '', ''), chance: 1 / 25, req: { 'coordination': false } },
                ],
            });
            new G.Unit({
                name: 'bakery',
                desc: '@converts crafted [flour] crafted by your [windmill]s into [bread]. Requires fuel to work.',
                icon: [24, 10, "magixmod"],
                cost: { 'basic building materials': 100, 'brick': 10000 },
                use: { 'worker': 4, 'land': 1 },
                require: { 'metal tools': 2 },
                upkeep: { 'log': 0.6 },
                effects: [
                    { type: 'convert', from: { 'flour': 18 }, into: { 'bread': 6 }, every: 4, chance: 1 / 25, req: { 'baking': true, 'baking II': false } },
                    { type: 'convert', from: { 'flour': 36 }, into: { 'bread': 12 }, every: 4, chance: 4 / 5, req: { 'baking II': true } },
                    { type: 'mult', value: 3, req: { 'baking III': true } },
                    { type: 'mult', value: 1.5, req: { 'grain fertilizer': true } }
                ],
                req: { 'baking': true },
                category: 'crafting',
            });
            new G.Unit({
                name: 'windmill',
                desc: '[windmill]s are able to convert [wheat] into [flour] with a little [water]. //<small>(Note that [flour] is pretty difficult to make in large batches.)</small>',
                icon: [24, 11, "magixmod"],
                cost: { 'basic building materials': 600 },
                req: { 'flour-crafting II': true },
                use: { 'worker': 2, 'land': 1 },
                upkeep: {},
                category: 'crafting',
                effects: [
                    { type: 'convert', from: { 'wheat': 12, 'water': 2 }, into: { 'flour': 10 }, every: 3, repeat: 2 },
                    { type: 'mult', value: 1.5, req: { 'grain fertilizer': true } },
                    { type: 'mult', value: 1.35, req: { 'improved windmill motors': true } }
                ],
            });
            new G.Unit({
                name: 'wheat farm',
                desc: '@Specifically harvests [wheat]. Without [wheat], it is impossible to craft [bread].',
                icon: [24, 12, "magixmod"],
                cost: { 'seeds': 2000 },
                req: { 'Farm of wheat': true },
                use: { 'worker': 8, 'land': 15, 'stone tools': 8 },
                upkeep: { 'water': 14 },
                category: 'production',
                effects: [
                    { type: 'gather', context: 'gather', what: { 'wheat': 40 } },
                    { type: 'mult', value: 0.6, req: { 'droughtNew': true } },
                    { type: 'mult', value: 1.17, req: { 'crafting & farm rituals': 'on' } },
                    { type: 'mult', value: 1.2, req: { 'gt2': true } },
                    { type: 'mult', value: 1.5, req: { 'grain fertilizer': true, 'wizard\'s grain fertilizer': false } },
                    { type: 'mult', value: 2.5, req: { 'wizard\'s grain fertilizer': true, 'grain fertilizer': true } },
                    { type: 'mult', value: 2, req: { 'backshift at farms': true } },
                    { type: 'mult', value: 2.25, req: { 'gardening II': true } },
                    { type: 'mult', value: 2, req: { 'gardening III': true } },
                    { type: 'mult', value: 4, req: { 'baking III': true } },
                ],
            });
            new G.Unit({
                name: 'chef',
                desc: 'Each [chef] is well-trained on how to make tasty and enjoyable [food]. <font color="fuschia"><b>You just gotta believe!</b></font>',
                icon: [24, 13, "magixmod"],
                cost: {},
                use: { 'land': 1, 'worker': 1 },
                upkeep: { 'fire pit': 0.2, 'food': 0.2 },
                modes: {
                    'off': G.MODE_OFF,
                    'salad': { name: 'Salad', icon: [22, 14, "magixmod"], desc: 'Cook a tasty salad using [vegetables] and [herbs], producing a full [meals,Meal].' },
                    'wellmeat': { name: 'Well-prepared meat', icon: [22, 15, "magixmod"], desc: 'Uses 1 [cooked meat] or 1 [cured meat] and adds [herbs] to improve its taste, crafting a well-prepared [meals,Meal].' },
                    'wellseafood': { name: 'Well-prepared seafood', icon: [23, 15, "magixmod"], desc: 'Uses 1 [cooked seafood] or 1 [cured seafood] and adds [herbs] to improve its taste, crafting some well-prepared seafood that means a full [meals,Meal].' },
                    'cutlet': { name: 'Cutlets', icon: [24, 14, "magixmod"], desc: 'Uses [fire pit], 1 [cooked meat], and 1 [salt], to make roast cutlets of various meats (worth one and a half [meals]). Also provides a little bit of [happiness] due to the amazing smell!', req: { 'art of cooking II': true } },
                    'sandwich': { name: 'Sandwiches', icon: [6, 2, "magix2"], desc: '4 giant healthy sandwiches (worth 2 [meals] and providing some [health]) will be made using 3 [vegetables] and 1 loaf of fresh [bread].', req: { 'art of cooking II': true } },
                    'honey': { name: 'Honeycomb berries', icon: [9, 1, "magix2"], desc: 'This meal will quickly become a top choice among your people, as it will provide an insane amount of [happiness] and [health]! It is worth 3 [meals] and is carefully crafted from using 2 [honeycomb]s and some [fruit,Tasty berries].', req: { 'art of cooking II': true } },
                    'spice': { name: 'Spicy herbs', icon: [8, 2, "magix2"], desc: '[herbs] with [spices] added may not look very appetizing at first, but when they combined with other foods, they become quite tasty! Uses 2 [herbs] and some [spices] and [vegetables,Veggies] to produce one and a half [meals].', req: { 'spicy foods': true } },
                },
                effects: [
                    { type: 'convert', from: { 'vegetables': 2, 'herbs': 1 }, into: { 'meals': 1 }, every: 2, mode: 'salad' },
                    { type: 'convert', from: { 'cooked meat': 1, 'herbs': 0.4 }, into: { 'meals': 1 }, every: 4, mode: 'wellmeat' },
                    { type: 'convert', from: { 'cured meat': 1, 'herbs': 0.4 }, into: { 'meals': 1 }, every: 4, mode: 'wellmeat' },
                    { type: 'convert', from: { 'cooked seafood': 1, 'herbs': 0.4 }, into: { 'meals': 1 }, every: 4, mode: 'wellseafood' },
                    { type: 'convert', from: { 'fire pit': 1, 'cooked meat': 1, 'salt': 1 }, into: { 'meals': 1.5, 'happiness': 2 }, every: 4, mode: 'cutlet' },
                    { type: 'convert', from: { 'vegetables': 3, 'bread': 1 }, into: { 'meals': 2, 'health': 0.03 }, every: 4, mode: 'sandwich' },
                    { type: 'convert', from: { 'honeycomb': 2, 'fruit': 1 }, into: { 'meals': 3, 'happiness': 15, 'health': 0.2 }, every: 4, mode: 'honey' },
                    { type: 'convert', from: { 'herbs': 2, 'vegetables': 1.2, 'spices': 0.2 }, into: { 'meals': 1.5 }, every: 4, mode: 'spice' },
                ],
                req: { 'art of cooking': true },
                gizmos: true,
                category: 'crafting',
            });
            new G.Unit({
                name: 'concoctions crafting stand',
                desc: 'Here you can craft [dark concoction]s and [nature concoction]s by using [jar for concoctions,Concoction jars] and various magical materials.',
                icon: [15, 16, "magixmod"],
                cost: {},
                use: { 'alchemy zone': 0.3 },
                upkeep: {},
                modes: {
                    'off': G.MODE_OFF,
                    'ha': { name: 'Hire an alchemist', icon: [12, 5, "magixmod"], desc: 'Hires an [alchemist] to craft various concoctions.', use: { 'alchemist': 1, 'stone tools': 1 } },
                },
                effects: [
                    { type: 'convert', from: { 'jar for concoctions': 1, 'water': 0.4, 'dark essence': 2, 'dark fire pit': 0.5 }, into: { 'dark concoction': 1 }, every: 6, mode: 'ha' },
                    { type: 'convert', from: { 'jar for concoctions': 1, 'water': 0.6, 'nature essence': 2, 'scobs of life': 0.5, 'water essence': 0.2 }, into: { 'nature concoction': 1 }, every: 6, mode: 'ha' },
                ],
                req: { 'combat potion & concoction brewing': true },
                gizmos: true,
                category: 'alchemy',
            });
            new G.Unit({
                name: 'combat potions brewing stand',
                displayName: 'Combat potion brewing stand',
                desc: 'Here you can craft [combat potions]! [alchemist]s are creative people who name their creations, and each one is uniquely made.',
                icon: [14, 16, "magixmod"],
                cost: {},
                use: { 'alchemy zone': 0.3 },
                upkeep: {},
                modes: {
                    'off': G.MODE_OFF,
                    'bf': { name: 'black fog', icon: [11, 16, "magixmod"], desc: 'Crafts [black fog].', use: { 'alchemist': 1, 'stone tools': 1 } },
                    'ws': { name: 'windy spikes', icon: [9, 16, "magixmod"], desc: 'Crafts [windy spikes].', use: { 'alchemist': 1, 'stone tools': 1 } },
                    'btg': { name: 'back to grave', icon: [8, 16, "magixmod"], desc: 'Crafts [back to grave] tools.', use: { 'alchemist': 1, 'stone tools': 1 } },
                    'pov': { name: 'point of venom', icon: [10, 16, "magixmod"], desc: 'Crafts [point of venom,Points of venom].', use: { 'alchemist': 1, 'stone tools': 1 } },
                },
                effects: [
                    { type: 'convert', from: { 'dark concoction': 1, 'combat potion pot': 1, 'water': 0.4, 'dark essence': 0.2, 'dark fire pit': 0.5 }, into: { 'black fog': 1 }, every: 6, mode: 'bf' },
                    { type: 'convert', from: { 'combat potion pot': 1, 'water': 1, 'wind essence': 3, 'windy sugar': 1 }, into: { 'windy spikes': 1 }, every: 6, mode: 'ws' },
                    { type: 'convert', from: { 'combat potion pot': 1, 'water': 1, 'wind essence': 1, 'holy essence': 1.5 }, into: { 'back to grave': 1 }, every: 6, mode: 'btg' },
                    { type: 'convert', from: { 'herb of the undead': 1, 'water': 1, 'dark essence': 1, 'nature concoction': 1 }, into: { 'point of venom': 1 }, every: 6, mode: 'pov' },
                ],
                req: { 'combat potion & concoction brewing': true },
                gizmos: true,
                category: 'alchemy',
            });
            new G.Unit({
                name: 'deadly concoction maker',
                desc: '@Converts a [potion pot] and some other materials into a [combat potion pot] and also makes [jar for concoctions,Jars for concoctions].',
                icon: [19, 16, "magixmod"],
                cost: {},
                use: { 'worker': 1, 'metal tools': 1, 'alchemy zone': 0.3 },
                upkeep: {},
                effects: [
                    { type: 'convert', from: { 'potion pot': 1, 'clay': 1, 'hard metal ingot': 0.02 }, into: { 'combat potion pot': 1 }, repeat: 1, every: 3 },
                    { type: 'convert', from: { 'clay': 8, 'mud': 2 }, into: { 'jar for concoctions': 1 }, repeat: 1, every: 3 },
                ],
                req: { 'bigger potion pallet': true },
                category: 'alchemy',
            });
            new G.Unit({
                name: 'explosive mine',
                desc: 'These mines will extract various ores and materials out of the ground using some explosives. It has a much larger chance to collapse, due to the materials used in its work.<br>The workers in [mine]s blast deep into the earth to provide all kinds of minerals. @cannot be [prospecting,prospected] like [mine]s',
                icon: [16, 15, "magixmod"],
                cost: { 'archaic building materials': 400 },
                use: { 'land': 3 },
                upkeep: { 'fire pit': 0.1, 'light explosives': 4, 'thread': 8, 'sulfur': 1 },
                modes: {
                    'off': G.MODE_OFF,
                    'on': { name: 'Active', icon: [8, 8], desc: '<font color="#ffa000">Mining with explosives will be activated.</font>', use: { 'worker': 3, 'stone tools': 3 } },
                },
                effects: [
                    { type: 'gather', context: 'mine', amount: 28, max: 64, mode: 'on' },
                    { type: 'mult', value: 1.05, req: { 'safer explosive usage': true } },
                    { type: 'function', func: unitGetsConverted({ 'wounded': 2 }, 0.001, 0.01, true, '[X] [people].', 'explosive mine collapsed, wounding its miners', 'explosive mines collapsed, wounding their miners'), chance: 3 / 50, req: { 'safer explosive usage': false } },
                    { type: 'function', func: unitGetsConverted({ 'wounded': 2 }, 0.001, 0.01, true, '[X] [people].', 'explosive mine collapsed, wounding its miners', 'explosive mines collapsed, wounding their miners'), chance: 3 / 75, req: { 'safer explosive usage': true } },
                ],
                gizmos: true,
                req: { 'mining': true, 'intelligent blasting': true },
                category: 'production',
            });
            new G.Unit({
                name: 'paper-crafting shack',
                desc: 'Allows you to choose between 3 types of [paper]: <li>papyrus</li> <li>pergamin</li> <li>common paper</li> <font color="#ff6b40">Although this is the paradise version of this shack, it works as the same rate as the ones from the main world.</font>',
                icon: [0, 12, "magixmod", 20, 14, "magixmod"],
                cost: { 'basic building materials': 800 },
                use: { 'land of the Paradise': 0.7, 'industry point': 0.05 },
                gizmos: true,
                modes: {
                    'off': G.MODE_OFF,
                    'papyrus': { name: 'Papyrus', icon: [15, 12, "magixmod"], desc: 'Gain mainly <b>papyrus</b> out of this shack. To craft <b>papyrus</b>, [worker]s will use [sugar cane].', use: { 'worker': 1, 'stone tools': 1 } },
                    'pergamin': { name: 'Pergamin', icon: [16, 12, "magixmod"], desc: 'Gain mainly <b>pergamin</b> out of this shack. To craft <b>pergamin</b>, [worker]s will use [hide] or [leather].', use: { 'worker': 1, 'stone tools': 1 } },
                    'commonpaper': { name: 'Common paper', icon: [17, 12, "magixmod"], desc: 'Craft <b>common paper</b> out of [bamboo] with the help of a secret non-magic recipe.', use: { 'worker': 1, 'stone tools': 1 } },
                },
                effects: [
                    { type: 'convert', from: { 'sugar cane': 3.4 }, into: { 'paper': 1.5 }, every: 1, mode: 'papyrus' },
                    { type: 'convert', from: { 'hide': 1.75 }, into: { 'paper': 1.15 }, every: 4, mode: 'pergamin' },
                    { type: 'convert', from: { 'leather': 1.5 }, into: { 'paper': 1.15 }, every: 4, mode: 'pergamin' },
                    { type: 'convert', from: { 'bamboo': 4 }, into: { 'paper': 1.4 }, every: 2, mode: 'commonpaper' },
                    { type: 'mult', value: 1.17, req: { 'crafting & farm rituals': 'on' } },
                    { type: 'mult', value: 1.44, req: { 'better papercrafting recipe': true, 'joy of eating': true } },
                    { type: 'mult', value: 1.44, req: { 'better papercrafting recipe': true, 'culture of moderation': true } },
                    { type: 'mult', value: 3, req: { 'paper mastery': true } },
                    { type: 'mult', value: 1.3, req: { 'even mo\' paper': true, 'moderation': true, 'caretaking': false } },
                    { type: 'mult', value: 1.3, req: { 'even mo\' paper': true, 'caretaking': true, 'moderation': false } },
                ],
                req: { 'papercrafting': true, 'paradise crafting': true, 't10': false },
                category: 'paradiseunit',
            });
            new G.Unit({
                name: 'pyro-artisan',
                desc: '@This type of [artisan] crafts [light explosives,Explosives]. In his normal mode, he will craft [light explosives]. Deliver a lot of [sulfur] to this guy...without it, how is he supposed to craft TNT?',
                icon: [15, 15, "magixmod"],
                cost: {},
                use: {},
                gizmos: true,
                modes: {
                    'explosivesS': { name: 'Craft light explosives', icon: [19, 15, "magixmod"], desc: 'This [pyro-artisan] will craft some [light explosives] with the use of [paper], [sulfur], and [thread].', use: { 'worker': 1 } },
                    //Medium explosives COMING SOON
                    //Essenced explosives COMING LATER
                    //Vortex TNT COMING EVEN LATER
                    //Nuke NEVER, EVER COMING NOT SOON AND NOT LATE
                },
                effects: [
                    { type: 'convert', from: { 'sulfur': 3, 'paper': 2, 'thread': 3 }, into: { 'light explosives': 1.25 }, every: 2, repeat: 2, mode: 'explosivesS' },
                    { type: 'mult', value: 1.25, req: { 'crafting & farm rituals': 'on', 'power of the faith': true } },
                    { type: 'mult', value: 0.85, req: { 'se09': 'on' } },
                ],
                req: { 'explosive crafting & mining': true },
                category: 'crafting',
            });
            new G.Unit({
                name: 'holy orchard',
                desc: 'An orchard with trees that produce [ambrosium leaf,Ambrosium leaves], the most common type of trees in this world. People working in the orchard will gather these leaves when they fall to the ground.',
                icon: [4, 14, "magixmod"],
                cost: { 'basic building materials': 900 },
                use: { 'land of the Paradise': 50, 'industry point': 5 },
                staff: { 'worker': 10 },
                upkeep: { 'cloudy water': 30 },
                effects: [
                    { type: 'gather', what: { 'ambrosium leaf': 25 } },
                    { type: 'gather', what: { 'ambrosium leaf': 10 }, every: 2 },
                    { type: 'mult', value: 1.17, req: { 'crafting & farm rituals': 'on', 'power of the faith': true } },
                ],
                req: { 'ambrosium treeplanting': true, 'paradise building': true },
                category: 'paradiseunit',
            });
            new G.Unit({
                name: 'ambrosium shard shack',
                desc: 'A shack where you can gain [ambrosium shard]s out of [ambrosium leaf,Ambrosium leaves], some [mana], and [holy essence].',
                icon: [13, 13, "magixmod", 25, 2],
                cost: { 'basic building materials': 900 },
                use: { 'land of the Paradise': 1, 'industry point': 1 },
                staff: { 'worker': 1, 'stone tools': 1 },
                effects: [
                    { type: 'convert', from: { 'ambrosium leaf': 75, 'mana': 8, 'holy essence': 4 }, into: { 'ambrosium shard': 1 }, every: 4 },
                ],
                req: { 'ambrosium treeplanting': true, 'paradise building': true, 'ambrosium crafting': true },
                category: 'paradiseunit',
            });
            new G.Unit({
                name: 'hardened warehouse',
                desc: '@provides 6,000 [material storage].<>A large building for storing materials. Staffed with a single guard to prevent theft (even though it is constructed in Paradise).',
                icon: [2, 14, "magixmod"],
                cost: { 'basic building materials': 900 },
                use: { 'land of the Paradise': 3, 'industry point': 0.2 },
                staff: { 'worker': 1 },
                effects: [
                    { type: 'provide', what: { 'added material storage': 2100 }, req: { 'well stored': true } },
                    { type: 'provide', what: { 'added material storage': 3300 }, req: { 'well stored 2': true } },
                    { type: 'provide', what: { 'added material storage': 6000 } },
                    { type: 'waste', chance: 0.001 / 1000 }
                ],
                req: { 'stockpiling': true, 'construction': true, 'paradise building': true },
                category: 'paradiseunit',
            });
            new G.Unit({
                name: 'guru',
                desc: '@Someone who can get [insight] and a tiny, tiny amount of [science] as well. [science] is a key for getting more complicated researches.',
                icon: [6, 14, "magixmod"],
                cost: {},
                use: { 'worker': 1 },
                limitPer: { 'population': 25000 },
                effects: [
                    { type: 'gather', what: { 'insight': 0.3 } },
                    { type: 'gather', what: { 'science': 0.0002 } },
                    { type: 'gather', what: { 'science': 0.00005 }, req: { 'symbolism III': true } },
                    { type: 'mult', value: 1.1, req: { 'bonus1': true } },
                    { type: 'mult', value: 1.11, req: { 'bonus2': true } },
                    { type: 'mult', value: 1.15, req: { 'bonus3': true } },
                    { type: 'mult', value: 1.2, req: { 'bonus4': true } },
                    { type: 'mult', value: 1.5, req: { 'bonus5': true } },
                    { type: 'mult', value: 2, req: { 'bonus6': true } },
                    { type: 'mult', value: 1.5, req: { 'science blessing': true } },
                    { type: 'mult', value: 1.5, req: { 'se12': 'on' } },
                    { type: 'mult', value: 1.5, req: { 'gt3': true } },
                    { type: 'mult', value: 0.75, req: { 'se11': 'on' } },
                ],
                req: { 'science master': true },
                category: 'discovery',
            });
            new G.Unit({
                name: 'Floored warehouse',
                desc: '@provides 3,000 [material storage] and 3,000 [food storage].<>A large building for storing materials and food. Staffed with a single guard to prevent theft (even if it\'s built in Paradise).',
                icon: [5, 14, "magixmod"],
                cost: { 'basic building materials': 8500 },
                use: { 'land of the Paradise': 4, 'industry point': 0.2 },
                staff: { 'worker': 1 },
                effects: [
                    { type: 'provide', what: { 'added material storage': 3000 } },
                    { type: 'provide', what: { 'food storage': 3000 } },
                    { type: 'provide', what: { 'added food storage': 1050, 'added material storage': 1050 }, req: { 'well stored': true } },
                    { type: 'provide', what: { 'added food storage': 1650, 'added material storage': 1650 }, req: { 'well stored 2': true } },
                    { type: 'waste', chance: 0.001 / 1000 }
                ],
                req: { 'stockpiling': true, 'construction': true, 'paradise building': true },
                category: 'paradiseunit',
            });
            new G.Unit({
                name: 'lawyer',
                desc: '[lawyer]s will share the code of law to people and comparing people\'s decisions with code of law. @every 50 lawyers provide 1 [authority] @every 100 [lawyer]s will reduce the cooldown until the next trait removal by 1 tick',
                icon: [10, 13, "magixmod"],
                cost: {},
                use: { 'worker': 1 },
                effects: [
                    { type: 'convert', from: { 'paper': 12, 'ink': 3 }, into: { 'lawyer\'s notes': 1 }, every: 30, req: { 'noting': true }, chance: 1 / 4 },
                    { type: 'provide', what: { 'authority': 0.02 } },
                ],
                req: { 'better influence & authority': true },
                category: 'political',
                limitPer: { 'population': 400 },
            });
            new G.Unit({
                name: 'mediator',
                desc: 'Solves people\'s arguments with the help of the law to prevent unfair things from occuring. Generates [happiness] and [influence] every now and then. @every 50 [mediator]s will reduce the cooldown until the next trait removal by 1 tick',
                icon: [9, 13, "magixmod"],
                cost: {},
                upkeep: { 'food': 0.2 },
                effects: [
                    { type: 'gather', what: { 'happiness': 0.1 } },
                    { type: 'gather', what: { 'influence': 0.01 }, req: { 'glory': false } },
                    { type: 'gather', what: { 'influence': 0.02 }, req: { 'glory': true } },
                    { type: 'mult', value: 1.7, req: { 'symbolism III': true } }
                ],
                use: { 'worker': 1 },
                req: { 'better influence & authority': true },
                category: 'political',
                limitPer: { 'population': 600 },
            });
            new G.Unit({
                name: 'lodge of writers',
                desc: 'In these lodges, writers will write things in [empty book]s. These writers will create [nature book]s (with [flowers]), as well as [book of law,Books of law] and [novel]s with notes.',
                icon: [11, 13, "magixmod"],
                cost: { 'basic building materials': 700 },
                use: { 'land': 1, 'worker': 7 },
                effects: [
                    { type: 'convert', from: { 'flowers': 30, 'empty book': 1, 'ink': 2 }, into: { 'nature book': 1 }, every: 12 },
                    { type: 'convert', from: { 'poet\'s notes': 1, 'empty book': 1, 'ink': 2 }, into: { 'novel': 1 }, every: 15 },
                    { type: 'convert', from: { 'lawyer\'s notes': 1, 'empty book': 1, 'ink': 2 }, into: { 'book of law': 1 }, every: 20 },
                ],
                req: { 'bookwriting': true },
                category: 'civil',
            });
            new G.Unit({
                name: 'library',
                desc: '[books] may be stored here to slow down their normally rapid decay and make them accessible to the public. Provides 2,000 [book storage].',
                icon: [21, 5, "magixmod"],
                cost: { 'basic building materials': 1100 },
                use: { 'land': 1, 'worker': 5 },
                req: { 'bookwriting': true, 'construction': true },
                effects: [
                    { type: 'provide', what: { 'book storage': 2000 } }
                ],
                category: 'civil',
            });
            new G.Unit({
                name: 'Kiln',
                desc: '@processes goods with fire<>This specific [Kiln] is an impressive edifice for those not yet accustomed to its roaring fire. @This one can do more than its primary brother but needs to be <b>fueled</b>.',
                icon: [17, 14, "magixmod"],
                cost: { 'archaic building materials': 40, 'basic building materials': 70 },
                use: { 'land of the Paradise': 1, 'industry point': 1 },
                upkeep: { 'log': 0.5 },
                modes: {
                    'off': G.MODE_OFF,
                    'bricks': { name: 'Fire bricks', icon: [3, 8], desc: 'Produce 10 [brick]s out of 3 [clay].', use: { 'worker': 1, 'stone tools': 1 }, req: {} },
                    'glass': { name: 'Craft glass', icon: [4, 8], desc: 'Produce 2 panes of [glass] out of 8 [sand].', use: { 'worker': 1, 'stone tools': 1 }, req: {} }
                },
                effects: [
                    { type: 'convert', from: { 'clay': 3 }, into: { 'brick': 10 }, every: 5, mode: 'bricks' },
                    { type: 'convert', from: { 'sand': 8 }, into: { 'glass': 2 }, every: 5, mode: 'glass' },
                    { type: 'mult', value: 1.5, req: { 'bigger kilns': true } },
                    { type: 'mult', value: 1.1, req: { 'better kiln construction': true, 'moderation': true } },
                    { type: 'mult', value: 1.05, req: { 'better kiln construction': true, 'caretaking': true } },
                ],
                gizmos: true,
                req: { 'masonry': true, 'paradise building': true, 'paradise crafting': true },
                category: 'paradiseunit',
            });
            new G.Unit({
                name: 'mana storage',
                desc: 'Big [glass] ball for [mana] storage. This type of storage may also waste, just like [fire essence storage,Essence storages]. Each one allows you to store 32.5k [mana].',
                icon: [6, 5, "magixmod"],
                cost: { 'basic building materials': 400, 'glass': 400 },
                use: { 'land': 1.2 },
                effects: [
                    { type: 'provide', what: { 'mana capacity': 32500 } },
                    { type: 'waste', chance: 0.0004 / 1000, req: { 'construction III': false } },
                    { type: 'waste', chance: 0.00008 / 1000, req: { 'construction III': true, 'improved construction': false } },
                    { type: 'waste', chance: 0.000056 / 1000, req: { 'improved construction': true } },
                ],
                req: { 'mana brewery': true },
                category: 'storage',
            });
            new G.Unit({
                name: 'fire essence storage',
                desc: 'This essence storage allows you to store 6,000 [fire essence]. //It is a simple sphere of [glass] with a small essence faucet.',
                icon: [2, 5, "magixmod"],
                cost: { 'basic building materials': 200, 'glass': 400 },
                use: { 'land': 0.8 },
                effects: [
                    { type: 'provide', what: { 'fire essence limit': 6000 } },
                    { type: 'waste', chance: 1 / 10000, req: { 'construction III': false } },
                    { type: 'waste', chance: 0.2 / 10000, req: { 'construction III': true, 'improved construction': false } },
                    { type: 'waste', chance: 0.14 / 10000, req: { 'improved construction': true } },
                ],
                req: { 'stockpiling': true, 'building': true, 'essence storages': true },
                category: 'storage',
            });
            new G.Unit({
                name: 'water essence storage',
                desc: 'This essence storage allows you to store 6,000 [water essence]. //It is a simple sphere of [glass] with a small essence faucet.',
                icon: [0, 5, "magixmod"],
                cost: { 'basic building materials': 200, 'glass': 400 },
                use: { 'land': 0.8 },
                effects: [
                    { type: 'provide', what: { 'water essence limit': 6000 } },
                    { type: 'waste', chance: 1 / 10000, req: { 'construction III': false } },
                    { type: 'waste', chance: 0.2 / 10000, req: { 'construction III': true, 'improved construction': false } },
                    { type: 'waste', chance: 0.14 / 10000, req: { 'improved construction': true } },
                ],
                req: { 'stockpiling': true, 'building': true, 'essence storages': true },
                category: 'storage',
            });
            new G.Unit({
                name: 'lightning essence storage',
                desc: 'This essence storage allows you to store 6,000 [lightning essence]. //It is a simple sphere of [glass] with a small essence faucet.',
                icon: [5, 5, "magixmod"],
                cost: { 'basic building materials': 200, 'glass': 400 },
                use: { 'land': 0.8 },
                effects: [
                    { type: 'provide', what: { 'lightning essence limit': 6000 } },
                    { type: 'waste', chance: 1 / 10000, req: { 'construction III': false } },
                    { type: 'waste', chance: 0.2 / 10000, req: { 'construction III': true, 'improved construction': false } },
                    { type: 'waste', chance: 0.14 / 10000, req: { 'improved construction': true } },
                ],
                req: { 'stockpiling': true, 'building': true, 'essence storages': true },
                category: 'storage',
            });
            new G.Unit({
                name: 'dark essence storage',
                desc: 'This essence storage allows you to store 6,000 [dark essence]. //It is a simple sphere of [glass] with a small essence faucet.',
                icon: [1, 5, "magixmod"],
                cost: { 'basic building materials': 200, 'glass': 400 },
                use: { 'land': 0.8 },
                effects: [
                    { type: 'provide', what: { 'dark essence limit': 6000 } },
                    { type: 'waste', chance: 1 / 10000, req: { 'construction III': false } },
                    { type: 'waste', chance: 0.2 / 10000, req: { 'construction III': true, 'improved construction': false } },
                    { type: 'waste', chance: 0.14 / 10000, req: { 'improved construction': true } },
                ],
                req: { 'stockpiling': true, 'building': true, 'essence storages': true },
                category: 'storage',
            });
            new G.Unit({
                name: 'nature essence storage',
                desc: 'This essence storage allows you to store 6,000 [nature essence]. //It is a simple sphere of [glass] with a small essence faucet.',
                icon: [3, 5, "magixmod"],
                cost: { 'basic building materials': 200, 'glass': 400 },
                use: { 'land': 0.8 },
                effects: [
                    { type: 'provide', what: { 'nature essence limit': 6000 } },
                    { type: 'waste', chance: 1 / 10000, req: { 'construction III': false } },
                    { type: 'waste', chance: 0.2 / 10000, req: { 'construction III': true, 'improved construction': false } },
                    { type: 'waste', chance: 0.14 / 10000, req: { 'improved construction': true } },
                ],
                req: { 'stockpiling': true, 'building': true, 'essence storages': true },
                category: 'storage',
            });
            new G.Unit({
                name: 'wind essence storage',
                desc: 'This essence storage allows you to store 6,000 [wind essence]. //It is a simple sphere of [glass] with a small essence faucet.',
                icon: [4, 5, "magixmod"],
                cost: { 'basic building materials': 200, 'glass': 400 },
                use: { 'land': 0.8 },
                effects: [
                    { type: 'provide', what: { 'wind essence limit': 6000 } },
                    { type: 'waste', chance: 1 / 10000, req: { 'construction III': false } },
                    { type: 'waste', chance: 0.2 / 10000, req: { 'construction III': true, 'improved construction': false } },
                    { type: 'waste', chance: 0.14 / 10000, req: { 'improved construction': true } },
                ],
                req: { 'stockpiling': true, 'building': true, 'essence storages': true },
                category: 'storage',
            });
            new G.Unit({
                name: 'holy essence storage',
                desc: 'This essence storage allows you to store 6,000 [holy essence]. //It is a simple sphere of [glass] with a small essence faucet.',
                icon: [3, 14, "magixmod"],
                cost: { 'basic building materials': 200, 'glass': 400 },
                use: { 'land of the Paradise': 0.8 },
                effects: [
                    { type: 'provide', what: { 'holy essence limit': 6000 } },
                    { type: 'waste', chance: 1 / 10000, req: { 'construction III': false } },
                    { type: 'waste', chance: 0.2 / 10000, req: { 'construction III': true, 'improved construction': false } },
                    { type: 'waste', chance: 0.14 / 10000, req: { 'improved construction': true } },
                ],
                req: { 'stockpiling': true, 'building': true, 'essence storages': true, 'paradise building': true, '7th essence': true },
                category: 'storage',
            });
            new G.Unit({
                name: 'holy well',
                desc: '@produces fresh [cloudy water], up to 35 per day<>The [holy well] is a steady source of drinkable [water], but requires some [holy essence] to start operating.',
                icon: [10, 14, "magixmod"],
                cost: { 'stone': 50, 'basic building materials': 120, 'holy essence': 100 },
                use: { 'land of the Paradise': 1 },
                effects: [
                    { type: 'gather', what: { 'cloudy water': 35 } },
                    { type: 'mult', value: 1.5, req: { 'deeper wells II': true } },
                    { type: 'mult', value: 1.25, req: { 'se06': 'on' } },
                    { type: 'mult', value: 1.15, req: { 'water rituals': 'on' } },
                    { type: 'mult', value: 1.6, req: { 'water rituals': 'on', 'droughtNew': true } },
                    { type: 'mult', value: 0.3, req: { 'droughtNew': true } },
                    { type: 'mult', value: 0.9, req: { 'dt7': true } },
                    { type: 'mult', value: 0.85, req: { 'se09': 'on' } },
                ],
                category: 'paradiseunit',
                req: { 'well-digging': true, 'paradise building': true },
                limitPer: { 'land': 10 },
            });

            new G.Unit({
                name: 'ingredient crafting stand',
                desc: 'Here you can craft ingredients for more advanced potions.',
                icon: [19, 7, "magixmod"],
                cost: { 'basic building materials': 5 },
                req: { 'alchemy': true, 'ingredient crafting': true },
                gizmos: true,
                modes: {
                    'off': G.MODE_OFF,
                    'bonedust': { name: 'bone dust', icon: [18, 11, "magixmod"], desc: 'Gain [bone dust] out of its stand and its owner.', use: { 'alchemist': 1, 'alchemy zone': 0.25 } },
                    'flowsugar': { name: 'flowered sugar', icon: [18, 10, "magixmod"], desc: 'Gain [flowered sugar] out of its stand and its owner.', use: { 'alchemist': 1, 'alchemy zone': 0.25 } },
                    'enchantice': { name: 'enchanted ice', icon: [17, 11, "magixmod"], desc: 'Gain [enchanted ice] out of its stand and its owner.', use: { 'alchemist': 1, 'alchemy zone': 0.25, 'wand': 1 } },
                    'darkfire': { name: 'dark fire pit', icon: [20, 12, "magixmod"], desc: 'Gain [dark fire pit] out of its stand and its owner.', use: { 'alchemist': 1, 'alchemy zone': 0.25 }, req: { 'dark-essenced ingredients': true } },
                    'withersalt': { name: 'withering salt', icon: [20, 10, "magixmod"], desc: 'Gain [withering salt] out of its stand and its owner.', use: { 'alchemist': 1, 'alchemy zone': 0.25 }, req: { 'dark-essenced ingredients': true } },
                    'undeadherb': { name: 'herb of the undead', icon: [20, 11, "magixmod"], desc: 'Gain [herb of the undead] out of its stand and its owner.', use: { 'alchemist': 1, 'alchemy zone': 0.25 }, req: { 'dark-essenced ingredients': true } },
                    'windsugar': { name: 'windy sugar', icon: [14, 13, "magixmod"], desc: 'Gain [windy sugar] out of its stand and its owner.', use: { 'alchemist': 1, 'alchemy zone': 0.25 }, req: { 'wind-essenced ingredients': true } },
                    'scoblife': { name: 'scobs of life', icon: [17, 13, "magixmod"], desc: 'Gain [scobs of life] out of its stand and its owner.', use: { 'alchemist': 1, 'alchemy zone': 0.25 }, req: { 'nature-essenced ingredients': true } },
                    'growgrass': { name: 'grass of growing', icon: [16, 13, "magixmod"], desc: 'Gain [grass of growing] out of its stand and its owner.', use: { 'alchemist': 1, 'alchemy zone': 0.25 }, req: { 'nature-essenced ingredients': true } },
                },
                effects: [
                    { type: 'convert', from: { 'bone': 1.25 }, into: { 'bone dust': 1 }, every: 4, mode: 'bonedust' },
                    { type: 'convert', from: { 'flowers': 1.5, 'sugar': 1 }, into: { 'flowered sugar': 1 }, every: 4, mode: 'flowsugar' },
                    { type: 'convert', from: { 'mana': 0.75, 'ice': 2, 'wind essence': 1 }, into: { 'enchanted ice': 2 }, every: 4, mode: 'enchantice' },
                    { type: 'convert', from: { 'fire pit': 1, 'dark essence': 1.75 }, into: { 'dark fire pit': 1.02 }, every: 6, mode: 'darkfire' },
                    { type: 'convert', from: { 'salt': 1, 'dark essence': 1 }, into: { 'withering salt': 1 }, every: 6, mode: 'withersalt' },
                    { type: 'convert', from: { 'herbs': 5, 'mana': 0.5, 'nature essence': 1 }, into: { 'grass of growing': 1.25 }, every: 5, mode: 'growgrass' },
                    { type: 'convert', from: { 'mana': 0.75, 'sugar': 1, 'wind essence': 1 }, into: { 'windy sugar': 2 }, every: 4, mode: 'windsugar' },
                    { type: 'convert', from: { 'herbs': 2, 'dark essence': 1, 'fruit': 0.5 }, into: { 'herb of the undead': 2 }, every: 4, mode: 'undeadherb' },
                    { type: 'convert', from: { 'mana': 0.75, 'scobs': 1, 'nature essence': 1, 'water': 0.25 }, into: { 'scobs of life': 1.05 }, every: 8, mode: 'scoblife' },
                ],
                category: 'alchemy',
            });
            new G.Unit({
                name: 'Paper-crafting shack',
                desc: 'Makes [paper]; you can choose between 3 types of paper: <li>papyrus</li> <li>pergamin</li> <li>common paper</li> ',
                icon: [0, 12, "magixmod", 25, 2],
                cost: { 'basic building materials': 800 },
                use: { 'land': 0.7 },
                gizmos: true,
                modes: {
                    'off': G.MODE_OFF,
                    'papyrus': { name: 'Papyrus', icon: [15, 12, "magixmod"], desc: 'Gain mainly [paper] out of this shack. To craft <b>papyrus</b>, [worker] will use [sugar cane].', use: { 'worker': 1, 'stone tools': 1 } },
                    'pergamin': { name: 'Pergamin', icon: [16, 12, "magixmod"], desc: 'Gain mainly [paper] out of this shack. To craft <b>pergamin</b>, [worker] will use [hide] or [leather].', use: { 'worker': 1, 'stone tools': 1 } },
                    'commonpaper': { name: 'Common paper', icon: [17, 12, "magixmod"], desc: 'Craft [paper] out of [bamboo] with the help of a secret non-magic recipe.', use: { 'worker': 1, 'stone tools': 1 } },
                },
                effects: [
                    { type: 'convert', from: { 'sugar cane': 3.4 }, into: { 'paper': 1.5 }, every: 1, mode: 'papyrus' },
                    { type: 'convert', from: { 'hide': 1.75 }, into: { 'paper': 1.15 }, every: 4, mode: 'pergamin' },
                    { type: 'convert', from: { 'leather': 1.5 }, into: { 'paper': 1.15 }, every: 4, mode: 'pergamin' },
                    { type: 'convert', from: { 'bamboo': 4 }, into: { 'paper': 1.4 }, every: 2, mode: 'commonpaper' },
                    { type: 'mult', value: 1.17, req: { 'crafting & farm rituals': 'on' } },
                    { type: 'mult', value: 1.44, req: { 'better papercrafting recipe': 'true', 'joy of eating': true } },
                    { type: 'mult', value: 1.44, req: { 'better papercrafting recipe': 'true', 'culture of moderation': true } },
                    { type: 'mult', value: 3, req: { 'paper mastery': true } },
                    { type: 'mult', value: 1.25, req: { 'even mo\' paper': true, 'moderation': true, 'caretaking': false } },
                    { type: 'mult', value: 1.25, req: { 'even mo\' paper': true, 'caretaking': true, 'moderation': false } },
                ],
                req: { 'papercrafting': true },
                category: 'crafting',
            });
            new G.Unit({
                name: 'fire wizard tower',
                desc: '@provides 20 [housing]<>A tower which can be housing for 20 citizens. It gathers [fire essence] by consuming [mana].',
                icon: [2, 4, "magixmod"],
                cost: { 'basic building materials': 1200, 'precious building materials': 100 },
                use: { 'land': 1, 'wizard': 2 },
                upkeep: { 'mana': 6 },
                effects: [
                    { type: 'provide', what: { 'housing': 20 } },
                    { type: 'gather', what: { 'fire essence': 2 } },
                    { type: 'mult', value: 1.05, req: { 'magical presence': true } },
                    { type: 'mult', value: 1.035, req: { 'at9': true } },
                    { type: 'mult', value: 0.95, req: { 'dt28': true } },
                    { type: 'mult', value: 1.02, req: { 'gt7': true } },
                    { type: 'mult', value: 0.88, req: { 'dt19': true } },
                ],
                req: { 'wizard towers': true },
                category: 'housing',
                limitPer: { 'land': 2 },
            });
            new G.Unit({
                name: 'painter',
                desc: '@generates [culture] by using [dyes], and makes [painting]s slowly. Requires the [artistic thinking] trait.',
                icon: [12, 2, "magixmod"],
                cost: {},
                use: { 'worker': 1 },
                upkeep: { 'food': 0.1, 'dyes': 4 },
                limitPer: { 'population': 40 },
                effects: [
                    { type: 'gather', what: { 'culture': 0.08 } },
                    { type: 'gather', what: { 'painting': 0.002 } },
                    { type: 'gather', what: { 'painting': 0.0005 }, req: { 'cultural people': true } },
                    { type: 'gather', what: { 'culture': 0.032 }, req: { 'symbolism': true } },
                    { type: 'gather', what: { 'culture II': 0.000007 }, req: { 'people of the arts': true } },
                    { type: 'gather', what: { 'culture II': 0.000007 }, req: { 'people of the arts II': true } },
                    { type: 'gather', what: { 'culture II': 0.000003 }, req: { 'cultural people': true } },
                    { type: 'mult', value: 1.3, req: { 'artistic thinking': true } },
                    { type: 'mult', value: 1.2, req: { 'wisdom rituals': 'on' } },
                    { type: 'mult', value: 1.05, req: { 'culture rise': true } }, // NOTE: rootCultureEvolve() RELIES ON FIRST MULT VALUE TO BE EQUAL TO 1.05
                    { type: 'mult', value: 0.9, req: { 'se12': 'on' } },
                    { type: 'mult', value: 2, req: { 'se03': 'on' } },
                ],
                req: { 'oral tradition': true, 'artistic thinking': true, 't3': false/*Cultural trial condition*/, 'a gift from the mausoleum': true },
                category: 'cultural',
            });
            new G.Unit({
                name: 'Wizard',
                desc: 'Worshipper of magic. You\'ll need them to maintain [fire wizard tower,Wizard towers] and to cultivate magic in your civilization. Provides 1 [wisdom] for every two [wizard]s.',
                icon: [choose([21, 22, 23, 24]), 8, "magixmod"],
                cost: { 'insight': 20, 'stick': 5, 'food': 1000 },
                use: { 'elder': 1, 'wand': 1 },
                upkeep: { 'food': 1.2, 'water': 0.04 },
                req: { 'wizard wisdom': true },
                effects: [
                    { type: 'convert', from: { 'herbs': 6, 'mana': 2 }, into: { 'herb essence': 3 }, every: 4, req: { 't7': true } },
                    { type: 'provide', what: { 'wisdom': 0.5, 'wizard': 1 } },
                ],
                category: 'discovery',
                limitPer: { 'population': 3 },
            });
            new G.Unit({
                name: 'mana maker',
                desc: 'A man who can make [mana] for you. //[mana maker]s are quite limited, since few know how to gather this magic resource.',
                icon: [0, 5, "magix2"],
                cost: { 'insight': 1, 'stick': 2 },
                use: { 'worker': 1 },
                upkeep: { 'food': 5, 'water': 0.25 },
                req: { 'wizardry': true, 'mana brewery': true },
                //require:{'wizard':3},
                effects: [
                    { type: 'gather', what: { 'mana': 20 } },
                    { type: 'mult', value: 1.5, req: { 'mana brewery III': true } },
                    { type: 'mult', value: 1.01, req: { 'hallow3': true } },
                    { type: 'mult', value: 0.1, req: { 't7': true } },
                    { type: 'mult', value: 4, req: { 'master mana-making': true } },
                    { type: 'mult', value: 1.035, req: { 'at9': true } },
                    { type: 'mult', value: 0.95, req: { 'dt28': true } },
                ],
                category: 'discovery',
                limitPer: { 'population': 4000 },
            });
            new G.Unit({
                name: 'water wizard tower',
                desc: '@provides 20 [housing]<>A tower for 20 citizens. It gathers [water essence] by consuming [mana].',
                icon: [0, 4, "magixmod"],
                cost: { 'basic building materials': 1200, 'precious building materials': 100 },
                use: { 'land': 1, 'wizard': 2 },
                upkeep: { 'mana': 6 },
                effects: [
                    { type: 'provide', what: { 'housing': 20 } },
                    { type: 'gather', what: { 'water essence': 2 } },
                    { type: 'mult', value: 1.01, req: { 'hallow4': true } },
                    { type: 'mult', value: 1.035, req: { 'at9': true } },
                    { type: 'mult', value: 0.95, req: { 'dt28': true } },
                    { type: 'mult', value: 1.05, req: { 'magical presence': true } },
                    { type: 'mult', value: 1.02, req: { 'gt8': true } },
                    { type: 'mult', value: 0.88, req: { 'dt20': true } },
                ],
                req: { 'construction': true, 'wizard towers': true, 'wizard wisdom': true, 'well of mana': true },
                category: 'housing',
                limitPer: { 'land': 2 },
            });
            new G.Unit({
                name: 'dark wizard tower',
                desc: '@provides 20 [housing]<>A tower for 20 citizens. It gathers [dark essence] by consuming [mana].',
                icon: [1, 4, "magixmod"],
                cost: { 'basic building materials': 1200, 'precious building materials': 100 },
                use: { 'land': 1, 'wizard': 2 },
                upkeep: { 'mana': 6 },
                req: { 'construction': true, 'wizard towers': true, 'wizard wisdom': true, 'well of mana': true },
                effects: [
                    { type: 'provide', what: { 'housing': 20 } },
                    { type: 'gather', what: { 'dark essence': 2 } },
                    { type: 'mult', value: 1.05, req: { 'magical presence': true } },
                    { type: 'mult', value: 1.035, req: { 'at9': true } },
                    { type: 'mult', value: 0.95, req: { 'dt28': true } },
                    { type: 'mult', value: 1.02, req: { 'gt12': true } },
                    { type: 'mult', value: 0.88, req: { 'dt24': true } },
                    { type: 'mult', value: 1.01, req: { 'hallow4': true } },
                ],
                category: 'housing',
                limitPer: { 'land': 2 },
            });
            new G.Unit({
                name: 'nature wizard tower',
                desc: '@provides 20 [housing]<>A tower for 20 citizens. It gathers [nature essence] by consuming [mana].',
                icon: [3, 4, "magixmod"],
                cost: { 'basic building materials': 1200, 'precious building materials': 100 },
                use: { 'land': 1, 'wizard': 2 },
                upkeep: { 'mana': 6 },
                req: { 'construction': true, 'wizard towers': true, 'wizard wisdom': true, 'well of mana': true },
                effects: [
                    { type: 'provide', what: { 'housing': 20 } },
                    { type: 'gather', what: { 'nature essence': 2 } },
                    { type: 'mult', value: 1.05, req: { 'magical presence': true } },
                    { type: 'mult', value: 1.035, req: { 'at9': true } },
                    { type: 'mult', value: 0.95, req: { 'dt28': true } },
                    { type: 'mult', value: 1.02, req: { 'gt10': true } },
                    { type: 'mult', value: 0.88, req: { 'dt22': true } },
                    { type: 'mult', value: 1.01, req: { 'hallow4': true } },
                ],
                category: 'housing',
                limitPer: { 'land': 2 },
            });
            new G.Unit({
                name: 'lightning wizard tower',
                desc: '@provides 20 [housing]<>A tower for 20 citizens. It gathers [lightning essence] by consuming [mana].',
                icon: [5, 4, "magixmod"],
                cost: { 'basic building materials': 1200, 'precious building materials': 100 },
                use: { 'land': 1, 'wizard': 2 },
                upkeep: { 'mana': 6 },
                req: { 'construction': true, 'wizard towers': true, 'wizard wisdom': true, 'well of mana': true },
                //require:{'wizard':3},
                effects: [
                    { type: 'provide', what: { 'housing': 20 } },
                    { type: 'gather', what: { 'lightning essence': 2 } },
                    { type: 'mult', value: 1.05, req: { 'magical presence': true } },
                    { type: 'mult', value: 1.035, req: { 'at9': true } },
                    { type: 'mult', value: 0.95, req: { 'dt28': true } },
                    { type: 'mult', value: 1.02, req: { 'gt11': true } },
                    { type: 'mult', value: 0.88, req: { 'dt23': true } },
                    { type: 'mult', value: 1.01, req: { 'hallow4': true } },
                ],
                category: 'housing',
                limitPer: { 'land': 2 },
            });
            new G.Unit({
                name: 'Well of mana',
                desc: 'A source of [mana]. Once you spill some [mana] and [water essence] into the hole, you will get a decent source of [mana].',
                icon: [6, 2, "magixmod"],
                cost: { 'precious building materials': 10, 'stone tools': 10, 'mana': 100, 'water essence': 15 },
                use: { 'land': 1, 'wizard': 2 },
                upkeep: { 'water essence': 1 },
                req: { 'wizardry': true, 'well of mana': true },
                //require:{'wizard':3},
                effects: [
                    { type: 'gather', what: { 'mana': 13 } },
                    { type: 'mult', value: 1.035, req: { 'at9': true } },
                    { type: 'mult', value: 0.95, req: { 'dt28': true } },
                    { type: 'mult', value: 1.17, req: { 'crafting & farm rituals': 'on' } }
                ],
                category: 'crafting',
                limitPer: { 'land': 75 },
            });
            new G.Unit({
                name: 'wind wizard tower',
                desc: '@provides 20 [housing]<>A tower for 20 citizens. It gathers [wind essence] by consuming [mana].',
                icon: [4, 4, "magixmod"],
                cost: { 'basic building materials': 1200, 'precious building materials': 100 },
                use: { 'land': 1, 'wizard': 2 },
                upkeep: { 'mana': 6 },
                req: { 'construction': true, 'wizard towers': true, 'wizard wisdom': true, 'well of mana': true },
                //require:{'wizard':3},
                effects: [
                    { type: 'provide', what: { 'housing': 20 } },
                    { type: 'gather', what: { 'wind essence': 2 } },
                    { type: 'mult', value: 1.05, req: { 'magical presence': true } },
                    { type: 'mult', value: 1.035, req: { 'at9': true } },
                    { type: 'mult', value: 0.95, req: { 'dt28': true } },
                    { type: 'mult', value: 1.02, req: { 'gt9': true } },
                    { type: 'mult', value: 0.88, req: { 'dt21': true } },
                    { type: 'mult', value: 1.01, req: { 'hallow4': true } },
                ],
                category: 'housing',
                limitPer: { 'land': 2 },
            });
            new G.Unit({
                name: 'holy wizard tower',
                desc: '@provides 18 [housing]<>A tower for 18 citizens. Gathers [holy essence] by consuming [mana]. It is 20% faster than normal wizard towers!',
                icon: [20, 7, "magixmod"],
                cost: { 'basic building materials': 1200, 'precious building materials': 100 },
                use: { 'land': 1, 'wizard': 4 },
                upkeep: { 'mana': 6 },
                req: { 'construction': true, 'wizard towers': true, 'wizard wisdom': true, 'well of mana': true, '7th essence': true },
                //require:{'wizard':3},
                effects: [
                    { type: 'provide', what: { 'housing': 18 } },
                    { type: 'gather', what: { 'holy essence': 2.4 } },
                    { type: 'mult', value: 1.05, req: { 'magical presence': true } },
                    { type: 'mult', value: 1.035, req: { 'at9': true } },
                    { type: 'mult', value: 0.95, req: { 'dt28': true } },
                    { type: 'mult', value: 1.01, req: { 'hallow4': true } },
                ],
                category: 'housing',
                limitPer: { 'land': 2 },
            });
            new G.Unit({
                name: 'church',
                desc: 'Generates [faith] slowly. Further religion improvements may change it!',
                icon: [6, 3, "magixmod"],
                cost: { 'basic building materials': 2000, 'precious building materials': 20 },
                upkeep: { 'faith': 0.001 },
                use: { 'land': 1, 'worker': 2 },
                req: { 'churches': true },
                effects: [
                    { type: 'gather', what: { 'faith': 0.03 }, req: { 'spiritual piety': false } },
                    { type: 'gather', what: { 'influence': 0.03 }, req: { 'at1': true }, chance: 0.01 },
                    { type: 'gather', what: { 'faith': 0.24 }, req: { 'spiritual piety': true } },
                    { type: 'mult', value: 1.25, req: { 'se11': 'on' } },
                    { type: 'waste', chance: 0.01 / 1000, req: { 'construction III': false } },
                    { type: 'waste', chance: 0.002 / 1000, req: { 'construction III': true, 'improved construction': false } },
                    { type: 'waste', chance: 0.0014 / 1000, req: { 'improved construction': true } },
                    { type: 'mult', value: 0.95, req: { 'se03': 'on' } },
                ],
                category: 'spiritual',
            });
            new G.Unit({
                name: 'cathedral',
                desc: 'A precious place for worship. Generates [faith] faster than [soothsayer]s. Requires [holy essence] to operate properly!',
                icon: [19, 4, "magixmod"],
                cost: { 'basic building materials': 1750, 'precious building materials': 400 },
                upkeep: { 'food': 2, 'holy essence': 1 },
                use: { 'land': 1, 'worker': 4 },
                req: { 'churches': true, 'stronger faith': true },
                effects: [
                    { type: 'gather', what: { 'faith': 1.8 }, req: { 'stronger faith II': false } },
                    { type: 'gather', what: { 'faith': 7.2 }, req: { 'stronger faith II': true, 'trees of faith': false } },
                    { type: 'gather', what: { 'faith': 9 }, req: { 'trees of faith': true } },
                    { type: 'gather', what: { 'health': 3 }, req: { 'trees of faith': true } },
                    { type: 'gather', what: { 'influence': 0.1 }, req: { 'at1': true }, chance: 0.01 },
                    { type: 'gather', what: { 'faith': 0.3 }, req: { 'symbolism': true } },
                    { type: 'mult', value: 1.7, req: { 'symbolism III': true } },
                    { type: 'waste', chance: 0.003 / 1000 },
                    { type: 'waste', chance: 0.003 / 1000, req: { 'construction III': false } },
                    { type: 'waste', chance: 0.0006 / 1000, req: { 'construction III': true, 'improved construction': false } },
                    { type: 'waste', chance: 0.00042 / 1000, req: { 'improved construction': true } },
                    { type: 'mult', value: 1.25, req: { 'se11': 'on' } },
                    { type: 'mult', value: 0.95, req: { 'se03': 'on' } },
                ],
                category: 'spiritual',
            });
            new G.Unit({
                name: 'poet',
                desc: '@generates [culture] every now and then<>[poet] spends his free time in his private life to write novels, stories, poems about any topic. Gathers a little bit more [culture] than storyteller but needs [ink] as upkeep (and something to write, of course).',
                icon: [18, 5, "magixmod"],
                cost: {},
                use: { 'worker': 1 },
                upkeep: { 'ink': 0.35 },
                effects: [
                    { type: 'gather', what: { 'culture': 0.13 } },
                    { type: 'mult', value: 1.31, req: { 'artistic thinking': true } },
                    { type: 'mult', value: 1.21, req: { 'wisdom rituals': 'on' } },
                    { type: 'convert', from: { 'paper': 12, 'ink': 3 }, into: { 'poet\'s notes': 1 }, every: 11, req: { 'noting': true } },
                    { type: 'mult', value: 1.05, req: { 'culture rise': true } }, // NOTE: rootCultureEvolve() RELIES ON FIRST MULT VALUE TO BE EQUAL TO 1.05
                    { type: 'mult', value: 0.9, req: { 'se12': 'on' } },
                    { type: 'mult', value: 2, req: { 'se03': 'on' } },
                ],
                req: { 'oral tradition': true, 'poetry': true },
                category: 'cultural',
            });

            new G.Unit({
                name: 'Wizard Complex',
                desc: '@provides 600 [housing]<>A huge tower for 660 citizens and 30 wizards. Gathers all type of essences three times better than usual tower but only needs 6 times the [mana], <b>and increases your [wisdom], [inspiration], [spirituality], and [authority] after built</b>.',
                icon: [3, 3, "magixmod"],
                cost: { 'basic building materials': 12500, 'precious building materials': 3000 },
                use: { 'land': 9, 'worker': 10, 'wizard': 60 },
                upkeep: { 'mana': 36 },
                req: { 'construction': true, 'wizard towers': true, 'wizard wisdom': true, 'well of mana': true, 'Wizard complex': true },
                //require:{'wizard':30},
                effects: [
                    { type: 'provide', what: { 'housing': 600 } },
                    { type: 'provide', what: { 'housing': 100 }, req: { '7th complex tower': true } },
                    { type: 'provide', what: { 'authority': 15 } },
                    { type: 'provide', what: { 'spirituality': 15 } },
                    { type: 'provide', what: { 'inspiration': 30 } },
                    { type: 'gather', context: 'gather', what: { 'fire essence': 6 } },
                    { type: 'gather', context: 'gather', what: { 'water essence': 6 } },
                    { type: 'gather', context: 'gather', what: { 'nature essence': 6 } },
                    { type: 'gather', context: 'gather', what: { 'lightning essence': 6 } },
                    { type: 'gather', context: 'gather', what: { 'wind essence': 6 } },
                    { type: 'gather', context: 'gather', what: { 'dark essence': 6 } },
                    { type: 'convert', from: { 'mana': 6 }, into: { 'holy essence': 6 }, every: 4, req: { '7th complex tower': true } },
                    { type: 'convert', from: { 'empty book': 1, 'ink': 5 }, into: { 'spellbook': 1 }, every: 150, req: { 'bookwriting': true } },
                    { type: 'mult', value: 1.035, req: { 'at9': true } },
                    { type: 'mult', value: 0.95, req: { 'dt28': true } },
                ],
                category: 'housing',
                limitPer: { 'land': 300 },
                limitPer: { 'population': 9000 },
            });
            new G.Unit({
                name: 'brick house with a silo',
                desc: '@provides 15 [housing]<>. Even harder construction makes people feel more safe. Each brick house increases [food storage] by 60.',
                icon: [5, 1, "magixmod"],
                cost: { 'brick': 2000, 'basic building materials': 100 },
                use: { 'land': 1 },
                //require:{'wizard':3},
                effects: [
                    { type: 'provide', what: { 'housing': 15 } },
                    { type: 'provide', what: { 'housing': 0.2 }, req: { 'better house construction': true } },
                    { type: 'provide', what: { 'food storage': 60 } },
                    { type: 'waste', chance: 0.0004 / 1000 },
                    { type: 'waste', chance: 0.0004 / 1000, req: { 'construction III': false } },
                    { type: 'waste', chance: 0.00008 / 1000, req: { 'construction III': true, 'improved construction': false } },
                    { type: 'waste', chance: 0.000056 / 1000, req: { 'improved construction': true } },
                ],
                req: { 'construction': true, 'more useful housing': true },
                category: 'housing',
                limitPer: { 'land': 3 },
            });
            new G.Unit({
                name: 'concrete making shack',
                desc: 'Makes [concrete] using some [limestone] and [water].',
                icon: [23, 22, "magixmod", 25, 2],
                cost: { 'basic building materials': 1000 },
                use: { 'land': 1, 'worker': 1 },
                effects: [
                    { type: 'convert', from: { 'water': 8, 'limestone': 3 }, into: { 'concrete': 1 }, every: 10 },
                    { type: 'mult', value: 1.2, req: { 'mo\' concrete': true, 'moderation': true } },
                    { type: 'mult', value: 1.05, req: { 'mo\' concrete': true, 'caretaking': true } },
                ],
                req: { 'construction': true, 'concrete making': true, 't10': false },
                category: 'crafting',
            });
            new G.Unit({
                name: 'floored house',
                desc: '@provides 30 [housing]. Constructed using [land of the Plain Island]. A [floored house] has a very low chance to be wasted.',
                icon: [9, 1, "magixmod"],
                cost: { 'basic building materials': 1000 },
                use: { 'land of the Plain Island': 3 },
                effects: [
                    { type: 'provide', what: { 'housing': 30 } },
                    { type: 'provide', what: { 'housing': 10 }, req: { 'mo\' floorz': true } },
                    { type: 'provide', what: { 'housing': 20 }, req: { 'even mo\' floorz': true } },
                    { type: 'waste', chance: 0.0001 / 1000, req: { 'construction III': false, 'mo\' floorz': false } },
                    { type: 'waste', chance: 0.0002 / 1000, req: { 'construction III': true, 'improved construction': false, 'mo\' floorz': false } },
                    { type: 'waste', chance: 0.00014 / 1000, req: { 'improved construction': true, 'mo\' floorz': false } },
                    { type: 'waste', chance: 0.0001 * 1.01 / 1000, req: { 'construction III': false, 'mo\' floorz': true } },
                    { type: 'waste', chance: 0.0002 * 1.01 / 1000, req: { 'construction III': true, 'improved construction': false, 'mo\' floorz': true } },
                    { type: 'waste', chance: 0.00014 * 1.01 / 1000, req: { 'improved construction': true, 'mo\' floorz': true } },
                ],
                req: { 'construction II': true, 'concrete making': true },
                category: 'plainisleunit',
                limitPer: { 'land': 35 },
            });
            new G.Unit({
                name: 'mine of the plain island',
                displayName: 'Mine of the Island',
                desc: 'These mines are able to gather various ores, in particular, [cobalt ore]. They will be able to mine few other resources.',
                icon: [9, 2, "magixmod"],
                cost: { 'basic building materials': 100 },
                use: { 'land of the Plain Island': 5 },
                req: { 'plain island building': true },
                gizmos: true,
                modes: {
                    'off': G.MODE_OFF,
                    'cobalt': { name: 'Cobalt', icon: [8, 2, "magixmod"], desc: 'Gain [cobalt ore] mainly from this mine.', use: { 'worker': 5, 'metal tools': 5 } },
                    'salt': { name: 'Salt', icon: [11, 7], desc: 'Mine for [salt].', req: { 'prospecting': true }, use: { 'worker': 3, 'metal tools': 3 } },
                    'copper': { name: 'Copper', icon: [9, 8], desc: 'Mine for [copper ore] with five times the efficiency.', req: { 'prospecting': true }, use: { 'worker': 3, 'metal tools': 3 } },
                    'tin': { name: 'Tin', icon: [13, 8], desc: 'Mine for [tin ore] with five times the efficiency.', req: { 'prospecting': true }, use: { 'worker': 3, 'metal tools': 3 } },
                    'iron': { name: 'Iron', icon: [10, 8], desc: 'Mine for [iron ore] with five times the efficiency.', req: { 'prospecting': true }, use: { 'worker': 3, 'metal tools': 3 } },
                },
                effects: [
                    { type: 'gather', context: 'mine', what: { 'stone': 10 }, max: 30, notMode: 'off' },
                    { type: 'gather', context: 'gather', what: { 'cobalt ore': 10 }, max: 30, mode: 'cobalt' },
                    { type: 'gather', context: 'mine', what: { 'salt': 25 }, max: 30, mode: 'salt' },
                    { type: 'gather', context: 'mine', what: { 'copper ore': 25 }, max: 30, mode: 'copper' },
                    { type: 'gather', context: 'mine', what: { 'tin ore': 25 }, max: 30, mode: 'tin' },
                    { type: 'gather', context: 'mine', what: { 'iron ore': 25 }, max: 30, mode: 'iron' },
                    //Sulfur
                    { type: 'gather', context: 'mine', what: { 'sulfur': 25 }, max: 30, mode: 'iron', req: { 'explosive crafting & mining': true } },
                    { type: 'gather', context: 'mine', what: { 'sulfur': 28 }, max: 37, mode: 'cobalt', req: { 'explosive crafting & mining': true } },
                    { type: 'gather', context: 'mine', what: { 'sulfur': 24 }, max: 31, mode: 'tin', req: { 'explosive crafting & mining': true } },
                    { type: 'gather', context: 'mine', what: { 'sulfur': 24 }, max: 31, mode: 'copper', req: { 'explosive crafting & mining': true } },
                    { type: 'gather', context: 'mine', what: { 'sulfur': 17 }, max: 26, mode: 'salt', req: { 'explosive crafting & mining': true } },
                    { type: 'mult', value: 0.95, req: { 'dt5': true }, mode: 'iron' },
                    { type: 'mult', value: 0.95, req: { 'dt6': true }, mode: 'tin' },
                    //Collapsing chance
                    { type: 'mult', value: 1.05, req: { 'plain island mining strategies': true } },
                    { type: 'mult', value: 1.25, req: { 'se09': 'on' } },
                    { type: 'function', func: unitGetsConverted({ 'wounded': 1 }, 0.001, 0.01, true, '[X] [people].', 'mine collapsed, wounding its miners', 'mines collapsed, wounding their miners'), chance: 1 / 50, req: { 'plain island mining strategies': false } },
                    { type: 'function', func: unitGetsConverted({ 'wounded': 1 }, 0.001, 0.01, true, '[X] [people].', 'mine collapsed, wounding its miners', 'mines collapsed, wounding their miners'), chance: 1 / 70, req: { 'plain island mining strategies': true } }
                ],
                tick: function (me, tick) {
                    me.displayName = 'Mine of the ' + islandName()
                },
                category: 'plainisleunit',
                limitPer: { 'land': 35 },
            });
            new G.Unit({
                name: 'cemetary of Plain Island',
                displayName: 'Cemetary of the Island',
                desc: 'A big cemetary that stores a lot of corpses by using family burials. Uses [worker]s to keep the cemetary clean and safe. Provides 7,500 [burial spot]s.',//Soon new policies which will decide how much you may store corpses
                icon: [2, 6, "magixmod"],
                cost: { 'basic building materials': 300 },
                use: { 'land of the Plain Island': 100, 'worker': 10 },
                effects: [
                    { type: 'provide', what: { 'burial spot': 7500 } },
                    { type: 'provide', what: { 'burial spot': 2500 }, req: { 'voodoo spirit': true } },
                ],
                tick: function (me, tick) {
                    me.displayName = 'Cemetary of the ' + islandName()
                },
                req: { 'plain island building': true, 'burial in new world': true },
                category: 'plainisleunit',
                limitPer: { 'land': 400 },
            });
            new G.Unit({
                name: 'family graves',
                desc: 'You can dedicate 5 pieces of [land of the Plain Island] to family burials. Does not use [worker]s. Provides 100 [burial spot]s.',
                icon: [0, 6, "magixmod"],
                cost: { 'basic building materials': 300 },
                use: { 'land of the Plain Island': 5 },
                effects: [
                    { type: 'provide', what: { 'burial spot': 100 } },
                    { type: 'provide', what: { 'burial spot': 100 }, req: { 'voodoo spirit': true } },
                ],
                req: { 'plain island building': true, 'burial in new world': true },
                category: 'plainisleunit',
                limitPer: { 'land': 45 },
            });
            new G.Unit({
                name: 'single grave',
                desc: 'A simple, single grave for 1 person. Does not use [worker]s. Provides 1 [burial spot].',
                icon: [3, 6, "magixmod"],
                cost: { 'basic building materials': 300 },
                use: { 'land of the Plain Island': 1 },
                effects: [
                    { type: 'provide', what: { 'burial spot': 1 } },
                    { type: 'provide', what: { 'burial spot': 1 }, req: { 'voodoo spirit': true } },
                ],
                req: { 'plain island building': true, 'burial in new world': true },
                category: 'plainisleunit',
            });
            new G.Unit({
                name: 'well of the Plain Island',
                displayName: 'Well of the Island',
                desc: '@produces fresh [water], up to 25 per day<>The [well] is a steady source of drinkable [water].',
                icon: [25, 3],
                cost: { 'stone': 70, 'archaic building materials': 30, 'basic building materials': 15 },
                use: { 'land of the Plain Island': 1 },
                effects: [
                    { type: 'gather', what: { 'water': 25 } },
                    { type: 'mult', value: 1.5, req: { 'deeper wells II': true } },
                    { type: 'mult', value: 1.25, req: { 'se06': 'on' } },
                    { type: 'mult', value: 1.15, req: { 'water rituals': 'on' } },
                    { type: 'mult', value: 1.6, req: { 'water rituals': 'on', 'droughtNew': true } },
                    { type: 'mult', value: 0.3, req: { 'droughtNew': true } },
                    { type: 'mult', value: 0.85, req: { 'dt8': true } },
                    { type: 'mult', value: 0.85, req: { 'se09': 'on' } },
                ],
                category: 'plainisleunit',
                req: { 'well-digging': true, 'first portal to new world': true, 'plain island ideas': true },
                limitPer: { 'land of the Plain Island': 10 },
            });
            new G.Unit({
                name: 'hardened house',
                desc: '@provides 18 [housing]. These houses are larger and will have a significantly decreased chance to waste.',
                icon: [6, 6, "magixmod", 4, 6, "magixmod"],
                cost: { 'basic building materials': 1500, 'glass': 5 },
                use: { 'land of the Plain Island': 1 },
                effects: [
                    { type: 'waste', chance: 0.001 / 1000, req: { 'construction III': false } },
                    { type: 'waste', chance: 0.0002 / 1000, req: { 'construction III': true, 'improved construction': false } },
                    { type: 'waste', chance: 0.00014 / 1000, req: { 'improved construction': true } },
                    { type: 'provide', what: { 'housing': 18 } },
                ],
                req: { 'construction II': true },
                category: 'plainisleunit',
            });
            new G.Unit({
                name: 'hardened barn',
                desc: '@provides 4,500 [food storage]. This larger and more secure barn has a lower chance to be wasted. To keep stored food safe and fresh it will need 3 guys.',
                icon: [7, 6, "magixmod", 4, 6, "magixmod"],
                cost: { 'basic building materials': 1500, 'glass': 5 },
                use: { 'land of the Plain Island': 2, 'worker': 3 },
                effects: [
                    { type: 'provide', what: { 'added food storage': 4500 } },
                    { type: 'provide', what: { 'added food storage': 1750 }, req: { 'well stored': true } },
                    { type: 'provide', what: { 'added food storage': 2750 }, req: { 'well stored 2': true } },
                    { type: 'waste', chance: 0.001 / 1000, req: { 'construction III': false } },
                    { type: 'waste', chance: 0.0002 / 1000, req: { 'construction III': true, 'improved construction': false } },
                    { type: 'waste', chance: 0.00014 / 1000, req: { 'improved construction': true } },
                ],
                req: { 'construction II': true },
                category: 'plainisleunit',
            });
            new G.Unit({
                name: 'terrain conservator',
                desc: 'Each [terrain conservator] will convert 25 [land of the Plain Island] into 25 [alchemy zone]s for your alchemists to use.',
                icon: [17, 6, "magixmod"],
                gizmos: true,
                modes: {
                    'off': G.MODE_OFF,
                    'paradise': { name: 'Conservate paradise land', icon: [20, 4, "magixmod"], desc: 'Reserve 25 [land of the Paradise] for alchemists.', use: { 'worker': 1, 'stone tools': 1, 'land of the Paradise': 25 }, req: { 'paradise building': true } },
                    'plain': { name: 'Conservate plain island land', icon: [7, 0, "magixmod"], desc: 'Reserve 25 [land of the Plain Island] for alchemists.', use: { 'worker': 1, 'stone tools': 1, 'land of the Plain Island': 25 } },
                },
                effects: [
                    { type: 'provide', what: { 'alchemy zone': 25 }, mode: 'paradise' },
                    { type: 'provide', what: { 'alchemy zone': 25 }, mode: 'plain' },
                ],
                req: { 'terrain conservacy': true },
                category: 'alchemy'
            });
            new G.Unit({
                name: 'Carpenter workshop',
                desc: '@processes wood<>Each [Carpenter workshop,Carpenter] is equipped with all kinds of tools to coerce wood into more useful shapes.',
                icon: [16, 14, "magixmod", 20, 14, "magixmod"],
                cost: { 'basic building materials': 150 },
                use: { 'land of the Paradise': 1, 'industry point': 1 },
                modes: {
                    'off': G.MODE_OFF,
                    'lumber': { name: 'Cut logs into lumber', icon: [1, 8], desc: 'Cut [log]s into 3 [lumber] each.', use: { 'worker': 1, 'stone tools': 1 }, req: {} },
                    'frames': { name: 'Cut lumber into hive frames', icon: [6, 1, "magix2"], desc: 'Cut a piece of [lumber] into 2 ready-made [hive frame]s.', use: { 'worker': 1, 'stone tools': 1 }, req: { 'magical hive frames': true } },
                    'essence': { name: 'Add essence to hive frames', icon: [8, 1, "magix2"], desc: 'Add 2 [nature concoction]s into a single [hive frame] to turn it into an [essenced hive frame]. Has a chance to fail.', use: { 'worker': 2 }, req: { 'magical hive frames': true } },
                },
                effects: [
                    { type: 'convert', from: { 'log': 1 }, into: { 'lumber': 3 }, repeat: 2, mode: 'lumber' },
                    { type: 'convert', from: { 'lumber': 1 }, into: { 'hive frame': 2 }, every: 5, mode: 'frames' },
                    { type: 'convert', from: { 'hive frame': 1, 'nature concoction': 2 }, into: { 'essenced hive frame': 1 }, every: 6, chance: 0.8, mode: 'essence' },
                    { type: 'mult', value: 0.8, req: { 'dt17': true } },
                    { type: 'mult', value: 3, req: { 'moderated carpentry': true } },
                    { type: 'mult', value: 1.17, req: { 'crafting & farm rituals': 'on', 'power of the faith': true } },
                    { type: 'waste', chance: 0.001 / 1000, req: { 'construction III': false } },
                    { type: 'waste', chance: 0.0002 / 1000, req: { 'construction III': true, 'improved construction': false } },
                    { type: 'waste', chance: 0.00014 / 1000, req: { 'improved construction': true } },
                ],
                gizmos: true,
                req: { 'carpentry': true, 'paradise crafting': true },
                category: 'paradiseunit',
            });
            new G.Unit({
                name: 'paradise blacksmith workshop',
                desc: '@forges metal goods out of ingots<>This [paradise blacksmith workshop,Blacksmith] takes the same pride in shaping the tool that tills as they do the sword that slays.',
                icon: [19, 14, "magixmod", 20, 14, "magixmod"],
                cost: { 'basic building materials': 150 },
                use: { 'land of the Paradise': 1, 'industry point': 1 },
                modes: {
                    'off': G.MODE_OFF,
                    'metal tools': { name: 'Forge tools from soft metals', icon: [2, 9], desc: 'Forge [metal tools] out of 2 [soft metal ingot]s each.', use: { 'worker': 1, 'stone tools': 1 }, req: {} },
                    'hard metal tools': { name: 'Forge tools from hard metals', icon: [2, 9], desc: 'Forge 3 [metal tools] out of 1 [hard metal ingot].', use: { 'worker': 1, 'metal tools': 1 }, req: {} },
                    'gold blocks': { name: 'Forge gold blocks', icon: [14, 8], desc: 'Forge [gold block]s out of 10 [precious metal ingot]s each.', use: { 'worker': 1, 'stone tools': 1 }, req: { 'gold-working': true, 'block-smithery': false } },
                    'platinum block': { name: 'Forge platinum blocks', icon: [4, 11, "magixmod"], desc: 'Forge [platinum block]s out of 10 [platinum ingot]s each.', use: { 'worker': 1, 'stone tools': 1 }, req: { 'platinum-working': true, 'block-smithery': false } },
                    'metal weapon': { name: 'Forge weapons from soft metals', icon: [15, 11, "magixmod"], desc: 'Forge [metal weapons] out of 2 [soft metal ingot]s each.', use: { 'worker': 1, 'stone tools': 1, 'metal tools': 1 }, req: { 'weapon blacksmithery': true } },
                    'hard metal weapon': { name: 'Forge weapons from hard metals', icon: [15, 11, "magixmod"], desc: 'Forge 3 [metal weapons] out of 1 [hard metal ingot].', use: { 'worker': 1, 'metal tools': 1, 'stone tools': 1 }, req: { 'weapon blacksmithery': true } },
                    'metal armor': { name: 'Forge armor from soft metals', icon: [16, 11, "magixmod"], desc: 'Forge an [armor set] out of 8 [soft metal ingot]s each.', use: { 'worker': 1, 'stone tools': 1, 'metal tools': 1 }, req: { 'armor blacksmithery': true } },
                    'hard metal armor': { name: 'Forge armor from hard metals', icon: [16, 11, "magixmod"], desc: 'Forge an [armor set] out of 5 [hard metal ingot].', use: { 'worker': 1, 'metal tools': 1, 'stone tools': 1 }, req: { 'armor blacksmithery': true } },
                },
                effects: [
                    { type: 'convert', from: { 'soft metal ingot': 2 }, into: { 'metal tools': 1 }, repeat: 3, mode: 'metal tools' },
                    { type: 'convert', from: { 'hard metal ingot': 1 }, into: { 'metal tools': 3 }, repeat: 3, mode: 'hard metal tools' },
                    { type: 'convert', from: { 'precious metal ingot': 10 }, into: { 'gold block': 1 }, mode: 'gold blocks' },
                    { type: 'convert', from: { 'platinum ingot': 10 }, into: { 'platinum block': 1 }, mode: 'platinum block' },
                    { type: 'mult', value: 0, req: { 'block-smithery': true }, mode: 'gold blocks' },
                    { type: 'mult', value: 0, req: { 'block-smithery': true }, mode: 'platinum block' },
                    { type: 'convert', from: { 'hard metal ingot': 1 }, into: { 'metal weapons': 1 }, every: 3, repeat: 1, mode: 'hard metal weapon' },
                    { type: 'convert', from: { 'soft metal ingot': 2 }, into: { 'metal weapons': 1 }, every: 3, repeat: 1, mode: 'metal weapon' },
                    { type: 'convert', from: { 'hard metal ingot': 5 }, into: { 'armor set': 2 }, every: 3, repeat: 1, mode: 'hard metal armor' },
                    { type: 'convert', from: { 'soft metal ingot': 8 }, into: { 'armor set': 2 }, every: 3, repeat: 1, mode: 'metal armor' },
                    { type: 'mult', value: 0.95, req: { 'dt1': true } },
                    { type: 'mult', value: 1.17, req: { 'crafting & farm rituals': 'on', 'power of the faith': true } },
                    { type: 'mult', value: 1.2, req: { 'ground weapons': true } },
                    { type: 'waste', chance: 0.001 / 1000, req: { 'construction III': false } },
                    { type: 'waste', chance: 0.0002 / 1000, req: { 'construction III': true, 'improved construction': false } },
                    { type: 'waste', chance: 0.00014 / 1000, req: { 'improved construction': true } },
                ],
                gizmos: true,
                req: { 'smelting': true, 'paradise crafting': true },
                category: 'paradiseunit',
            });
            new G.Unit({
                name: 'basic brewing stand',
                desc: 'Here you can brew basic potions.',
                icon: [18, 9, "magixmod"],
                cost: { 'basic building materials': 3 },
                req: { 'alchemy': true },
                gizmos: true,
                modes: {
                    'off': G.MODE_OFF,
                    'sweetwater': { name: 'Sweet water', icon: [0, 10, "magixmod"], desc: 'Gain [sweet water pot,Sweet water] out of its stand and its owner.', use: { 'alchemist': 1, 'alchemy zone': 1 / 3 } },
                    'mundanewater': { name: 'Mundane water', icon: [1, 10, "magixmod"], desc: 'Gain [mundane water pot,Mundane water] out of its stand and its owner.', use: { 'alchemist': 1, 'alchemy zone': 1 / 3 } },
                    'saltwater': { name: 'Saltwater', icon: [2, 10, "magixmod"], desc: 'Gain [salted water pot,Saltwater] out of its stand and its owner.', use: { 'alchemist': 1, 'alchemy zone': 1 / 3 } },
                    'bubblingwater': { name: 'Bubbling water', icon: [3, 10, "magixmod"], desc: 'Gain [bubbling water pot,Bubbling water] out of its stand and its owner.', use: { 'alchemist': 1, 'alchemy zone': 1 / 3 } },
                },
                effects: [
                    { type: 'convert', from: { 'potion pot': 1, 'water': 0.75, 'sugar': 1 / 3 }, into: { 'sweet water pot': 1 }, every: 4, mode: 'sweetwater' },
                    { type: 'convert', from: { 'potion pot': 1, 'water': 0.75, 'muddy water': 0.05, 'herbs': 0.1 }, into: { 'mundane water pot': 1 }, every: 4, mode: 'mundanewater' },
                    { type: 'convert', from: { 'potion pot': 1, 'water': 0.8, 'salt': 0.2, 'herbs': 0.1 }, into: { 'salted water pot': 1 }, every: 4, mode: 'saltwater' },
                    { type: 'convert', from: { 'potion pot': 1, 'water': 0.8, 'salt': 0.02, 'fire pit': 0.12 }, into: { 'bubbling water pot': 1 }, every: 4, mode: 'bubblingwater' },
                    { type: 'mult', value: 1.5, req: { 'Improved alchemy techniques': true } },
                    { type: 'mult', value: 3, req: { 'science blessing': true } },
                ],
                category: 'alchemy',
            });
            new G.Unit({
                name: 'alcohol brewing stand',
                desc: '[alchemist]s can brew [alcohol brews,Alcohol] here. These drinks will harm your people\'s [health] but may be needed to make potions!',
                icon: [19, 9, "magixmod"],
                cost: { 'basic building materials': 4 },
                req: { 'alchemy': true, 'alcohol brewing': true },
                use: { 'alchemy zone': 0.5, 'alchemist': 1 },
                effects: [
                    { type: 'convert', from: { 'mundane water pot': 0.75, 'water': 0.2, 'bubbling water pot': 0.25 }, into: { 'alcohol pot': 1 }, every: 4 },
                    { type: 'mult', value: 3, req: { 'science blessing': true } },
                ],
                category: 'alchemy',
            });
            new G.Unit({
                name: 'mana crafting stand',
                desc: 'Here, [alchemist]s can craft [mana] with a similar recipe that your [mana maker]s discovered through [alchemist] training. However, this is 25 times slower than normal mana-making due to the individuals not being nearly as talented.',
                icon: [19, 10, "magixmod"],
                cost: { 'basic building materials': 4 },
                upkeep: { 'water': 0.25 },
                req: { 'alchemy': true, 'mana brewery II': true },
                use: { 'alchemy zone': 0.5, 'alchemist': 1 },
                effects: [
                    { type: 'gather', what: { 'mana': 0.8 } },
                    { type: 'mult', value: 1.5, req: { 'mana brewery III': true } },
                    { type: 'mult', value: 1.035, req: { 'at9': true } },
                    { type: 'mult', value: 0.95, req: { 'dt28': true } },
                ],
                category: 'alchemy',
            });
            new G.Unit({
                name: 'alcohol drink brewing stand',
                desc: 'There [alchemist]s can brew drinks with the help of [alcohol pot,Alcohol], which are tasty but will harm [health]. This stand will be able to craft either [wine] or [pot of vodka,Vodka].',
                icon: [19, 8, "magixmod"],
                cost: { 'basic building materials': 4.3 },
                req: { 'alchemy': true, 'alcohol brewing': true },
                use: { 'alchemy zone': 0.5 },
                gizmos: true,
                modes: {
                    'wine': { name: 'Craft wine at this stand', icon: [8, 10, "magixmod"], desc: 'At this stand an [alchemist] will craft [wine], an [alcohol brews,Alcohol].', use: { 'alchemist': 1 } },
                    'vodka': { name: 'Craft vodka at this stand', icon: [10, 10, "magixmod"], desc: 'At this stand an [alchemist] will craft [pot of vodka,Vodka], an [alcohol brews,Alcohol]. This drink harms [health] a lot, so take care of the [health] of your people.', use: { 'alchemist': 1 } },
                },
                effects: [
                    { type: 'convert', from: { 'alcohol pot': 0.1, 'water': 0.7, 'mundane water pot': 0.15, 'fruit': 0.6, 'sweet water pot': 0.25 }, into: { 'wine': 1 }, every: 4, mode: 'wine' },
                    { type: 'convert', from: { 'alcohol pot': 0.5, 'mundane water pot': 0.3, 'bubbling water pot': 0.05, 'water': 0.15 }, into: { 'pot of vodka': 1 }, every: 5, mode: 'vodka' },
                    { type: 'mult', value: 3, req: { 'science blessing': true } },
                ],
                category: 'alchemy',
            });
            new G.Unit({
                name: 'medicament brewing stand',
                desc: 'There [alchemist]s can brew healthy syrups that may heal [sick,sick people] and cure other diseases. Not very tasty, but good for everyone\'s [health]. You can craft [herb syrup], [essenced herb syrup], and [antidotum] here.',
                icon: [19, 5, "magixmod"],
                cost: { 'basic building materials': 4.3 },
                req: { 'alchemy': true, 'medicaments brewing': true },
                use: { 'alchemy zone': 0.5 },
                gizmos: true,
                modes: {
                    'herbsyrup': { name: 'Craft syrup out of herbs', icon: [5, 10, "magixmod"], desc: 'At this stand an [alchemist] will craft [herb syrup], a medicament used to heal people.', use: { 'alchemist': 1 } },
                    'antidotum': { name: 'Craft antidotum', icon: [4, 10, "magixmod"], desc: 'At this stand an [alchemist] will craft [antidotum], which can be used to get rid of poison effect with a large chance of success.', use: { 'alchemist': 1 } },
                    'EssHerbsyrup': { name: 'Craft syrup out of herbs and Nature essence', icon: [9, 10, "magixmod"], desc: 'At this stand an [alchemist] will craft [essenced herb syrup], a medicament that may be used to heal people who are severely [sick].', use: { 'alchemist': 1 } },
                },
                effects: [
                    { type: 'convert', from: { 'alcohol pot': 0.1, 'water': 0.7, 'mundane water pot': 0.15, 'herbs': 0.05, 'sweet water pot': 0.1 }, into: { 'antidotum': 1 }, every: 4, mode: 'antidotum' },
                    { type: 'convert', from: { 'salted water pot': 0.3, 'bubbling water pot': 0.05, 'water': 0.15, 'herbs': 0.25, 'nature essence': 0.2, 'mana': 0.01 }, into: { 'essenced herb syrup': 1 }, every: 5, mode: 'EssHerbsyrup', chance: 0.85 },
                    { type: 'convert', from: { 'sweet water pot': 0.5, 'water': 0.15, 'herbs': 0.5, 'fruit': 0.005 }, into: { 'herb syrup': 1 }, every: 5, mode: 'herbsyrup' },
                ],
                category: 'alchemy',
            });
            new G.Unit({
                name: 'school of alchemy',
                desc: 'This is the building where [adult]s can learn the basics of alchemy. Needs water to work though! //<small>you know why it needs water</small>',
                icon: [5, 6, "magixmod"],
                cost: { 'basic building materials': 1500, 'glass': 5, 'brick': 2 },
                use: { 'land of the Plain Island': 1, 'worker': 3 },
                upkeep: { 'water': 5 },
                effects: [
                    { type: 'waste', chance: 0.5 / 1000 },
                    { type: 'convert', from: { 'adult': 1 }, into: { 'alchemist': 1 }, every: 400 },
                ],
                req: { 'construction II': true },
                category: 'plainisleunit',
            });
            new G.Unit({
                name: 'drying rack',
                desc: '@This small rack may dry [leather] without any [worker]s, turning it into [dried leather]. [dried leather] is used to make even harder clothing, which decays much slower!',
                icon: [13, 3, "magixmod"],
                cost: { 'basic building materials': 100 },
                use: { 'land': 0.75 },
                effects: [
                    { type: 'waste', chance: 1 / 2000 },
                    { type: 'convert', from: { 'leather': 5 }, into: { 'dried leather': 5 }, every: 20 },
                    { type: 'mult', value: 3, req: { 'more capacious racks': true } },
                ],
                req: { 'weaving II': true, 't10': false },
                category: 'crafting',
            });
            new G.Unit({
                name: 'florist',
                desc: '@a subclass of [gatherer]s that collect [flowers] @has its use in both healing and painting',
                icon: [7, 11, "magixmod"],
                cost: {},
                req: { 'a gift from the mausoleum': true, 'plant lore II': true },
                use: { 'worker': 1 },
                category: 'production',
                effects: [
                    { type: 'gather', context: 'flowers', amount: 0.1, max: 0.4 },
                    { type: 'mult', value: 1.03, req: { 'hallow2': true } },
                    { type: 'mult', value: 1.05, req: { 'harvest rituals for flowers': 'on' } },
                    { type: 'convert', from: { 'paper': 12, 'ink': 3 }, into: { 'florist\'s notes': 1 }, every: 11, req: { 'noting': true }, chance: 1 / 95 },
                    { type: 'mult', value: 0.8, req: { 'se12': 'on' } },
                    { type: 'gather', what: { 'health': 0.01125 }, req: { 'mentors of nature III': true } },
                    { type: 'mult', value: 1.1, req: { 'fruit identification II': true } },
                    { type: 'mult', value: 2, req: { 'advanced flower gathering': true } },
                ],
            });
            new G.Unit({
                name: 'lodge on water',
                desc: 'Sadly, lodges do not work properly on water and are simply a waste of space.',
                icon: [36, 18, "magixmod"],
                cost: { 'archaic building materials': 60, 'log': 12, 'lumber': 50 },
                use: { 'wtr': 1 },
                gizmos: true,
                modes: {
                    'off': G.MODE_OFF,
                    'gatherers': { name: 'Gatherer\'s lodge', desc: 'Hire [gatherer]s.', req: { 'tribalism': true }, icon: [0, 2] },
                    'hunters': { name: 'Hunter\'s lodge', desc: 'Hire [hunter]s.', req: { 'hunting': true }, icon: [18, 2] },
                    'fishers': { name: 'Fisher\'s lodge', desc: 'Hire [fisher]s.', req: { 'fishing': true }, icon: [17, 2] },
                    'diggers': { name: 'Digger\'s lodge', desc: 'Hire [digger]s.', req: { 'digging': true }, icon: [7, 2] },
                    'woodcutters': { name: 'Woodcutter\'s lodge', desc: 'Hire [woodcutter]s.', req: { 'woodcutting': true }, icon: [8, 2] },
                    'artisans': { name: 'Artisan\'s lodge', desc: 'Hire [artisan]s.', req: { 'stone-knapping': true }, icon: [6, 2] },
                },
                effects: [
                ],
                //req: { 'construction II': true, 'water construction': true },
                req: { 'water construction': true, 'tribalism': false },
                category: 'civil',
            });
            new G.Unit({
                name: 'shelter on water',
                desc: '@provides 6 [housing]<>A small dwelling that can fit some [population,people]. It is settled on a secure wooden platform supported by small and thin wooden pillars.',
                icon: [14, 6, "magixmod"],
                cost: { 'basic building materials': 40, 'log': 15, 'lumber': 50, 'archaic building materials': 50 },
                use: { 'wtr': 1 },
                effects: [
                    { type: 'provide', what: { 'housing': 6 } },
                ],
                req: { 'water construction': true },
                category: 'housing',
            });
            new G.Unit({
                name: 'artisan of juice',
                desc: '@This subclass of [artisan] makes [sugar] from [sugar cane], and can also produce delicious [juices]!',
                icon: [15, 5, "magixmod"],
                cost: {},
                use: {},
                gizmos: true,
                //upkeep:{'food':0.2},
                modes: {
                    'sugar': { name: 'Extract sugar from sugar cane', icon: [15, 2, "magixmod"], desc: 'This artisan will only extract [sugar] out of [sugar cane]. At least he will craft needed ingredient of tasty [juices].', use: { 'worker': 1 } },
                    'juicesF': { name: 'Craft juices out of fruits', icon: [14, 3, "magixmod"], desc: 'This artisan will craft [juices] out of [fruit]s, [sugar] and [water]. They have a good taste. <b>:></b>', use: { 'worker': 1 } },
                    'juicesW': { name: 'Craft juices out of vegetables', icon: [17, 3, "magixmod"], desc: 'This artisan will craft [juices] out of [vegetables], [sugar] and [water]. They also have a good taste, but you cannot craft [juices] out of all [vegetables,Vegetable] types, so this mode is 10% less effective at conversion. <b>:)</b>', use: { 'worker': 1 }, req: { "moar juices": true } },
                    'juicesE': { name: 'Craft juices out of exotic fruits', icon: [10, 2, "magix2"], desc: 'This artisan will craft [exotic juices] out of [exotic fruit]s, [sugar] and [water]. These taste much better compared to normal [juices]! <b>:O</b>', use: { 'worker': 1 }, req: { "exotic blending": true } },
                },
                effects: [
                    { type: 'convert', from: { 'sugar cane': 1.5 }, into: { 'sugar': 1 }, every: 5, mode: 'sugar' },
                    { type: 'convert', from: { 'sugar': 1, 'fruit': 0.4, 'water': 1.25 }, into: { 'juices': 2 }, every: 5, mode: 'juicesF', req: { 'concentrated juices': false } },
                    { type: 'convert', from: { 'sugar': 1, 'vegetables': 0.4, 'water': 1.25 }, into: { 'juices': 1.8 }, every: 5, mode: 'juicesW', req: { 'concentrated juices': false } },
                    { type: 'convert', from: { 'sugar': 2, 'fruit': 0.8, 'water': 3.75 }, into: { 'juices': 4 }, every: 5, mode: 'juicesF', req: { 'concentrated juices': true } },
                    { type: 'convert', from: { 'sugar': 2, 'vegetables': 0.8, 'water': 3.75 }, into: { 'juices': 3.6 }, every: 5, mode: 'juicesW', req: { 'concentrated juices': true } },
                    { type: 'convert', from: { 'sugar': 1, 'exotic fruit': 0.4, 'water': 1.25 }, into: { 'exotic juices': 1.75 }, every: 5, mode: 'juicesE', req: { 'concentrated juices': false } },
                    { type: 'convert', from: { 'sugar': 2, 'exotic fruit': 0.4, 'water': 3.75 }, into: { 'exotic juices': 3.5 }, every: 5, mode: 'juicesE', req: { 'concentrated juices': true } },
                    { type: 'mult', value: 1.25, req: { 'crafting & farm rituals': 'on', 'power of the faith': true } },
                    { type: 'mult', value: 0.915, req: { 'se09': 'on' } },
                ],
                req: { 'juice-crafting': true, 't10': false },
                category: 'crafting',
            });
            new G.Unit({
                name: 'vegetable farm',
                desc: '@Specialized farm which will harvest tasty [vegetables] (mostly cabbages, carrots, and tomatoes) faster than [gatherer]s.',
                icon: [14, 2, "magixmod"],
                cost: { 'seeds': 200 },
                req: { 'agriculture': true },
                use: { 'worker': 8, 'land': 35, 'stone tools': 8 },
                upkeep: { 'water': 12 },
                category: 'production',
                effects: [
                    { type: 'gather', context: 'gather', what: { 'vegetables': 0.16 } },
                    { type: 'mult', value: 0.6, req: { 'droughtNew': true } },
                    { type: 'mult', value: 1.17, req: { 'crafting & farm rituals': 'on' } },
                    { type: 'mult', value: 1.8, req: { 'veggie fertilizer': true } },
                    { type: 'mult', value: 2.25, req: { 'gardening II': true } },
                    { type: 'mult', value: 1.2, req: { 'gardening III': true } }
                ],
            });
            new G.Unit({
                name: 'sugar cane farm',
                desc: '@Specialized farm which will harvest [sugar cane]s faster than [gatherer]s.',
                icon: [14, 7, "magixmod"],
                cost: { 'sugar cane': 500 },
                req: { 'agriculture': true, 'farm of the sugar cane': true },
                use: { 'worker': 8, 'land': 35, 'stone tools': 8 },
                upkeep: { 'water': 36 },
                category: 'production',
                effects: [
                    { type: 'gather', context: 'gather', what: { 'sugar cane': 0.85 } },
                    { type: 'mult', value: 0.6, req: { 'droughtNew': true } },
                    { type: 'mult', value: 1.17, req: { 'crafting & farm rituals': 'on' } },
                    { type: 'mult', value: 2.5, req: { 'more humid water': true } },
                    { type: 'mult', value: 3, req: { 'soil for moisture-loving plants': true } },
                    { type: 'mult', value: 3, req: { 'empowered canes': true } },
                    { type: 'mult', value: 4, req: { 'essenced soil for moisture-loving plants': true } },
                    { type: 'mult', value: 2.5, req: { 'backshift at farms': true } },
                    { type: 'mult', value: 2.25, req: { 'gardening II': true } },
                    { type: 'mult', value: 1.2, req: { 'gardening III': true } }
                ],
            });
            new G.Unit({//I was removed because I didn't change that much in game. I was a beet farm but I am going to be something different more useful
                name: 'crematorium',
                desc: 'Emballs and burns [corpse]s in a roaring fire. Then, all dust from the body is put into an [urn]. Uses [fire pit]s as upkeep.',
                icon: [31, 21, "magixmod"],
                req: { 'cremation': true },
                use: { 'worker': 3, 'land': 1 },
                cost: { 'basic building materials': 300 },
                upkeep: { 'fire pit': 3 },
                effects: [
                    { type: 'convert', from: { 'corpse': 14, 'pot': 14 }, into: { 'urn': 14 }, every: 5 },
                    { type: 'convert', from: { 'slain corpse': 14, 'pot': 14 }, into: { 'urn': 14 }, every: 15 },
                ],
                category: 'civil'
            });
            new G.Unit({
                name: 'essential conversion tank',
                desc: '@A tank that converts 500 [insight], [culture], [faith] and [influence] into their respective second tiers. <>You can specify which essential this tank will convert by switching the mode of this unit. It will only be able to convert when you obtain enough of that particular [insight,Essential]!',
                icon: [26, 19, "magixmod"],
                cost: { 'glass': 8000, 'brick': 5000 },
                req: { 'eotm': true },
                use: { 'worker': 2, 'land': 1 },
                upkeep: { 'mana': 50 },
                limitPer: { 'population': 1e5 },
                category: 'discovery',
                gizmos: true,
                modes: {
                    'insight': { name: 'Insight to Insight II', icon: [18, 19, "magixmod"], desc: 'This tank will convert every 500 [insight] into 1 [insight II].' },
                    'culture': { name: 'Culture to Culture II', icon: [19, 19, "magixmod"], desc: 'This tank will convert every 500 [culture] into 1 [culture II].' },
                    'faith': { name: 'Faith to Faith II', icon: [17, 19, "magixmod"], desc: 'This tank will convert every 500 [faith] into 1 [faith II].' },
                    'influence': { name: 'Influence to Influence II', icon: [20, 19, "magixmod"], desc: 'This tank will convert every 500 [influence] into 1 [influence II].' },
                },
                effects: [
                    { type: 'convert', from: { 'insight': 500 }, into: { 'insight II': 1 }, every: 10, mode: 'insight', req: { 'essential conversion tank overclock I': false } },
                    { type: 'convert', from: { 'culture': 500 }, into: { 'culture II': 1 }, every: 10, mode: 'culture', req: { 'essential conversion tank overclock I': false } },
                    { type: 'convert', from: { 'faith': 500 }, into: { 'faith II': 1 }, every: 10, mode: 'faith', req: { 'essential conversion tank overclock I': false, 'se11': 'off' } },
                    { type: 'convert', from: { 'faith': 500 }, into: { 'faith II': 1.5 }, every: 10, mode: 'faith', req: { 'essential conversion tank overclock I': false, 'se11': 'on' } },
                    { type: 'convert', from: { 'influence': 500 }, into: { 'influence II': 1 }, every: 10, mode: 'influence', req: { 'essential conversion tank overclock I': false } },
                    { type: 'convert', from: { 'insight': 500 }, into: { 'insight II': 1 }, every: 9, mode: 'insight', req: { 'essential conversion tank overclock I': true, 'smartness of essentials': false } },
                    { type: 'convert', from: { 'culture': 500 }, into: { 'culture II': 1 }, every: 9, mode: 'culture', req: { 'essential conversion tank overclock I': true, 'smartness of essentials': false } },
                    { type: 'convert', from: { 'faith': 500 }, into: { 'faith II': 1 }, every: 9, mode: 'faith', req: { 'essential conversion tank overclock I': true, 'smartness of essentials': false, 'se11': 'off' } },
                    { type: 'convert', from: { 'faith': 500 }, into: { 'faith II': 1.5 }, every: 9, mode: 'faith', req: { 'essential conversion tank overclock I': true, 'smartness of essentials': false, 'se11': 'on' } },
                    { type: 'convert', from: { 'influence': 500 }, into: { 'influence II': 1 }, every: 9, mode: 'influence', req: { 'essential conversion tank overclock I': true, 'smartness of essentials': false } },
                    { type: 'convert', from: { 'insight': 550 }, into: { 'insight II': 1.5 }, every: 9, mode: 'insight', req: { 'smartness of essentials': true } },
                    { type: 'convert', from: { 'culture': 550 }, into: { 'culture II': 1.2 }, every: 9, mode: 'culture', req: { 'smartness of essentials': true } },
                    { type: 'convert', from: { 'faith': 550 }, into: { 'faith II': 1.2 }, every: 9, mode: 'faith', req: { 'smartness of essentials': true, 'se11': 'off' } },
                    { type: 'convert', from: { 'faith': 550 }, into: { 'faith II': 1.8 }, every: 9, mode: 'faith', req: { 'smartness of essentials': true }, 'se11': 'on' },
                    { type: 'convert', from: { 'influence': 550 }, into: { 'influence II': 1.2 }, every: 9, mode: 'influence', req: { 'smartness of essentials': true } },
                    { type: 'mult', value: 1.5, req: { 'people of the arts II': true }, mode: 'culture' },
                    { type: 'mult', value: 1.25, req: { 'leaves of wisdom': true } },
                    { type: 'mult', value: 1.25, req: { 'branches of wisdom': true } },
                ]
            });
            new G.Unit({
                name: 'farm of smokers',
                desc: 'At this farm, a bunch of smoke is released into the sky every single day. From this farm, your people will be able to gather useful [fire essence].',
                icon: [28, 7, "magixmod"],
                cost: { 'essenced seeds': 300, 'fire essence': 1000, 'herbs': 100 },
                req: { 'smokers & Windferns': true },
                use: { 'worker': 8, 'land of the Plain Island': 15, 'worker': 2 },
                upkeep: { 'water': 14, 'fire essence': 1, 'mana': 7 },
                category: 'plainisleunit',
                effects: [
                    { type: 'gather', context: 'gather', what: { 'fire essence': 11 } },
                    { type: 'mult', value: 1.5, req: { 'gt6': true } },
                    { type: 'mult', value: 1.1, req: { 'nutritious magical soil': true } },
                    { type: 'mult', value: 1.1, req: { 'juicy nutritious magical soil': true } },
                ],
            });
            new G.Unit({
                name: 'farm of windferns',
                desc: 'From his white leaves, you can find tiny grains that can fly away from your hand quickly. From this farm, your people can gather useful [wind essence].',
                icon: [28, 8, "magixmod"],
                cost: { 'essenced seeds': 300, 'wind essence': 1000, 'herbs': 100 },
                req: { 'smokers & Windferns': true },
                use: { 'worker': 8, 'land of the Plain Island': 15, 'worker': 2 },
                upkeep: { 'water': 14, 'wind essence': 1, 'mana': 7 },
                category: 'plainisleunit',
                effects: [
                    { type: 'gather', context: 'gather', what: { 'wind essence': 11 } },
                    { type: 'mult', value: 1.5, req: { 'gt6': true } },
                    { type: 'mult', value: 1.1, req: { 'nutritious magical soil': true } },
                    { type: 'mult', value: 1.1, req: { 'juicy nutritious magical soil': true } },
                ],
            });
            new G.Unit({
                name: 'farm of holy roses',
                desc: 'Holy rose\'s petals radiate a lot of light (so much so that sometimes it is blinding)! Carefully gathered can be disenchanted allowing you to obtain some useful [holy essence].',
                icon: [28, 4, "magixmod"],
                cost: { 'essenced seeds': 300, 'holy essence': 1000, 'herbs': 100 },
                req: { 'holy roses farm': true },
                use: { 'worker': 8, 'land of the Plain Island': 15, 'worker': 2 },
                upkeep: { 'water': 14, 'holy essence': 1, 'mana': 7 },
                category: 'plainisleunit',
                effects: [
                    { type: 'gather', context: 'gather', what: { 'holy essence': 11 } },
                    { type: 'mult', value: 1.5, req: { 'gt6': true } },
                    { type: 'mult', value: 1.1, req: { 'nutritious magical soil': true } },
                    { type: 'mult', value: 1.1, req: { 'juicy nutritious magical soil': true } },
                ],
            });
            new G.Unit({
                name: 'farm of watorchids',
                desc: 'This farm is muddy and wet, which is required to start farming [water essence]. Small pools of essenced droplets can be collected from these plants, producing some rather useful [water essence]!',
                icon: [28, 10, "magixmod"],
                cost: { 'essenced seeds': 300, 'water essence': 1000, 'herbs': 100 },
                req: { 'withering tulips & Watorchids': true },
                use: { 'worker': 8, 'land of the Plain Island': 15, 'worker': 2 },
                upkeep: { 'water': 21, 'water essence': 1, 'mana': 21 },
                category: 'plainisleunit',
                effects: [
                    { type: 'gather', context: 'gather', what: { 'water essence': 11 } },
                    { type: 'mult', value: 1.5, req: { 'gt6': true } },
                    { type: 'mult', value: 1.1, req: { 'nutritious magical soil': true } },
                    { type: 'mult', value: 1.1, req: { 'juicy nutritious magical soil': true } },
                ],
            });
            new G.Unit({
                name: 'farm of withering tulips',
                desc: 'These tulips darken fires from far far away. Farmers of these tulips don\'t want to share the way how do they collect the useful [dark essence] out of these flowers, and those mysteries are well-kept!',
                icon: [28, 9, "magixmod"],
                cost: { 'essenced seeds': 300, 'dark essence': 1000, 'herbs': 100 },
                req: { 'withering tulips & Watorchids': true },
                use: { 'worker': 8, 'land of the Plain Island': 15, 'worker': 2, 'wand': 10 },
                upkeep: { 'water': 14, 'dark essence': 1, 'mana': 7 },
                category: 'plainisleunit',
                effects: [
                    { type: 'gather', context: 'gather', what: { 'dark essence': 11 } },
                    { type: 'mult', value: 1.5, req: { 'gt6': true } },
                    { type: 'mult', value: 1.1, req: { 'nutritious magical soil': true } },
                    { type: 'mult', value: 1.1, req: { 'juicy nutritious magical soil': true } },
                ],
            });
            new G.Unit({
                name: 'farm of naturdaisies',
                desc: 'Naturdaisies like to grow on big "trees" that can release these essenced beauties. Then people gather them and disenchant them, gaining useful [nature essence] from them.',
                icon: [28, 6, "magixmod"],
                cost: { 'essenced seeds': 300, 'nature essence': 1000, 'herbs': 100 },
                req: { 'lightlilies & naturdasies': true },
                use: { 'worker': 8, 'land of the Plain Island': 15, 'worker': 2, 'wand': 10 },
                upkeep: { 'water': 14, 'nature essence': 1, 'mana': 7 },
                category: 'plainisleunit',
                effects: [
                    { type: 'gather', context: 'gather', what: { 'nature essence': 11 } },
                    { type: 'mult', value: 1.5, req: { 'gt6': true } },
                    { type: 'mult', value: 1.1, req: { 'nutritious magical soil': true } },
                    { type: 'mult', value: 1.1, req: { 'juicy nutritious magical soil': true } },
                ],
            });
            new G.Unit({
                name: 'farm of lightlilies',
                desc: 'Most lightlilies have petals with a shiny lightning bolt shape in the center. People are generally cautious around them due to their electric nature. Cutting the stalk and disenchanting it allows people to gather some useful [lightning essence].',
                icon: [28, 5, "magixmod"],
                cost: { 'essenced seeds': 300, 'lightning essence': 1000, 'herbs': 100 },
                req: { 'lightlilies & naturdasies': true },
                use: { 'worker': 8, 'land of the Plain Island': 15, 'worker': 2, 'wand': 10 },
                upkeep: { 'water': 14, 'lightning essence': 1, 'mana': 7 },
                category: 'plainisleunit',
                effects: [
                    { type: 'gather', context: 'gather', what: { 'lightning essence': 11 } },
                    { type: 'mult', value: 1.5, req: { 'gt6': true } },
                    { type: 'mult', value: 1.1, req: { 'nutritious magical soil': true } },
                    { type: 'mult', value: 1.1, req: { 'juicy nutritious magical soil': true } },
                ],
            });
            new G.Unit({
                name: 'treehouse',
                desc: '@provides 2 [housing]<>A tiny pied-a-terre built inside one of the Paradise trees.',
                icon: [6, 21, "magixmod"],
                cost: { 'lumber': 150 },
                use: { 'land of the Paradise': 1 / 3 },
                limitPer: { 'land': 5, 'population': 80 },
                effects: [
                    { type: 'provide', what: { 'housing': 2 } },
                ],
                req: { 'paradise housing': true },
                category: 'paradiseunit',
            });
            new G.Unit({
                name: 'cozy lodge',
                desc: '@provides 5 [housing]<>A small-but-sweet lodge where everyone feels safe and warm inside.',
                icon: [3, 21, "magixmod"],
                cost: { 'basic building materials': 150 },
                use: { 'land of the Paradise': 1 },
                limitPer: { 'land': 10, 'population': 100 },
                effects: [
                    { type: 'provide', what: { 'housing': 5 } },
                ],
                req: { 'paradise housing': true },
                category: 'paradiseunit',
            });
            new G.Unit({
                name: 'cozy paradise hut',
                desc: '@provides 6 [housing]<>A small dwelling that is cozy and a place where your people can lead a calm and happy life.',
                icon: [2, 21, "magixmod"],
                cost: { 'basic building materials': 200 },
                use: { 'land of the Paradise': 1 },
                limitPer: { 'land': 15, 'population': 125 },
                effects: [
                    { type: 'provide', what: { 'housing': 6 } },
                ],
                req: { 'paradise housing': true },
                category: 'paradiseunit',
            });
            new G.Unit({
                name: 'Hardened house',
                desc: '@provides 16 [housing]<>This is a huge house that can fit 2 or 3 large families at the same time. Due to its ground stability requirements, it is a far more limited type of [housing]! Inside of a [Hardened house], people feel safe and will probably never consider moving away.',
                icon: [4, 21, "magixmod"],
                cost: { 'basic building materials': 1200, 'glass': 5 },
                use: { 'land of the Paradise': 1 },
                limitPer: { 'land': 35, 'population': 400 },
                effects: [
                    { type: 'provide', what: { 'housing': 16 } },
                ],
                req: { 'paradise housing': true },
                category: 'paradiseunit',
            });
            new G.Unit({
                name: 'musician',
                desc: '@generates [culture] and [happiness] every day<>[musician]s gather the tribe together during twilight to sing and play songs that people know to entertain them, providing significant [happiness] and [culture]! //<small>(Their favorite note is C#. Maybe it means something?)</small>',
                icon: [28, 18, "magixmod"],
                cost: { 'basic building materials': 10 },
                use: { 'worker': 1 },
                upkeep: { 'food': 0.1 },
                limitPer: { 'population': 400 },
                effects: [
                    { type: 'gather', what: { 'happiness': 0.28 } },
                    { type: 'gather', what: { 'happiness': 0.28 }, req: { 'music instruments II': true } },
                    { type: 'gather', what: { 'culture': 0.125 } },
                    { type: 'gather', what: { 'culture II': 0.000005 }, req: { 'cultural people': true } },
                    { type: 'mult', value: 0.9, req: { 'se12': 'on' } },
                    { type: 'mult', value: 2, req: { 'se03': 'on' } },
                ],
                req: { 'music instruments': true },
                category: 'cultural',
            });
            new G.Unit({
                name: 'fishers & hunters camp',
                displayName: 'Hunting and fishing camp',
                desc: '@An camp where [hunter]s and [fisher]s get trained to hunt [food]. //There, they learn improve their craft. //A single [fishers & hunters camp] will hire 400 [worker]s divided into 200 [hunter]s and 200 [fisher]s! //[hunter]s that work at this camp also have a very tiny chance to have accidents. //This camp might be costly, but it gathers delectable [food] more easily!',
                icon: [5, 23, "magixmod"],
                wideIcon: [3, 23, "magixmod"],
                cost: { 'basic building materials': 4850, 'food': 2500, 'paper': 3000, 'thread': 500 },
                use: { 'worker': 400, 'land': 44, 'armor set': 200, 'fishing net': 200, 'metal weapons': 200, 'stone weapons': 100, 'crossbow': 200, 'arrow': 30, 'bow': 200 },
                upkeep: { 'food': 75, 'fire pit': 2, 'bugs': 3 },
                limitPer: { 'population': 40000, 'land': 2500 },
                effects: [
                    {
                        type: 'function', func: function (me) {
                            var arrowUpkeep = 30;
                            if (G.getRes('arrow').amount > arrowUpkeep * me.amount) {
                                G.lose('arrow', arrowUpkeep, 'unit upkeep');
                            }
                        }
                    },
                    { type: 'gather', context: 'fish', what: { 'seafood': 1200 } },
                    { type: 'gather', context: 'hunt', amount: 1400, max: 2000 },
                    { type: 'gather', context: 'hunt', amount: 490, max: 700, req: { 'se04': 'on' } },
                    { type: 'gather', context: 'fish', what: { 'seafood': 400 }, req: { 'se05': 'on' } },
                    { type: 'gather', context: 'fish', what: { 'ink': 2 }, req: { 'ink-fishing': true } },
                    { type: 'convert', from: { 'adult': 2 }, into: { 'wounded': 2 }, every: 7, chance: 1 / 115 },
                    { type: 'mult', value: 1.35, req: { 'se05': true } },
                    { type: 'mult', value: 1.35, req: { 'harvest rituals': 'on' } },
                    { type: 'convert', from: { 'meat': 4, 'seafood': 3 }, into: { 'cooked meat': 4, 'seafood': 3 }, every: 2, req: { 'camp-cooking': true } },
                    { type: 'function', func: unitGetsConverted({ 'wounded': 1 }, 0.001, 0.005, true, '[X] [people] wounded while camp hunting.', 'hunter was', 'hunters were'), chance: 1 / 1200, req: {} },
                ],
                req: { 'hunters & fishers unification': true },
                category: 'production',
            });
            new G.Unit({
                name: 'dark wormhole',
                desc: 'A wormhole built in the depths of the Underworld where darkness is everywhere. [dark wormhole,Wormholes] provide 24M [burial spot]s but will require some upkeep, and can only be built at very specific locations. This may get new abilities later on...',
                icon: [13, 22, "magixmod"],
                cost: { 'gem block': 4, 'precious building materials': 5e3 },
                effects: [
                    { type: 'provide', what: { 'burial spot': 2.4e7 } },
                    { type: 'provide', what: { 'corpsedecaypoint': 1 } },
                ],
                upkeep: { 'combat potion pot': 6, 'dark essence': 80, 'mana': 50 },
                use: { 'land of the Underworld': 10, 'worker': 5, 'worker': 3 },
                req: { 'burial wormhole 2/2': true },
                limitPer: { 'land': 3000, 'population': 50000 },
                category: 'underworld',
            });

            new G.Unit({
                name: 'plain island portal', displayName: '<font color="yellow">Plain Island Portal</font>',
                desc: '@opens a portal to a huge <b>Plain Island</b>. It is a creation made of ideas from various dreams and wizards.//With this portal your dream can become real! You will recieve some [land of the Plain Island] upon activation of the portal. Upon completion, you will be able to rename this island.',
                wideIcon: [28, 29, "magixmod"],
                wideIcon2: [7, 3, "magixmod"],
                icon: [29, 29, "magixmod"],
                tick: function (me, tick) {
                    G.getDict('plain island portal').desc = '@opens a portal to a huge <b>new island</b> with new units and techs! It is a creation built upon the ideas taken from various dreams and wizards.//With this portal your dream can become real! You will recieve some [land of the Plain Island] upon activation of the portal. Upon completion, you will be able to rename this island.'
                },
                wonder: '.',
                cost: { 'marble': 100, 'gems': 10 },
                costPerStep: { 'marble': 250, 'basic building materials': 50, 'mana': 3500 },
                costPerStep2: { 'mana': 14000, 'dark essence': 5000, 'fire essence': 5000, 'nature essence': 5000, 'wind essence': 5000, 'water essence': 5000, 'lightning essence': 5000 }, //stage 2
                finalStepCost: { 'population': 100, 'magic essences': 40000, 'plain island tablet': -1, 'land of the Plain Island': -22000 },
                use: { 'land': 10 },
                steps: 100,
                req: { 'first portal to new world': true, 'belief in portals': true },
                category: 'dimensions',
                type: 'portal',
            });
            new G.Unit({
                name: 'paradise portal', displayName: '<font color="#E0CE00">Portal to the Paradise</font>',
                desc: 'Opens a portal to a huge <b>God\'s Paradise</b>: a troublesome project, guided by God\'s worship!//A dream of Paradise, angels, and much more could become real. Completing this will provide +21.5k [land of the Paradise] that you can use for various buildings!',
                wideIcon: [31, 29, "magixmod"],
                wideIcon2: [7, 4, "magixmod"],
                icon: [32, 29, "magixmod"],
                wonder: '.',
                steps: 100,
                cost: { 'precious building materials': 3500, 'insight': 50, 'faith': 150, 'fire essence': 450, 'water essence': 475, 'dark essence': 375, 'wind essence': 2750, 'lightning essence': 377, 'nature essence': 10075, 'precious metal ingot': 1e3, 'deitytemplePoint': 400 },
                use: { 'land': 10 },
                costPerStep: { 'marble': 1700, 'gem block': 15, 'gems': 8, 'various cut stones': 2500 },
                costPerStep2: { 'mana': 184000, 'dark essence': 14200, 'fire essence': 14250, 'nature essence': 14300, 'wind essence': 14150, 'water essence': 14500, 'lightning essence': 14225 },
                req: { '2nd portal sky': true, 'belief in portals': true },
                finalStepCost: { 'population': 1000, 'magic essences': 100000, 'faith': 175, 'paradise tablet': -1, 'land of the Paradise': -21500 },
                category: 'dimensions',
                type: 'portal',
            });
            new G.Unit({
                name: 'underworld', displayName: '<font color="#d37220">Underworld</font>',
                desc: 'Now you may enter the Underworld! A new creepy, unstable, and dangerous world will become open for you!//<small>fun</small>',
                icon: [9, 5, "magixmod"],
                wideIcon: [7, 5, "magixmod"],
                cost: { 'precious building materials': 35000, 'insight': 1500, 'faith': 250, 'fire essence': 95000, 'water essence': 47500, 'dark essence': 157500, 'wind essence': 27500, 'lightning essence': 37750, 'nature essence': 10750 },
                effects: [
                    { type: 'provide', what: { 'underworld tablet': 1 } },
                    { type: 'provide', what: { 'land of the Underworld': 150 } }
                ],
                use: { 'land': 1 },
                req: { 'a feeling from the Underworld': true, 'third passage to new world': true },
                limitPer: { 'land': 1000000000 },//It is something like max 1
                category: 'dimensions',
            });
            new G.Unit({
                name: 'temple of deities',
                displayName: 'Temple of Deities',
                desc: 'A mystical monument dedicated to angels, archangels, Seraphins, and many other deities.//A temple housing a tomb deep under its rocky platform, where the Temple\'s relics lie and the final bastion for your religion in case it falls. @The tower it does have is way above the world\'s clouds, and despite the fact that it is freezing up there, some brave people often pray to their God there or listen to heavenly symphonies and hums from up above.',
                wonder: 'heavenly',
                icon: [1, 11, "magixmod"],
                wideIcon: [0, 11, "magixmod"],
                cost: { 'basic building materials': 35000, 'gem block': 10 },
                costPerStep: { 'basic building materials': 2500, 'precious building materials': 1250, 'gem block': 2, 'concrete': 25, 'deitytemplePoint': -1 },
                steps: 300,
                type: 'stepByStep',
                messageOnStart: 'You begin the construction of the Temple. Its highest tower is a pass between land of people and sky of angels. No one may go on top unless it is coated. This temple will be the last bastion of your religion and a storage place for relics. Your people are building this while full of hope and glory!',
                finalStepCost: { 'population': 1000, 'precious building materials': 25000, 'faith': 100, 'influence': 75, 'basic building materials': 3000, 'deitytemplePoint': -100 },
                finalStepDesc: 'To complete the giant Temple, some of your [population,people] are needed to finish the Temple. They must be sacrificed to accompany you as servants and Angels of the Afterlife, combined with some other resources. Are you ready?',
                use: { 'land': 50 },
                //require:{'worker':10,'stone tools':10},
                req: { 'monument-building II': true },
                category: 'wonder',
            });
            //Revenants trait wonder. People want to send these corpses right into its coils
            new G.Unit({
                name: 'the cemetarium',
                displayName: 'The Cemetarium',
                desc: '@leads to <b>Deadly, revenantic</b><>A big cemetary full of hostility and where [revenants] live with a second life.//A realm is around it, providing a burial for [wild corpse]s. Even if most souls are dark, some light souls also live here. For each step that you perform for the building, you will get 6,000 [burial spot]s! <i>Let these corpses go into their rightenous home please!</i>',
                wonder: 'deadly, revenantic',
                icon: [1, 16, "magixmod"],
                wideIcon: [0, 16, "magixmod"],
                cost: { 'basic building materials': 1000, 'gem block': 30 },
                costPerStep: { 'basic building materials': 2500, 'archaic building materials': 1500, 'burial spot': -6000, 'cemetarium construction point': -1 },
                steps: 270,
                messageOnStart: 'You begin the construction of The Cemetarium. You think that wild corpses will go there to leave us alone. I want calmness, at any price. It is the right choice. I will make my soldiers take these living souls to here.',
                finalStepCost: { 'corpse': 100, 'faith': 100, 'dark essence': 25000, 'cobalt ingot': 1000, 'burial spot': -15000 },
                finalStepDesc: 'To complete this wonder in the hope of wild corpses leaving you alone for some time, you will need to pay a hefty price in order to finish it.',
                use: { 'land': 100 },
                require: { 'worker': 40, 'stone tools': 10 },
                req: { 'monument-building II': true, 'revenants': true, 'dark wonder': true },
                category: 'wonder',
            });
            //WonderFULL
            new G.Unit({
                name: 'fortress of cultural legacy',
                displayName: 'Fortress of Cultural Legacy',
                desc: '@leads to the <b>Sacrificed for culture victory</b><>This is a fortress built out of [precious building materials] in the name of [storyteller,people of culture]! It is their home a place where they may give their creations for future generations. This wonder is tied to [culture] and [inspiration] so they will be required during construction. <>Inside of the Fortress, people store the most important and most beautiful arts, statues, and sculptures of their people, which makes this culture immune to perditions.//<small>wonderFULL indeed</small>',
                wonder: 'sacrificed for culture',
                icon: [6, 12, "magixmod"],
                wideIcon: [choose([9, 12, 15]), 17, "magixmod", 5, 12, "magixmod"],
                cost: { 'basic building materials': 1500, 'precious building materials': 400, 'inspiration': 10 },
                costPerStep: { 'basic building materials': 2500, 'precious building materials': 500, 'culture': 400, 'inspiration': 1, 'glass': 1, 'fortress construction point': -1 },
                steps: 200,
                messageOnStart: 'You began the construction of Fortress of Cultural Legacy. Your people are confident that the artistry and ideas within the fortress will last for centuries to come!',
                finalStepCost: { 'inspiration': 125, 'population': 2000, 'precious building materials': 4500, 'statuette': 250, 'wooden statuette': 150, 'gem block': 50, 'culture': 650 },
                finalStepDesc: 'To complete the wonder and prevent culture and traditions from being perditioned...you need to perform that final step.',
                use: { 'land': 10, 'worker': 10, 'metal tools': 10 },
                req: { 'monument-building': true, 'cultural roots': true },
                category: 'cultural',
            });
            new G.Unit({
                name: 'complex of dreamers',
                displayName: 'Complex of Dreamers',
                desc: '@leads to the <b>Insight-ly victory</b><>This fascinating complex is built at the bottom of a [Wizard Complex] to support [dreamer]s. This wonder will empower [insight] if the final step is finished! It requires plenty of [insight] and [wisdom] during construction. <>The core collects all ideas and dreams of all [dreamer]s, philosophers and others who use and spread knowledge.',
                wonder: 'insight-ly',
                icon: [choose([1, 4, 7]), 17, "magixmod"],
                wideIcon: [choose([0, 3, 6]), 17, "magixmod"],
                cost: { 'basic building materials': 1000, 'precious building materials': 500, 'wisdom': 10 },
                costPerStep: { 'basic building materials': 2500, 'precious building materials': 500, 'insight': 800, 'wisdom': 2, 'complex construction point': -1 },
                steps: 200,
                messageOnStart: 'You began the construction of Complex of Dreamers. The complex looks like it\'s not from this world when night arrives.',
                finalStepCost: { 'wisdom': 200, 'population': 2500, 'precious building materials': 4500, 'gem block': 50, 'insight': 2500 },
                finalStepDesc: 'To complete the wonder and make your whole civilization much smarter, you will need to perform a final step.',
                use: { 'wizard': 25, 'worker': 10, 'metal tools': 10 },
                upkeep: { 'mana': 15 },
                req: { 'monument-building': true, 'roots of insight': true },
                category: 'discovery',
            });
            new G.Unit({
                name: 'pagoda of democracy',
                displayName: 'Pagoda of Democracy',
                desc: '@leads to the <b>Democration victory</b><>The rather charming and nice-looking pagoda looms over a forest of cherry blossoms that represents justice and beliefs in freedom. It is more political thing so that\'s why you see it in political category. This wonder is like fertilizer for the roots of justice. This wonder is tied to [influence] and [authority] so they will be required during construction.',
                wonder: 'democration',
                icon: [6, 13, "magixmod"],
                wideIcon: [5, 13, "magixmod"],
                cost: { 'basic building materials': 1000, 'precious building materials': 500 },
                costPerStep: { 'basic building materials': 2500, 'precious building materials': 500, 'influence': 60, 'authority': 0.25, 'pagoda construction point': -1 },
                steps: 200,
                messageOnStart: 'You began the construction of Pagoda of Democracy. Over the blossoms it looks like the most beautiful place you have ever seen. Some people say that the Pagoda is even taller than the Mausoleum!',
                finalStepCost: { 'authority': 25, 'population': 2000, 'precious building materials': 4500, 'gem block': 50 },
                finalStepDesc: 'To complete the wonder and make justice and democration last even longer, you need to do the final step.',
                use: { 'land': 10, 'worker': 10, 'metal tools': 10 },
                req: { 'monument-building': true, 'political roots': true },
                category: 'political',
            });
            new G.Unit({
                name: 'New world',
                displayName: 'A brand-new world',
                desc: 'Step-by-step digging will lead people to a new and rather strange world. Unfortunately, it won\'t be as safe as you thought it would be. After finishing this step of activation, you need to ascend by it.',
                wonder: 'in the underworld',
                icon: [8, 5, "magixmod"],
                wideIcon: [6, 19, "magixmod", 7, 5, "magixmod"],
                cost: { 'basic building materials': 1500 },
                costPerStep: { 'dark essence': 150, 'basic building materials': 150, 'gem block': 1, 'population': 3, 'mana': 3000, 'new world point': -1 },
                steps: 1111,
                messageOnStart: 'Your people started digging down right into the core of the mortal world. The deeper they mine, the warmer it is there. What could possibly be inside this weird world?',
                finalStepCost: { 'population': 2000, 'gem block': 500, 'gold block': 50, 'new world point': -389 },
                finalStepDesc: '<font color="fuschia">To complete the final step of activating the passage to the Underworld, you need to ascend first.</font>',
                use: { 'land': 1, 'worker': 40, 'metal tools': 40, 'armor set': 40, 'metal weapons': 5 },
                category: 'dimensions',
                req: { 'a feeling from the Underworld': false, 'third passage to new world': true }
            });
            new G.Unit({
                name: 'fortress of magicians',
                displayName: 'Fortress of magicians',
                desc: '@leads to <b>Magical victory</b> //A wonder that represents the wisdom and power of your [wizard]s and their [magic essences,Magic]. //Built at a tall mountain and filled with magic, it is absolutely full with magical properties!',
                icon: [10, 22, "magixmod"],
                wideIcon: [9, 22, "magixmod"],
                cost: { 'basic building materials': 1500 },
                costPerStep: { 'mana': 25000, 'precious building materials': 120, 'basic building materials': 1000, 'concrete': 5, 'strong metal ingot': 80 },
                steps: 200,
                messageOnStart: 'Your people who worship magic and believe in the power of the essences started building a wonder that will be related to that.<br>Will magic award your and your people\'s hard work?',
                finalStepCost: { 'population': 5000, 'fire essence': 5e4, 'lightning essence': 5e4, 'dark essence': 5e4, 'wind essence': 5e4, 'nature essence': 5e4, 'water essence': 5e4, 'holy essence': 5e4 },
                finalStepDesc: 'To complete this giant wonder, 50k [fire essence,Fire], [water essence,Water], [nature essence,Nature], [dark essence,Dark], [lightning essence,Lightning], [wind essence,Wind], and [holy essence,Holy] essence must be sacrificed along with some of your [population] in order to cultivate [magic essences,Magic]!',
                use: { 'land': 15 },
                category: 'wonder',
                wonder: 'magical',
                type: 'stepByStep',
                req: { 'magic adept': true }
            });
            //Seasonal content units
            new G.Unit({
                name: 'artisan of new year',
                displayName: 'Artisan of the New Year',
                desc: 'This guy can craft New Year fireworks as a celebration, and will consume [paper] and [thread] to finish it up.',
                icon: [19, 0, 'seasonal'],
                cost: {},
                use: { 'worker': 1 },
                upkeep: { 'thread': 0.30, 'paper': 0.3 },
                effects: [
                    { type: 'gather', what: { 'blue firework': 0.75 }, every: 3 },
                    { type: 'gather', what: { 'orange firework': 0.75 }, every: 3 },
                    { type: 'gather', what: { 'firecracker': 1 }, every: 3 },
                    { type: 'gather', what: { 'dark blue firework': 0.5 }, every: 6, req: { 'dark essenced fireworks': true } },
                    { type: 'gather', what: { 'dark orange firework': 0.5 }, every: 6, req: { 'dark essenced fireworks': true } },
                    { type: 'mult', value: 1.1, req: { 'ground tools': true } },
                ],
                req: { 'culture of celebration': true, 'firework crafting': true, 'tribalism': false },
                category: 'seasonal',
                //limitPer:{'land':40},
            });
            new G.Unit({
                name: 'firework launcher',
                desc: 'Here, fireworks are launched right up into the sky. This generates quite a bit of [happiness] for every batch of fireworks launched up into the sky.',
                icon: [18, 0, 'seasonal'],
                cost: { 'food': 10 },
                use: { 'worker': 1, 'land': 1 },
                effects: [
                    { type: 'convert', from: { 'orange firework': 1 }, into: { 'happiness': 75 }, every: 2, context: 'launching' },
                    { type: 'convert', from: { 'blue firework': 1 }, into: { 'happiness': 75 }, every: 2, context: 'launching' },
                    { type: 'convert', from: { 'dark blue firework': 1 }, into: { 'happiness': 75 }, every: 2, context: 'launching' },
                    { type: 'convert', from: { 'dark orange firework': 1 }, into: { 'happiness': 75 }, every: 2, context: 'launching' },
                ],
                req: { 'culture of celebration': true, 'firework launching': true, 'tribalism': false },
                category: 'seasonal',
                //limitPer:{'land':40},
            });
            new G.Unit({
                name: 'heavy warehouse',
                desc: '@provides 9,000 [material storage]<>A large and very hard-to-destroy building for storing materials. Staffed with six guards and one leader to prevent theft or evil forces from appear near the warehouse.//<small>storage9000</small>',
                icon: [30, 12, "magixmod"],
                cost: { 'basic building materials': 1500, 'cobalt ingot': 1000, 'precious building materials': 100 },
                use: { 'land of the Underworld': 5 },
                staff: { 'worker': 6, 'armor set': 6, 'metal weapons': 6, 'worker': 1 },
                effects: [
                    { type: 'provide', what: { 'added material storage': 9000 } },
                    { type: 'provide', what: { 'added material storage': 3150 }, req: { 'well stored': true } },
                    { type: 'provide', what: { 'added material storage': 4950 }, req: { 'well stored 2': true } },
                    { type: 'waste', chance: 0.00000001 }
                ],
                req: { 'Storage at the bottom of the world': true },
                category: 'underworld',
            });
            new G.Unit({
                name: 'temple of the Paradise',
                desc: '@leads to the <b>Victory next to the God</b>. //A big, precious temple which is the homeland of Seraphins and the God. It is a temple that is supported by a gigantic [cloud] fused together. It glows with [ambrosium shard,Ambrosium]!',
                wonder: 'next to the God',
                icon: [9, 25, "magixmod"],
                wideIcon: [8, 25, "magixmod"],
                cost: { 'basic building materials': 100000, 'precious building materials': 5000, 'gold block': 100, 'platinum block': 10, 'cloud': 40000, 'ambrosium shard': 10000 },
                costPerStep: { 'basic building materials': 1000, 'precious building materials': 500, 'gold block': 10, 'platinum block': 1, 'cloud': 4444, 'faith II': 1, 'ambrosium shard': 1000, 'godTemplePoint': -1 },
                steps: 400,
                messageOnStart: 'The construction of the <b>Temple of The Paradise</b> has begun. You are full of hope that it will someday make God appear next to you and show his true good-natured face.',
                finalStepCost: { 'wisdom': 125, 'population': 25000, 'precious building materials': 24500, 'gem block': 500, 'insight': 1000, 'ambrosium shard': 10000, 'holy essence': 225000, 'faith II': 15, 'faith': 725, 'spirituality': 25, 'godTemplePoint': -100 },
                finalStepDesc: 'To complete the wonder and be even closer to the God, you must perform this final step, needing 25k [population,people] to be sacrificed...and many other ingredients.',
                use: { 'land of the Paradise': 30 },
                req: { 'monument-building III': true },
                category: 'wonder',
            });
            new G.Unit({
                name: 'paradise shelter',
                desc: '@provides 4 [housing] @You get +1 [housing] for every 4 [paradise shelter,Shelters] so that people can socialize a little more. Seems like God doesn\'t mind too much.',
                icon: [13, 27, "magixmod"],
                cost: { 'archaic building materials': 100, 'cut stone': 150, 'lumber': 25 /*lumber because scaffolding*/, 'clay': 100/*mortar*/, 'herbs': 2500/*Cover*/ },
                use: { 'land of the Paradise': 1 },
                limitPer: { 'land': 11, 'population': 400 },
                effects: [
                    { type: 'provide', what: { 'housing': 4.25 } },
                ],
                req: { 'paradise shelters': true },
                category: 'paradiseunit',
            });
            new G.Unit({
                name: 'pagoda of passing time',
                desc: '@Leads to the completion of the <b>Patience</b> trial. //A monument of time. A wonder for Chra-nos the Seraphin of Time; the Pagoda has a huge clock that is the Seraphin\'s symbol. <><font color="#ffaaff">Patience is key...but waiting right there...is deadly...each year weakens me...and I hope this year is the last one.<br>Patience is a poison...<br>a...deadly poison!</font>',
                wonder: 'patience',
                icon: [4, 26, "magixmod"],
                wideIcon: [3, 26, "magixmod"],
                cost: { 'basic building materials': 225 },
                costPerStep: { 'precious building materials': 20, 'gems': 20, 'basic building materials': 200 },
                steps: 90,
                messageOnStart: 'You started to build the wonder for <b>Chra-nos</b>.<br>This pagoda will have a huge clock which is the symbol of the Seraphin. Stars on night sky around the wonder often make a shape of clock.<br>This wonder is taller than anything around and its shadow makes your people think about passing time a lot.',
                finalStepCost: { 'population': 200, 'gem block': 15 },
                finalStepDesc: 'To perform the final step, 200 [population,people] and 15 [gem block]s must be sacrificed in order to escape this plane of deadly time and award [victory point]s.',
                use: { 'land': 10, 'worker': 5, 'metal tools': 5 },
                req: { 'monument-building': true, 't1': true, 'trial': true, 'language': true },
                category: 'wonder',
            });
            new G.Unit({
                name: 'the outstander',
                displayName: 'The Outstander',
                desc: 'Interestingly, [the outstander] has a lot of knowledge, and some people speculate that he is a true erudite. Anyway, people call [the outstander,Outstanders] like this one Guru\'s children.<>Each outstander provides 5 [wisdom II] (1 extra for every 4 [the outstander,Outstanders] obtained) and 1 [education] each.',
                icon: [12, 28, "magixmod"],
                use: { 'worker': 1 },
                limitPer: { 'population': 38000 },
                effects: [
                    { type: 'provide', what: { 'wisdom II': 5.25, 'education': 1 } },
                    { type: 'provide', what: { 'inspiration II': 2 }, req: { 'eota': true } },
                ],
                req: { 'outstanding wisdom': true },
                category: 'discovery',
            });
            new G.Unit({
                name: 'statue of Madness',
                desc: '@Leads to the completion of the <b>Unhappy</b> trial. //A monument of anger and wrath. A wonder for Bersaria the Seraphin of Madness. Is a tall statue with a mad face and some bonfires. <><font color="#fdd">It is insane...INSANE!!!</font>',
                wonder: 'unhappy',
                icon: [7, 26, "magixmod"],
                wideIcon: [6, 26, "magixmod"],
                cost: { 'basic building materials': 250, 'gold block': 10 },
                costPerStep: { 'gold block': 15, 'basic building materials': 100, 'fire pit': 1, 'gem block': 1 },
                steps: 100,
                messageOnStart: 'You started to build a wonder for <b>Bersaria</b>.<br>This statue will have an angry face at the top. The terrain is covered by some sort of fog. But you need to finish the wonder to stop the Madness and come back to your normal plane. Let the statue be built!',
                finalStepCost: { 'population': (50 + (G.achievByName['unhappy'].won) * 5), 'gem block': 5, 'fire pit': 10, 'blood': 75 },
                finalStepDesc: 'To perform the final step, ' + (50 + (G.achievByName['unhappy'].won) * 5) + '[population,people], 5 [gem block]s, and 75 [blood] must be sacrificed in order to escape this plane of Wrath and Madness and award [victory point]s.',
                use: { 'land': 10, 'worker': 5, 'metal tools': 5 },
                req: { 'monument-building': true, 't2': true, 'trial': true, 'language': true },
                category: 'wonder',
            });
            new G.Unit({
                name: 'pagoda of culture',
                desc: '@Leads to the completion of the <b>Cultural</b> trial. //A wonder full of cultural sparks for Tu-ria the Seraphin of Inspiration. Place that is beloved by various people of culture. <><font color="#0adbbd">Without [culture], your tribe would not even exist...would it?</font>',
                wonder: 'cultural',
                icon: [19, 26, "magixmod"],
                wideIcon: [18, 26, "magixmod"],
                cost: { 'basic building materials': 250, 'gold block': 10 },
                costPerStep: { 'gold block': 5, 'mana': 25, 'basic building materials': 100 },
                steps: 125,
                messageOnStart: 'You started to build the wonder for <b>Tu-ria</b>.<br>People start to bring all the artifacts right to the Pagoda. You are full of hope that it will be enough to make Tu-ria support you even more.',
                finalStepCost: { 'population': 175, 'mana': 250, 'gem block': 25, 'culture': 25 },
                finalStepDesc: '175 [population,people], plus some [mana] and other materials, will be needed to perform the final step and let you ascend for some [victory point]s from this trial.',
                use: { 'land': 10, 'worker': 5, 'metal tools': 5 },
                req: { 'monument-building': true, 't3': true, 'trial': true, 'language': true },
                category: 'wonder',
            });
            new G.Unit({
                name: 'hartar\'s statue',
                desc: '@Leads to the completion of the <b>Hunted</b> trial. //This statue is dedicated to the one and only patron of this plane: Hartar.<><font color="#ffd000">Fresh [meat] might be healthy enough...</font>',
                wonder: 'hunted',
                icon: [25, 26, "magixmod"],
                wideIcon: [24, 26, "magixmod"],
                cost: { 'basic building materials': 250, 'gold block': 10 },
                costPerStep: { 'gold block': 15, 'mana': 125, 'basic building materials': 100, 'cooked meat': 250, 'meat': 25, 'cured meat': 250 },
                steps: 100,
                messageOnStart: 'You started to build a statue for <b>Hartar</b>.<br>Eventually, your people hope to complete Hartar\'s big statuette at the very top. You eat some meat and stare upward with a hopeful smile.',
                finalStepCost: { 'population': 100, 'cooked meat': 10000, 'cured meat': 10000, 'gold block': 50 },
                finalStepDesc: 'To perform the final step, 100 [population,people], some goods, and lots of food must be sacrificed in order to escape this plane of meat fanatics and award [victory point]s.',
                use: { 'land': 10, 'worker': 5, 'metal tools': 5 },
                req: { 'monument-building': true, 't4': true, 'trial': true, 'language': true },
                category: 'wonder',
            });
            new G.Unit({
                name: 'hartar\'s servant',
                desc: '@hunts wild creatures for [meat], [bone]s, and [hide]s, as well as [stick]s, [stone]s @also collects [water] @cannot be [wounded] and entirely replaces [gatherer]s',
                icon: [7, 29, "magixmod"],
                cost: {},
                limitPer: { 'population': 2 },
                use: { 'worker': 1 },
                upkeep: { 'blood': 0.01 + (0.025 * G.achievByName['hunted'].won) },
                effects: [
                    { type: 'gather', context: 'hunt', amount: 1, max: 5 },
                    { type: 'gather', what: { 'water': 1.5 } },
                    { type: 'gather', what: { 'water': 1 }, chance: 0.2 },
                    { type: 'gather', what: { 'stick': 0.5 } },
                    { type: 'gather', what: { 'stone': 0.5 } },
                ],
                req: { 't4': true },
                category: 'production',
                priority: 5,
            });
            new G.Unit({
                name: 'platinum fish statue',
                desc: '@Leads to the completion of the <b>Unfishy</b> trial. //A statue made from [cut stone] and decorated with [seafood,Fish].<><font color="#44d0aa">The more you finish this statue, the worse the drought will get...can you conquer the challenge?</font>',
                wonder: 'unfishy',
                icon: [22, 26, "magixmod"],
                wideIcon: [21, 26, "magixmod"],
                cost: { 'basic building materials': 250, 'cut stone': 100 },
                costPerStep: { 'platinum block': 3, 'seafood': 250, 'gems': 6, 'water': 20, 'cut stone': 50, 'marble': 10 },
                steps: 200,
                messageOnStart: 'You started to build the pyramid for the <b>Fishyar</b> statue.<br>This statue will have fish and various decorations at the top. It seems like the drought is getting even worse...',
                finalStepCost: { 'population': 400, 'gem block': 5, 'platinum block': 50, 'cooked seafood': 5000, 'cured seafood': 5000 },
                finalStepDesc: 'To perform the final step, 400 [population,people] and a few other materials must be sacrificed in order to leave the plane of seafood haters and award [victory point]s.',
                use: { 'land': 10, 'worker': 5, 'metal tools': 5 },
                req: { 'monument-building': true, 't5': true, 'trial': true, 'language': true },
                category: 'wonder',
            });
            new G.Unit({
                name: 'tomb of oceans',
                desc: '@Leads to the completion of the <b>Ocean</b> trial. //A ruined tomb with the statue of Posi\'zul is surrounded by [deep ocean] and filled with [golden fish] (these can be made from [block-smith workshop]s after getting [smelting]).<><font color="#dfd">The oceans have no equal. No law rules them. No human law can affect the [deep ocean]!</font>',
                wonder: 'ocean',
                icon: [2, 25, "magixmod"],
                wideIcon: [1, 25, "magixmod"],
                cost: { 'gold block': 100, 'precious metal ingot': 5, 'golden fish': 100 },
                costPerStep: { 'gold block': 1, 'gem block': 10, 'precious metal ingot': 25, 'strong metal ingot': 10, 'basic building materials': 75, 'golden fish': 25 },
                steps: 50,
                messageOnStart: 'You and your people started to build the <b>Tomb of oceans</b>.<br>In the middle of the Deep Ocean, as some people say, the wonder for Posi\'zul will eternally stand.',
                finalStepCost: { 'population': 250, 'golden fish': 1000, 'water': 10000 },
                finalStepDesc: 'To perform the final step, 250 [population,people] and a few other things must be sacrificed in order to leave this world of endless [deep ocean,Water] and award [victory point]s.',
                use: { 'deep ocean': 15, 'worker': 5, 'metal tools': 5 },
                req: { 't6': true, 'trial': true },//due to trial conditions you start run with unlocked wonder
                category: 'wonder',
            });
            new G.Unit({
                name: 'the Herboleum',
                desc: '@Leads to the completion of the <b>Herbalism</b> trial. //A sizable monument surrounded by various herbs and berries. The Herboleum can attract Herbalia and let you finish this trial.<><font color="#91eb33">Herbs might taste bad, but are edible, at least. This wonder is, well...for the most acknowledged Herbalist in the Universe: Herbalia!</font>',
                wonder: 'herbalism',
                icon: [13, 26, "magixmod"],
                wideIcon: [12, 26, "magixmod"],
                cost: { 'basic building materials': 250, 'herbs': 600, 'fruit': 500, 'vegetables': 400 },
                costPerStep: { 'precious metal ingot': 20, 'precious building materials': 50, 'herb essence': 10 },
                steps: 100,
                messageOnStart: 'You and your people started to build <b>The Herboleum</b>.<br>Around the dense forest of herbs, bushes, and occasionally small ponds, this mostly natural wonder turns out to be slightly taller than the other human-made buildings nearby.',
                finalStepCost: { 'population': 999, 'gem block': 5, 'herbs': 10000, 'fruit': 200, 'vegetables': 200 },
                finalStepDesc: 'To perform the final step, 999 [population,people] and some goods must be sacrificed to finish this "healthy" trial and award [victory point]s.',
                use: { 'land': 10, 'worker': 5, 'metal tools': 5 },
                req: { 'monument-building': true, 't7': true, 'trial': true },
                category: 'wonder',
            });
            new G.Unit({
                name: 'temple of the Dead',
                desc: '@Leads to the completion of the <b>Buried</b> trial. //A very dark temple built in dead and hostile terrain. Many [grave]s are nearby, which attracts Buri\'o dak.<><font color="#f08">Why is everyone afraid of [corpse,Death]? Just face it.</font>',
                wonder: 'buried',
                icon: [1, 26, "magixmod"],
                wideIcon: [0, 26, "magixmod"],
                cost: { 'basic building materials': 250, 'bone': 200, 'corpse': 20 },
                costPerStep: { 'basic building materials': 25, 'corpse': 2, 'precious building materials': 1.5, 'bone': 3, 'dark essence': 5 },
                steps: 999,
                messageOnStart: 'Your people have started building the <b>Temple of the Dead</b>. You do not know why, but it goes slightly slower than normal. But its shadow manages to spread fear all around!',
                finalStepCost: { 'corpse': 50, 'dark essence': 5000 },
                finalStepDesc: 'To perform the final step, some [corpse,Dead bodies] and [dark essence] must be sacrificed to escape this terrible place once and for all and award 10 [victory point]s.',
                use: { 'burial spot': 50, 'land': 10, 'worker': 5, 'metal tools': 5 },
                req: { 't8': true },//due to trial conditions you start run with unlocked wonder
                category: 'wonder',
            });
            new G.Unit({
                name: 'faithsoleum',
                desc: '@Leads to the completion of the <b>Faithful</b> trial. //The Faithsoleum is filled with light and sparks of religion as far as the human eye can see. Its eye is the symbol of An Enlightened Seraphin of Faith!<><font color="#dbb200">Worship to victory...</font>',
                wonder: 'faithful',
                icon: [1, 27, "magixmod"],
                wideIcon: [0, 27, "magixmod"],
                cost: { 'basic building materials': 1000, 'gold block': 10, 'corpse': 20 },
                costPerStep: { 'basic building materials': 400, 'precious metal ingot': 5, 'gems': 2, 'precious building materials': 150, 'faith': 5 },
                steps: 50,
                messageOnStart: 'Your people have started building the <b>Faithsoleum</b>. People would rather build this wonder with fewer steps, as they have become inspired by their one God. Some people seem to say that worship leads to victory and religion is a key now.',
                finalStepCost: { 'population': 250, 'spirituality': 35, 'faith': 35 },
                finalStepDesc: 'To perform the final step, 250 [population,people] and some faithful essentials must be sacrificed to escape this pious plane and award [victory point]s.',
                use: { 'land': 10, 'worker': 5, 'metal tools': 5 },
                req: { 'monument-building': true, 't11': true, 'trial': true, 'language': true, 'wizard towers': true },
                category: 'wonder',
            });
            new G.Unit({
                name: 'temple of the Stone',
                desc: '@Leads to the completion of the <b>Underground</b> trial. //A weird temple built out of rocks that can be found on surface.<><font color="#b0baab">How you feel without mining? How is it?</font>',
                wonder: 'underground',
                icon: [16, 26, "magixmod"],
                wideIcon: [15, 26, "magixmod"],
                cost: { 'basic building materials': 1000, 'soft metal ingot': 200 },
                costPerStep: { 'basic building materials': 400, 'soft metal ingot': 100, 'stone': 1000 },
                steps: 100,
                messageOnStart: 'Your people have started building the <b>Temple of the Stone</b>. (No words for that.)',
                finalStepCost: { 'population': 250 },
                finalStepDesc: 'To perform the final step, 250 [population,people] must be sacrificed to finish this trial and award [victory point]s.',
                use: { 'land': 10, 'worker': 5, 'metal tools': 5 },
                req: { 'language': true, 'tribalism': false },
                category: 'wonder',
            });
            new G.Unit({
                name: 'Mausoleum of richness',
                desc: '@Leads to the completion of the <b>Pocket</b> trial. //It is a gleaming monument of richness. The prestige of it spreads all around.<><font color="#D4af37">Richness can do a lot...good and bad.</font>',
                wonder: 'pocket',
                icon: [10, 26, "magixmod"],
                wideIcon: [9, 26, "magixmod"],
                cost: { 'basic building materials': 1000, 'precious metal ingot': 20 },
                costPerStep: { 'basic building materials': 400, 'precious metal ingot': 5 },
                steps: 115,
                messageOnStart: 'Your people have started building the <b>Mausoleum of Richness</b>. You better buy some valuables or something to make this wonder as prestigious as possible.',
                finalStepCost: { 'population': 100, 'precious metal ingot': 5 },
                finalStepDesc: 'To perform the final step, 100 [population,people] and a few ingots must be sacrificed to finish this trial and award [victory point]s!',
                use: { 'land': 15, 'worker': 5, 'metal tools': 5 },
                req: { 'monument-building': true, 't10': true, 'trial': true, 'language': true },
                category: 'wonder',
            });
            new G.Unit({
                name: 'Mausoleum of the Dreamer',
                desc: '@Leads to the completion of the <b>Dreamy</b> trial. //A monument where the acknowledged dead lie. It is a towering monument built from ideas and discoveries.<><font color="#D4a000">Wisdom is key...and it can open a lot of doors.</font>',
                wonder: 'dreamy',
                icon: [28, 26, "magixmod"],
                wideIcon: [27, 26, "magixmod"],
                cost: { 'basic building materials': 1000, 'precious building materials': 400, 'magic essences': 500, 'mana': 400 },
                costPerStep: { 'basic building materials': 400, 'precious metal ingot': 50, 'insight': 100, 'culture': 5, 'gems': 5 },
                steps: 150,
                messageOnStart: 'Your people have started building the <b>Mausoleum of the Dreamer</b>. This monument is the tallest building within the entire island, and your people call the building a symbol of success through wisdom.',
                finalStepCost: { 'population': 1000, 'insight': 100, 'wisdom': 100 },
                finalStepDesc: 'To perform the final step, 1,000 [population,people] and some other insightful essentials must be sacrificed to leave the plane of Wisdom and award [victory point]s.',
                use: { 'land of the Plain Island': 15, 'worker': 5, 'metal tools': 5 },
                req: { 'language': true, 'tribalism': false },
                category: 'wonder',
            });
            new G.Unit({
                name: 'university of science',
                desc: '@This wonder is different from the other wonders. You cannot ascend via the [university of science,University], but instead, you\'ll be able to unlock bonuses and new upgrades for your great civilization with it. <>Settled at the lands of Plain Island, the university is where all dreamers, philosophers, gurus, and outstanders meet to discover and research new never-seen gizmos. Who knows what will they discover? Maybe they will build the first computer or...time machine...Nobody really knows.',
                wonder: '.',
                icon: [13, 29, "magixmod"],
                wideIcon: [12, 29, "magixmod"],
                cost: { 'basic building materials': 1000, 'precious building materials': 400, 'magic essences': 60000, 'mana': 400, 'science': 20 },
                costPerStep: { 'basic building materials': 500, 'precious metal ingot': 50, 'insight II': 160, 'science': 5, 'gems': 100, 'mana': 80000, 'university point': -1 },
                steps: 200,
                messageOnStart: 'The construction of a science-focused university has been started. It is the complex of education where each knowledge can be deepened. You are proud of that.',
                finalStepCost: { 'population': 1000, 'insight II': 120, 'wisdom': 300, 'science': 50, 'wisdom II': -25, 'education': -25, 'university point': -100 },
                finalStepDesc: 'To finish this stage of the [university of science,University], you need to sacrifice some resources. To unlock the next stage, remember it requires enough [victory point]s! You will also unlock new researches when finishing a stage.',
                use: { 'land of the Plain Island': 15, 'worker': 5, 'metal tools': 5 },
                tick: function (me, tick) {
                    G.getDict('university of science').desc = '@This wonder is different than other wonders. You cannot ascend via the [university of science,University], but can get unique bonuses and upgrades for your great civilization. <>Settled at the lands of ' + islandName() + ', the university is where all dreamers, philosophers, gurus, and outstanders meet to discover and research new never-seen gizmos. Who knows what will they discover? Maybe they will build the first computer or...time machine...Nobody really knows.'
                },
                req: { 'wonder \'o science': true },
                category: 'civil',
                type: 'tiered',
            });
            new G.Unit({
                name: 'money stockpile',
                desc: 'This unit stores valuable currency, slowing its decay. The amount of money that the [money stockpile] can store is not affected by your Pocket completions, and you do not need [stockpiling] to unlock this unit!',
                icon: [25, 29, "magixmod"],
                cost: { 'archaic building materials': 50 },
                effects: [
                    { type: 'provide', what: { 'money storage': 10000 } },
                ],
                use: { 'land': 1 },
                limitPer: { 'land': 40000 },
                req: { 't10': true, 'trial': true },
                category: 'trial',
            });


            new G.Unit({
                name: 'bank',
                desc: 'This can store [golden coin,Money], preventing its decay as time goes on. The more times you complete Pocket, the less [silver coin,Money] can be stored within a [bank].',
                icon: [22, 29, "magixmod"],
                cost: { 'basic building materials': 100 },
                effects: [
                ],
                use: { 'land': 1, 'worker': 1 },
                req: { 't10': true, 'trial': true },
                category: 'trial',
            });

            new G.Unit({
                name: 'hovel with garden',
                desc: '@provides 8 [housing] and can gather [ambrosium shard]s for you. Can provide you an occasional tasty [fruit] or [vegetables,Vegetable].',
                icon: [9, 6, "magixmod"],
                cost: { 'basic building materials': 90 },
                effects: [
                    { type: 'provide', what: { 'housing': 8 } },
                    { type: 'gather', what: { 'ambrosium shard': 0.04 } },
                    { type: 'gather', what: { 'fruit': 1 }, chance: 1 / 50 },
                    { type: 'gather', what: { 'vegetables': 1 }, chance: 1 / 50 },
                    { type: 'mult', value: 1.15, req: { 'fertile bushes': true } },
                    { type: 'mult', value: 1.1, req: { 'backshift at farms': true } },
                ],
                limitPer: { 'land': 21, 'population': 125 },
                use: { 'land of the Paradise': 1 },
                req: { 'paradise housing': true },
                category: 'paradiseunit',
            });
            new G.Unit({
                name: 'fort',
                desc: '@provides 30 [housing]. Uses some guards to protect citizens from cruel and possesed dark powers.',
                icon: [8, 6, "magixmod"],
                cost: { 'basic building materials': 800, 'strong metal ingot': 400, 'cobalt ingot': 100 },
                effects: [
                    { type: 'provide', what: { 'housing': 30 } },
                ],
                limitPer: { 'population': 125, 'land of the Underworld': 8 },
                use: { 'land of the Underworld': 1, 'wand': 12, 'armor set': 6, 'metal weapons': 6, 'worker': 6 },
                req: { 'underworld building 2/2': true },
                category: 'underworld',
            });
            new G.Unit({
                name: 'shop',
                desc: 'You can use the [shop] to order resources that you could previously only craft. Remember: they can still decay, so keep that in mind and use \'em quickly so they won\'t waste. The amount of times you completed Pocket does not affect decay speed.',
                icon: [24, 29, "magixmod"],
                cost: { 'archaic building materials': 500 },
                modes: {
                    'cut stone pack': { name: 'Cut stone pack', icon: [30, 19, "magixmod", 2, 12, "magixmod"], desc: 'Buy bulk of 250 [cut stone] and 250 [various cut stones] for 20 [golden coin]s and 45 [silver coin]s.' },
                    'precious ingot': { name: 'Precious ingot', icon: [30, 19, "magixmod", 11, 9], desc: 'Buy 15 [precious metal ingot]s for 150 [golden coin]s.' },
                    'woodpack': { name: 'Woodpack', icon: [30, 19, "magixmod", 1, 6], desc: 'Buy 400 [log]s and 150 [lumber] for 31 [golden coin]s and 45 [silver coin]s.' },
                    'brickpack': { name: 'Pack of bricks', icon: [30, 19, "magixmod", 3, 8], desc: 'Buy 350 [brick]s for: 32 [golden coin]s, 45 [wooden coin]s, and 45 [silver coin]s.' },
                    'toolpack': { name: 'Pack of tools', icon: [30, 19, "magixmod", 1, 9], desc: 'Buy 40x [knapped tools], 15 [stone tools] and 5 sets of [metal tools] for: 10 [golden coin]s and 40 [silver coin]s.' },
                    'weaponpack': { name: 'Pack of weaponry', icon: [30, 19, "magixmod", 5, 9], desc: 'Buy 32 [stone weapons], 8 [metal weapons], and 6 [armor set]s for: 17 [golden coin]s.' },
                    'gempack': { name: 'Pack of gems', icon: [30, 19, "magixmod", 17, 8, 7, 9], desc: 'Buy 5 [gem block]s and 50 [gems] for: 75 [golden coin]s.' },
                },
                effects: [
                    { type: 'convert', from: { 'golden coin': 20, 'silver coin': 45 }, into: { 'cut stone': 150 }, every: 7, mode: 'cut stone pack' },
                    { type: 'convert', from: { 'golden coin': 150 }, into: { 'precious metal ingot': 15 }, every: 7, mode: 'precious ingot' },
                    { type: 'convert', from: { 'golden coin': 31, 'silver coin': 45 }, into: { 'lumber': 150, 'log': 400 }, every: 7, mode: 'woodpack' },
                    { type: 'convert', from: { 'golden coin': 32, 'silver coin': 45, 'wooden coin': 45 }, into: { 'brick': 350 }, every: 7, mode: 'brickpack' },
                    { type: 'convert', from: { 'golden coin': 10, 'silver coin': 40 }, into: { 'knapped tools': 40, 'stone tools': 15, 'metal tools': 5 }, every: 7, mode: 'toolpack' },
                    { type: 'convert', from: { 'golden coin': 17 }, into: { 'stone weapons': 150, 'metal weapons': 8, 'armor set': 6 }, every: 7, mode: 'weaponpack' },
                    { type: 'convert', from: { 'golden coin': 75 }, into: { 'gems': 50, 'gem block': 5 }, every: 7, mode: 'gempack' },
                ],
                use: { 'land': 1, 'worker': 1 },
                gizmos: true,
                req: { 't10': true, 'trial': true },
                category: 'trial',
            });
            new G.Unit({
                name: 'cantor',
                desc: 'Exchanges coins of a lower tier into 1 coin of a higher tier. That means that 100 of <b>x</b> currency will be exchanged into 1 <b>y</b> currency.',
                icon: [23, 29, "magixmod"],
                cost: { 'archaic building materials': 200, 'wooden coin': 90 },
                effects: [
                    {
                        type: 'function', func: function (me) {
                            if (G.getRes('wooden coin').amount >= 50 * (G.getAchiev('pocket').won * 3 + 1)) {
                                G.lose('wooden coin', 50 * (G.getAchiev('pocket').won * 3 + 1), 'currency exchange(Cantor)');
                                G.gain('silver coin', 1);
                            }
                        }, mode: 'wts'
                    },
                    {
                        type: 'function', func: function (me) {
                            if (G.getRes('wooden coin').amount >= 50 * (G.getAchiev('pocket').won * 3 + 1)) {
                                G.lose('silver coin', 50 * (G.getAchiev('pocket').won * 3 + 1), 'currency exchange(Cantor)');
                                G.gain('golden coin', 1);
                            }
                        }, mode: 'stg'
                    },
                ],
                gizmos: true,
                modes: {
                    'wts': { name: 'Wooden to Silver', icon: [26, 29, "magixmod"], desc: 'Each of these [cantor]s will convert [wooden coin]s into 1 [silver coin].<br>The amount of [wooden coin]s needed is equal to<br><b><font color="#cfbaa8">50 \u00D7 (Pocket trial completions \u00D7 3 + 1)</font></b>' },
                    'stg': { name: 'Silver to Golden', icon: [27, 29, "magixmod"], desc: 'Each of these [cantor]s will convert [silver coin]s into 1 [golden coin].<br>The amount of coins of the [silver coin]s needed is equal to<br><b><font color="#dbb406">50 \u00D7 (Pocket trial completions \u00D7 3 + 1)</font></b>' },
                },
                use: { 'land': 1, 'worker': 1 },
                req: { 't10': true, 'trial': true },
                category: 'trial',
            });
            new G.Unit({
                name: 'grand mirror',
                desc: 'A door to a world that is an exact copy of the mortal world. //<b><font color="fuschia">Isn\'t it weird that in a MIRRORED world only the [land] duplicates? Well...maybe it is better for you.</font></b>',
                icon: [1, 3, "magix2"],
                wideIcon: [0, 3, "magix2"],
                wonder: '.',
                steps: 50,
                finalStepDesc: 'Perform the final step to gain a [tablet \'o mirror]. You will need it.',
                finalStepCost: { 'tablet \'o mirror': -1, 'magic essences': 800000, 'mana': 450000 },
                effects: [
                ],
                use: { 'land': 25, 'worker': 10 },
                req: { 'mirror world 1/2': true },
                category: 'dimensions',
                type: 'portal',
            });
            new G.Unit({
                name: 'druid',
                desc: '@generates [faith] and [happiness] every now and then<>[druid]s merge with nature and its spirits to bring down faith and hope to any people around \'em.',
                icon: [26, 30, "magixmod"],
                cost: {},
                use: { 'worker': 1 },
                upkeep: { 'food': 0.3 },
                limitPer: { 'population': 10 },
                effects: [
                    { type: 'gather', what: { 'faith': 0.05, 'happiness': 0.2 } },
                    { type: 'gather', what: { 'health': 0.075 }, req: { 'mentors of nature': true, 'mentors of nature II': false } },
                    { type: 'gather', what: { 'health': 0.1125 }, req: { 'mentors of nature II': true } },
                    { type: 'gather', what: { 'faith': 0.005 }, req: { 'druidsymbolism2': true } },
                    { type: 'gather', what: { 'happiness': 0.05 }, req: { 'druidsymbolism1': true } },
                    { type: 'gather', what: { 'faith': 0.02 }, req: { 'symbolism II': true } },
                    { type: 'mult', value: 2 / 3, req: { 'dt16': true } },
                    { type: 'mult', value: 1.25, req: { 'se11': 'on' } },
                    { type: 'mult', value: 1.01, req: { 'enlightenment': true } },
                    { type: 'mult', value: 1.05, req: { 'missionary': true } },
                    { type: 'mult', value: 0.95, req: { 'se03': 'on' } },
                ],
                req: { 'ritualism': true, 'druidism': true },
                category: 'spiritual',
            });
            new G.Unit({
                name: 'corpse slayer',
                desc: 'Hunts for [wild corpse]s and takes \'em down. Has a chance to become wounded upon finding one! //Once slain, a [wild corpse] cannot revive again.',
                icon: [24, 30, "magixmod"],
                cost: {},
                use: { 'worker': 1, 'metal weapons': 1, 'armor set': 1 },
                req: { 'battling thieves': true, 'coordination': true, 'revenants': true },
                category: 'guard',
                priority: 5,
                effects: [
                    { type: 'convert', from: { 'wild corpse': 1 }, into: { 'slain corpse': 1 }, every: 4, chance: 1 / 5 },
                    { type: 'function', func: unitGetsConverted({ 'wounded': 1 }, false, 0.001, 0.03, '', '', ''), chance: 1 / 50, req: { 'coordination': true } },
                    { type: 'function', func: unitGetsConverted({ 'wounded': 1 }, false, 0.001, 0.03, '', '', ''), chance: 1 / 25, req: { 'coordination': false } },
                ],
            });
            new G.Unit({
                name: 'block-smith workshop',
                desc: '@forges blocks out of ingots<>The [block-smith workshop,Block-smith] forges [various metal block]s out of metals.',
                icon: [19, 30, "magixmod"],
                cost: { 'basic building materials': 100 },
                use: { 'land of the Plain Island': 1 },
                modes: {
                    'off': G.MODE_OFF,
                    'mythril': { name: 'Forge mythril blocks', icon: [34, 25, "magixmod"], desc: 'Forge [various metal block]s out of 30 [mythril ore], 3 [mystical metal ingot]s, 1 [strong metal ingot]s and 5 [coal] each.', use: { 'worker': 1, 'stone tools': 1, 'metal tools': 1 }, req: {} },
                    'blackium': { name: 'Forge blackium blocks', icon: [34, 28, "magixmod"], desc: 'Forge [various metal block]s out of 40 [blackium ore], 3 [mystical metal ingot]s, 1 [strong metal ingot] and 15 [coal] each.', use: { 'worker': 1, 'stone tools': 1, 'metal tools': 1 }, req: {} },
                    'dinium': { name: 'Forge dinium blocks', icon: [34, 27, "magixmod"], desc: 'Forge [various metal block]s out of 15 [dinium ore], 4 [mystical metal ingot]s, 5 [coal] and 2 [strong metal ingot]s', use: { 'worker': 1, 'stone tools': 1, 'metal tools': 1 }, req: {} },
                    'unknownium': { name: 'Forge unknownium blocks', icon: [34, 26, "magixmod"], desc: 'Forge [various metal block]s out of 15 [unknownium ore], 3 [mystical metal ingot]s, 5 [coal] and 3 [strong metal ingot]s', use: { 'worker': 1, 'stone tools': 1, 'metal tools': 1 }, req: {} },
                    'gold blocks': { name: 'Forge gold blocks', icon: [14, 8], desc: 'Forge [gold block]s out of 10 [precious metal ingot]s each.', use: { 'worker': 1, 'stone tools': 1, 'metal tools': 1 }, req: { 'gold-working': true } },
                    'platinum blocks': { name: 'Craft platinum blocks', icon: [4, 11, "magixmod"], desc: 'Forge [platinum block]s out of 10 [platinum ingot]s each.', req: { 'platinum-working': true }, use: { 'worker': 1, 'metal tools': 1, 'stone tools': 1 } },
                },
                effects: [
                    { type: 'convert', from: { 'precious metal ingot': 10 }, into: { 'gold block': 1 }, every: 6, mode: 'gold blocks' },
                    { type: 'convert', from: { 'platinum ingot': 10 }, into: { 'platinum block': 1 }, every: 6, mode: 'platinum blocks' },
                    { type: 'convert', from: { 'mythril ore': 30, 'mystical metal ingot': 3, 'coal': 5, 'strong metal ingot': 1 }, into: { 'various metal block': 1 }, every: 6, mode: 'mythril' },
                    { type: 'convert', from: { 'blackium ore': 40, 'mystical metal ingot': 3, 'coal': 15, 'strong metal ingot': 1 }, into: { 'various metal block': 1 }, every: 6, mode: 'blackium' },
                    { type: 'convert', from: { 'dinium ore': 15, 'mystical metal ingot': 4, 'coal': 5, 'strong metal ingot': 2 }, into: { 'various metal block': 1 }, every: 6, mode: 'dinium' },
                    { type: 'convert', from: { 'unknownium ore': 15, 'mystical metal ingot': 3, 'coal': 5, 'strong metal ingot': 3 }, into: { 'various metal block': 1 }, every: 6, mode: 'unknownium' },
                    { type: 'mult', value: 0.95, req: { 'dt1': true } },
                    { type: 'mult', value: 1.17, req: { 'crafting & farm rituals': 'on', 'power of the faith': true } },
                    { type: 'waste', chance: 0.001 / 1000, req: { 'construction III': false } },
                    { type: 'waste', chance: 0.0002 / 1000, req: { 'construction III': true, 'improved construction': false } },
                    { type: 'waste', chance: 0.00014 / 1000, req: { 'improved construction': true } },
                    //TODO : better metal tools, weapons etc
                ],
                gizmos: true,
                req: { 'smelting': true, 'block-smithery': true },
                category: 'plainisleunit',
            });
            new G.Unit({
                name: 'factory of tools',
                desc: 'This factory can craft the following automatically: @[stone tools] @[stone weapons] @[bow]s @[crossbow]s @[arrow]s //It outputs packets of these items every so often.',
                icon: [24, 31, "magixmod"],
                cost: { 'basic building materials': 775, 'basic factory equipment': 400 },
                upkeep: { 'coal': 5, 'food': 25, 'water': 35 },
                use: { 'worker': 15, 'land': 1, 'stone tools': 32 },
                req: { 'factories II': true },
                category: 'crafting',
                effects: [
                    { type: 'convert', from: { 'stone': 40, 'lumber': 22, 'fire pit': 8.2, 'coal': 5 }, into: { 'stone tools': 25 }, every: 10 },
                    { type: 'convert', from: { 'stone': 40, 'lumber': 20, 'fire pit': 8.2, 'coal': 5 }, into: { 'stone weapons': 25 }, every: 12 },
                    { type: 'convert', from: { 'lumber': 15, 'thread': 6, 'fire pit': 8.2, 'coal': 5 }, into: { 'bow': 20 }, every: 10 },
                    { type: 'convert', from: { 'lumber': 30, 'stone': 300 }, into: { 'arrow': 100 }, every: 13, chance: 4 / 5 },
                    { type: 'convert', from: { 'stick': 300, 'stone': 200 }, into: { 'crossbow': 5 }, every: 11 },
                    { type: 'mult', value: 1.2, req: { 'ground tools': true } },
                ],
            });
            new G.Unit({
                name: 'Toolhut',
                desc: 'This hut will craft various tools that your people need. These are: @[stone tools] @[stone weapons] @[bow]s @[crossbow]s @[arrow]s //These huts produce bigger packets of these items, but at a slower rate. @Additional materials used in processing are [thread], [stone], [lumber], [fire pit], and [coal].',
                icon: [18, 31, "magixmod"],
                cost: { 'basic building materials': 1600, 'basic factory equipment': 400 },
                upkeep: { 'coal': 3, 'fire pit': 0.2, 'food': 65, 'water': 85 },
                use: { 'worker': 80, 'land': 1 },
                req: { 'caretaking': true, 'manufacture units II': true, 'tool refinery 2/2': true },
                category: 'crafting',
                effects: [
                    { type: 'convert', from: { 'lumber': 20, 'stone': 70, 'fire pit': 5, 'thread': 2 }, into: { 'stone tools': 15 }, every: 20 },
                    { type: 'convert', from: { 'lumber': 20, 'stone': 70, 'fire pit': 5, 'thread': 2 }, into: { 'stone weapons': 15 }, every: 20 },
                    { type: 'convert', from: { 'lumber': 90, 'stone': 880 }, into: { 'arrow': 200 }, every: 35 },
                    { type: 'convert', from: { 'lumber': 10, 'stone': 20, 'thread': 10 }, into: { 'bow': 15, 'crossbow': 15 }, every: 11 },
                    { type: 'mult', value: 1.2, req: { 'ground tools': true } },
                    { type: 'mult', value: 1.5, req: { 'larger toolhuts': true } },
                ],
            });
            new G.Unit({
                name: 'f.r.o.s.t.y',
                displayName: 'F.R.O.S.T.Y',
                desc: '@Extracts [christmas essence] from various [snowman,Snowmen] created by children. @Be warned, as it is possible the extraction will destroy some unlucky [snowman,Snowmen]!//This weird machine is powered by strange energies, [snow], and [lightning essence]. //[f.r.o.s.t.y]\'s upkeep is only active during [the christmas,The Christmas].',
                icon: [15, 12, 'seasonal'],
                cost: { 'strong metal ingot': 100, 'hard metal ingot': 15, 'precious metal ingot': 2, 'basic building materials': 10, 'magic essences': 20000, 'platinum ore': 10 },
                use: { 'land': 3 },
                upkeep: { 'snow': 6, 'magic essences': 15, 'lightning essence': 5 },
                req: { 'festive robot print': true, 'tribalism': false },
                limitPer: { 'land': 50000 },//MAX 1
                category: 'seasonal',
                effects: [
                    {
                        type: 'function', func: function (me) {
                            if (day >= 350 && day <= 363) {
                                if (G.getRes('snowman').amount >= 3) {
                                    var chance = Math.random();
                                    var bonus = 1, risk = 2.5;
                                    if (G.has('f.r.o.s.t.y overclock I')) risk *= 1.05, bonus *= 1.5;
                                    if (G.has('f.r.o.s.t.y overclock II')) risk *= 1.08, bonus += 1.8;
                                    if (G.has('f.r.o.s.t.y overclock III')) risk *= 1.3, bonus *= 2;
                                    G.gain('christmas essence', 3 * bonus, 'F.R.O.S.T.Y');
                                    if (chance <= 0.05 + bonus) {
                                        G.lose('snowman', randomFloor(risk * Math.random()), 'failed essence extraction');
                                    }
                                    me.unit.upkeep = { 'snow': 6, 'magic essences': 15, 'lightning essence': 5 };
                                } else {
                                    me.unit.upkeep = { 'snow': 0, 'magic essences': 0, 'lightning essence': 0 };
                                }
                            }
                        }, every: 7
                    },
                ],
            });
            new G.Unit({
                name: 'wonderful fortress of christmas',
                desc: 'Constucted in snowy biomes, the colossal and giant [wonderful fortress of christmas,Wonderful fortress of Christmas] is taller and bigger than anything else nearby, showing its shadow to festive villages and cities all around. //Full of lights and ornaments so that its mightiness is also the art of beauty. //This giant wonder takes a lot of steps to be built though! //<small>Merry Christmas!</small>',
                icon: [0, 12, 'seasonal'],
                wonder: '.',
                steps: 1200,
                cost: { 'basic building materials': 3000, 'christmas essence': 10000 },
                costPerStep: { 'christmas essence': 4200, 'dyes': 1500, 'mana': 1400, 'basic building materials': 850, 'precious building materials': 150, 'concrete': 25, 'gems': 10, 'christmas ornament': 150, 'festive light': 80, 'snow': 100 },
                finalStepCost: { 'christmas essence': 40000, 'mana': 1e5, 'ice': 7.5e4 },
                threexthreeIcon: [0, 12, 'seasonal'],
                use: { 'worker': 200, 'worker': 15, 'metal tools': 400, 'metal weapons': 200, 'armor set': 200 },
                req: { 'monument-building II': true, 'f.r.o.s.t.y overclock II': true, 'tribalism': false },
                category: 'seasonal',
                priority: 5,
                type: 'stepByStep',
            });
            new G.Unit({
                name: 'christmas essence storage',
                desc: 'This essence storage allows you to store 6,000 [christmas essence]. //It is a simple sphere of [glass] with a small essence faucet.',
                icon: [4, 11, 'seasonal'],
                cost: { 'basic building materials': 200, 'glass': 400 },
                use: { 'land': 0.8 },
                effects: [
                    { type: 'provide', what: { 'christmas essence limit': 6000 } },
                    { type: 'waste', chance: 1 / 10000, req: { 'construction III': false } },
                    { type: 'waste', chance: 0.2 / 10000, req: { 'construction III': true, 'improved construction': false } },
                    { type: 'waste', chance: 0.14 / 10000, req: { 'improved construction': true } },
                ],
                req: { 'stockpiling': true, 'building': true, 'essence storages': true, 'the christmas': true },
                category: 'seasonal',
            });
            new G.Unit({
                name: 'globetrotter',
                desc: '@[globetrotter]s are able to discover new [land] and explore places already discovered (but slower than normal [scout]s)@can explore occupied tiles, but does it slower than a [wanderer]@may sometimes get lost<>[globetrotter]s explore the world in search of new territories and deepen their knowledge about territories already known.',
                icon: [35, 2, "magixmod"],
                cost: { 'food': 100 },
                use: { 'worker': 1 },
                staff: { 'stone tools': 1 },
                upkeep: { 'food': 0.4 },
                effects: [
                    { type: 'explore', explored: 0.005, unexplored: 0.0055 },
                    { type: 'mult', value: 2.5, req: { 't10': true } },
                    { type: 'mult', value: 1.04, req: { 'discovery rituals': 'on' } },
                    { type: 'function', func: unitGetsConverted({}, 0.01, 0.05, true, '[X] [people].', 'globetrotter got lost', 'globetrotters got lost'), chance: 1 / 250 }
                ],
                req: { 'globetrottering': true },
                category: 'exploration',
            });
            new G.Unit({
                name: 'artisan of christmas',
                desc: '@has the ability to turn [archaic building materials,Various things] into festive ornaments, lights, and things related to [the christmas]. Once they decay, they turn into [christmas essence]. They can be used to build a very special wonder and bring some joy to your people.',
                icon: [5, 11, 'seasonal'],
                cost: {},
                use: { 'worker': 1 },
                modes: {
                    'off': G.MODE_OFF,
                    'ornaments': { name: 'Craft ornaments', icon: [12, 3, "magix2"], desc: 'Craft 1 [christmas ornament] from [thread]s, [dyes] and a part of a [log].', use: { 'worker': 1, 'stone tools': 1 } },
                    'lights': { name: 'Craft lights', icon: [6, 11, 'seasonal'], desc: 'Craft 1 [festive light] from [thread]s, [tin ore], a small amount of [glass], and [magic essences].', use: { 'worker': 1, 'stone tools': 1 }, req: { 'festive lights': true } },
                },
                effects: [
                    { type: 'convert', from: { 'thread': 4, 'dyes': 2, 'log': 0.2 }, into: { 'christmas ornament': 1 }, every: 6, mode: 'ornaments' },
                    { type: 'convert', from: { 'thread': 9, 'tin ore': 2, 'glass': 0.2, 'magic essences': 3 }, into: { 'festive light': 1 }, every: 6, mode: 'lights' },
                    { type: 'mult', value: 1.1, req: { 'ground tools': true } },
                ],
                gizmos: true,
                req: { 'festive artisanistry': true, 'tribalism': false },
                category: 'seasonal',
            });
            new G.Unit({
                name: 'lodge of Christmas',
                desc: '@this lodge can turn normal [child,children] into [child of Christmas,children of Christmas]. At least, that is supposed to happen. Currently completely useless due to protesting.//<small>totally not because dev is to lazy to implement</small>',
                icon: [14, 11, 'seasonal'],
                cost: { 'archaic building materials': 50, 'basic building materials': 30 },
                use: { 'land': 1, 'worker': 3 },
                //require:{'worker':1,'knapped tools':1},
                //upkeep:{'food':0.5},
                gizmos: true,
                modes: {
                    'off': G.MODE_OFF,
                },
                effects: [

                ],
                req: { 'the christmas': true, 'tribalism': false },
                category: 'seasonal',
            });
            new G.Unit({
                name: 'fortress of love',
                displayName: '<font color="#f9c">Fortress of love</font>',
                desc: 'Constucted in Paradise as a gigantic [fortress of love]. It is in a unique region separated as much as possible from other island, giving it even more uniqueness. //In this unique island, there are mutual feelings of respect, good feelings, and true empathy. //Only the kindest people and souls are able to live there! //Happy valentines! @(The final step will require 2 full [love] levels.)',
                icon: [0, 16, 'seasonal'],
                wonder: '.',
                steps: 999,
                cost: { 'basic building materials': 3000, 'gems': 3000 },
                costPerStep: { 'marble': 4000, 'metal tools': 100, 'metal weapons': 100, 'armor set': 100, 'basic building materials': 1000, 'stone': 8000, 'clay': 2500, 'cloud': 1000, 'magic essences': 15000, 'gems': 100, 'gem block': 25, 'mana': 20000 },
                finalStepCost: { 'love': 2 },
                threexthreeIcon: [0, 11, 'seasonal'],
                use: { 'worker': 200, 'worker': 15, 'metal tools': 400, 'metal weapons': 200, 'armor set': 200 },
                req: { 'lovely monument': true, 'tribalism': false },
                category: 'seasonal',
                priority: 5,
                type: 'stepByStep',
            });
            new G.Unit({
                name: 'villa of victory',
                desc: '@The more [victory point]s you get, the more housing this will provide. The amount of [housing] provided starts from 100. However, you get 8 more bonus [housing] for every [victory point] obtained! Villas cannot waste; however, these are very limited. At the moment, each one provides ' + (100 + (G.getRes('victory point').amount * 8)) + ' [housing] for your people.',
                wideIcon: [1, 31, "magixmod"],
                icon: [1, 31, "magixmod"],
                cost: { 'basic building materials': 1000, 'precious building materials': 300 },
                use: { 'land': 40 },
                limitPer: { 'land': 1000, 'population': 11000 },
                effects: [
                    //{type:'provide',what:{'housing':60+(G.getRes('victory point').amount*7)}},
                ],
                req: { 'villas of victory': true },
                category: 'civil',
            });
            new G.Unit({
                name: 'spirit summoner',
                desc: '@Summons spirits during Halloween (which are the souls of dead [population,people]), producing [spookiness]. @can summon spirits and souls, gaining [spookiness] and [halloween essence] @will be able to summon demons with more advanced researches',
                icon: [4, 9, 'seasonal'],
                upkeep: { 'food': 0.3 },
                limitPer: { 'population': 30 },
                gizmos: true,
                modes: {
                    'off': G.MODE_OFF,
                    'spirits': { name: 'Summon spirits', icon: [32, 16, "magixmod"], desc: '[spirit summoner,Summoners] will try to summon old spirits and ghosts of dead people. A safe way to generate a small amount of [spookiness] and occasionally [halloween essence].', use: { 'worker': 10, 'knapped tools': 4, 'stone tools': 1 } },
                    'demons': { name: 'Summon demons', icon: [8, 9, 'seasonal'], desc: '[spirit summoner,Summoners] will try to summon old spirits and ghosts of dead people. Not so safe for gaining [spookiness] and needs [halloween essence] to work but more effective.', use: { 'worker': 16, 'worker': 2, 'knapped tools': 4, 'stone tools': 1 }, req: { 'demon-summoning': true } },
                    'vampire': { name: 'Summon vampire spirits', icon: [9, 9, 'seasonal'], desc: '[spirit summoner,Summoners] will try to summon bloodthirsty vampires, which is an easy way to generate a lot of [spookiness], but one that requires [halloween essence].//Note: If the ritual fails, it will cause people to be injured or even die, meaning your [happiness] level will be harmed.', use: { 'worker': 16, 'worker': 2, 'knapped tools': 4, 'stone tools': 1, 'metal weapons': 3 }, req: { 'vampirism': true } },
                    'halloween': { name: 'Summon halloween spirits', icon: [10, 9, 'seasonal'], desc: '[spirit summoner,Summoners] will try to summon ancient Halloween spirits and their ghosts. Generates a small amount of [spookiness], but you can earn some [halloween essence] from their kindness.', use: { 'worker': 15, 'knapped tools': 4, 'stone tools': 1 }, req: { 'halloween-spirits': true } },
                },
                effects: [
                    { type: 'gather', what: { 'spookiness xp': 0.75 }, mode: 'spirits', chance: 4 / 5 },
                    { type: 'gather', what: { 'halloween essence': 0.5 }, mode: 'spirits', chance: 1 / 10 },
                    { type: 'convert', from: { 'halloween essence': 3, 'dark essence': 3, 'magic essences': 1 }, into: { 'spookiness xp': 5 }, every: 6, mode: 'demons', chance: 6 / 7 },
                    { type: 'convert', from: { 'halloween essence': 7, 'dark essence': 4, 'magic essences': 2 }, into: { 'spookiness xp': 10 }, every: 6, mode: 'vampire', chance: 3 / 7 },
                    { type: 'gather', what: { 'halloween essence': 1 }, mode: 'halloween', chance: 1 / 5 },
                    { type: 'gather', what: { 'spookiness xp': 0.5 }, mode: 'halloween', chance: 4 / 5 },
                    { type: 'function', func: unitGetsConverted({ 'wounded': 4, 'happiness': -G.getRes('happiness').amount * 0.01, 'corpse': Math.round(Math.random() * 1.6), 'halloween essence': -2 }, 0.1, 0.5, true, '[X] [people].', 'seance failed, harming its participants and their happiness.', 'seances failed, harming their participants and their happiness.'), chance: 1 / 95, mode: 'vampire' }
                ],
                req: { 'tribalism': false, 'spirit-summoning': true },
                category: 'seasonal',
            });
            new G.Unit({
                name: 'halloween essence storage',
                desc: 'This special essence storage allows you to store 6,000 [halloween essence]. //It is a simple sphere of [glass] with a small essence faucet.',
                icon: [7, 8, 'seasonal'],
                cost: { 'basic building materials': 200, 'glass': 400 },
                use: { 'land': 0.8 },
                effects: [
                    { type: 'provide', what: { 'halloween essence limit': 6000 } },
                    { type: 'waste', chance: 1 / 10000, req: { 'construction III': false } },
                    { type: 'waste', chance: 0.2 / 10000, req: { 'construction III': true, 'improved construction': false } },
                    { type: 'waste', chance: 0.14 / 10000, req: { 'improved construction': true } },
                ],
                req: { '"dark season"': true, 'essence storages': true },
                category: 'seasonal',
            });
            new G.Unit({
                name: 'boat',
                desc: '@[boat]s with crew members on board are able to explore the vast oceans (unlike [wanderer]s, [scout]s and [globetrotter]s). However, you also need 2 [worker]s who will take care of both the boat and themselves. You can obtain these [wanderer,exploration units] by using their respective modes (although you will need on extra exploration unit for backup).',
                icon: [3, 28, "magixmod"],
                cost: { 'lumber': 2000, 'food': 7500, 'water': 3000, 'leather': 90 },
                use: { 'worker': 2 },
                gizmos: true,
                modes: {
                    'off': G.MODE_OFF,
                    'discover': { name: 'Voyage deeply into the ocean', icon: [10, 33, "magixmod"], desc: 'This [boat]\'s crew will swim and use the boat to explore the supposedly endless oceans. Keep in mind that much can happen in the ocean, so this boat may sink down.', use: { 'scoutW': 12, 'worker': 10 } },
                    'explore': { name: 'Explore already discovered waters', icon: [9, 33, "magixmod"], desc: 'This [boat]\'s crew will deeply explore already discovered parts of the ocean. Keep in mind that much can happen in the ocean, so this boat may sink down.', use: { 'wandererW': 12, 'worker': 10 } },
                    'wind': { name: 'Voyage deeply and explore discovered waters', icon: [9, 33, "magixmod", 10, 33, "magixmod"], desc: 'This [boat]\'s crew will venture into the ocean and already discovered waters at the same time, and is three times as fast at both tasks. This mode requires a little bit of [wind essence] though!', use: { 'wandererW': 6, 'scoutW': 6, 'worker': 10 }, req: { 'superior winds': true } },
                },
                effects: [
                    { type: 'exploreOcean', unexplored: 0.07, mode: 'discover' },
                    { type: 'exploreOcean', explored: 0.07, mode: 'explore' },
                    { type: 'exploreOcean', unexplored: 0.21, explored: 0.21, upkeep: ['wind essence', 4], mode: 'wind' }, // THIS UPKEEP IS AN ARRAY DUE TO HOW EXPLOREOCEAN IS HANDLED IN UTILS
                    { type: 'function', func: unitGetsConverted({}, 0.01, 0.05, true, '[X] [people].', 'ship sank. Sadly, everyone who was on the ship drowned', 'ships sank. Sadly, everyone who was on the ship drowned.'), chance: 1 / 117.5, notMode: 'off', req: { 'at4': false } },
                    { type: 'function', func: unitGetsConverted({}, 0.01, 0.05, true, '[X] [people].', 'ship sank. Sadly, everyone who was on the ship drowned', 'ships sank. Sadly, everyone who was on the ship drowned.'), chance: 1 / 150, notMode: 'off', req: { 'at4': true } },
                    { type: 'mult', value: 1.05, req: { 'at2': true } },
                ],
                req: { 'boat building': true },
                category: 'exploration',
            });
            new G.Unit({
                name: 'archaeologist',
                desc: '@digs in the ground to find some [relic]s that give research essentials, as finding treasures won\'t just give you [insight]. Depending on what your [archaeologist]s found, you may even gain [culture], [faith], or [influence]! If a super rare [relic] is found, it will give more essentials.//When no more [relic]s are left, this unit will look for stuff left by previous generations (but this will provide much less [insight,Essentials]).',
                icon: [22, 33, "magixmod"],
                use: { 'worker': 1, 'metal tools': 2 },
                upkeep: { 'food': 1, 'water': 1 },
                req: { 'archaeology': true },
                limitPer: { 'population': 200 },
                category: 'discovery',
                effects: [
                    { type: 'gather', what: { 'faith': 0.75 }, chance: 1 / 112 },
                    { type: 'gather', what: { 'insight': 0.75 }, chance: 1 / 100 },
                    { type: 'gather', what: { 'culture': 0.75 }, chance: 1 / 75 },
                    { type: 'gather', what: { 'influence': 0.75 }, chance: 1 / 112 },
                    { type: 'function', func: archaeologyRare(), chance: 1 / 1200 },
                    { type: 'mult', value: 0.2, req: { 'out of relics': true } },
                    { type: 'mult', value: 1.2, req: { 'better seeking': true } },
                ],
            });
            new G.Unit({
                name: 'stockpile on water',
                desc: '@provides 400 [material storage] and 400 [food storage]<>A simple building set up on wooden platform supported by thin wooden pillars. A place where resources are stored.//Slows material decay and deters theft somewhat, but may itself decay over time.',
                icon: [2, 0, "magixmod"],
                cost: { 'basic building materials': 176, 'log': 24, 'lumber': 100 },
                use: { 'wtr': 2 },
                effects: [
                    { type: 'provide', what: { 'added material storage': 400, 'added food storage': 400 } },
                    { type: 'provide', what: { 'added material storage': 100, 'added food storage': 100 }, req: { 'spell of capacity': true } },
                    { type: 'provide', what: { 'added material storage': 175, 'added food storage': 175 }, req: { 'well stored': true } },
                    { type: 'provide', what: { 'added material storage': 225, 'added food storage': 225 }, req: { 'well stored 2': true } },
                    { type: 'waste', chance: 0.1 / 1000, req: { 'construction III': false } },
                    { type: 'waste', chance: 0.02 / 1000, req: { 'construction III': true, 'improved construction': false } },
                    { type: 'waste', chance: 0.014 / 1000, req: { 'improved construction': true } },
                ],
                req: { 'stockpiling': true, 'water construction': true },
                category: 'storage',
            });
            new G.Unit({
                name: 'ancestors portal', displayName: '<font color="#fbb">Ancestors world portal</font>',
                desc: 'Opens a portal to a huge <b>ancestors world</b>. It was an arduous project shaped by your people\'s belief in ancestors.//A dream of Ancestors, discovery, and much more will come real! You will also get +21.5k [land of the Past] that you can use upon finishing this portal.',
                wideIcon: [26, 33, "magixmod"],
                wideIcon2: [29, 33, "magixmod"],
                icon: [30, 33, "magixmod"],
                wonder: '.',
                steps: 100,
                cost: { 'precious building materials': 4000, 'marble': 1000, 'insight': 50, 'influence': 150, 'faith': 50, 'fire essence': 350, 'water essence': 375, 'dark essence': 275, 'wind essence': 1750, 'lightning essence': 280, 'nature essence': 9500, 'precious metal ingot': 1e3, 'deitytemplePoint': 400 },
                use: { 'land': 10 },
                costPerStep: { 'marble': 1700, 'gem block': 15, 'gems': 8, 'various cut stones': 2500 },
                costPerStep2: { 'mana': 184000, 'dark essence': 14200, 'fire essence': 14250, 'nature essence': 14300, 'wind essence': 14150, 'water essence': 14500, 'lightning essence': 14225 },
                req: { '2nd portal past': true, 'belief in portals': true },
                finalStepCost: { 'population': 1000, 'magic essences': 100000, 'influence': 175, 'ancestors tablet': -1, 'land of the Past': -21500 },
                category: 'dimensions',
                type: 'portal',
            });
            new G.Unit({
                name: 'wheat farmland',
                desc: '@Specifically harvests [wheat]. This strangely charming farm not only produces tons of [wheat], but also provides 50 [housing] and 1,000 [food storage].',
                icon: [4, 9, "magixmod"],
                cost: { 'seeds': 2000, 'basic building materials': 800 },
                req: { 'glorious agriculture': true },
                use: { 'land of the Past': 3, 'worker': 16, 'land of the Past': 50, 'stone tools': 12, 'industry point': 8 },
                upkeep: { 'water': 12 },
                limitPer: { 'land of the Past': 500 },
                category: 'ancestorsunit',
                effects: [
                    { type: 'gather', context: 'gather', what: { 'wheat': 300 } },
                    { type: 'provide', what: { 'housing': 50, 'food storage': 1000 } },
                    { type: 'mult', value: 1.17, req: { 'crafting & farm rituals': 'on' } },
                    { type: 'mult', value: 1.2, req: { 'gt2': true } },
                    { type: 'mult', value: 1.25, req: { 'grain fertilizer': true, 'wizard\'s grain fertilizer': false } },
                    { type: 'mult', value: 1.55, req: { 'wizard\'s grain fertilizer': true, 'grain fertilizer': true } },
                ],
            });
            new G.Unit({
                name: 'vegetable farmland',
                desc: '@Specifically harvests [vegetables]. This strangely charming farm not only produces tons of [vegetables], but also provides 50 [housing] and 1,000 [food storage].',
                icon: [5, 9, "magixmod"],
                cost: { 'seeds': 2000, 'basic building materials': 800 },
                req: { 'glorious agriculture': true },
                use: { 'land of the Past': 3, 'worker': 16, 'land of the Past': 50, 'stone tools': 12, 'industry point': 8 },
                upkeep: { 'water': 12 },
                limitPer: { 'land of the Past': 400 },
                category: 'ancestorsunit',
                effects: [
                    { type: 'gather', context: 'gather', what: { 'vegetables': 250 } },
                    { type: 'provide', what: { 'housing': 50, 'food storage': 1000 } },
                    { type: 'mult', value: 1.17, req: { 'crafting & farm rituals': 'on' } },
                    { type: 'mult', value: 2, req: { 'backshift at farms': true } },
                ],
            });
            new G.Unit({
                name: 'fruit farmland',
                desc: '@Specifically harvests [fruit]s. This farm settled in the ancestors world not only produces [fruit], but also provides 50 [housing] and 1,000 [food storage]. //[next-to house fruitbushes] increase its efficiency.',
                icon: [6, 9, "magixmod"],
                cost: { 'seeds': 2000, 'basic building materials': 800 },
                req: { 'glorious agriculture': true, 'next-to house fruitbushes': true },
                use: { 'worker': 16, 'land of the Past': 50, 'stone tools': 12, 'industry point': 8 },
                upkeep: { 'water': 20 },
                category: 'ancestorsunit',
                limitPer: { 'land of the Past': 600 },
                effects: [
                    { type: 'gather', context: 'gather', what: { 'fruit': 20 } },
                    { type: 'provide', what: { 'housing': 50, 'food storage': 1000 } },
                    { type: 'mult', value: 2, req: { 'backshift at farms': true } },
                    { type: 'mult', value: 1.2, req: { 'next-to house fruitbushes': true } },
                ],
            });
            new G.Unit({
                name: 'mason',
                desc: '@Crafts [brick]s using [clay] and [fire pit,Fire] //This [mason] uses an old recipe to craft very durable [brick]s which you can use to build whatever you need.',
                icon: [3, 1, "magixmod", 8, 9, "magixmod"],
                cost: { 'basic building materials': 100 },
                req: { 'ancestors world crafting': true },
                use: { 'worker': 1, 'land of the Past': 1, 'metal tools': 1, 'industry point': 1 },
                upkeep: { 'fire pit': 1 },
                category: 'ancestorsunit',
                effects: [
                    { type: 'convert', from: { 'clay': 6 }, into: { 'brick': 20 }, every: 6 },
                ],
            });
            new G.Unit({
                name: 'transcendentalist',
                desc: '@[transcendentalist]s will be able to transmute [insight,Essentials], forming them into [science] @[science] will be used by much more complicated researches and technologies<>The methodology used is pretty arcane, but luckily it still works!',
                icon: [18, 34, "magixmod"],
                cost: {},
                use: { 'worker': 1 },
                limitPer: { 'population': 1e5 },
                effects: [
                    { type: 'convert', from: { 'insight': 1000 }, into: { 'science': 1 }, every: 10, chance: 0.02, req: { 'essential transmutation II': false } },
                    { type: 'convert', from: { 'insight II': 30 }, into: { 'science': 1 }, every: 10, chance: 0.1, req: { 'essential transmutation II': true } },
                    { type: 'mult', value: 1.1, req: { 'bonus1': true } },
                    { type: 'mult', value: 1.11, req: { 'bonus2': true } },
                    { type: 'mult', value: 1.15, req: { 'bonus3': true } },
                    { type: 'mult', value: 1.2, req: { 'bonus4': true } },
                    { type: 'mult', value: 1.5, req: { 'bonus5': true } },
                    { type: 'mult', value: 2, req: { 'bonus6': true } },
                    { type: 'mult', value: 1.5, req: { 'science blessing': true } },
                    { type: 'mult', value: 1.5, req: { 'se12': 'on' } },
                    { type: 'mult', value: 0.75, req: { 'se11': 'on' } },
                ],
                req: { 'at3': true },
                category: 'discovery',
            });
            new G.Unit({
                name: 'prison',
                desc: '@can be used to hold [prisoner]s who committed various crimes. @Some [prisoner]s can die in prison (such as due to old age or sickness). In addition, there is a chance that some will flee. @Further researching will unlock new [prison] options! @Use <b>Policies</b> tab to decide what [prison]s can do with their [prisoner]s. @One [prison] may store up to 500 [prisoner]s. @Having [prison]s will reduce the amount of [thief,Thieves] or other criminals in your civilization.',
                icon: [19, 12, "magixmod"],
                cost: { 'basic building materials': 1200, 'armor set': 10, 'metal weapons': 10 },
                use: { 'worker': 80, 'land': 15, 'armor set': 60, 'metal weapons': 60 },
                limitPer: { 'population': 500 },
                effects: [
                    { type: 'provide', what: { 'prison space': 500 } },
                ],
                upkeep: { 'water': 10, 'food': 8 },
                req: { 'imprisonment II': true, 'construction II': true },
                category: 'civil',
            });
            new G.Unit({
                name: 'heat factory',
                desc: '@This factory can process many resources, turning them into [heating capability,Heating power]. @production has a chance to fail',
                icon: [34, 16, "magixmod"],
                cost: { 'basic building materials': 775, 'basic factory equipment': 400 },
                upkeep: { 'coal': 3, 'fire pit': 1, 'food': 25, 'water': 35 },
                use: { 'worker': 20, 'land': 1, 'stone tools': 32 },
                req: { 'moderation': true, 'factories II': true },
                gizmos: true,
                category: 'crafting',
                modes: {
                    'log': { name: 'Process logs', icon: [1, 6], desc: 'Process 30 [log]s and 1 [lightning essence], turning them into 15 [fire pit]s each.' },
                    'stick': { name: 'Process sticks', icon: [0, 6], desc: 'Process 400 [stick]s and 1 [lightning essence], turning them into 15 [fire pit]s each.' },
                    'essence': { name: 'Process essences', icon: [0, 2, "magixmod"], desc: 'Process 25 [fire essence] and 5 [lightning essence], turning them into 20 [fire pit]s each.' },
                    'coal': { name: 'Process coal', icon: [12, 8], desc: 'Process 20 [coal] and 2 [lightning essence], turning them into 20 [fire pit]s each.' },
                    'oil': { name: 'Process various fuels', icon: [5, 4, "magix2"], desc: 'Process 20 [coal], 10 [charcoal], and 10 [oil], turning them into 30 [fire pit]s each. Has a chance to convert [charcoal] into [lightning essence]!', req: { 'oil-digging II': true } },
                },
                effects: [
                    { type: 'convert', from: { 'log': 30, 'lightning essence': 1 }, into: { 'fire pit': 15 }, every: 8, chance: 0.7, mode: 'log', req: { 'hotter factories': false } },
                    { type: 'convert', from: { 'stick': 400, 'lightning essence': 1 }, into: { 'fire pit': 15 }, every: 8, chance: 0.7, mode: 'stick', req: { 'hotter factories': false } },
                    { type: 'convert', from: { 'fire essence': 25, 'lightning essence': 5 }, into: { 'fire pit': 20 }, every: 8, chance: 0.7, mode: 'essence', req: { 'hotter factories': false } },
                    { type: 'convert', from: { 'coal': 20, 'lightning essence': 1 }, into: { 'fire pit': 8 }, every: 8, chance: 0.7, mode: 'coal', req: { 'hotter factories': false } },
                    { type: 'convert', from: { 'log': 30, 'lightning essence': 1 }, into: { 'fire pit': 15 }, every: 6, chance: 0.95, mode: 'log', req: { 'hotter factories': true } },
                    { type: 'convert', from: { 'stick': 400, 'lightning essence': 1 }, into: { 'fire pit': 15 }, every: 6, chance: 0.95, mode: 'stick', req: { 'hotter factories': true } },
                    { type: 'convert', from: { 'fire essence': 25, 'lightning essence': 5 }, into: { 'fire pit': 20 }, every: 6, chance: 0.95, mode: 'essence', req: { 'hotter factories': true } },
                    { type: 'convert', from: { 'coal': 20, 'lightning essence': 2 }, into: { 'fire pit': 8 }, every: 6, chance: 0.95, mode: 'coal', req: { 'hotter factories': true } },
                    { type: 'convert', from: { 'coal': 20, 'charcoal': 10, 'oil': 10 }, into: { 'fire pit': 20 }, every: 6, chance: 0.95, mode: 'oil' },
                    { type: 'convert', from: { 'charcoal': 10 }, into: { 'lightning essence': 5 }, every: 6, chance: 0.15, mode: 'oil' },
                ],
            });
            new G.Unit({ //New unit!!!!!
                name: 'art school',
                desc: 'Here, some [child,Children] will learn about art. Some of these students will become [artist]s when they grow up! Very rarely, a [virtuoso of art] learns enough about their subject to be a true master of painting.',
                icon: [7, 3, "magix2"],
                cost: { 'advanced building materials': 1000, 'gem block': 25, 'gold block': 5 },
                upkeep: { 'food': 100 },
                use: { 'worker': 40, 'land': 25, 'stone tools': 32 },
                req: { 'passionate artistry': true },
                category: 'cultural',
                effects: [
                    { type: 'convert', from: { 'child': 1 }, into: { 'artist': 1 }, every: 300 },
                    { type: 'convert', from: { 'child': 1 }, into: { 'virtuoso of art': 1 }, every: 400, chance: 1 / 600, req: { 'better art schools': false } },
                    { type: 'convert', from: { 'child': 1 }, into: { 'virtuoso of art': 1 }, every: 400, chance: 1 / 300, req: { 'better art schools': true } },
                ],
            });
            new G.Unit({ //New unit!!!!! Again!!!!!
                name: 'golden mana maker',
                desc: 'A man who can make [mana] six times faster than normal [mana maker]s by using [gold block]s, [insight], and [water] and secret rituals. Also requires more [alchemy zone]s, and is 150 times faster than [mana crafting stand]s!',
                icon: [1, 5, "magix2"],
                cost: { 'insight': 100, 'gold block': 50 },
                use: { 'alchemy zone': 8, 'worker': 1 },
                upkeep: { 'food': 10, 'water': 10, 'insight': 5, 'gold block': 2 },
                limitPer: { 'population': 10000 },
                req: { 'more mana making': true },
                //require:{'wizard':3},
                effects: [
                    { type: 'gather', what: { 'mana': 120 } },
                    { type: 'mult', value: 1.5, req: { 'mana brewery III': true } },
                ],
                category: 'alchemy',
            });
            new G.Unit({ //running out of comment ideas now :/
                name: 'mushroom farm',
                desc: 'A unique farm that produces a specific type of [mushroom]s. While these can\'t be eaten, they have other uses...',
                icon: [7, 5, "magix2"],
                cost: { 'herbs': 10000 },
                req: { 'mushroom farming': true },
                use: { 'worker': 8, 'land': 35, 'stone tools': 8 },
                upkeep: { 'water': 12 },
                category: 'production',
                effects: [
                    { type: 'gather', what: { 'mushroom': 3.7 }, amount: 1 },
                    { type: 'mult', value: 0.6, req: { 'droughtNew': true } },
                    { type: 'mult', value: 1.17, req: { 'crafting & farm rituals': 'on' } },
                    { type: 'mult', value: 1.8, req: { 'veggie fertilizer': true } },
                    { type: 'mult', value: 2.25, req: { 'gardening II': true } },
                    { type: 'mult', value: 1.2, req: { 'gardening III': true } }
                ],
            });
            new G.Unit({
                name: 'well of ideas',
                desc: 'This rather unique and seemingly infinite well has the ability to produce [idea tablet]s upon sacrificing resources to it. However, it requires various [precious building materials,Precious resources] and [magic essences,Essences] to build. @has many steps but does not need to be finished @every 10 steps built, you can can claim 2 [idea tablet]s @cost <b>rises</b> every 10 steps',
                wonder: '.',
                icon: [1, 6, "magix2"],
                wideIcon: [0, 6, "magix2"],
                cost: { 'stone': 500, 'advanced building materials': 1000, 'water': 100000, 'magic essences': 100000 },
                costPerStep: { 'platinum block': 15, 'golden mushroom': 100, 'precious building materials': 25, 'magic essences': 10000 },
                steps: 25000,
                messageOnStart: 'You begin throwing resources down of the Well of Ideas. It looks more like a shallow pit for now, but you have a suspicion it might go on forever.',
                require: { 'worker': 40 },
                req: { 'the well of ideas': true },
                type: 'portal',
                category: 'dimensions'
            });

            /*=====================================================================================
            MAGIX MODIFICATIONS FOR VANILLA UNITS
            =======================================================================================*/
            //New gains for gatherer
            G.getDict('gatherer').effects.push({ type: 'gather', context: 'gather', what: { 'seeds': 0.005 }, amount: 1, max: 1 });
            //Healer generates health by trait and research
            G.getDict('healer').effects.push({ type: 'gather', context: 'gather', what: { 'health': 0.008 }, amount: 1, max: 1, req: { 'nutrition': true } });
            G.getDict('healer').effects.push({ type: 'gather', context: 'gather', what: { 'health': 0.001 }, amount: 1, max: 1, req: { 'first aid': true } });
            //Factories I
            G.getDict('potter').effects.push({ type: 'mult', value: 0, req: { 'factories I': true, 'moderation': true } });
            G.getDict('clothier').effects.push({ type: 'mult', value: 0, mode: 'make leather', req: { 'factories I': true, 'moderation': true } });
            G.getDict('clothier').effects.push({ type: 'mult', value: 0, mode: 'cheap make leather', req: { 'factories I': true, 'moderation': true }, mode: 'cheap make leather' });
            G.getDict('drying rack').effects.push({ type: 'mult', value: 0, req: { 'factories I': true, 'moderation': true } });
            //Manufacture units I
            G.getDict('potter').effects.push({ type: 'mult', value: 0, req: { 'manufacture units I': true, 'caretaking': true } });
            G.getDict('artisan').effects.push({ type: 'mult', value: 0, mode: 'dyes', req: { 'manufacture units I': true, 'caretaking': true } });
            ////////////////////////////////////////////
            /*=====================================================================================
            TECHS
            =======================================================================================*/

            new G.ChooseBox({
                name: 'research box',
                context: 'tech',
                choicesN: 4,
                cooldown: 0,
                noMoreChoicesTexts: ['<small><font color="#fdd">There is currently nothing to research.</font></small>', '<small><font color="#ccf">No new technologies can be found for now.</font></small>', '<small><font color="#afd">There are over three hundred technologies; maybe wait for a bit.</font></small>', '<small><font color="#aaa">There are currently no new available researches</font></small>', '<small><font color="#f459cf">Sometimes you\'ll need to wait a bit to unlock something new...</font></small>', '<small><font color="#f7930f">No new technologies are currently available ):</font></small>'],
                getCosts: function () {
                    let calcCost = (name, constGain = 0.025, rollGain = 0.05) => Math.floor(G.getRes(name).amount * (constGain + this.roll * rollGain));
                    var costs = {};
                    if (G.has('eotm')) {
                        costs['insight II'] = Math.pow(calcCost('wisdom II', G.has("faster understanding") ? 0.3 : 0.5), 0.7) + Math.ceil(Math.pow(G.techN / 7 - 2, 1.1));
                    } else {
                        costs['insight'] = calcCost('wisdom');
                    }
                    if (G.has('t4')) costs['blood'] = calcCost('wisdom', 0.03);
                    if (G.has("t7")) costs['herb essence'] = G.techN * Math.max(G.achievByName['herbalism'].won * 2, 1.8) * 2;
                    if (G.has('t3')) { costs['culture'] = calcCost('inspiration', 0.1); costs['influence'] = calcCost('authority', 0.1) };
                    if (G.has('eotm')) costs['science'] = calcCost('education', G.has("do we need that much science?") ? 0.1 : 0.2);
                    if (G.has('eota')) costs['culture II'] = calcCost('inspiration II', 0.06);
                    if (G.chooseBox[0].choices.length === 0 && G.has('the well of ideas')) {
                        costs['idea tablet'] = (G.has('ancestors world building') || G.has('paradise building')) ? 2 : 1
                    }
                    return costs;
                },
                getCardCosts: function (what) {
                    return what.cost;
                },
                getCards: function () {
                    if (this.cooldown <= 0) {
                        var choices = [];
                        var n = G.tech.length;
                        for (var i = 0; i < n; i++) {
                            var tech = G.tech[i];
                            if (!G.techsOwnedNames.includes(tech.name) && G.checkReq(tech.req)) {
                                if (tech.chance) {
                                    var chance = randomFloor(tech.chance);
                                    for (var ii = 0; ii < chance; ii++) {
                                        choices.push(tech);
                                    }
                                }
                                else choices.push(tech);
                            }
                        }
                        return choices;
                    } else {
                        var choices = [];
                        return choices;
                    }
                },
                onBuy: function (what, index) {
                    onTechBuy('people', what);
                    //this.cooldown=10;
                    G.popupSquares.spawn(l('chooseOption-' + index + '-' + this.id), l('techBox').children[0]);
                    if (G.has('symbI')) G.gain('insight', (G.has('symbolic knowledge colors') ? 2 : 1) + Math.ceil(what.cost['insight'] / (G.has('symbolic knowledge colors') ? 100 : 150)), 'symbolism');
                    if (G.has('t3')) {
                        G.lose('cultural balance', 1)
                    }
                },
                onReroll: function () {
                    G.update['tech']();
                    if (this.cooldown <= 0) {
                        this.roll += 1;
                        this.rollN += 1;
                        G.popupSquares.spawn(l('chooseIgniter-' + this.id), l('chooseBox-' + this.id));
                        G.playSound(magixURL + 'TechReroll.wav');
                    }
                },
                onTick: function () {
                    this.cooldown--;
                    this.roll = Math.max(Math.pow(this.roll, 0.995) - 0.01, 0);
                },
                buttonText: function () {
                    if (this.cooldown > 0) {
                        var str = "COOLDOWN: " + this.cooldown;
                        return str;
                    } else {
                        var str = '';
                        if (this.choices.length > 0) str += '<font color="#45bf5d">Reroll</font>';
                        else str += '<font color="fuschia">Research</font>';
                        var costs = this.getCosts();
                        var costsStr = G.getCostString(costs);
                        if (costsStr) str += ' <b><i><font color="#409cff">(' + costsStr + ')</font></i></b>';
                        return '<span style="pointer-events:none">' + str + '</span>';
                    }
                },
                buttonTooltip: function () {
                    if (G.has('t3')) {
                        return '<div class="info"><div class="par">' + (this.choices.length == 0 ? 'Generate new research opportunities.<br>The costs will scale with your <b>Wisdom</b> (for Insight),<b>Inspiration</b> (for Culture) and <b>Authority</b> (for Influence).' : 'Reroll to get new research opportunities if none of the available choices suit you.<br>The cost will rise with each reroll, but will decrease again over time.') + '</div><div>Cost: ' + G.getCostString(this.getCosts(), true) + '</div></div>';
                    }
                    if (!G.has('eotm') && G.has('t2')) {
                        return '<div class="info"><div class="par">' + (this.choices.length == 0 ? 'Generate new research opportunities.<br>The cost will scale with your <b>Wisdom</b> resource.<br>The blood cost also scales with <b>Wisdom</b>.' : 'Reroll to get new research opportunities if none of the available choices suit you.<br>The cost will rise with each reroll, but will decrease again over time.') + '</div><div>Cost: ' + G.getCostString(this.getCosts(), true) + '</div></div>';
                    }
                    else if (!G.has('eotm')) {
                        return '<div class="info"><div class="par">' + (this.choices.length == 0 ? 'Generate new research opportunities.<br>The cost will scale with your <b>Wisdom</b> resource.' : 'Reroll to get new research opportunities if none of the available choices suit you.<br>The cost will rise with each reroll, but will decrease again over time.') + '</div><div>Cost: ' + G.getCostString(this.getCosts(), true) + '</div></div>';
                    }
                    else if (!G.has('eota')) {
                        return '<div class="info"><div class="par">' + (this.choices.length == 0 ? 'Generate new research opportunities.<br>The cost will scale with your <b>Wisdom II</b>/<b>Education</b> resources (Insight II costs scale with the number of techs too).' : 'Reroll to get new research opportunities if none of the available choices suit you.<br>The cost will rise with each reroll, but will decrease again over time.') + '</div><div>Cost: ' + G.getCostString(this.getCosts(), true) + '</div></div>';
                    }
                    else {
                        return '<div class="info"><div class="par">' + (this.choices.length == 0 ? 'Generate new research opportunities.<br>The cost will scale with your <b>Wisdom II</b>/<b>Education</b>/<b>Inspiration II</b> resources (Insight II costs scale with the number of techs too).' : 'Reroll to get new research opportunities if none of the available choices suit you.<br>The cost will rise with each reroll, but will decrease again over time.') + '</div><div>Cost: ' + G.getCostString(this.getCosts(), true) + '</div></div>';
                    }
                }
            });
            new G.Tech({
                name: 'tribalism', category: 'tier1',
                desc: '@unlocks the [gatherer]@provides 5 [authority]<>Taking its roots in wild animal packs, [tribalism] is the organization of individuals into simple social structures with little hierarchy.',
                icon: [0, 1],
                startWith: true,
                effects: [
                    { type: 'provide res', what: { 'authority': 5 } },
                    { type: 'show res', what: ['influence'] },
                    { type: 'show context', what: ['gather'] },
                ],
            });
            new G.Tech({
                name: 'speech', category: 'tier1',
                desc: '@unlocks the [dreamer] and [wanderer]@provides 50 [wisdom]<>[speech], in its most primitive form, is a series of groans and grunts that makes it possible to communicate things, events, and concepts.',
                icon: [1, 1],
                startWith: true,
                effects: [
                    { type: 'provide res', what: { 'wisdom': 50 } },
                    { type: 'show res', what: ['insight'] },
                ],
            });
            new G.Tech({
                name: 'language', category: 'tier1',
                desc: '@provides 30 [inspiration]@provides 30 [wisdom]<>[language] improves on [speech] by combining complex grammar with a rich vocabulary, allowing for better communication and the first signs of culture.',
                icon: [2, 1],
                cost: { 'insight': 10 },
                req: { 'speech': true },
                effects: [
                    { type: 'provide res', what: { 'inspiration': 30, 'wisdom': 30 } },
                ],
                chance: 3,
                tutorialMesg: ['important', 'Now, while talking to your people, they understand you better. Even better, they understand themselves and each other somewhat.', [1, 28, "magixmod"]]
            });

            new G.Tech({
                name: 'oral tradition', category: 'tier1',
                displayName: '<font color="fuschia">Oral tradition</font></b>',
                desc: '@unlocks [storyteller]@provides 20 [inspiration]@provides 20 [wisdom]<>[oral tradition] emerges when the members of a tribe gather at night to talk about their day. Stories, ideas, and myths are all shared and passed on from generation to generation. //<small>Time for a story now, i suppose, I suppose...</small>',
                icon: [5, 1],
                cost: { 'insight': 10 },
                req: { 'language': true },
                effects: [
                    { type: 'provide res', what: { 'inspiration': 20, 'wisdom': 20 } },
                ],
                tutorialMesg: ['important', 'The first spark of culture arises.', [10, 4]]
            });

            new G.Tech({
                name: 'stone-knapping', category: 'tier1',
                desc: '@unlocks [artisan]s, which can create [knapped tools]<>[stone-knapping] allows you to make your very first tools - simple rocks that have been smashed against each other to fashion rather crude cleavers, choppers, and hand axes.//Tools have little use by themselves, but may be used in many other industries.',
                icon: [3, 1],
                cost: { 'insight': 5 },
                req: { 'tribalism': true },
                effects: [
                ],
                chance: 3,
            });

            new G.Tech({
                name: 'tool-making', category: 'tier1',
                desc: '@[artisan]s can now create [stone tools]<>With proper [tool-making], new procedures arise to craft a multitude of specialized tools out of cheap materials. These include hammers, knives, and axes.',
                icon: [4, 1],
                cost: { 'insight': 10 },
                req: { 'stone-knapping': true, 'carving': true },
                effects: [
                ],
                chance: 3,
                type: ['tutorial', 'Finally, people can use and craft something better than knapped tools. Hire an <b>Artisan</b> and switch modes for this job.', [1, 9]]
            });

            new G.Tech({
                name: 'basket-weaving', category: 'tier1',
                desc: '@[artisan]s can now craft [basket]s<>Baskets are a cheap, if flimsy means of storing food.',
                icon: [7, 1],
                cost: { 'insight': 10 },
                req: { 'tool-making': true },
                effects: [
                ],
            });

            new G.Tech({
                name: 'scouting', category: 'tier1',
                desc: '@unlocks [scout]s, which can discover new territory<>The [scout] is an intrepid traveler equipped to deal with the unknown.<>Keep in mind that to make <b>Exploration</b> units explore more terrain, you will need more researches.<>The alternative is <b>Exploration trips</b>, which can also be obtained at the same time upon researching a little magic...//Getting this increases the exploration softcap by a little bit.',
                icon: [24, 7],
                cost: { 'insight': 10 },
                req: { 'tool-making': true, 'language': true, 'intuition': true, 'exploration trips': false },
                effects: [
                    {
                        type: 'function', func: function () {
                            G.policyByName['far foraging'].visible = false;
                            G.update['policy']();
                        }
                    }
                ],
                chance: 2,
            });
            new G.Tech({
                name: 'canoes', category: 'tier1',
                //TODO : fishing boats
                desc: '@Allows exploration through ocean shores @[canoes] are inefficient on the <b>Tundra</b>, <b>Swamplands</b>, <b>Jungle</b>, and <b>Boreal forest</b> biomes<>[canoes] are a good and safe way to explore ocean shores, but slow. Depending on your closest location, consider picking [rafts] instead and make this tech be obtainable in a slightly later game stage.',
                icon: [26, 7],
                cost: { 'insight': 15 },
                req: { 'tool-making': true, 'woodcutting': true, 'rafts': false },
                effects: [
                    { type: 'allow', what: ['shore exploring'] },
                    {
                        type: 'function', func: function () {
                            G.getDict('rafts').req = { 'tile inspection II': true, 'basic mapping': true, 'woodcutting': true };
                        }
                    }
                ],
            });
            new G.Tech({
                name: 'boat building', category: 'tier1',
                //TODO : in the future, boats will be units or resources
                desc: '@allows full ocean exploring.<>Unlocks [boat]s which will allow you to explore oceans. Also unlocks new modes for [wanderer]s and [scout]s. //<small>Let the voyage begin!</small>',
                icon: [28, 7],
                cost: { 'insight': 40 },
                req: { 'canoes': true, 'carpentry': true, 'intuition': true, 'construction': true },
                effects: [
                    { type: 'allow', what: ['ocean exploring'] },
                ],
            });

            new G.Tech({
                name: 'sedentism', category: 'tier1',
                desc: '@unlocks [mud shelter]s and [branch shelter]s@unlocks [lodge]s<>To stay in one place when food is scarce is a bold gamble, especially to those without knowledge of agriculture.',//TODO : this should unlock a policy that lets you switch between nomadism (housing and food storage have no effect) and sedentism (gathering and hunting are much less efficient)
                icon: [8, 1],
                cost: { 'insight': 20 },
                req: { 'stone-knapping': true, 'digging': true, 'language': true, 'intuition': true },
                effects: [
                ],
                chance: 3,
            });
            new G.Tech({
                name: 'building', category: 'tier1',
                desc: '@unlocks [hut]s@unlocks [stockpile]s (with [stockpiling])<>The [building,Hut] is only slightly more sophisticated than simple shelters, but is more spacious and can withstand wear longer.',
                icon: [9, 1],
                cost: { 'insight': 20 },
                req: { 'sedentism': true, 'tool-making': true, 'intuition': true },
                effects: [
                ],
                chance: 3,
            });
            new G.Tech({
                name: 'cities', category: 'tier1',
                desc: '@unlocks [hovel]s, which provide 8 [housing] each.//<small>Villages are good too...</small>',
                icon: [29, 7],
                cost: { 'insight': 25 },
                req: { 'building': true, 'intuition': true },
                effects: [
                ],
            });
            new G.Tech({
                name: 'construction', category: 'tier1',
                desc: '@unlocks [house]s @unlocks [warehouse]s (with [stockpiling])',
                icon: [36, 20, "magixmod"], //just for borders
                cost: { 'insight': 30 },
                req: { 'cities': true, 'masonry': true, 'carpentry': true, 'quarrying': true },
                effects: [
                ],
                chance: 3,
            });
            new G.Tech({
                name: 'city planning', category: 'tier1',
                desc: '@unlocks [architect]s',
                icon: [22, 8],
                cost: { 'insight': 25 },
                req: { 'construction': true, 'cities': true, 'alphabet 1/3': true, 'basic mapping': true },
                effects: [
                ],
            });
            new G.Tech({
                name: 'guilds', category: 'tier1',
                desc: '@unlocks [guild quarters], which can house some [worker]s',
                icon: [23, 8],
                cost: { 'insight': 20 },
                req: { 'cities': true, 'construction': true, 'code of law': true, 'intuition': true },
                effects: [
                ],
            });
            new G.Tech({
                name: 'stockpiling', category: 'tier1',
                desc: '@unlocks [storage pit]s<>The foresight to store sustenance and materials ahead of time can make or break a budding civilization.',
                icon: [10, 1],
                cost: { 'insight': 10 },
                req: { 'sedentism': true },
                effects: [
                    { type: 'show res', what: ['food storage'] },
                    { type: 'show res', what: ['material storage'] },
                ],
                chance: 2,
            });

            new G.Tech({
                name: 'digging', category: 'tier1',
                desc: '@unlocks [digger]s@paves the way for simple buildings<>The earth is full of riches - to those who can find them. //<small>Diggy, diggy, hole</small>',
                icon: [11, 1],
                cost: { 'insight': 10 },
                req: { 'stone-knapping': true },
                effects: [
                    { type: 'show context', what: ['dig'] },
                ],
            });
            new G.Tech({
                name: 'well-digging', category: 'tier1',
                desc: '@unlocks [well]s<>It takes some thinking to figure out that water can be found if you dig deep enough.//It takes a lot of bravery, however, to find out if it is safe enough to drink.',
                icon: [22, 7],
                cost: { 'insight': 10 },
                req: { 'digging': true, 'sedentism': true, 'tool-making': true },
                effects: [
                ],
                tutorialMesg: ['tutorial', 'Henceforth, you can dig a well. A well is a good source of fresh water, but only 1 well can be constructed for every 10 pieces of land that you have.', [30, 3, "magixmod"]]
            });
            new G.Tech({
                name: 'woodcutting', category: 'tier1',
                desc: '@unlocks [woodcutter]s. //<small>Insert sad noises of trees here...</small>',
                icon: [23, 5],
                cost: { 'insight': 10 },
                req: { 'stone-knapping': true },
                effects: [
                    { type: 'show context', what: ['chop'] },
                ],
            });

            new G.Tech({
                name: 'plant lore', category: 'upgrade',
                desc: '@[gatherer]s find more [herbs], [fruit]s and [vegetables]<>The knowledge of which plants are good to eat and which mean certain death is slow and perilous to learn.',
                icon: [23, 7],
                cost: { 'insight': 10 },
                req: { 'oral tradition': true, 'herbalism': true },
                effects: [
                ],
            });
            new G.Tech({
                name: 'healing', category: 'tier1',
                desc: '@unlocks [healer]s. //<small>but hospitals when?</small>',
                icon: [25, 7],
                cost: { 'insight': 10 },
                req: { 'plant lore': true, 'stone-knapping': true, 'herbalism': true, 'intuition': true },
                effects: [
                ],
                chance: 2,
            });

            new G.Tech({
                name: 'ritualism', category: 'religion',
                desc: '@provides 10 [spirituality]@unlocks [soothsayer]s@unlocks some ritual policies<>Simple practices, eroded and polished by time, may turn into rites and traditions.',
                icon: [12, 1],
                cost: { 'culture': 5 },
                req: { 'oral tradition': true, 'intuition': true, 'spark\'o religion': true },
                effects: [
                    { type: 'provide res', what: { 'spirituality': 10 } },
                    { type: 'provide res', what: { 'cultural balance': 3 } },
                    { type: 'provide res', what: { 'dark decay': 100 } },
                ],
            });

            new G.Tech({
                name: 'symbolism', category: 'upgrade',
                desc: '@[dreamer]s produce 40% more [insight] @[storyteller]s produce 20% more [culture]@[soothsayer]s produce 20% more [faith] @various other units are also boosted<>The manifestation of one thing for the meaning of another; to make the cosmos relate to itself; this one focuses on shapes. There are two types of [symbolism] that you can unlock!',
                icon: [13, 1],
                cost: { 'culture': 10, 'insight': 10 },
                req: { 'oral tradition': true, 'intuition': true, 'symbI': false },
                effects: [
                    { type: 'provide res', what: { 'cultural balance': 3 } },
                ],
            });

            new G.Tech({
                name: 'burial', category: 'tier1',
                desc: '@unlocks [grave]s, which provide [burial spot]s@exposed [corpse]s make people even more unhappy<>It is the belief that there might be more to death than is first apparent that drives us to bury our deceased.',
                icon: [14, 1],
                cost: { 'insight': 5 },
                req: { 'ritualism': true, 'digging': true },
                effects: [
                ],
                chance: 2,
            });

            new G.Tech({
                name: 'hunting', category: 'tier1',
                desc: '@unlocks [hunter]s<>It is a common tragedy that a creature should die so that another may survive.//[hunter] can gather [hide] if [skinning] is unlocked.',
                icon: [15, 1],
                cost: { 'insight': 5 },
                req: { 'language': true, 'tribalism': true },
                effects: [
                    { type: 'show context', what: ['hunt'] },
                ],
            });

            new G.Tech({
                name: 'fishing', category: 'tier1',
                desc: '@unlocks [fisher]s<>Fishing is more than simply catching fish; it involves knowing where the fish like to gather and which ones are tasty.//It would be wise to check whether any of your territory contains fish before investing in this technology.',
                icon: [25, 1],
                cost: { 'insight': 5 },
                req: { 'tribalism': true },
                effects: [
                    { type: 'show context', what: ['fish'] },
                ],
            });

            new G.Tech({
                name: 'bone-working', category: 'tier1',
                desc: '@[artisan]s can now make [knapped tools] out of [bone]@[bone]s can now be used as [archaic building materials]',
                icon: [22, 5],
                cost: { 'insight': 5 },
                req: { 'stone-knapping': true },
                effects: [
                    { type: 'make part of', what: ['bone'], parent: 'archaic building materials' },
                ],
            });

            new G.Tech({
                name: 'spears', category: 'tier1',
                displayName: 'Spears and maces',
                desc: '@[artisan]s can now craft [stone weapons]@unlocks new modes for [hunter]s and [fisher]s<>Using tools as weapons opens a world of possibilities, from hunting to warfare. <b>Spear hunting/fishing</b> modes have only 80% of its normal efficiency (however, it is still faster than without tools). To remove that penalty, obtain the [aiming] research.',
                icon: [26, 1],
                cost: { 'insight': 10 },
                req: { 'tool-making': true },
            });
            new G.Tech({
                name: 'bows', category: 'tier1',
                desc: '@[artisan]s can now craft [bow]s@unlocks new modes for [hunter]s<><b>Bow hunting</b> has only 40% of its normal efficiency (slower than without tools). To make it faster than the default mode, obtain the [aiming] research.',
                icon: [27, 1],
                cost: { 'insight': 20 },
                req: { 'spears': true },
            });
            new G.Tech({
                name: 'fishing hooks', category: 'tier1',
                desc: '@unlocks new modes for [fisher]s',
                icon: [28, 1],
                cost: { 'insight': 15 },
                req: { 'fishing': true, 'spears': true },
            });

            new G.Tech({
                name: 'fire-making', category: 'tier1',
                desc: '@unlocks [firekeeper]s<>Fire keeps you warm and makes animal attacks much less frequent. //<small>Don\'t burn yourself!</small>',
                icon: [16, 1],
                cost: { 'insight': 15 },
                req: { 'stone-knapping': true },
                chance: 3,
                tutorialMesg: ['tutorial', 'Cold days and nights are gone if your <b>Firekeepers</b> will create up some <b>Fire pits</b> with wood and knapped tools.', [13, 7]]
            });

            new G.Tech({
                name: 'cooking', category: 'tier1',
                desc: '@[firekeeper]s can now cook [cooked meat] and [cooked seafood]<>Tossing fish and meat over a sizzling fire without reducing them to a heap of ash takes a bit of practice.',
                icon: [17, 1],
                cost: { 'insight': 10 },
                req: { 'fire-making': true, 'rules of food': true },
            });
            new G.Tech({
                name: 'curing', category: 'tier1',
                desc: '@[firekeeper]s can now prepare [cured meat] and [cured seafood] with [salt], which last much longer<>Storing food with special preparations seems to ward off rot, and comes along with the advent of delicious jerky.',
                icon: [27, 7],
                cost: { 'insight': 15 },
                req: { 'cooking': true, 'stockpiling': true, 'intuition': true },
            });

            new G.Tech({
                name: 'sewing', category: 'tier1',
                desc: '@unlocks [clothier]s, who work with fabric and can sew [primitive clothes]',
                icon: [29, 1],
                cost: { 'insight': 10 },
                req: { 'tool-making': true, 'intuition': true },
                effects: [
                ]
            });
            new G.Tech({
                name: 'knitting', category: 'tier1',
                desc: 'Knitting is a method by which yarn is manipulated to create a textile or fabric, and is simple enough to learn. It is used in many types of garments. @[clothier]s are 10% more efficient in all modes.',
                icon: [36, 27, "magixmod"],
                cost: { 'insight': 45 },
                req: { 'tool-making': true, 'sewing': true, 'weaving': true },
                effects: [
                ],
            });
            new G.Tech({
                name: 'weaving', category: 'tier1',
                desc: '@[clothier]s can now sew [basic clothes]',
                icon: [30, 1],
                cost: { 'insight': 20 },
                req: { 'sewing': true, 'intuition': true },
                effects: [
                ],
            });
            new G.Tech({
                name: 'leather-working', category: 'tier1',
                desc: '@[clothier]s can now cure [hide]s into [leather] and use leather in cloth-making (with [weaving])',
                icon: [31, 1],
                cost: { 'insight': 20 },
                req: { 'sewing': true },
            });

            new G.Tech({
                category: 'tier1',
                name: 'smelting',
                desc: '@unlocks [furnace]s, which turn ore into metal ingots@unlocks [blacksmith workshop]s, which forge metal ingots into metal goods',
                icon: [26, 5],
                cost: { 'insight': 30 },
                req: { 'fire-making': true, 'building': true, 'intuition': true },
                effects: [
                ],
            });

            new G.Tech({
                name: 'bronze-working', category: 'tier1',
                desc: '@[furnace]s can now make [hard metal ingot]s from [copper ore] and [tin ore]//<small>Smelt it</small>',
                icon: [28, 5],
                cost: { 'insight': 30 },
                req: { 'smelting': true },
                effects: [
                ],
            });
            new G.Tech({
                name: 'iron-working', category: 'tier1',
                desc: '@[furnace]s can now make [hard metal ingot]s from [iron ore] //<small>Get iron pickaxe and mine your first diamond!</small>',
                icon: [27, 5],
                cost: { 'insight': 30 },
                req: { 'smelting': true },
                effects: [
                ],
            });
            new G.Tech({
                name: 'gold-working', category: 'tier1',
                desc: '@[furnace]s can now make [precious metal ingot]s from [gold ore]@[blacksmith workshop]s can now forge [gold block]s out of [precious metal ingot]s //<small>So shiny!</small>',
                icon: [29, 5],
                cost: { 'insight': 40 },
                req: { 'smelting': true },
                effects: [
                ],
            });
            new G.Tech({
                name: 'steel-making', category: 'tier1',
                desc: '@[furnace]s can now make [strong metal ingot]s from [iron ore] and [coal].',
                icon: [30, 5],
                cost: { 'insight': 40 },
                req: { 'iron-working': true },
                effects: [
                ],
            });

            new G.Tech({
                name: 'chieftains', category: 'tier1',
                desc: '@unlocks [chieftain]s, which generate [influence]@provides 5 [authority]<>[chieftain]s lead to better outcomes when there is a struggle within your tribe.',
                icon: [22, 6],
                cost: { 'insight': 10 },
                req: { 'oral tradition': true },
                effects: [
                    { type: 'provide res', what: { 'authority': 5 } },
                ],
            });
            new G.Tech({
                name: 'clans', category: 'tier1',
                desc: '@unlocks [clan leader]s, which generate [influence]@provides 5 [authority].',
                icon: [23, 6],
                cost: { 'insight': 25 },
                req: { 'chieftains': true, 'code of law': true, 'intuition': true },
                effects: [
                    { type: 'provide res', what: { 'authority': 5 } },
                ],
            });
            new G.Tech({
                name: 'code of law', category: 'tier1',
                desc: '@provides 15 [authority]@political units will generate more [influence] //<small>Paragraph 1...</small>',
                icon: [24, 6],
                cost: { 'insight': 20 },
                req: { 'symbolism': true, 'sedentism': true, 'writing': true, 'chieftains': true },
                effects: [
                    { type: 'provide res', what: { 'authority': 15 } },
                ],
            });

            new G.Tech({
                name: 'mining', category: 'tier1',
                desc: '@unlocks [mine]s //<small>Strike the earth!</small>',
                icon: [24, 5],
                cost: { 'insight': 20 },
                req: { 'digging': true, 'building': true },
                effects: [
                    { type: 'show context', what: ['mine'] }
                ],
            });
            new G.Tech({
                name: 'prospecting', category: 'upgrade',
                desc: '@[mine]s can now be set to mine for specific ores //<small>Prospect it!</small>',
                icon: [25, 5],
                cost: { 'insight': 35 },
                req: { 'mining': true, 'intuition': true },
                effects: [
                ],
            });

            new G.Tech({
                name: 'quarrying', category: 'tier1',
                desc: '@unlocks [quarry,Quarries]',
                icon: [25, 6],
                cost: { 'insight': 20 },
                req: { 'digging': true, 'building': true, 'intuition': true },
                effects: [
                    { type: 'show context', what: ['quarry'] }
                ],
            });

            new G.Tech({
                name: 'carving', category: 'tier1',
                desc: '@unlocks [carver]s, which can produce a variety of goods out of stone, wood and bone@may lead to the knowledge of better tools',
                icon: [26, 6],
                cost: { 'insight': 5 },
                req: { 'stone-knapping': true },
                effects: [
                ],
                chance: 3,
            });

            new G.Tech({
                name: 'gem-cutting', category: 'tier1',
                desc: '@[carver]s can now craft shiny [gem block]s out of [gems]//<small>That\'s so sparkly!</small>',
                icon: [27, 6],
                cost: { 'insight': 20 },
                req: { 'carving': true, 'tool-making': true },
                effects: [
                ],
            });

            new G.Tech({
                name: 'pottery', category: 'tier1',
                desc: '@unlocks [potter]s, which produce goods such as [pot]s out of [clay] and [mud]@unlocks [granary,Granaries] (with [stockpiling])@[digger]s find more [clay]',
                icon: [28, 6],
                cost: { 'insight': 20 },
                req: { 'fire-making': true, 'digging': true, 'tool-making': true },
                effects: [
                ],
                tutorialMesg: ['tutorial', 'Take advantage of bonuses that your researches provide, such as diggers finding more clay thanks to this research...so you can craft more <b>pots</b>.', [32, 15, "magixmod"]]
            });
            new G.Tech({
                name: 'masonry', category: 'tier1',
                desc: '@unlocks [kiln]s, which can produce a variety of goods, such as [brick]s@[carver]s can now turn [stone]s into [cut stone] slowly //<small>Let\'s build a tall brick wall!</small>',
                icon: [29, 6],
                cost: { 'insight': 35 },
                req: { 'building': true, 'pottery': true },
                effects: [
                ],
            });
            new G.Tech({
                name: 'carpentry', category: 'tier1',
                desc: '@unlocks [carpenter workshop]s, which can process [log]s into [lumber] and produce materials crafted from wood@unlocks [barn]s (with [stockpiling])',
                icon: [30, 6],
                cost: { 'insight': 35 },
                req: { 'building': true, 'woodcutting': true, 'intuition': true },
                effects: [
                ],
            });

            new G.Tech({
                name: 'monument-building', category: 'tier1',
                desc: '@unlocks the [mausoleum], an early wonder',
                icon: [24, 8],
                cost: { 'insight': 90, 'culture': 40 },
                req: { 'construction': true, 'burial': true, 'belief in the afterlife': true, 'intuition': true },
                tutorialMesg: ['tutorial', 'After getting <b>Monument-building</b>, you may begin constructing the very first wonder of your people. Check it out in the <u>Production</u> tab!', [32, 18, "magixmod"]]
            });
            //MAGIX
            new G.Tech({
                name: 'wizardry', category: 'tier1',
                desc: '@Some sort of weird, uncommon people will now arrive in you tribe. They are called <b><font color="white">Wizards</font></b>. They behave weird. From now, wizardry and essences will start to appear. Essences are not naturally generated: instead, they consume [mana]. Get [wizard wisdom] so that you can hire some [wizard]s!//With the newfound discovery of <b><font color="white">Wizards</font></b>, both [scouting] and [exploration trips] can be unlocked at the same time!//<small>Wizards only intend to do good!</small>',
                icon: [5, 3, "magixmod"],
                cost: { 'insight': 75, 'faith': 5 },
                req: { 'well-digging': true, 'instruction': true, 'a gift from the mausoleum': true, 'spark\'o religion': true },
                effects: [
                    {
                        type: 'function', func: function () {
                            if (!G.has('t5')) G.getDict('scouting').req = { 'tool-making': true, 'language': true, 'intuition': true };
                            G.getDict('exploration trips').req = { 'tool-making': true, 'language': true, 'intuition': true };
                        }
                    }
                ],
            });
            //New tech to allow wizards progressing
            new G.Tech({
                name: 'mana brewery', category: 'tier1',
                desc: 'Getting this will let you find a specimen who will convert [water] into [mana]. //<small>But how?</small>',
                icon: [3, 2, "magixmod"],
                cost: { 'insight': 50 },
                req: { 'wizardry': true },
            });
            new G.Tech({
                name: 'more useful housing', category: 'tier1',
                desc: 'Unlock the [brick house with a silo], which is made out of hard [brick]s that can store [food] and provide additional [housing].',
                icon: [5, 2, "magixmod"],
                cost: { 'insight': 45 },
                req: { 'city planning': true, 'cities': true, 'construction': true, 'a gift from the mausoleum': true },
            });
            new G.Tech({
                name: 'well of mana', category: 'tier1',
                desc: 'You may now construct a new type of well that will gather [mana] for you. //<small>Oh, so THAT is the power source for magic tricks...</small>',
                icon: [4, 3, "magixmod"],
                cost: { 'insight': 45, 'faith': 5, 'mana': 100 },
                req: { 'mana brewery': true, 'more useful housing': true },
            });
            new G.Tech({
                name: 'wizard towers', category: 'tier1',
                desc: 'Now you can build wizard towers that can produce a variety of [magic essences,Essences]. The type made depends on what type of tower you build. Wizard towers also provide additional housing, but making [magic essences,Essences] will require [mana] as upkeep. @unlocks six towers: [fire wizard tower]s, [water wizard tower]s, [nature wizard tower]s, [dark wizard tower]s, [lightning wizard tower]s, and [wind wizard tower]s',
                icon: [6, 0, "magixmod"],
                cost: { 'insight': 125, 'culture': 30, 'mana': 250, 'influence': 10 },
                req: { 'well of mana': true, 'more useful housing': true },
                effects: [
                ],
                tutorialMesg: ['tutorial', 'You have unlocked <b>Wizard towers</b>!<br>These towers will provide housing and produce Essences by consuming Mana. Make sure that you have enough <b>Mana</b> production and some <b>Wizards</b> to keep the towers working properly. Be sure to also obtain the <b>Essence storages</b> needed for your essence types!', [20, 13, "magixmod"]]
            });
            new G.Tech({
                name: 'wizard wisdom', category: 'tier1',
                desc: 'Now you can hire [wizard]s to improve your tribe. For every two [wizard]s, you will gain 1 [wisdom] point. //<small>wisdom++</small>',
                icon: [3, 0, "magixmod"],
                cost: { 'insight': 85, 'culture': 30, 'mana': 50, 'influence': 10 },
                req: { 'mana brewery': true, 'more useful housing': true, 'wizardry': true },
                tutorialMesg: ['tutorial', 'Now you\'ve unlocked Wizards. Don\'t hire too much of them too early because these guys love eating a lot, so having too much of them may lead to tribe starvation. Instead, try to make your tribe bigger, explore more, and find more ways to get food. Just be aware that wizards are a must-have in large amounts for new magical technologies!', [choose([24, 23, 22, 21]), 8, "magixmod"]]
            });
            new G.Tech({
                name: 'Wizard complex', category: 'tier1',
                desc: 'Unlocks a giant complex dedicated to wizardry. Expensive to build, but produces all types of [magic essences,Essences] three times faster than usual towers. Each gigantic complex will increase your max [faith], [culture], and [influence] as well, so they are quite useful!',
                icon: [2, 2, "magixmod"],
                cost: { 'insight': 480, 'culture': 30, 'mana': 1000, 'influence': 20 },
                req: { 'mana brewery': true, 'more useful housing': true, 'wizardry': true, 'wizard towers': true },
            });
            new G.Tech({
                name: 'first portal to new world', category: 'tier1',
                desc: 'Your wizards discovered a way to make a portal and can\'t wait to open a new dimension now. What would it mean? It would mean more places to build, more unlocks, and more everything!',
                icon: [2, 1, "magixmod"],
                cost: { 'insight': 1400, 'culture': 30, 'mana': 2500, 'influence': 70 },
                req: { 'mana brewery': true, 'more useful housing': true, 'wizardry': true, 'wizard wisdom': true, 'Wizard complex': true, 'belief in portals': true, 'valid portal frame': true },
            });
            new G.Tech({
                name: 'glass-crafting', category: 'tier1',
                desc: 'Your [kiln]s will be able to craft [glass] out of [sand]. //<small>A window to the world...</small>',
                icon: [7, 1, "magixmod"],
                cost: { 'insight': 45 },
                req: { 'masonry': true, 'smelting': true },
            });
            new G.Tech({
                name: 'churches', category: 'tier1',
                desc: 'Unlocks [church,Churches], which are another source of [faith].',
                icon: [7, 2, "magixmod"],
                cost: { 'insight': 135 },
                req: { 'wizardry': true, 'wizard wisdom': true },
            });
            new G.Tech({
                name: 'essence storages', category: 'tier1',
                desc: '[magic essences] have to be stored somewhere, of course, so don\'t hesitate to store them! //Unlocks [water essence storage,Essence storages], which you must first build to store more essence. //<small>And nobody knows why these look like hourglasses...even the creator of them.</small>',
                icon: [5, 0, "magixmod"],
                cost: { 'insight': 100, 'mana': 300, 'faith': 8, 'wand': 1 },
                effects: [
                    { type: 'provide res', what: { 'fire essence limit': 1 } },
                    { type: 'provide res', what: { 'water essence limit': 1 } },
                    { type: 'provide res', what: { 'lightning essence limit': 1 } },
                    { type: 'provide res', what: { 'dark essence limit': 1 } },
                    { type: 'provide res', what: { 'wind essence limit': 1 } },
                    { type: 'provide res', what: { 'nature essence limit': 1 } },
                ],
                req: { 'mana brewery': true, 'more useful housing': true, 'wizardry': true },
            });
            new G.Tech({
                name: 'concrete making', category: 'tier1',
                desc: 'Use limestone and water to craft a concrete, an [advanced building materials,Advanced building material].',
                icon: [8, 0, "magixmod"],
                cost: { 'insight': 70 },
                req: { 'masonry': true, 'smelting': true, 'glass-crafting': true },
            });
            new G.Tech({
                name: 'plain island building', category: 'tier1',
                desc: 'Unlocks a sheet of buildings which can only be built in your new dimension.',
                icon: [9, 0, "magixmod"],
                cost: { 'insight': 1800, 'influence': 100 },
                effects: [
                ],
                req: { 'the well of ideas': true },
            });
            new G.Tech({
                name: 'construction II', category: 'tier1',
                desc: '@Unlocks [floored house]s for your new island! These provide much more [housing] but are more limited and take up more spaces. @Also unlocks [lodge on water,Lodges on water]!',
                icon: [0, 39, "magixmod", 8, 1, "magixmod"],
                cost: { 'insight': 100 },
                req: { 'first portal to new world': true, 'plain island building': true },
            });
            new G.Tech({
                name: 'burial in new world', category: 'tier1',
                displayName: 'Island burials',
                desc: 'Provides a good use of the new island. You may build now some cemetries which consume more [land of the Plain Island] (but will allow you to get many more [burial spot]s).',
                icon: [1, 6, "magixmod"],
                cost: { 'insight': 80 },
                req: { 'first portal to new world': true, 'plain island building': true },
            });
            new G.Tech({
                name: 'weaving II', category: 'upgrade',
                desc: 'Upgrades the sewing skills of your civilization. @Unlocks [drying rack]s, which make [dried leather] used to craft better quality clothing. @Now artisans can sew [fishing net] @Clothier can craft [thread] that is required to craft a [fishing net].',
                icon: [0, 39, "magixmod", 13, 5, "magixmod"],
                cost: { 'insight': 380, 'wisdom': 10 },
                req: { 'wizardry': true, 'sewing': true },
            });
            new G.Tech({
                name: 'hunting II', category: 'upgrade',
                desc: 'Builds upon the hunting skills of your civilization. @Unlocks a way to craft a new weapon, allowing artisans to make [crossbow]s.',
                icon: [15, 0, "magixmod"],
                cost: { 'insight': 385, 'wisdom': 10 },
                req: { 'wizardry': true, 'hunting': true },
            });
            new G.Tech({
                name: 'fishing II', category: 'upgrade',
                desc: 'Builds upon the fishing skills of your civilization. @Introduces [fishing net] to your [fisher]s!',
                icon: [1, 7, "magixmod"],
                cost: { 'insight': 385, 'wisdom': 10 },
                req: { 'wizardry': true, 'fishing': true },
            });
            new G.Tech({
                name: 'cobalt-working', category: 'tier1',
                desc: '@[furnace]s can now make special [cobalt ingot]s from [cobalt ore]',
                icon: [16, 0, "magixmod"],
                cost: { 'insight': 145 },
                req: { 'smelting': true, 'construction II': true },
            });
            new G.Tech({
                name: 'agriculture', category: 'tier1',
                desc: '@Unlocks [wheat farm,Farms]. Later on, you will be able to use these to produce [food] for your civilization, and possibly even get [magic essences,Essences] out of magical plants!',
                icon: [16, 2, "magixmod"],
                cost: { 'insight': 575 },
                req: { 'Wizard complex': true, 'gardening': true },
            });
            new G.Tech({
                name: 'juice-crafting', category: 'tier1',
                desc: '@Allows you to craft [juices] from [fruit], [sugar], and [water]. Be careful, however, as [juices] may spoil. [spoiled juices] make your people even more unhappy and unhealthy than normal muddy water.',
                icon: [16, 4, "magixmod"],
                cost: { 'insight': 450, 'wisdom': 50 },
                req: { 'agriculture': true, 'gardening': true },
            });
            new G.Tech({
                name: 'farm of the sugar cane', category: 'tier1',
                desc: 'Getting this will make [sugar cane] farms possible.',
                icon: [15, 4, "magixmod", 24, 1],
                cost: { 'insight': 495, 'wisdom': 50 },
                req: { 'agriculture': true, 'gardening': true },
            });
            new G.Tech({
                name: 'precious pottery', category: 'tier1',
                desc: '@Improves pottery in your civilization, allowing people to craft more beautiful [precious pot]s and useful [potion pot]s. //<small>These pots sure are really precious...</small>',
                icon: [16, 8, "magixmod"],
                cost: { 'insight': 650, 'wisdom': 60 },
                req: { 'construction II': true },
            });
            new G.Tech({
                name: 'alchemy', category: 'tier1',
                desc: '@Now you may start a new adventure with...potions! (Note that you must get [terrain conservacy] to get [alchemy zone]s.) //<small>splash potions when though</small>',
                icon: [16, 9, "magixmod"],
                cost: { 'insight': 720, 'wisdom': 60 },
                req: { 'maths III': true },
            });
            new G.Tech({
                name: 'terrain conservacy', category: 'tier1',
                desc: '@Unlocks a subclass of [architect] whose job is to set up [alchemy zone]s. Some units will use [alchemy zone]s instead of [land]!',
                icon: [17, 5, "magixmod", 24, 1],
                cost: { 'insight': 940, 'wisdom': 60 },
                req: { 'alchemy': true, 'map details': true },
            });
            new G.Tech({
                name: 'first aid', category: 'tier1',
                desc: '@The [sick] and [wounded] will have a higher chance to recover, but require [first aid things]. [healer]s with the option to heal the wounded are now more efficient. <b>This research generates [health] from [healer]s at a low rate.</b><>Also adds a new mode for [artisan]s that will let you craft [first aid things].',
                icon: [15, 9, "magixmod"],
                cost: { 'insight': 680, 'wisdom': 60 },
                req: { 'better healing': true },
            });
            new G.Tech({
                name: 'maths', category: 'tier1',
                desc: '@people will know basic math, making them more intelligent and allowing them to have less problems with understanding more complex researches. @allows you to notate small numbers',
                icon: [17, 1, "magixmod", 22, 1],
                cost: { 'insight': 20 },
                effects: [
                    { type: 'provide res', what: { 'cultural balance': -3 } }
                ],
                req: { 'oral tradition': true, 'writing': true },
            });
            new G.Tech({
                name: 'maths II', category: 'tier1',
                desc: '@[population,People] will know more about math, making them even more intelligent. @They will have a larger chance to understand more complex ideas and concepts. @improves your civilization\'s numeral system @introduces equations',
                icon: [0, 39, "magixmod", 17, 1, "magixmod", 23, 1],
                cost: { 'insight': 80 },
                effects: [
                    { type: 'provide res', what: { 'cultural balance': -6 } }
                ],
                req: { 'oral tradition': true, 'maths': true, 'city planning': true },
            });
            new G.Tech({
                name: 'maths III', category: 'tier1',
                desc: '@increase the math skills of your civilization: required for further researching. <>@unlocks ways to calculate proportions which may be needed in chemistry or more complex witchery and wizardry. @increases your people\'s knowledge of equations and functions, and lets them calculate percentage of territory explored with [tile inspection II] //<small>I, personally, would research it now!</small>',
                icon: [1, 39, "magixmod", 18, 4, "magixmod"],
                cost: { 'insight': 360, 'wisdom': 10 },
                req: { 'oral tradition': true, 'maths II': true, 'plain island building': true },
            });
            new G.Tech({
                name: 'ink crafting', category: 'tier1',
                desc: '[artisan] will be able to craft [ink], which can be used by [poet]s. You can craft ink using a new [artisan] mode.',
                icon: [18, 7, "magixmod"],
                cost: { 'insight': 360 },
                req: { 'plain island ideas': true },
            });
            new G.Tech({
                name: 'poetry', category: 'tier1',
                desc: 'A beautiful art of culture. Poems, stories, essays, novels and so much more can now be written down and be cherished for generations!',
                icon: [18, 8, "magixmod"],
                cost: { 'insight': 650, 'culture': 300, 'inspiration': 25 },
                req: { 'ink crafting': true },
            });
            new G.Tech({
                name: 'moar juices', category: 'tier1',
                desc: 'Allows you to craft [juices] out of [vegetables] now.//<small>Moar juice!!!</small>',
                icon: [17, 4, "magixmod"],
                cost: { 'insight': 805 },
                req: { 'plain island ideas': true, 'juice-crafting': true },
            });
            new G.Tech({
                name: 'medicaments brewing', category: 'tier1',
                desc: '[alchemist]s will now be able to craft medicaments out of [flowers,Various flowers] and [herbs] at their stands.',
                icon: [18, 2, "magixmod"],
                cost: { 'insight': 750 },
                req: { 'alchemy': true },
            });
            new G.Tech({
                name: 'alcohol brewing', category: 'tier1',
                desc: '[alchemist]s will now be able to craft alcohol at their stands (using their own recipe).',
                icon: [18, 3, "magixmod"],
                cost: { 'insight': 750 },
                req: { 'alchemy': true },
            });
            new G.Tech({
                name: 'mana brewery II', category: 'tier1',
                desc: '[alchemist]s will now be able to craft [mana] at their stands! To do it, they will use a similar recipe as the [mana maker].',
                icon: [0, 39, "magixmod", 19, 2, "magixmod"],
                cost: { 'insight': 1000 },
                req: { 'alchemy': true },
            });
            new G.Tech({
                name: 'stronger faith', category: 'upgrade',
                desc: 'Unlocks the [cathedral], which requires [holy essence] as upkeep. Soothsayers will gain less [faith], but [church,Churches] will gain more than [soothsayer]s now!',
                icon: [19, 3, "magixmod"],
                cost: { 'insight': 1000 },
                req: { 'Wizard complex': true, '7th essence': true, 'ritualism': true },
            });
            new G.Tech({
                name: 'healing with brews', category: 'tier1',
                displayName: 'Better healing brews',
                desc: '@[sick] people will have a larger chance to get recovered when treated by [healer]s that use [medicament brews,Brews]',
                icon: [19, 6, "magixmod"],
                cost: { 'insight': 650, 'wisdom': 60 },
                req: { 'better healing': true, 'medicaments brewing': true },
            });
            new G.Tech({
                name: 'physics', category: 'tier1',
                desc: 'People that know how physics work will understand why towers are falling, why apples will fall, why some objects float while others sink, and much more. //Provides 2 [education]',
                icon: [13, 10, "magixmod"],
                cost: { 'insight': 1000, 'science': 1 },
                effects: [
                    { type: 'provide res', what: { 'education': 2 } },
                ],
                req: { 'maths II': true, 'will to know more': true },
            });
            new G.Tech({
                name: 'monument-building II', category: 'upgrade',
                desc: '@Unlocks the [temple of deities], a mid-legacy wonder. It is much bigger than than the [mausoleum] and may lead to victory!',
                icon: [0, 39, "magixmod", 14, 10, "magixmod"],
                cost: { 'insight': 1400, 'culture': 300, 'spirituality': 15, 'faith': 125 },
                req: { 'construction': true, 'burial': true, 'culture of the afterlife': true, 'physics': true },
                effects: [
                ],
            });
            new G.Tech({
                name: 'weapon blacksmithery', category: 'tier1',
                desc: '[blacksmith workshop,Blacksmiths] can now craft [metal weapons] (just like [metal tools]).',
                icon: [13, 11, "magixmod", 22, 1],
                cost: { 'insight': 50 },
                req: { 'smelting': true },
                effects: [
                ],
            });
            new G.Tech({
                name: 'armor blacksmithery', category: 'tier1',
                desc: '[blacksmith workshop,Blacksmiths] can now craft [armor set]s (just like [metal tools]).',
                icon: [12, 11, "magixmod", 22, 1],
                cost: { 'insight': 50 },
                req: { 'smelting': true },
                effects: [
                ],
            });
            new G.Tech({
                name: 'mo\' floorz', category: 'upgrade',
                desc: 'Each [floored house] will gain a 4th floor, allowing them to fit 10 more [population,people] for every [floored house]. However, the chance for a house collapsing is increased by 1%.//<small>nothing is better than the view from atop a floored house</small>',
                icon: [14, 11, "magixmod"],
                cost: { 'insight': 750, 'wisdom': 15 },
                req: { 'physics': true },
                effects: [
                ],
            });
            new G.Tech({
                name: 'spell of capacity', category: 'upgrade',
                desc: 'Smart wizards figured out a spell which will increase the maximum food/material storage of [warehouse]s, [barn]s, [granary,Granaries], [storage pit]s, and [stockpile]s by 20%.',
                icon: [4, 1, "magixmod", 23, 1],
                cost: { 'insight': 750, 'wisdom': 15, 'mana': 1e5, 'wind essence': 3000 },
                req: { 'physics': true },
            });
            new G.Tech({
                name: 'better house construction', category: 'upgrade',
                desc: 'Without any requiring any more resources, you\'ll be able to compact the [land] usage of some houses. @You gain +1 [housing] from every 8 [house]s, @You gain +1 [housing] for every 5 [brick house with a silo,Brick houses].',
                icon: [8, 11, "magixmod"],
                cost: { 'insight': 750, 'wisdom': 15 },
                req: { 'physics': true },
            });
            new G.Tech({
                name: 'deeper wells', category: 'upgrade',
                desc: '@[well]s provide 5% more water. Only boosts normal [well]s.',
                icon: [31, 15, "magixmod"],
                cost: { 'insight': 490, 'wisdom': 30 },
                req: { 'agriculture': true },
            });
            new G.Tech({
                name: 'prospecting II', category: 'upgrade',
                desc: '@[mine]s can now dig in search of [nickel ore,Nickel] or focus on exclusively mining [various stones] with tripled efficiency.',
                icon: [11, 12, "magixmod"],
                cost: { 'insight': 270 },
                req: { 'prospecting': true, 'mining': true, 'a gift from the mausoleum': true },
            });
            new G.Tech({
                name: 'quarrying II', category: 'upgrade',
                desc: '@[quarry] can now dig for [various cut stones] using a new special mode. @Quarries are now able to gather [platinum ore,Platinum]',
                icon: [10, 12, "magixmod"],
                cost: { 'insight': 355 },
                req: { 'prospecting II': true, 'quarrying': true },
            });
            new G.Tech({
                name: 'platinum-working', category: 'tier1',
                desc: '@[furnace]s can now make [platinum ingot]s from [platinum ore]@[blacksmith workshop]s can now forge [platinum block]s out of [platinum ingot]s //<small>not that huge in size though</small>',
                icon: [5, 11, "magixmod"],
                cost: { 'insight': 120 },
                req: { 'smelting': true, 'prospecting II': true },
                effects: [
                ],
            });
            new G.Tech({
                name: 'nickel-working', category: 'tier1',
                desc: '@[furnace]s can now make [hard metal ingot]s from [nickel ore].',
                icon: [1, 12, "magixmod"],
                cost: { 'insight': 100 },
                req: { 'smelting': true, 'prospecting II': true },
                effects: [
                ],
            });
            new G.Tech({
                name: 'papercrafting', category: 'tier1',
                desc: '@unlocks the [Paper-crafting shack], which lets you create 3 types of paper:@<font color="#fde088">papyrus</font> out of [sugar cane] @<font color="#fde088">pergamin</font> out of [hide], [leather] @<font color="#fde088">common paper</font> out of [bamboo] with the help of a secret non-magic recipe',
                icon: [18, 12, "magixmod"],
                cost: { 'insight': 480, 'wisdom': 5 },
                req: { 'city planning': true, 'a gift from the mausoleum': true },
                effects: [
                ],
            });
            new G.Tech({
                name: 'ingredient crafting', category: 'tier1',
                desc: 'Alchemists can now craft some special ingredients for more advanced potions. They will use up [basic brews] and [misc materials].',
                icon: [17, 9, "magixmod"],
                cost: { 'insight': 500, 'wisdom': 5 },
                req: { 'alchemy': true },
                effects: [
                ],
            });
            new G.Tech({
                name: '2nd portal sky',
                displayName: 'The second portal',
                category: 'tier1',
                desc: 'After your people heard [the god\'s call], your wizards full of faith figured out a way to activate a portal to Paradise!',
                icon: [20, 3, "magixmod"],
                cost: { 'insight': 1595, 'culture': 300, 'mana': 2500, 'influence': 70, 'spirituality': 50, 'population': 1000, 'idea tablet': 5 },
                req: { 'belief in portals': true, 'first portal to new world': true, 'the god\'s call': true, 'monument-building II': true },
            });
            new G.Tech({
                name: 'paradise building', category: 'tier1',
                desc: 'Unlocks a new sheet of buildings which can only be built in the newly opened <b>Paradise</b>. Also allows you to create [alchemy zone]s using [land of the Paradise]! //<font color="#f70054"><b>After getting this, rolling new researches will cost 2 [idea tablet]s instead of 1 from now on.</b> This technology also costs 20 additional idea tablets on its own.</font> //<small>I\'d construct...a huge campfire</small>',
                icon: [19, 13, "magixmod"],
                cost: { 'insight': 4, 'paradise tablet': 1, 'idea tablet': 20 },
                effects: [
                    { type: 'provide res', what: { 'industry point': 800 } },
                    { type: 'show res', what: ['industry point'] },
                ],
                req: { '2nd portal sky': true },
            });
            new G.Tech({
                name: 'dark-essenced ingredients', category: 'tier1',
                desc: 'Unlocks a sheet of ingredients made with [dark essence] as a part of a mysterious recipe.',
                icon: [20, 5, "magixmod"],
                cost: { 'insight': 450, 'dark essence': 4e3, 'wisdom': 10 },
                req: { 'ingredient crafting': true },
            });
            new G.Tech({
                name: 'wind-essenced ingredients', category: 'tier1',
                desc: 'Unlocks a sheet of ingredients made with [wind essence] as a part of a mysterious recipe.',
                icon: [15, 13, "magixmod"],
                cost: { 'insight': 450, 'wind essence': 4e3, 'wisdom': 10 },
                req: { 'ingredient crafting': true },
            });
            new G.Tech({
                name: 'nature-essenced ingredients', category: 'tier1',
                desc: 'Unlocks a sheet of ingredients made with [nature essence] as a part of a mysterious recipe.',
                icon: [18, 13, "magixmod"],
                cost: { 'insight': 450, 'nature essence': 4e3, 'wisdom': 10 },
                req: { 'ingredient crafting': true },
            });
            new G.Tech({
                name: '7th essence', category: 'tier1',
                desc: 'Your people have discovered another essence which can be felt in the Paradise\'s air. @Unlocks the [holy wizard tower] and [holy essence storage], which produces a new type of essence!//<small>But shouldn\'t holy essence vaporize dark essence?</small>',
                icon: [20, 6, "magixmod", 8, 12, 23, 1],
                cost: { 'insight': 1325 },
                effects: [
                    { type: 'provide res', what: { 'science': 2 } },
                ],
                req: { '2nd portal sky': true, 'paradise building': true },
            });
            new G.Tech({
                name: '7th complex tower', category: 'tier1',
                desc: 'Due to the 7th essence being discovered, [Wizard Complex,Wizard Complexes] can build up a new tower specifically for it.@Getting this will make each [Wizard Complex] use an additional 6 [mana] for separate collection of [holy essence], but provide more [housing]!',
                icon: [20, 8, "magixmod"],
                cost: { 'insight': 695 },
                effects: [
                ],
                req: { '7th essence': true, 'Wizard complex': true },
            });
            new G.Tech({
                name: 'architects knowledge', category: 'upgrade',
                displayName: 'Architectural information',
                desc: '[architect,Architects] will now be able to build [brick house with a silo,Brick houses] and [floored house]s.',
                icon: [21, 7, "magixmod"],
                cost: { 'insight': 668, 'wisdom': 2 },
                req: { 'construction II': true },
            });
            new G.Tech({
                name: 'bookcrafting', category: 'tier1',
                desc: '[artisan]s will now be able to craft [empty book,Books]. //<small>By the way, there\'s really no hard limit to how long these descriptions can be (well, until you hit the string limit or something weird like that). Let\'s go: Konrad Wallenrod is an 1828 narrative poem, in Polish, by Adam Mickiewicz, set in the 14th-century Grand Duchy of Lithuania. Mickiewicz wrote it, while living in St. Petersburg, Russia, in protest against the late-18th-century partitioning of the Polish-Lithuanian Commonwealth by the Russian Empire, the Kingdom of Prussia, and the Habsburg Monarchy. Mickiewicz had been exiled to St. Petersburg for his participation in the Philomaths organization at Vilnius University. The poem helped inspire the Polish November 1830 Uprising against Russian rule. Though its subversive theme was apparent to most readers, the poem escaped censorship due to conflicts among the censors and, in the second edition, a prefatory homage to Tsar Nicholas I. Though Mickiewicz later disparaged the work, its cultural influence in Poland persists.<br>Anyway, how\'s your day been?</small>',
                icon: [12, 12, "magixmod"],
                cost: { 'insight': 325 },
                req: { 'papercrafting': true },
            });
            new G.Tech({
                name: 'noting', category: 'tier1',
                desc: '[population,People] can now write notes to preseve and remember things and tasks! //<small>note 48255</small>',
                icon: [21, 6, "magixmod"],
                cost: { 'insight': 300 },
                req: { 'bookcrafting': true, 'ink crafting': true },
            });
            new G.Tech({
                name: 'bookwriting', category: 'tier1',
                desc: 'Allows for the creation of written books from [lawyer\'s notes] and [poet\'s notes], and [nature book]s with the addition of [flowers]. @unlocks the [lodge of writers], who will convert their notes into books @people in [Wizard Complex,Wizard Complexes] will write [spellbook]s in their spare time',
                icon: [12, 13, "magixmod"],
                cost: { 'insight': 300 },
                req: { 'bookcrafting': true, 'ink crafting': true },
            });
            new G.Tech({
                name: 'better influence & authority', category: 'upgrade',
                desc: 'Unlocks the [lawyer] and [mediator] units. A [mediator] will solve conflicts and gain [happiness] from solving them, while a [lawyer] will copy and share the code of law.',
                icon: [21, 0, "magixmod"],
                cost: { 'insight': 1015 },
                req: { 'Wizard complex': true },
            });
            new G.Tech({
                name: 'ambrosium treeplanting', category: 'tier1',
                desc: '@Unlocks the [holy orchard], which makes [ambrosium leaf,Ambrosium leaves].',
                icon: [21, 11, "magixmod"],
                cost: { 'insight': 1015 },
                req: { 'paradise building': true, 'land acknowledge': true, 'treeplanting': true },
            });
            new G.Tech({
                name: 'ambrosium crafting', category: 'tier1',
                desc: '@Unlocks the [ambrosium shard shack], which can craft [ambrosium shard]s with the use of [mana], [cloudy water], and [ambrosium leaf,Ambrosium leaves].',
                icon: [13, 14, "magixmod"],
                cost: { 'insight': 980 },
                req: { 'ambrosium treeplanting': true, 'paradise building': true },
            });
            new G.Tech({
                name: 'paradise crafting', category: 'tier1',
                desc: '@Some buildings and crafting shacks from mortal world can be built in Paradise as a separated unit.',
                icon: [0, 14, "magixmod", 21, 15, "magixmod"],
                cost: { 'insight': 650 },
                req: { 'ambrosium treeplanting': true, 'paradise building': true },
            });
            new G.Tech({
                name: 'explosive crafting & mining', category: 'tier1',
                desc: 'Unlocks the [explosive mine] <b>(well, you also need [intelligent blasting])</b>. @Unlocks the [pyro-artisan] (an artisan for [light explosives,Explosives], which requires [sulfur] for explosion power). Mines will start gathering some [sulfur] with the <b>ALL</b> modes selected. Both [mine] and [mine of the plain island] can gather it.',
                icon: [20, 15, "magixmod"],
                cost: { 'insight': 850, 'wisdom': 10 },
                req: { 'ambrosium treeplanting': true, 'paradise building': true },
            });
            new G.Tech({
                name: 'intelligent blasting', category: 'tier1',
                desc: 'Unlocks the [explosive mine]. With [light explosives,Explosives], miners will be able to, well, blast off underground! These mines cannot be prospected, but they still can be turned on/off. These mines have a larger rate of accidents than normal [mine]s!',
                icon: [14, 15, "magixmod"],
                cost: { 'insight': 850, 'science': 1, 'wisdom': 9 },
                req: { 'ambrosium treeplanting': true, 'paradise building': true },
            });
            new G.Tech({
                name: 'bigger potion pallet', category: 'tier1',
                desc: 'Unlocks more potion types. This includes [combat potions], which are throwable and may be used in battle as well as [jar for concoctions,Concoction jars], which are used for more advanced potions! <b>Unlocks stands, which allow you to craft pots for these types of potion out of a [potion pot].</b>',
                icon: [21, 16, "magixmod"],
                cost: { 'insight': 850, 'science': 1, 'wisdom': 9 },
                req: { 'alcohol brewing': true, 'medicaments brewing': true, 'alchemy': true, 'paradise building': true },
            });
            new G.Tech({
                name: 'combat potion & concoction brewing', category: 'tier1',
                desc: '<font color="#93db70">Allows you to craft 4 basic [combat potions] and 2 [jar for concoctions,Concoctions] with some brand-new stands.</font>',
                icon: [20, 16, "magixmod"],
                cost: { 'insight': 850, 'science': 1, 'wisdom': 9 },
                req: { 'alcohol brewing': true, 'medicaments brewing': true, 'alchemy': true, 'paradise building': true },
            });
            new G.Tech({
                name: 'dark wonder', category: 'tier1',
                desc: 'Unlocks [the cemetarium]: the dark wonder. //<q>You do not have to stay on its grounds to feel a trembling fear of this place...</q>',
                icon: [22, 3, "magixmod"],
                cost: { 'insight': 770, 'science': 1, 'wisdom': 9 },
                req: { 'revenants': true },
            });
            new G.Tech({
                name: 'hope of revenant abandoning', category: 'upgrade',
                desc: '[happiness] harm from [wild corpse]s and [corpse]s is halved.',
                icon: [22, 5, "magixmod"],
                cost: { 'insight': 955, 'science': 1, 'wisdom': 9, 'cemetarium construction point': 250 },
                req: { 'revenants': true, 'dark wonder': true },
            });
            new G.Tech({
                name: 'better papercrafting recipe', category: 'upgrade',
                desc: 'Increases the amount of [paper] crafted in shacks by +40%. If you get [moderation] you get an additional 8%, while with [caretaking] you get just 4%.',
                icon: [8, 12, 14, 12, "magixmod", 21, 15, "magixmod"],
                cost: { 'insight': 846, 'wisdom': 9 },
                req: { 'papercrafting': true, 'poetry': true },
            });
            new G.Tech({
                name: 'art of cooking', category: 'tier1',
                desc: '<font color="fuschia">Unlocks the [chef]. Chefs know the delicate art of cooking tasty dishes and may make delectable [meals] for your people! [meals] can make people even happier and healthier.</font>',
                icon: [23, 13, "magixmod"],
                cost: { 'insight': 535, 'wisdom': 30, 'culture': 400, 'inspiration': 200 },
                req: { 'cooking II': true },
            });
            new G.Tech({
                name: 'Farm of wheat', category: 'tier1',
                desc: 'Unlocks the [wheat farm], which gives you lots of [wheat].',
                icon: [23, 12, "magixmod"],
                cost: { 'insight': 420 },
                req: { 'agriculture': true },
            });
            new G.Tech({
                name: 'flour-crafting I', category: 'tier1',
                desc: '@Unlocks a mode for [artisan]s that lets you process [wheat] into [flour].</li>',
                icon: [9, 7, "magixmod"],
                cost: { 'insight': 685 },
                req: { 'Farm of wheat': true },
            });
            new G.Tech({
                name: 'flour-crafting II', category: 'tier2',
                desc: '@Unlocks the mighty [windmill]. Uses [land] but can process way more [wheat] at a time!',
                icon: [0, 39, "magixmod", 22, 11, "magixmod"],
                cost: { 'insight II': 10 },
                req: { 'Farm of wheat': true, 'flour-crafting I': true, 'eotm': true },
            });
            new G.Tech({
                name: 'baking', category: 'tier1',
                desc: 'Unlocks the [bakery]. To bake [bread] more effectively, however, you will need more upgrades!//For now, your people will have a high chance to fail [bread]-baking, making it neither edible nor nutritious.</li>',
                icon: [9, 8, "magixmod"],
                cost: { 'insight': 600, 'culture': 100 },
                req: { 'flour-crafting I': true, 'more useful bricks': true, 'construction II': true },
            });
            new G.Tech({
                name: 'baking II', category: 'tier2',
                desc: '@Baking [bread] is way more successful.//<small>Not only does the [bread] actually look like its edible now, but you\'ll also produce bread faster.</small>',
                icon: [0, 39, "magixmod", 22, 12, "magixmod"],
                cost: { 'insight II': 15 },
                req: { 'baking': true, 'eotm': true },
            });
            new G.Tech({
                name: 'battling thieves', category: 'tier1',
                desc: 'Bad news...someone committed a crime...it is time to fight against the average [thief]. @Allows you to hire [guard]s that attempt to stop [thief,Thieves] in their tracks.',
                icon: [22, 16, "magixmod"],
                cost: { 'insight': 90 },
                req: { 'hunting': true, 'tribalism': false },
                effects: []//manual unlocking blocker
            });
            new G.Tech({
                name: 'culture rise', category: 'upgrade',
                desc: 'Makes the [fortress of cultural legacy] increase the power of [culture,Cultural units] by 5%. @allows similar wonder-related traits to be obtained simultaneously',
                icon: [22, 17, "magixmod"],
                cost: { 'culture': 440, 'fortress construction point': 200 },
                req: { 'cultural roots': true },
                effects: [
                    {
                        type: 'function', func: function () {
                            // Allow unlocking of the other techs at the same time!
                            G.getDict('political roots').req = { 'will to know more': true }
                            G.getDict('cultural roots').req = { 'will to know more': true }
                            G.getDict('roots of insight').req = { 'will to know more': true }
                        }
                    }
                ],
            });
            new G.Tech({
                name: 'trustworthy influence', category: 'upgrade',
                desc: 'Makes the [pagoda of democracy] increase the power of [influence,influence gathering units] by increasing the gain of [chieftain]s and [clan leader]s by 5%. @allows similar wonder-related traits to be obtained simultaneously',
                icon: [21, 17, "magixmod"],
                cost: { 'influence': 75, 'pagoda construction point': 200 },
                req: { 'political roots': true },
                effects: [
                    {
                        type: 'function', func: function () {
                            // Allow unlocking of the other techs at the same time!
                            G.getDict('political roots').req = { 'will to know more': true }
                            G.getDict('cultural roots').req = { 'will to know more': true }
                            G.getDict('roots of insight').req = { 'will to know more': true }
                        }
                    }
                ],
            });
            new G.Tech({
                name: 'knowledgeable', category: 'upgrade',
                desc: 'Makes the [complex of dreamers] increase the power of [dreamer]s by 5%. In addition, this tech adds 7,500 to your total [housing]. @allows similar wonder-related traits to be obtained simultaneously',
                icon: [23, 17, "magixmod"],
                cost: { 'insight': 500, 'complex construction point': 200 },
                effects: [
                    { type: 'provide res', what: { 'housing': 7500 } }
                ],
                req: { 'roots of insight': true },
                effects: [
                    {
                        type: 'function', func: function () {
                            // Allow unlocking of the other techs at the same time!
                            G.getDict('political roots').req = { 'will to know more': true }
                            G.getDict('cultural roots').req = { 'will to know more': true }
                            G.getDict('roots of insight').req = { 'will to know more': true }
                        }
                    }
                ],
            });
            new G.Tech({
                name: 'water filtering', category: 'tier1',
                desc: 'Obtaining this tech is part of what is needed to clean [muddy water] and turn it into normal [water]; you also need [caretaking] or [moderation].',
                icon: [25, 16, "magixmod"],
                cost: { 'insight': 30 },
                req: { 'bows': true, 'a gift from the mausoleum': true },//IK it seems strange but i wanted to make it equal to other tech at tech tier tree
            });
            new G.Tech({
                name: 'better filtering', category: 'upgrade',
                desc: 'All types of water filtrating units will convert [muddy water] into potable [water] work 75% faster!',
                icon: [25, 15, "magixmod"],
                cost: { 'insight': 520, 'wisdom': 15 },
                req: { 'water filtering': true, 'burial in new world': true },
            });
            new G.Tech({
                name: 'non-magical filters improvement', category: 'upgrade',
                desc: 'Water filtrating units that convert [muddy water] into potable [water] will work 50% faster! //<small>Upgrades, people, upgrades.</small>',
                icon: [25, 14, "magixmod"],
                cost: { 'insight': 405, 'wisdom': 15 },
                req: { 'better filtering': true, 'mo\' floorz': true },
            });
            new G.Tech({
                name: 'cloudy water filtering', category: 'upgrade',
                desc: 'Obtaining this tech will unlock a way for you to make [cloudy water] turn into [water].<>While converting [cloudy water] into [water], you may obtain small pieces of a [cloud].',
                icon: [25, 13, "magixmod"],
                cost: { 'insight': 120, 'wisdom': 30, 'water': -210 },
                req: { 'water filtering': true, 'paradise crafting': true }
            });
            new G.Tech({
                name: 'faithful cloudy water filtering', category: 'upgrade',
                desc: 'Improve your [cloudy water] filters, making them 10% faster!',
                icon: [25, 10, "magixmod"],
                cost: { 'insight': 700, 'wisdom': 50, 'faith': 180, 'cloud': 600 },
                req: { 'gt1': true }
            });
            new G.Tech({
                name: 'magical filtering', category: 'upgrade',
                desc: 'Using a little bit of magic for filtering will make filters that convert [cloudy water] or [muddy water] work 75% faster.<>Upkeep costs won\'t increase.',
                icon: [25, 8, "magixmod"],
                cost: { 'insight': 1300, 'wisdom': 25, 'water essence': 2500, 'cloud': 2000 },
                req: { 'gt1': true, 'gt2': true, 'faithful cloudy water filtering': true }
            });
            new G.Tech({
                name: 'improved furnace construction', category: 'upgrade',
                desc: 'People figured a way to make [furnace]s produce more by improving their design without any cost increases. <>This technology will give you a bonus depending on the path your people have chosen. <>If they have chosen [moderation], then [furnace]s will work 20% more efficient. <>If they have chosen [caretaking], then [furnace]s will work 10% more efficient.',
                icon: [1, 18, "magixmod"],
                cost: { 'insight': 1000 },
                req: { 'culture of the afterlife': true }
            });
            new G.Tech({
                name: 'focused gathering', category: 'upgrade',
                desc: '[gatherer]s were always thinking that they can gather more. This tech is another chance for them. <>This technology will give you a bonus depending on the path your people have chosen. <>If they have chosen [moderation], then [gatherer]s will gather 7.5% more. <>If they have chosen [caretaking], then [gatherer]s will work 12.5% more.',
                icon: [2, 18, "magixmod"],
                cost: { 'insight': 1000 },
                req: { 'culture of the afterlife': true }
            });
            new G.Tech({
                name: 'bigger fires', category: 'upgrade',
                desc: '[firekeeper]s figured out how to make bigger fires. They will need to use more [stick]s but most important thing is that there will be profit <>This technology will give you a bonus depending on the path your people have chosen. <>If they have chosen [moderation], then [firekeeper]s will work 5% more efficient. <>If they have chosen [caretaking], then [firekeeper]s will work 8% more efficient.',
                icon: [3, 18, "magixmod"],
                cost: { 'insight': 1000 },
                req: { 'culture of the afterlife': true }
            });
            new G.Tech({
                name: 'motivation for artisans', category: 'upgrade',
                desc: '[artisan]\'s successful work made him work harder and become motivated. <>This technology will give you a bonus depending on the path your people have chosen. <>If they have chosen [moderation], then [artisan]s will work 8% more efficient. <>If they have chosen [caretaking], then [artisan]s will work 4% more efficient. <>This doesn\'t include [artisan of juice] and [pyro-artisan]!',
                icon: [4, 18, "magixmod"],
                cost: { 'insight': 1000 },
                req: { 'culture of the afterlife': true }
            });
            //Back to normal :)
            new G.Tech({
                name: 'advanced casting', category: 'tier1',
                desc: '[blacksmith workshop,Blacksmiths] will get taught to be more exact and work more effectively, letting them make [basic factory equipment].',
                icon: [5, 18, "magixmod"],
                cost: { 'insight': 830 },
                req: { 'smelting': true, 'masonry': true, 'monument-building II': true },
            });
            new G.Tech({
                name: 'automation', category: 'tier1',
                desc: '[moderation] is a path where people are going for automation to produce more and do less. Therefore, people will try to figure out ways to automate production. @provides 300 [industry point]s',
                icon: [6, 18, "magixmod"],
                cost: { 'insight': 1000, 'wisdom': 15, 'inspiration': 5, 'culture': 80, 'influence': 205 },
                req: { '2nd portal sky': true, 'moderation': true },
                effects: [
                    { type: 'provide res', what: { 'industry point': 300 } },
                ],
            });
            new G.Tech({
                name: 'manufacturing', category: 'tier1',
                desc: '[caretaking] is a path where people are going for a long life. They do not care about production and automation as much and prefer manual work. However, getting this technology allows you to begin the process of finding new units!',
                icon: [7, 18, "magixmod"],
                cost: { 'insight': 1000, 'wisdom': 15, 'inspiration': 10, 'culture': 75, 'influence': 205 },
                req: { '2nd portal sky': true, 'caretaking': true }
            });
            new G.Tech({
                name: 'moderated workstation planning', category: 'tier1',
                desc: 'People led by [moderation] wish for more exact building plans. This can lead to more advanced constructions!',
                icon: [11, 18, "magixmod"],
                cost: { 'insight': 995, 'wisdom': 5 },
                req: { 'paradise crafting': true, 'moderation': true, 'measuring system': true }
            });
            new G.Tech({
                name: 'workstation planning', category: 'tier1',
                desc: 'People led by [caretaking] do not need exact building plans. They are interested in how many people it needs and where components will be arranged without super exact descriptions.',
                icon: [12, 18, "magixmod"],
                cost: { 'insight': 995, 'wisdom': 5 },
                req: { 'paradise crafting': true, 'caretaking': true, 'measuring system': true }
            });
            new G.Tech({
                name: 'manufacture units I', category: 'tier1',
                desc: 'Unlocks the [hut of potters] and [hovel of colours]. <><font color="#ff8080">Note: If you will obtain this tech, [potter]s and [artisan]s on the <b>Craft dyes</b> mode will become useless and won\'t produce anything anymore.</font> //<small>Ever noticed how sometimes colour is British and sometimes it isn\'t?</small>',
                icon: [17, 18, "magixmod"],
                cost: { 'insight': 750, 'wisdom': 5, 'stone': 1365 },//Stones are there to make tech at same level as Factories I
                req: { 'workstation planning': true, 'manufacturing': true },
                effects: [
                    {
                        type: 'function', func: function () {
                            G.getDict('potter').icon = [28, 2, "magixmod", 20, 2];
                            G.getDict('potter').gizmos = false;
                            G.getDict('potter').upkeep = {};
                            G.getDict('potter').desc = '@uses [clay] or [mud] to craft goods<>The [potter] shapes their clay with great care, for it might mean the difference between fresh water making it to their home safely...or spilling uselessly into the dirt.<br><b><font color="fuschia">Due to getting [manufacture units I], this unit becomes useless and won\'t produce anything anymore.</font></b>';
                        }
                    }
                ],
            });
            new G.Tech({
                name: 'factories I', category: 'tier1',
                desc: 'Unlocks the [factory of pots] and [leather factory].<><font color="#ff8080">Note: If you will obtain this tech, [potter]s and [clothier]s that are crafting [leather] and [drying rack]s will become useless and won\'t produce anything anymore.</font>',
                icon: [18, 18, "magixmod"],
                cost: { 'insight': 750, 'wisdom': 5 },
                effects: [
                    {
                        type: 'function', func: function () {
                            G.getDict('potter').icon = [28, 2, "magixmod", 20, 2];
                            G.getDict('potter').gizmos = false;
                            G.getDict('potter').visible = false;
                            G.getDict('potter').upkeep = {};
                            G.getDict('potter').desc = '@uses [clay] or [mud] to craft goods<>The [potter] shapes their clay with great care, for it might mean the difference between fresh water making it to their home safely - or spilling uselessly into the dirt.<br><b><font color="fuschia"> Because of [factories I], this unit becomes useless and won\'t produce anything anymore.</font></b>';
                            G.getDict('drying rack').icon = [28, 2, "magixmod", 13, 3, "magixmod"];
                            G.getDict('drying rack').visible = false;
                            G.getDict('drying rack').desc = '@This small rack may dry [leather], turning it into [dried leather]. [dried leather] is used to make even harder clothing, which decays much slower!<br><b><font color="fuschia"> Because of [factories I], this unit becomes useless and won\'t produce anything anymore.</font></b>';
                        }
                    }
                ],
                req: { 'moderated workstation planning': true, 'moderation': true }
            });
            new G.Tech({
                name: 'third passage to new world', category: 'tier1',
                desc: 'May unlocking the mysterious [New world,Third new world] begin!',
                icon: [12, 19, "magixmod"],
                cost: { 'insight': 785, 'wisdom': 5, 'influence': 175, 'authority': 10, 'spirituality': 25 },
                req: { 'dark side': true }
            });
            new G.Tech({
                name: 'underworld building 1/2', category: 'tier1',
                desc: 'Allows you to build some stuff in the Underworld. Starts attracting 6 random <font color="#f66"><b>Devil\'s traits</b>...</font>',
                icon: [27, 3, "magixmod", 14, 19, "magixmod"],
                cost: { 'insight': 90, 'new world point': 400 },
                req: { 'third passage to new world': true, 'a feeling from the Underworld': true }
            });
            new G.Tech({
                name: 'underworld building 2/2', category: 'tier1',
                desc: 'Allows you to build some more stuff in the Underworld.',
                icon: [27, 2, "magixmod", 14, 19, "magixmod"],
                cost: { 'insight': 100, 'new world point': 6, 'underworld tablet': 1 },
                req: { 'third passage to new world': true, 'a feeling from the Underworld': true, 'underworld building 1/2': true }
            });
            new G.Tech({
                name: 'physics II', category: 'tier1',
                desc: '@People understand physics and weird anomalies in the world more. @provides 5 [education]',
                icon: [0, 39, "magixmod", 21, 19, "magixmod"],
                cost: { 'insight': 1100, 'science': 4, 'culture': 100 },
                effects: [
                    { type: 'provide res', what: { 'education': 5 } },
                ],
                req: { 'physics': true, 'will to know more': true, 'underworld building 2/2': true },
            });
            new G.Tech({
                name: 'even mo\' floorz', category: 'upgrade',
                desc: '[floored house]s will have gain 2 additional floors (which will allow 20 more people to live in each [floored house]), increasing its total capacity to 60.',
                icon: [16, 19, "magixmod"],
                cost: { 'insight II': 30, 'science': 5, 'culture II': 5 },
                req: { 'physics II': true, 'mo\' floorz': true },
                effects: [
                ],
            });
            new G.Tech({
                name: 'moderated carpentry', category: 'tier2',
                desc: '[carpenter workshop]s use more materials and [land] but its production is tripled. <>It also applies visual changes to both Paradise and normal [carpenter workshop]s because this tech will boost both types (however, the [wtr] edition is not boosted).',
                icon: [29, 16, "magixmod"],
                cost: { 'insight II': 10 },
                req: { 'moderation': true, 'eotm': true, 'oil-digging': true },
                effects: [
                    {
                        type: 'function', func: function () {
                            G.getDict('carpenter workshop').icon = [28, 16, "magixmod", 25, 2];
                            G.getDict('carpenter workshop').modes['lumber'].use = { 'land': 2, 'log': 5, 'worker': 2, 'stone tools': 3 };
                            G.getDict('Carpenter workshop').icon = [28, 17, "magixmod", 20, 14, "magixmod"];
                            G.getDict('Carpenter workshop').modes['lumber'].use = { 'land of the Paradise': 2, 'worker': 2, 'stone tools': 3, 'industry point': 1 };
                        }
                    }
                ],
            });
            new G.Tech({
                name: 'richer language', category: 'tier2',
                desc: 'The language that everyone uses for everyday life will become even richer. Your people will develop a more advanced grammar, a larger vocabulary, and more terms for describing objects and others! @provides 10 [wisdom II] //<small>This is some sign of someone really smart, isn\'t it? They have a world that has over 20 synonyms. Can you believe it?</small>',
                icon: [27, 7, "magixmod"],
                cost: { 'insight II': 15 },
                req: { 'eotm': true, 'language': true },
                effects: [
                    { type: 'provide res', what: { 'wisdom II': 10 } },
                ],
            });
            new G.Tech({
                name: 'Improved rhetoric', category: 'tier2',
                desc: 'People will use more words while communicating. They will do their best to make the language and vocabulary survive through many future generations. @provides 10 [wisdom II] @provides 5 [inspiration II]',
                icon: [27, 8, "magixmod"],
                cost: { 'insight II': 15 },
                req: { 'eotm': true, 'richer language': true, 'speech': true },
                effects: [
                    { type: 'provide res', what: { 'wisdom II': 10 } },
                    { type: 'provide res', what: { 'inspiration II': 5 } },
                ],
            });
            new G.Tech({
                name: 'code of law II', category: 'tier2',
                desc: 'The [code of law] will get more exact and specific. This new [code of law] will result in more complex punishment systems for potential burglars to ensure justice is served. @provides 3 [authority II]',
                icon: [0, 39, "magixmod", 27, 6, "magixmod"],
                cost: { 'insight II': 10, 'influence II': 4, 'culture II': 6 },
                req: { 'eotm': true, 'richer language': true, 'code of law': true },
                effects: [
                    { type: 'provide res', what: { 'authority II': 3 } },
                ],
            });
            new G.Tech({
                name: 'sewing II', category: 'upgrade',
                desc: '@[clothier]s will be able to sew [hardened clothes] (with [weaving III]) @this clothing type will require a piece of [dried leather] and some [thread]s',
                icon: [0, 39, "magixmod", 27, 9, "magixmod"],
                cost: { 'insight II': 10 },
                req: { 'weaving': true, 'weaving II': true, 'eotm': true },
                effects: [
                    { type: 'function', func: function () { G.getDict('clothier').icon = [27, 11, "magixmod"]; } },
                ],
            });
            new G.Tech({
                name: 'weaving III', category: 'upgrade',
                desc: 'Upgrades the sewing skills of your civilization again! @[clothier]s can craft [hardened clothes] to create more durable clothing.',
                icon: [1, 39, "magixmod", 27, 12, "magixmod"],
                cost: { 'insight II': 20 },
                req: { 'wizardry': true, 'sewing II': true, 'weaving II': true, 'eotm': true },
            });
            new G.Tech({
                name: 'magical soil', category: 'tier2',
                desc: 'People can craft a new type of soil using the one from the first island. On this new soil, people will be able to plant magic plants that can gather [magic essences] for you! These use the same amount of [land of the Plain Island] as other farms there, but provide [mana] and [magic essences,Various magic essences] instead!',
                icon: [27, 18, "magixmod"],
                cost: { 'insight II': 15, 'science': 1 },
                req: { 'wizardry': true, 'eotm': true },
            });
            new G.Tech({
                name: 'seed-enchanting', category: 'tier2',
                desc: '@Unlocks a new mode for [artisan]s that will let them enchant [seeds], turning them into [essenced seeds]! Planting and taking care of these special items will enable you to plant magical plants that help you gather essences.',
                icon: [27, 17, "magixmod"],
                cost: { 'insight II': 20, 'science': 2, 'spellbook': 100 },
                req: { 'eotm': true, 'magical soil': true },
            });
            new G.Tech({
                name: 'ritualism II', category: 'religion',
                desc: '@provides 3 [spirituality II] @[wisdom rituals] and [flower rituals] can be activated again, but these rituals will require [faith II] as upkeep rather than [faith] @[soothsayer]s and [druid]s will change icons now <>Simple practices, eroded and polished by long time, may turn into rites and traditions!',
                icon: [0, 39, "magixmod", 27, 5, "magixmod"],
                cost: { 'culture II': 5, 'faith II': 2, 'insight II': 10, 'influence II': 2, 'faith': 6 },
                req: { 'oral tradition': true, 'ritualism': true, 'eotm': true, 'Improved rhetoric': true },
                effects: [
                    { type: 'provide res', what: { 'spirituality II': 3 } },
                    {
                        type: 'function', func: function () {
                            G.getDict('soothsayer').icon = [28, 3, "magixmod"];
                            G.getDict('druid').icon = [29, 30, "magixmod"];
                            // Enabling/disabling code for rituals in G.update['policy']
                        }
                    }
                ],
            });
            new G.Tech({
                name: 'grain fertilizer', category: 'upgrade',
                desc: 'Multiplies the efficiency of all [bakery,Bakeries], [wheat farm]s, and [windmill]s by 1.5.',
                icon: [27, 4, "magixmod"],
                cost: { 'insight II': 30 },
                req: { 'magical soil': true },
                effects: [
                ],
            });
            new G.Tech({
                name: 'smokers & Windferns', category: 'tier2',
                desc: 'Unlocks new farms for the first island. At these farms, you can farm [fire essence] and [wind essence] out of plants that need \'em. People get their seeds and petals and then disenchant it, gaining desired essence.',
                icon: [27, 16, "magixmod"],
                cost: { 'insight II': 12, 'faith II': 1, 'culture II': 2 },
                req: { 'magical soil': true, 'spellbook': 50 },
                effects: [
                ],
            });
            new G.Tech({
                name: 'withering tulips & Watorchids', category: 'tier2',
                desc: 'Unlocks new farms! At these farms you can farm [dark essence] and [water essence] out of plants that need \'em. People get their seeds and petals and then disenchant it, gaining desired essence.',
                icon: [27, 15, "magixmod"],
                cost: { 'insight II': 8, 'faith II': 1, 'culture II': 1 },
                req: { 'magical soil': true, 'spellbook': 50 },
                effects: [
                ]
            });
            new G.Tech({
                name: 'lightlilies & naturdasies', category: 'tier2',
                desc: 'Unlocks new farms! On them you can farm [lightning essence] and [nature essence] out of plants that need \'em. People get their seeds and petals and then disenchant it, gaining desired essence.',
                icon: [27, 14, "magixmod"],
                cost: { 'insight II': 12, 'faith II': 1, 'culture II': 2 },
                req: { 'magical soil': true, 'spellbook': 50 },
                effects: [
                ],
            });
            new G.Tech({
                name: 'holy roses farm', category: 'tier2',
                desc: 'Unlocks the [holy essence] farm! There people plant seeds of the <b>Holy rose</b> that grow and emit some special light (like a firefly). People get their seeds and petals and then disenchant it, which gives desired essence.',
                icon: [27, 13, "magixmod"],
                cost: { 'insight II': 8, 'faith II': 1, 'culture II': 1 },
                req: { 'magical soil': true },
                effects: [
                ],
            });



            /*=====================================================================================
            TRAITS
            These are like techs. And that makes'em have same id set as techs
            =======================================================================================*/
            //chances are evaluated every day and represent how many years (on average) it takes to randomly discover them once they fulfill the requirements

            new G.Trait({
                name: 'scavenging',
                desc: '@idle [worker]s gather resources with a tenth of the speed of a [gatherer]. @<b><font color="#f70054">Note: This trait is rather temporary and has a varied lifetime, but has a moderate chance to become permanent. Eventually, if this trait doesn\'t get adopted for good, it will no longer appear or swap with other traits from the primary category.</font></b>',
                icon: [20, 1],
                chance: 1,
                req: { 'tribalism': true, 'carcass-looting': false, 'active exploration': false, 'dreaming': false },
                lifetime: function () { return 5 + (Math.pow(this.yearOfObtainment, 1.5) % 42 > 32 && Math.pow(this.yearOfObtainment, 1.5) % 42 < 36 ? Infinity : this.yearOfObtainment % 75) }
            });
            new G.Trait({
                name: 'rules of food',
                displayName: '<font color="#fee6d5">Rules of food</font>',
                desc: '@unlocks policies that manage which food types can be eaten. //<small>Can I eat fried chips?</small>',
                icon: [19, 1],
                chance: 0.75,
                req: { 'tribalism': true, 'policies': true },
                effects: [
                ]
            });
            new G.Trait({
                name: 'ground tools',
                desc: '@[artisan]s and [carver]s use ground tools, allowing them to craft their stuff between 20% faster. //Note: it also applies to seasonal artisans, such as the [artisan of christmas,Artisan of Christmas] (with [culture of celebration] obtained), but provides only a 10% boost.',
                icon: [15, 10, "magixmod"],
                cost: { 'insight': 7 },
                chance: 10,
                switchCategory: false,
                lifetime: function () { return Math.pow(this.yearOfObtainment % 10, 4) < 4 ? undefined : Infinity },
                req: { 'tool-making': true, 'ground weapons': false, 'ground pots': false },
            });
            new G.Trait({
                name: 'artistic thinking',
                desc: '@[storyteller]s are 30% more efficient@opens the way for more art forms',
                icon: [12, 3, "magixmod"],
                cost: { 'culture': 5 },
                chance: 10,
                req: { 'symbolism': true },
            });
            //TODO : how these interact with techs such as symbolism, ritualism and burial
            new G.Trait({
                name: 'fear of death',
                desc: '@unhappiness from death is doubled@may evolve into more complex spiritual thinking. //<small>D-d-dd-death?</small>',
                icon: [18, 1],
                cost: { 'culture': 5 },
                category: 'long',
                chance: 10,
                lifetime: function () { return 300 + ((this.yearOfObtainment % 250) - 125) },
                req: { 'language': true, 'spark\'o religion': true, 'acceptance of death': false, 'death indifference': false, 'death scepticism': false },
                effects: [
                    { type: 'provide res', what: { 'dark decay': 50 } },
                ],
            });
            new G.Trait({
                name: 'belief in the afterlife',
                desc: '@unhappiness from death is halved.',
                icon: [21, 1],
                cost: { 'culture': 5, 'faith': 2 },
                chance: 10,
                req: { 'fear of death': true, 'oral tradition': true, 'spark\'o religion': true, 'belief in the beforelife': false },
                effects: [
                    { type: 'provide res', what: { 'dark decay': 150 } },
                    {
                        type: 'function', func: function () {
                            if (G.getRes('victory point').amount > 60) {
                                for (var i = 1; i <= 12; i++) {
                                    if (G.policyByName['se' + (i < 10 ? "0" + i : i)].cost['faith II'] != undefined)
                                        delete G.policyByName['se' + (i < 10 ? "0" + i : i)].cost['faith II'];
                                }
                                if (!G.has('pantheon key')) {
                                    G.gainTech(G.techByName['pantheon key']);
                                    G.Message({ type: "important tall", text: 'Your great victories in the planes of the Seraphins attracted a great <b>Them</b> and made them available to you much earlier. You look into your pocket and feel that something has appeared inside. You take it out to see a shiny <b>Pantheon key</b>!', icon: [4, 25, "magixmod", 24, 1] });
                                }
                            }
                            mausoleumEvolve();
                            rootPolicyEvolve();
                            rootCultureEvolve();
                            rootKnowEvolve();
                        }
                    },
                ],
                category: 'religion',
            });
            new G.Trait({
                name: 'belief in revenants',
                desc: '@unhappiness from unburied [corpse]s is doubled. //<small>Zombies?</small>',
                icon: [18, 1],
                cost: { 'culture': 5, 'faith': 2 },
                chance: 100,
                req: { 'belief in the afterlife': true },
            });
            new G.Trait({
                name: 'ritual necrophagy',
                desc: '@[corpse]s are slowly turned into [meat] and [bone]s, creating some [faith] but harming [health]. @<b><font color="#f70054">Note: This trait is rather temporary, but there is a slight chance that this trait will become permanent.</font></b>//<small>Ewww</small>',
                icon: [15, 7, "magixmod"],
                cost: { 'culture': 25 },
                category: 'long',
                chance: 500,
                req: { 'tribalism': true, 'ritualism': true, 'belief in the beforelife': false, 'art of death': false, 'belongings preservance': false },
                lifetime: function () { return ((this.yearOfObtainment + 350) % 450 >= 383 && (this.yearOfObtainment + 350) % 450 <= 400 ? Infinity : (this.yearOfObtainment + 350) % 450) }
            });

            new G.Trait({
                name: 'culture of moderation',
                desc: '@people consume 15% less [food], but derive less joy from eating. @may unlock more food habit traits //<small>Diet?</small>',
                icon: [3, 12, 19, 1],
                cost: { 'culture': 7.5 },
                category: 'long',
                chance: 40,
                lifetime: function () { return 150 + ((this.yearOfObtainment % 100) - 50) },
                category: 'long',
                req: { 'tribalism': true, 'joy of eating': false, 'consumption stability': false, 'unstable eating habits': false, 'unstable consumption habits': false, 'dry throats': false },
            });
            new G.Trait({
                name: 'joy of eating',
                desc: '@people consume 15% more [food], but are happier when eating. @may unlock more food habit traits //<small>Nom nom mmm...</small>',
                icon: [4, 12, 19, 1],
                cost: { 'culture': 7.5 },
                category: 'long',
                lifetime: function () { return 150 + ((this.yearOfObtainment % 100) - 50) },
                chance: 40,
                req: { 'tribalism': true, 'culture of moderation': false, 'consumption stability': false, 'unstable eating habits': false, 'joy of drinking': false, 'unstable consumption habits': false },
            });
            new G.Trait({
                name: 'insect-eating',
                desc: '@your people are no longer unhappy when eating [bugs]. @<b><font color="#f70054">Note: This trait is rather temporary and has a varied lifetime, but has a chance of becoming permanent.</font></b> //<small>Sometimes it is a need to eat a worm in order to survive when you have nothing left to eat.</small>',
                icon: [8, 11, 22, 1],
                chance: 5,
                req: { 'insects as food': 'on', 'decent nourishment': false, 'worm culture': false },
                effects: [
                    { type: 'function', func: function () { G.getDict('bugs').turnToByContext['eating']['happiness'] = 0; } },
                ],
                lifetime: function () { return 10 + (this.yearOfObtainment + (this.yearOfObtainment % 20)) % 191 > 175 ? Infinity : 10 + (this.yearOfObtainment + 20) % 191 },
                switchCategory: false,
                category: 'main'
            });
            //MAGIX
            new G.Trait({
                name: 'belief in portals',
                desc: 'This belief makes wizards want to create a new dimension. //<small>Will it succeed?</small>',
                icon: [2, 1, "magixmod"],
                cost: { 'culture': 30, 'faith': 3 },
                chance: 10,
                req: { 'belief in the afterlife': true, 'Wizard complex': true },
            });
            new G.Trait({
                name: 'will to know more',
                desc: '<font color="#aef">@After opening a portal to a strange new island, people started to become more curious. @Curiosity has gotten even stronger with this trait!</font>',
                icon: [8, 12, 8, 5, 22, 1],
                cost: { 'culture': 5, 'wisdom': 25 },
                chance: 3,
                category: 'knowledge',
                req: { 'plain island building': true },
            });
            new G.Trait({
                name: 'juicy expertise',
                desc: '<font color="#fbc1ff">After crafting [juices] for a bit, you noticed your people make the most <b>tasty drinks</b> you\'ve ever tried! Getting this trait boosts the amount of [health] and [happiness] from drinking [juices] by 20%.</font>',
                icon: [16, 5, "magixmod"],
                cost: { 'juices': 6000, 'wisdom': 25, 'insight': 30 },
                chance: 6,
                category: 'knowledge',
                req: { 'plant lore II': true, 'juice-crafting': true },
            });
            new G.Trait({
                name: 'nutrition',
                desc: '@makes [healer]s provide health @[fruit]s and [vegetables] will generate 10% more [health] <>Some rules on nutrition will increase your [population,people]\'s health, slightly improving their condition.',
                icon: [16, 7, "magixmod"],
                cost: { 'culture': 150, 'wisdom': 25, 'insight': 100, 'influence': 10 },
                chance: 120,
                effects: [
                    { type: 'provide res', what: { 'dark decay': 50 } },
                    { type: 'function', func: function () { G.getDict('fruit').turnToByContext['eating']['health'] *= 1.1; } },
                    { type: 'function', func: function () { G.getDict('vegetables').turnToByContext['eating']['health'] *= 1.1; } },
                ],
                lifetime: function () { return Math.pow(this.yearOfObtainment, 3) % 1000 },
                switchCategory: false,
                req: { 'juice-crafting': true, 'meat diet': false },
            });
            new G.Trait({
                name: 'better healing',
                desc: '<font color="#adb">After being able to get [healer]s, your dreamers started thinking how to boost healing and decrease the amount of failed healing attempts. @This knowledge also unlocks [first aid], a new tech!</font>',
                icon: [8, 12, 3, 5, 22, 1],
                cost: { 'insight': 50 },
                chance: 120,
                category: 'knowledge',
                req: { 'healing': true, 'will to know more': true },
            });
            new G.Trait({
                name: 'revenants',
                desc: 'The dark powers got mad because your people are using [corpse]s as a toy or ritual. Some of them will come back to life and will behave like an evil zombie. Just know: they won\'t replicate. You will need to defend your people against them. Every [wild corpse] that appears will harm your [happiness] and kill your [population,people].',
                icon: [19, 0, "magixmod"],
                cost: { 'insight': 50, 'corpse': 500 },
                chance: 200,
                req: { 'belief in revenants': true, 'ritual necrophagy': true },
                effects: [
                ]
            });
            new G.Trait({
                name: 'culture of the afterlife',
                desc: '<b>Beliefs have slowly morphed into advanced culture. People will now try to be closer to the gods or god they worship, so who knows if they will build another wonder?</b> @unhappiness from death is reduced by a third.',
                icon: [19, 1, "magixmod"],
                cost: { 'insight': 50, 'culture': 200, 'inspiration': 20, 'authority': 20, 'spirituality': 30, 'faith': 40 },
                chance: 300,
                category: 'religion',
                req: { 'belief in the afterlife': true, 'time measuring 1/2': true },
                effects: [
                    {
                        type: 'function', func: function () {
                            if (G.getRes('victory point').amount > 25) {
                                for (var i = 1; i <= 12; i++) {
                                    if (G.policyByName['se' + (i < 10 ? "0" + i : i)].cost['faith II'] != undefined)
                                        delete G.policyByName['se' + (i < 10 ? "0" + i : i)].cost['faith II'];
                                }
                                if (!G.has('pantheon key')) {
                                    G.gainTech(G.techByName['pantheon key']);
                                    G.Message({ type: "important tall", text: 'Your victories attracted a great <b>Seraphin</b> and made it available to you way earlier. You look into your pocket and feel something heavy within. You take it out to see a shiny <b>Pantheon key</b> gleaming!', icon: [4, 25, "magixmod", 24, 1] });
                                }
                            }
                        }
                    }
                ],
            });
            new G.Trait({
                name: 'the god\'s call',
                displayName: 'The God\'s call',
                desc: '<b>Your god...he called your people to his world...full of hopes, full of new adventures, and brimming with new ideas!</b>//<small>Let us go to His Paradise!</small>',
                icon: [20, 2, "magixmod"],
                cost: { 'insight': 650, 'culture': 200, 'inspiration': 20, 'authority': 20, 'spirituality': 30, 'faith': 40 },
                chance: 175,
                req: { 'culture of the afterlife': true },
            });
            new G.Tech({
                name: 'water construction', category: 'tier1',
                desc: '@unlocks [shelter on water,Shelters on water] and [stockpile on water,Stockpiles on water] //<small>Hey...is that a dolphin swimming underneath my house?</small>',
                icon: [36, 21, "magixmod"], //just for borders
                cost: { 'insight': 70 },
                req: { 'construction': true },
                effects: [
                ],
                chance: 10,
            });
            new G.Trait({
                name: 'land acknowledge',
                displayName: 'Acknowledging of lands',
                desc: 'Your people will acknowledge new lands faster thanks to [land of the Paradise,Paradise] exploration. This knowledge unlocks a few new things...',
                icon: [21, 10, "magixmod"],
                cost: {},
                chance: 100,
                category: 'knowledge',
                req: { '2nd portal sky': true },
            });
            new G.Trait({
                name: 'treeplanting',
                desc: '<font color="#3d5">May the existence of orchards begin!</font>',
                icon: [8, 12, 6, 1],
                cost: { 'insight': 250, 'wisdom': 15 },
                chance: 30,
                category: 'knowledge',
                req: { '2nd portal sky': true, 'paradise building': true },
            });
            new G.Trait({
                name: 'cooking II',
                displayName: 'Advanced cooking',
                desc: 'Your [population,people] can now use various ingredients to cook and make even better-tasting dishes. <><small>oh, and <b>bon appetit :D</b></small>',
                icon: [22, 10, "magixmod"],
                cost: { 'insight': 250, 'wisdom': 15 },
                chance: 20,
                category: 'knowledge',
                req: { '2nd portal sky': true, 'paradise building': true },
            });
            new G.Trait({
                name: 'culture of celebration', displayName: '<font color="#aeb1e3">Culture of celebration</font>',
                desc: 'Unlocks seasonal content. <b><font color="#2ca8f5">Seasonal content is content available for some time (such as Christmas).</font></b>',
                icon: [18, 15, "magixmod"],
                cost: { 'insight': 10, 'culture': 40 },
                chance: 100,
                req: { 'artistic thinking': true },
            });
            new G.Trait({
                name: 'supreme healthy life',
                displayName: 'Healthy life',
                desc: 'Intelligent people came up with doctrines for a healthier life. Then they shared their thoughts, and it turns out they were right. People are slowly getting even healthier... @This trait allows each person to generate a little bit of [health]. People won\'t eat even more food, so do not worry.',
                icon: [22, 0, "magixmod"],
                cost: { 'culture': 150, 'insight': 100, 'influence': 15 },
                chance: 120,
                req: { 'joy of eating': true, 'nutrition': true, 'healthy life': false },
            });
            new G.Trait({
                name: 'healthy life',
                desc: 'Intelligent people came up with doctrines of how to live a healthier life, all because of their moderation culture. Then they shared their thoughts. Surprisingly, they were right, but they weren\'t happy with simple [food]-based moderation. People got even healthier and feel even better. @This trait allows each person to generate a little bit of [health]. People won\'t eat more food, so do not worry.',
                icon: [22, 1, "magixmod"],
                cost: { 'culture': 150, 'insight': 100, 'influence': 15 },
                chance: 200,
                req: { 'culture of moderation': true, 'supreme healthy life': false },
            });
            new G.Trait({
                name: 'political roots',
                desc: 'Your people seem like they want political things to go with old traditions. @Unlocks the [pagoda of democracy]: a political wonder.',
                icon: [20, 17, "magixmod"],
                cost: { 'influence': 125 },
                chance: 250,
                req: { 'will to know more': true, 'cultural roots': false, 'roots of insight': false },
                category: 'main'
            });
            new G.Trait({
                name: 'cultural roots',
                desc: 'Your people seem like they enjoy cultivating traditions and often share\'em to future generations. @Unlocks the [fortress of cultural legacy]: a cultural wonder.',
                icon: [19, 17, "magixmod"],
                cost: { 'culture': 300 },
                chance: 250,
                req: { 'will to know more': true, 'political roots': false, 'roots of insight': false },
                category: 'main'
            });
            new G.Trait({
                name: 'roots of insight',
                desc: 'Your people seem like they are born for advanced discoveries. @Unlocks the [complex of dreamers]: an [insight]-based wonder.',
                icon: [18, 17, "magixmod"],
                cost: { 'wisdom': 100 },
                chance: 250,
                req: { 'will to know more': true, 'cultural roots': false, 'political roots': false },
                category: 'main'
            });
            //God's traits
            new G.Trait({
                name: 'gt1',
                displayName: 'God\'s trait #1 Housing',
                desc: 'By making more effective use of your [land] and resources, you can squeeze some more people into various houses. @every 2 [hovel]s will gain +1 [housing], @[hut]s and [shelter on water,Shelters on water] will gain +1 [housing]. It is the same with [branch shelter]s and [mud shelter]s!',
                icon: [21, 14, "magixmod"],
                cost: {},
                chance: 275,
                req: { 'the god\'s call': true, '7th essence': true },
                category: 'gods',
            });
            new G.Trait({
                name: 'gt2',
                displayName: 'God\'s trait #2 Wheat rush',
                desc: '[wheat farm,Wheat farms] gather 20% more [wheat]. //<small>How divine...</small>',
                icon: [21, 13, "magixmod"],
                cost: {},
                chance: 275,
                req: { 'the god\'s call': true, '7th essence': true },
                category: 'gods',
            });
            new G.Trait({
                name: 'gt3',
                displayName: 'God\'s trait #3 Superior gurus',
                desc: '@[guru]s will gather 50% more insight and are unlocked if you don\'t already have them! //<small>guruful i guess</small>',
                icon: [21, 12, "magixmod"],
                cost: {},
                chance: 275,
                req: { 'the god\'s call': true, '7th essence': true },
                category: 'gods',
                effects: [
                    { type: 'function', func: function () { G.getDict('guru').req = {} } },
                ]
            });
            new G.Trait({
                name: 'gt4',
                displayName: 'God\'s trait #4 Potter\'s frenzy',
                desc: 'Increases the efficiency of [factory of pots] and [hut of potters] by a quarter //<small>we must make as many pots as we can</small>',
                icon: [21, 18, "magixmod"],
                cost: { 'faith': 100 },
                chance: 275,
                req: { 'the god\'s call': true, '7th essence': true },
                category: 'gods',
            });
            new G.Trait({
                name: 'gt5',
                displayName: 'God\'s trait #5 Colored life',
                desc: 'Increases the efficiency of [hovel of colours] by a quarter //<small>first you put the materials here...</small>',
                icon: [22, 18, "magixmod"],
                cost: { 'faith': 100 },
                chance: 275,
                req: { 'the god\'s call': true, '7th essence': true, 'caretaking': true },
                category: 'gods',
            });
            //Moderation or caretaking?
            new G.Trait({
                name: 'moderation',
                displayName: '<font color="#dfbc29">Moderation</font>',
                desc: 'The time has finally come, and people seem very curious, making them want to know more and more! This trait will unlock unique techs, traits, and units.',
                icon: [25, 17, "magixmod"],
                cost: {},
                chance: 400,
                req: { 'plain island building': true, 'caretaking': false },
                category: 'main',
                effects: [
                    { type: 'provide res', what: { 'industry point': 200 } }
                ],
            });
            new G.Trait({
                name: 'caretaking',
                displayName: '<font color="#2de532">Caretaking</font>',
                desc: 'People do not seem curious about further discoveries. Instead, they wish to live for a long time, calmly, and in peace. This trait will unlock unique techs, traits, and units.',
                icon: [24, 17, "magixmod"],
                cost: {},
                req: { 'plain island building': true, 'moderation': false },
                chance: 400,
                category: 'main',
            });
            //Another knowledge
            new G.Trait({
                name: 'measuring system',
                desc: '<font color="#fac">People noticed that they will need a measuring system to make constructing and planning easier...so they created their own system of measuring things.</font> //<small>truly a microsity</small>',
                icon: [13, 18, "magixmod"],
                cost: { 'wisdom': 75 },
                chance: 475,
                req: { 'will to know more': true, 'alphabet 2/3': true, 'caligraphy': true },
                category: 'knowledge',
            });
            new G.Trait({
                name: 'dark side',
                desc: 'People now believe that if there are good deities and helpful spirits, then there must be some beings that are the opposite. They start to think that some evil beings of terror and pain exist in this world...',
                icon: [11, 19, "magixmod"],
                cost: { 'spirituality': 10, 'faith': 200 },
                chance: 40,
                req: { 'paradise crafting': true },
                category: 'religion'
            });
            //Devil 's traits
            new G.Trait({
                name: 'dt1',
                displayName: 'Devil\'s trait #1 Lazy blacksmiths',
                desc: '[blacksmith workshop]s are 5% slower at each mode. It also affects the paradise version.',
                icon: [26, 1, "magixmod"],
                cost: { 'culture': 100 },
                chance: 150,
                req: { 'underworld building 1/2': true, 'dt2': false, 'dt3': false },
                effects: [
                    { type: 'provide res', what: { 'new world point': 1 } },
                ],
                category: 'devils'
            });
            new G.Trait({
                name: 'dt2',
                displayName: 'Devil\'s trait #2 Lazy firekeepers',
                desc: '[firekeeper]s work 3% slower at each mode. //<small>Nyeeeh</small>',
                icon: [26, 2, "magixmod"],
                cost: { 'culture': 100 },
                chance: 150,
                req: { 'underworld building 1/2': true, 'dt1': false, 'dt3': false },
                effects: [
                    { type: 'provide res', what: { 'new world point': 1 } },
                ],
                category: 'devils'
            });
            new G.Trait({
                name: 'dt3',
                displayName: 'Devil\'s trait #3 Lazy carvers',
                desc: '[carver]s are 5% slower at each mode.',
                icon: [26, 3, "magixmod"],
                cost: { 'culture': 100 },
                chance: 150,
                req: { 'underworld building 1/2': true, 'dt1': false, 'dt2': false },
                effects: [
                    { type: 'provide res', what: { 'new world point': 1 } },
                ],
                category: 'devils'
            });
            new G.Trait({
                name: 'dt4',
                displayName: 'Devil\'s trait #4 Unlucky metals',
                desc: 'All gathering of [gold ore,Gold] and [platinum ore,Platinum] is decreased by 5%. //<small>if only we had a metal detector...WAIT THAT IS A GREAT IDEA</small>',
                icon: [26, 4, "magixmod"],
                cost: { 'culture': 100 },
                chance: 150,
                req: { 'underworld building 1/2': true, 'dt5': false, 'dt6': false },
                effects: [
                    { type: 'provide res', what: { 'new world point': 1 } },
                ],
                category: 'devils'
            });
            new G.Trait({
                name: 'dt5',
                displayName: 'Devil\'s trait #5 Hard material decay',
                desc: 'All gathering of resources that are used to craft [hard metal ingot]s will be decreased by 5%.',
                icon: [26, 5, "magixmod"],
                cost: { 'culture': 100 },
                chance: 150,
                req: { 'underworld building 1/2': true, 'dt4': false, 'dt6': false },
                effects: [
                    { type: 'provide res', what: { 'new world point': 1 } },
                ],
                category: 'devils'
            });
            new G.Trait({
                name: 'dt6',
                displayName: 'Devil\'s trait #6 Soft metal decay',
                desc: 'All gathering of resources that are used to craft [soft metal ingot]s will be decreased by 5%.',
                icon: [26, 6, "magixmod"],
                cost: { 'culture': 100 },
                chance: 150,
                req: { 'underworld building 1/2': true, 'dt4': false, 'dt5': false },
                effects: [
                    { type: 'provide res', what: { 'new world point': 1 } },
                ],
                category: 'devils'
            });
            new G.Trait({
                name: 'dt7',
                displayName: 'Devil\'s trait #7 Holy well drought',
                desc: '[holy well]s gain 10% less [cloudy water].',
                icon: [26, 7, "magixmod"],
                cost: { 'culture': 100 },
                chance: 150,
                req: { 'underworld building 1/2': true, 'dt8': false, 'dt9': false },
                effects: [
                    { type: 'provide res', what: { 'new world point': 1 } },
                ],
                category: 'devils'
            });
            new G.Trait({
                name: 'dt8',
                displayName: 'Devil\'s trait #8 Plain Island wells drought',
                desc: '[well of the Plain Island] gain 15% less [water] than usual.',
                icon: [26, 8, "magixmod"],
                cost: { 'culture': 100 },
                chance: 150,
                req: { 'underworld building 1/2': true, 'dt7': false, 'dt9': false },
                effects: [
                    { type: 'provide res', what: { 'new world point': 1 } },
                ],
                category: 'devils'
            });
            new G.Trait({
                name: 'dt9',
                displayName: 'Devil\'s trait #9 Nothing',
                desc: 'Darn...you got pretty lucky. This devil\'s trait doesn\'t affect anything and doesn\'t weaken anything either!',
                icon: [26, 9, "magixmod"],
                cost: { 'culture': 100 },
                chance: 150,
                req: { 'underworld building 1/2': true, 'dt7': false, 'dt8': false },
                effects: [
                    { type: 'provide res', what: { 'new world point': 1 } },
                ],
                category: 'devils'
            });
            new G.Trait({
                name: 'dt10',
                displayName: 'Devil\'s trait #10 Clothing!!!',
                desc: 'Unhappiness from a lack of clothing is doubled. //<small>Nothing special about it I guess</small>',
                icon: [26, 10, "magixmod"],
                cost: { 'culture': 100 },
                chance: 150,
                req: { 'underworld building 1/2': true, 'dt11': false, 'dt12': false },
                effects: [
                    { type: 'provide res', what: { 'new world point': 1 } },
                ],
                category: 'devils'
            });
            new G.Trait({
                name: 'dt11',
                displayName: 'Devil\'s trait #11 Will of warmth',
                desc: 'Unhappiness from cold and darkness is doubled.//<small>It\'s absolutely FREEZING!!!</small>',
                icon: [26, 11, "magixmod"],
                cost: { 'culture': 100 },
                chance: 150,
                req: { 'underworld building 1/2': true, 'dt10': false, 'dt12': false },
                effects: [
                    { type: 'provide res', what: { 'new world point': 1 } },
                ],
                category: 'devils'
            });
            new G.Trait({
                name: 'dt12',
                displayName: 'Devil\'s trait #12 Bury!!!',
                desc: 'Unhappiness from unburied corpses increased by 50%. //<small>Nothing special about it I guess!</small>',
                icon: [26, 12, "magixmod"],
                cost: { 'culture': 100 },
                chance: 150,
                req: { 'underworld building 1/2': true, 'dt10': false, 'dt11': false },
                effects: [
                    { type: 'provide res', what: { 'new world point': 1 } },
                ],
                category: 'devils'
            });
            new G.Trait({
                name: 'dt13',
                displayName: 'Devil\'s trait #13 Faith sapping',
                desc: 'Wipes away 0.5% of your [faith] amount every day in your tribe.',
                icon: [26, 13, "magixmod"],
                cost: { 'culture': 100 },
                chance: 150,
                req: { 'underworld building 1/2': true, 'dt14': false, 'dt15': false },
                effects: [
                    { type: 'provide res', what: { 'new world point': 1 } },
                ],
                category: 'devils'
            });
            new G.Trait({
                name: 'dt14',
                displayName: 'Devil\'s trait #14 Influence sapping',
                desc: 'Wipes away 0.5% of your [influence] amount every day in your tribe.',
                icon: [26, 14, "magixmod"],
                cost: { 'culture': 100 },
                chance: 150,
                req: { 'underworld building 1/2': true, 'dt13': false, 'dt15': false },
                effects: [
                    { type: 'provide res', what: { 'new world point': 1 } },
                ],
                category: 'devils'
            });
            new G.Trait({
                name: 'dt15',
                displayName: 'Devil\'s trait #15 Culture sapping',
                desc: 'Wipes away 0.5% of your [culture] amount every day in your tribe.',
                icon: [26, 15, "magixmod"],
                cost: { 'culture': 100 },
                chance: 150,
                req: { 'underworld building 1/2': true, 'dt13': false, 'dt14': false },
                effects: [
                    { type: 'provide res', what: { 'new world point': 1 } },
                ],
                category: 'devils'
            });
            new G.Trait({
                name: 'dt16',
                displayName: 'Devil\'s trait #16 Worse soothsaying',
                desc: '[soothsayer]s and [druid]s gain one-third less [faith]. //<small>That does not mean that religion in your civilization will fail completely, however...</small>',
                icon: [26, 16, "magixmod"],
                cost: { 'culture': 100 },
                chance: 150,
                req: { 'underworld building 1/2': true, 'dt17': false, 'dt18': false },
                effects: [
                    { type: 'provide res', what: { 'new world point': 1 } },
                ],
                category: 'devils'
            });
            new G.Trait({
                name: 'dt17',
                displayName: 'Devil\'s trait #17 Uncuttable tree',
                desc: '[woodcutter]s gain one-fifth less [log,Wood].',
                icon: [26, 17, "magixmod"],
                cost: { 'culture': 100 },
                chance: 150,
                req: { 'underworld building 1/2': true, 'dt16': false, 'dt18': false },
                effects: [
                    { type: 'provide res', what: { 'new world point': 1 } },
                ],
                category: 'devils'
            });
            new G.Trait({
                name: 'dt18',
                displayName: 'Devil\'s trait #18 Insight blindness',
                desc: '[dreamer]s gather one-third less [insight].',
                icon: [26, 18, "magixmod"],
                cost: { 'culture': 100 },
                chance: 150,
                req: { 'underworld building 1/2': true, 'dt17': false, 'dt16': false },
                effects: [
                    { type: 'provide res', what: { 'new world point': 1 } },
                ],
                category: 'devils'
            });
            new G.Trait({
                name: 'eotm',
                displayName: '<font color="#ffd2de">Evolution of the minds</font>',
                desc: 'Replaces [insight], [culture], [faith], and [influence] with [insight II], [culture II], [faith II], and [influence II]. @To obtain them, you will unlock a special unit that will convert every 500 of a [insight,Tier I Essential] into 1 [insight II,Tier II Essential]. In addition, [storyteller]s, [dreamer]s, [chieftain]s, and [clan leader]s become <b>90% less efficient</b> because this evolution is a disaster for them all. @Researches in the <b>Research tab</b> will require [insight II] and [science] rather than just [insight]. @You will still require units you used to gather lower essentials! (Lower essentials have been hidden, but remember that you still need [wizard]s for [wisdom]...) @[flower rituals] and [wisdom rituals] will be no longer available until [ritualism II] is researched. @[sleepy insight] now gives [insight II] instead of [insight] with identical chances.' + (G.modsByName["Thot Mod"] != undefined ? " @your [thot] limit is increased but becomes an extra quarter more efficient." : "") + '',
                icon: [25, 19, "magixmod"],
                cost: { 'insight': 1000, 'culture': 500, 'influence': 300, 'faith': 250 },
                chance: 150,
                req: { 'more useful bricks': true, 'underworld building 2/2': true },
                effects: [
                    { type: 'show res', what: ['insight II'] },
                    { type: 'show res', what: ['culture II'] },
                    { type: 'show res', what: ['faith II'] },
                    { type: 'show res', what: ['influence II'] },
                    { type: 'provide res', what: { 'wisdom II': 60 } }, //A bit more because there's more researches in this Magix fix
                    { type: 'provide res', what: { 'inspiration II': 30 } },
                    { type: 'provide res', what: { 'spirituality II': 5 } },
                    { type: 'provide res', what: { 'authority II': 5 } },
                    {
                        type: 'function', func: function () {
                            for (var i in G.know) {//replace costs
                                var ess = ['insight', 'culture', 'faith', 'influence'];
                                var newEss = ['insight II', 'culture II', 'faith II', 'influence II'];
                                for (var j in ess) {
                                    var prev = G.know[i].cost[ess[j]];
                                    if (prev == undefined) continue;
                                    delete (G.know[i].cost[ess[j]])
                                    G.know[i].cost[newEss[j]] = Math.ceil(prev / 500) * 3;
                                }
                            }
                            G.getDict('sleepy insight').desc = 'At the start of a new year, you have a chance to gain some powerful [insight II]. This policy has a meter with a scale from 3 to 3. <>Modes less than 0 will cause the ability to be stronger at the cost of chance, while modes greater than 0 be less powerful, but with a larger chance.';
                            // Enabling/disabling code for rituals in G.update['policy']
                            if (G.getRes('victory point').amount > 0 && !G.has('pantheon key')) {
                                G.gainTech(G.techByName['pantheon key']);
                                G.Message({ type: "important tall", text: 'Being victorious has brought something that should be available later. You look into your pocket and feel something has appeared in it. You take it out to see a shiny <b>Pantheon key</b>!', icon: [4, 25, "magixmod", 24, 1] });
                            }
                            if (G.modsByName['Thot Mod']) {
                                G.unitByName['thot'].effects.push({ type: 'mult', value: 1.25, req: { 'eotm': true } });
                                G.unitByName['thot'].limitPer = { 'population': 350 };
                            }
                        }
                    },
                ],
                category: 'main'
            });
            //Seasonal New year
            new G.Tech({
                name: 'firework crafting', category: 'seasonal',
                desc: '@unlocks the [artisan of new year]. //<small>New year, new adventures</small>',
                icon: [0, 0, 'seasonal'],
                cost: { 'insight': 30 },
                req: { 'culture of celebration': true, 'tribalism': false },//switch to false after new year
            });
            new G.Tech({
                name: 'firework launching', category: 'seasonal',
                desc: '@unlocks the [firework launcher]. This allows the [artisan of new year] to craft [firecracker]s. //<small>Boom</small>',
                icon: [17, 0, 'seasonal'],
                cost: { 'insight': 70 },
                req: { 'culture of celebration': true, 'firework crafting': true, 'tribalism': false },
            });
            new G.Tech({
                name: 'dark essenced fireworks', category: 'seasonal',
                desc: '@[artisan of new year,Artisans of the New Year] can now craft [dark orange firework]s and [dark blue firework]s. Luckily for you, these do not consume any [dark essence,Essence]!',
                icon: [16, 0, 'seasonal'],
                cost: { 'insight': 400 },
                req: { 'culture of celebration': true, 'firework crafting': true, 'Wizard complex': true, 'tribalism': false },
            });
            new G.Tech({
                name: 'ancestors world crafting', category: 'tier1',
                desc: '@Some buildings or crafting shacks from the mortal world can be built in the ancestors world as a separate unit!',
                icon: [0, 14, "magixmod", 0, 18, "magixmod"],
                cost: { 'insight': 650 },
                req: { 'ambrosium treeplanting': true, 'ancestors world building': true, 'more useful bricks': true },
            });
            //Special techs from achievements and their functions
            /*============================================================================================
            SPECIAL ACHIEVEMENTS EFFECTS
            ===========================================================================================*/

            new G.Tech({
                category: 'misc',
                name: 'artistic gray cells', displayName: '<font color="#00e063">Artistic gray cells</font>',
                desc: 'You see flashes of culture...but who were the ones who mode them? These flashes of thought slowly made you more and more inspired. The ancestors of culture give you their power...providing you with various benefits: @+3 [culture] @+3 [inspiration] @idle [worker]s will work at 1/20th the rate of a [storyteller] for free',
                icon: [4, 12, "magixmod", 6, 12, "magixmod"],
                cost: {},
                req: { 'tribalism': false },
            });
            new G.Tech({
                name: 'genius feeling', displayName: '<font color="#5959d2">A genius feeling</font>', category: 'misc',
                desc: 'You feel like you are a genius (or at least, quite smart). Your people noticed it, as this feeling may help their fate. @You gain +6 [insight] and +6% [dreamer] speed! //<small>That\'s gorgeous...</small>',
                icon: [4, 12, "magixmod", choose([1, 4, 7]), 17, "magixmod"],
                cost: {},
                req: { 'tribalism': false }
            });
            new G.Tech({
                name: 'authority of the ancestor', displayName: '<font color="fuschia">Authority of the ancestor</font>', category: 'misc',
                desc: 'You feel like you have someone from the past inside you. You feel his strong authority...he\'s inside you. You gain:@+1 [influence] @+1 [authority] //<small>We need a strong tribe ruler!</small>',
                icon: [4, 12, "magixmod", 6, 13, "magixmod"],
                cost: {},
                req: { 'tribalism': false }
            });
            new G.Tech({
                name: 'a gift from the mausoleum', displayName: '<font color="#ffc419">A gift from the Mausoleum</font>', category: 'misc',
                icon: [0, 7, "magixmod"],
                cost: {},
                req: { 'tribalism': false },
                effects: [
                    { type: 'show context', what: ['flowers'] },
                ],
            });
            new G.Tech({
                name: 'a feeling from the Underworld', category: 'misc',
                desc: 'You feel an unusual and slightly dark warmth. It appears to be a rather strange call from the Underworld... @<b>Getting this allows you to finish unlocking the Underworld!</b>',
                icon: [8, 12, 9, 5, "magixmod"],
                cost: {},
                effects: [
                    { type: 'provide res', what: { 'new world point': 400 } },
                ],
                req: { 'tribalism': false }
            });
            new G.Tech({
                name: 'underworld\'s ascendant', displayName: 'The Underworld\'s Ascendant', category: 'misc',
                desc: 'You managed to perform several large feats to attract someone new! You will now gain +1 [adult] during new runs, who is [adult,The Underworld\'s Ascendant]! //<small>hello underworld</small>',
                icon: [15, 19, "magixmod"],
                cost: {},
                effects: [
                    { type: 'provide res', what: { 'adult': 1 } },
                ],
                req: { 'tribalism': false }
            });
            /*======================================
            Another TECHZ
            =======================================*/
            new G.Tech({
                name: 'guilds unite', category: 'tier2',
                desc: 'Getting this changes the icons of guilds and lodges and also adds 2 [housing] capacity to each guild or lodge. However, the hiring amount is increased to 100.',
                icon: [29, 8, "magixmod"],
                cost: { 'insight II': 25, 'culture II': 10, 'influence II': 5 },
                req: { 'cities': true, 'construction II': true, 'code of law II': true },
                effects: [
                    { type: 'function', func: function () { G.getDict('lodge').icon = [29, 9, "magixmod"]; G.getDict('lodge on water').icon = [36, 17, "magixmod"]; G.getDict('guild quarters').icon = [28, 15, "magixmod", 25, 2] } }
                ],
            });
            new G.Tech({
                name: 'focused scouting', category: 'upgrade',
                desc: '@[scout]s and [wanderer]s become smarter by discovering new safer techniques of exploring, like advanced star navigation. It may make exploring safer...<>This tech will allow you to find new adventures and places with the same units. //Increases the exploration softcap.',
                icon: [10, 21, "magixmod"],
                cost: { 'insight II': 15 },
                req: { 'tool-making': true, 'richer language': true, 'well-digging': true },
                effects: [
                    { type: 'function', func: function () { G.getDict('wanderer').icon = [11, 21, "magixmod"]; G.getDict('scout').icon = [12, 21, "magixmod"] } }
                ],
                chance: 2,
            });
            new G.Tech({
                name: 'bigger kilns', category: 'upgrade',
                desc: '@People can build bigger and more compact [kiln]s that are more efficient and use the same amount of [land]. <>Increases the efficiency of all [Kiln] types by 50% but doubles the upkeep cost of this unit. <>In addition, this tech changes their visual look.',
                icon: [21, 21, "magixmod"],
                cost: { 'insight II': 15 },
                req: { 'Improved rhetoric': true, 'construction II': true, 'masonry': true, 'weaving II': true, 'prospecting II': true },
                effects: [
                    { type: 'function', func: function () { G.getDict('kiln').icon = [28, 19, "magixmod"]; G.getDict('Kiln').icon = [20, 21, "magixmod"]; G.getDict('kiln').upkeep = { 'log': 1 }; G.getDict('Kiln').upkeep = { 'log': 1 } } }
                ],
                chance: 4,
            });
            new G.Tech({
                name: 'symbolism II', category: 'upgrade',
                desc: '@Increases the [symbolism] bonus from to 40%, and also lets it work with [druid]s.',
                icon: [0, 39, "magixmod", 30, 14, "magixmod"],
                cost: { 'culture II': 15, 'insight II': 10 },
                req: { 'oral tradition': true, 'ritualism II': true, 'Improved rhetoric': true, 'richer language': true, 'symbolism': true },
                effects: [
                    { type: 'function', func: function () { G.getDict('storyteller').icon = [29, 7, "magixmod"] } }
                ],
            });
            new G.Tech({
                name: 'cozy building', category: 'upgrade',
                desc: '@People now want to obtain warmth using various heat sources! This is always a solution for cold nights if people living inside have no clothing. People will now add chimneys to their huts, hovels, and houses. Some archaic shelters also get an improvement. <>Because of this, a few simple buildings will look different!',
                icon: [29, 3, "magixmod"],
                cost: { 'insight II': 20 },
                req: { 'sedentism': true, 'tool-making': true, 'focused scouting': true },
                effects: [
                    {
                        type: 'function', func: function () {
                            if (!G.has('cozier building')) {
                                G.getDict('hut').icon = [28, 12, "magixmod"]; G.getDict('hovel').icon = [28, 11, "magixmod"]; G.getDict('mud shelter').icon = [28, 13, "magixmod"]; G.getDict('house').icon = [28, 14, "magixmod"];
                            }
                        }
                    }
                ],
                chance: 3,
            });
            new G.Tech({
                name: 'cozier building', category: 'upgrade',
                desc: '@people began thinking about having some additional decorations near their houses. <>Getting this makes buildings look even better, changing the look of basic buildings and also unlocking something new.',
                icon: [29, 4, "magixmod"],
                cost: { 'insight II': 25, 'culture II': 5 },
                req: { 'cozy building': true, 'focused scouting': true, 'caretaking': true },
                effects: [
                    {
                        type: 'function', func: function () {
                            G.getDict('hut').icon = [29, 10, "magixmod"];
                            G.getDict('hovel').icon = [29, 11, "magixmod"];
                            G.getDict('mud shelter').icon = [29, 12, "magixmod"];
                            G.getDict('house').icon = [29, 14, "magixmod"];
                            G.getDict('branch shelter').icon = [29, 13, "magixmod"]
                        }
                    }
                ],
                chance: 3,
            });
            new G.Tech({
                name: 'maths IV', category: 'tier2',
                desc: '@Expands the mathematical knowledge of your scholars by letting them study more complex function analysis, calculating variables in terms of other variables, solving more complex equations, and generally pushing their math skills to the limit. @Improves your average citizen\'s math knowledge. @provides 5 [education] and 40 [wisdom II] @Unlocks the fourth tier of a few specific techs //<small>thanks to the math stuff mentioned here, college is getting really hard</small>',
                icon: [2, 39, "magixmod", 8, 21, "magixmod", 24, 1],
                cost: { 'insight II': 50, 'science': 8, 'culture II': 12 },
                effects: [
                    { type: 'provide res', what: { 'education': 5 } },
                    { type: 'provide res', what: { 'wisdom II': 40 } },
                ],
                req: { 'physics II': true, 'symbolism II': true, 'maths III': true },
            });
            new G.Tech({
                name: 'fires from logs', category: 'tier2',
                desc: '[firekeeper]s will be able to start fires out of [log]s as well.//<small>So...coal or logs?</small>',
                icon: [9, 21, "magixmod", 23, 1],
                cost: { 'insight II': 10 },
                req: { 'eotm': true },
            });
            new G.Tech({
                name: 'paradise housing conceptions', category: 'tier1',
                desc: 'This technology doesn\'t unlock new housing for the Paradise yet. But, in the future, you will obtain similar technologies that finally will unlock new [housing] options. <>Paradise housing is limited, however. God doesn\'t want his homeland to be filled with houses and look like your main world.',
                icon: [0, 21, "magixmod"],
                cost: { 'insight': 1000, 'culture': 390, 'inspiration': 16, 'faith': 259 },
                req: { 'paradise building': true },
            });
            new G.Tech({
                name: 'paradise housing', category: 'tier2',
                desc: 'Unlocks new buildings which are unique to the Paradise, however, every type of [housing] will be limited in some way. Paradise is not like the first island, as it is not a spot where you can build as much housing as you wish; Paradise isn\'t and never will be totally yours. <>Unlocks [treehouse]s, [cozy lodge]s, [Hardened house]s, and [cozy paradise hut]s. Interestingly, Paradise is a lush world, so your people do not need to construct chimneys for their houses at all.',
                icon: [1, 21, "magixmod"],
                cost: { 'insight II': 70 },
                req: { 'paradise building': true, 'paradise housing conceptions': true, 'cozy building': true },
            });
            new G.Tech({
                name: 'science blessing', category: 'tier2',
                desc: '@[guru]s and [transcendentalist]s generate 50% more. @Various alchemy stands will operate thrice as fast. @provides 2 bonus [science] //<small>I\'ve gotten blessed with more knowledge!</small>',
                icon: [0, 39, "magixmod", 29, 5, "magixmod"],
                cost: { 'insight II': 5, 'mana': 500 },
                req: { 'science master': true },
                effects: [
                    { type: 'provide res', what: { 'science': 2 } },
                ],
            });
            new G.Trait({
                name: 'gt6',
                displayName: 'God\'s trait #6 Fertile essence farms',
                desc: 'All [magic essences,Essence] farms make 50% more essences at the same upkeep. @also unlocks a variety of new techs //<small>Blessed plants grow bigger and stronger!</small>',
                icon: [5, 21, "magixmod"],
                cost: { 'insight II': 25, 'faith II': 3, 'culture II': 4 },
                chance: 80,
                req: { 'magical soil': true },
                category: 'gods'
            });
            new G.Tech({
                name: 'music', category: 'tier2',
                desc: 'People can now use music as one of the pillars of cultural heritage. @unlocks a new tech that lets you unlock [musician]s @makes [storyteller]s more limited until you unlock that tech',
                icon: [29, 17, "magixmod"],
                cost: { 'insight II': 15, 'culture II': 25 },
                req: { 'symbolism II': true, 'ritualism II': true },
                effects: [
                    { type: 'function', func: function () { G.getDict('storyteller').limitPer = { 'population': 175 } } }
                ],
            });
            new G.Tech({
                name: 'music instruments', category: 'tier2',
                displayName: 'Musical instruments',
                desc: 'Unlock the [musician], which uses instruments gathered from oddly shaped materials around the tribe. [storyteller]s will also no longer be so limited.',
                icon: [29, 18, "magixmod"],
                cost: { 'insight II': 10, 'culture II': 25 },
                req: { 'music': true },
                effects: [
                    { type: 'function', func: function () { G.getDict('storyteller').limitPer = { 'population': 20 } } }
                ],
            });
            new G.Tech({
                name: 'more experienced healers', category: 'upgrade',
                desc: 'All [healer]s are more efficient. <>This technology will give you a bonus depending on the path your people have chosen. <>If they have chosen [moderation], then [healer]s will work 3% more efficient. <>If they have chosen [caretaking], then [healer]s will work 6% more efficient.',
                icon: [14, 21, "magixmod"],
                cost: { 'insight II': 50, 'science': 5 },
                req: { 'bigger kilns': true }
            });
            new G.Tech({
                name: 'better kiln construction', category: 'upgrade',
                desc: 'All [kiln]s are more efficient. <>This technology will give you a bonus depending on the path your people have chosen. <>If they have chosen [moderation], then [kiln]s will work 10% more efficient. <>If they have chosen [caretaking], then [kiln]s will work 5% more efficient.',
                icon: [15, 21, "magixmod"],
                cost: { 'insight II': 50, 'science': 5 },
                req: { 'bigger kilns': true }
            });
            new G.Tech({
                name: 'inspirated carvers', category: 'upgrade',
                displayName: 'More inspired carvers',
                desc: '[carver]s are more efficient. <>This technology will give you a bonus depending on the path your people have chosen. <>If they have chosen [moderation], then [carver]s will work 3% more efficient. <>If they have chosen [caretaking], then [carver]s will work 6% more efficient.',
                icon: [16, 21, "magixmod"],
                cost: { 'insight II': 50, 'science': 5 },
                req: { 'bigger kilns': true }
            });
            new G.Tech({
                name: 'mo\' concrete', category: 'upgrade',
                desc: '[concrete making shack]s are more efficient. <>This technology will give you a bonus depending on the path your people have chosen. <>If they have chosen [moderation], then [concrete making shack]s will work 20% more efficient. <>If they have chosen [caretaking], then [concrete making shack]s will work 5% more efficient.',
                icon: [17, 21, "magixmod"],
                cost: { 'insight II': 50, 'science': 5 },
                req: { 'bigger kilns': true }
            });
            new G.Tech({
                name: 'more capacious racks', category: 'upgrade',
                desc: '[drying rack]s become thrice as efficient. //<small>...</small>',
                icon: [18, 21, "magixmod"],
                cost: { 'insight II': 25 },
                req: { 'caretaking': true, 'magical soil': true }
            });
            new G.Tech({
                name: 'oil-digging', category: 'tier2',
                desc: '[quarry] workers will now try to look for [oil]. Although they don\'t understand exactly what it is, they think it could be useful... //<small>kind of weird-looking</small>',
                icon: [29, 2, "magixmod"],
                cost: { 'insight II': 25 },
                req: { 'moderation': true, 'eotm': true },
                effects: [
                    { type: 'function', func: function () { G.getDict('quarry').icon = [19, 21, "magixmod"] } }
                ],
            });
            new G.Tech({
                name: 'bigger factory racks', category: 'upgrade',
                desc: '[leather factory,Leather factories] dry twice as much [leather].',
                icon: [29, 19, "magixmod"],
                cost: { 'insight II': 25 },
                req: { 'moderation': true, 'eotm': true }
            });
            new G.Tech({
                name: 'next-to house fruitbushes', category: 'tier2',
                desc: 'People who live in [house]s can now gather various [fruit]s from bushes that they plant next to their houses. //<small>Berries,raspberries, berries...there are so many kinds!</small>',
                icon: [29, 15, "magixmod"],
                cost: { 'insight II': 10 },
                req: { 'caretaking': true, 'eotm': true, 'cozier building': true }
            });
            new G.Tech({
                name: '<font color="lime">Fruit supplies</font>', category: 'misc', //Uhhhh why is this not in the displayName...that's fun
                desc: 'Obtaining Experienced gives you an extra 100 [fruit]s at the start! Hope your people enjoy it :) //<small>Let\'s make a prehistoric fruit salad...</small>',
                icon: [4, 12, "magixmod", 28, 22, "magixmod"],
                cost: {},
                effects: [
                    { type: 'provide res', what: { 'fruit': 100 } },
                ],
                req: { 'tribalism': false }
            });
            new G.Tech({
                name: 'life has its theme', displayName: '<font color="#e5a700">Life has its theme</font>', category: 'misc',
                desc: 'From now on, you can change the game theme :) //A special reward for upgrading the [mausoleum] to <b>Level 6</b>...enjoy!',
                icon: [4, 12, "magixmod", 29, 23, "magixmod"],
                cost: {},
                effects: [
                ],
                req: { 'tribalism': false }
            });
            new G.Tech({
                name: 'smaller but efficient', displayName: '<font color="orange">Smaller but efficient</font>',
                desc: 'The [brick house with a silo], [house], [hovel], [hut], [shelter on water], [branch shelter] and [mud shelter] buildings will only use <b>0.9</b> [land] rather than 1 full piece of [land]. //<small>*Insert claustrophobic feelings here*</small>',
                icon: [28, 23, "magixmod"],
                cost: {},
                effects: [
                    {
                        type: 'function', func: function () {
                            G.getDict('hut').use = { 'land': 0.9 };
                            G.getDict('hovel').use = { 'land': 0.9 };
                            G.getDict('house').use = { 'land': 0.9 };
                            G.getDict('mud shelter').use = { 'land': 0.9 };
                            G.getDict('branch shelter').use = { 'land': 0.9 };
                            G.getDict('brick house with a silo').use = { 'land': 0.9 };
                        }
                    }
                ],
                req: { 'tribalism': false }, category: 'misc', chance: 1,
            });
            new G.Tech({
                name: 'glory', category: 'upgrade',
                desc: '@provides 7 [authority II] @Increases the efficiency of [chieftain]s and [clan leader]s by 10% @Applies visual changes for [chieftain] and [clan leader]. @You gain 1 [influence II] every 5 years. @[mediator]s gather twice as much [influence].',
                icon: [23, 23, "magixmod"],
                cost: { 'influence II': 5, 'insight II': 50, 'culture II': 20, 'influence': 160 },
                effects: [
                    { type: 'provide res', what: { 'authority II': 7 } },
                    {
                        type: 'function', func: function () {
                            G.getDict('chieftain').icon = [22, 23, "magixmod"]
                            G.getDict('mediator').limitPer = { 'population': 4000 }
                            G.getDict('clan leader').icon = [25, 23, "magixmod"]
                        }
                    },
                ],
                req: { 'code of law II': true }
            });
            new G.Tech({
                name: 'spiritual piety', category: 'religion',
                desc: '@provides 7 [spirituality II] @Increases [faith] gains of [church,Churches] by 8 times @Applies visual changes for [grave]s and [church,Churches]. @One [grave] provides 3 [burial spot]s and uses 0.7 [land] instead of 1.',
                icon: [26, 23, "magixmod"],
                cost: { 'faith II': 5, 'insight II': 50, 'culture II': 20 },
                effects: [
                    { type: 'provide res', what: { 'spirituality II': 7 } },
                    {
                        type: 'function', func: function () {
                            G.getDict('church').icon = [24, 23, "magixmod"];
                            G.getDict('grave').use = { 'land': 0.7 };
                            if (G.has('voodoo spirit')) G.getDict('grave').icon = [27, 32, "magixmod"]; else G.getDict('grave').icon = [24, 22, "magixmod"];
                            G.getDict('grave').desc = '@provides ' + (3 + 1 * (G.has('voodoo spirit') + 2)) + ' [burial spot], in which the [corpse,dead] are automatically interred one by one@graves with buried corpses decay over time, freeing up land for more graves<>A simple grave dug into the earth, where the dead may find rest.//Burying your dead helps prevent [health,disease] and makes your people slightly [happiness,happier].';
                        }
                    }
                ],
                req: { 'ritualism II': true, 'ritualism': true, 'gt6': true }
            });
            new G.Tech({
                name: 'essential conversion tank overclock I',
                displayName: 'Essential conversion overclocking', category: 'upgrade',
                desc: 'Getting this will let [essential conversion tank]s convert essentials a little more often. People can overclock these tanks to cause conversion to occur even more often!',
                icon: [6, 22, "magixmod"],
                cost: { 'insight II': 80 },
                req: { 'maths IV': true, 'gt6': true, 'monument-building': true, 'construction': true }
            });
            new G.Trait({
                name: 'policy revaluation',
                desc: 'All policies now require [influence II] instead of [influence]. Required for future technologies and to keep people listening to you. </b> Rituals now cost [faith II] to toggle and upkeep. @But don\'t worry, as they won\'t consume too much of the higher tier resources!',
                icon: [1, 23, "magixmod"],
                cost: { 'insight II': 15, 'culture II': 15, 'influence II': 5 },
                chance: 45,
                req: { 'code of law II': true, 'ritualism II': true, 'symbolism II': true, 'glory': true },
                effects: [
                    {
                        type: 'function', func: function () {
                            G.getDict('harvest rituals for flowers').desc = 'Improves the speed of [florist]s by 20%. Consumes 2 [faith II] and 1 [influence II] over the course of 400 days; will stop if you run out.';
                            G.getDict('fertility rituals').desc = 'Increases birth rates by 20%. Consumes 1 [faith II] over the course of 200 days; will stop if you run out.';
                            G.getDict('harvest rituals').desc = 'Improves [gatherer], [hunter], and [fisher] efficiency by 20%. Consumes 1 [faith II] over the course of 200 days; will stop if you run out.';
                            G.getDict('crafting & farm rituals').desc = 'Improves the speed of [Paper-crafting shack]s, [Well of mana,Wells of mana], various crafting units, and <b>Farms</b> by various amounts. Consumes 2 [faith II] and 1 [influence II] over the course of 400 days; will stop if you run out.';
                            G.getDict('discovery rituals').desc = 'Use these unique rituals to improve exploration slightly, with these boosts: @[wanderer]s: +5% speed @[scout]s: +3% speed @[globetrotter]s: +4% speed //Consumes 1 [faith II] over the course of 100 days; will stop if you run out.';
                            G.getDict('wisdom rituals').desc = 'Improves [dreamer] and [storyteller] efficiency by 20%. Consumes 1 [faith II] every 20 days; will stop if you run out. //<small>we are much smarter now</small>';
                            G.getDict('flower rituals').desc = 'People get sick slower and recover faster. Consumes 1 [faith II] every 20 days; will stop if you run out.';
                            G.getDict('sleepy insight').desc = 'At the start of a new year, you have a chance to gain some [insight II]. This policy has a meter with a scale from -3 to 3. <>Modes less than 0 will cause the ability to be stronger at the cost of chance, while modes greater than 0 be less powerful, but with a larger chance.';
                            var mult = (Math.log10(G.getDict('population').amount / 20 + 1) * 1.2 + 1) * (G.achievByName['mausoleum'].won > 8 ? 1.3 : (G.achievByName['mausoleum'].won > 5 ? 1.15 : 1));
                            G.getDict('trait rituals').desc = 'Improves the chance of getting eternal traits (excluding patrons) based on [population] (currently <b>+' + (mult * 100 - 100).toFixed(1) + '%</b>) through the faster spread of beliefs. Consumes just 1 [culture II], [faith II], and [influence II] over the course of 500 days.';

                            for (var j in G.policy) {
                                if (G.policy[j].cost == undefined) continue;
                                if (G.policy[j].cost['influence'] != undefined) {
                                    var newCost = G.policy[j].cost['influence'] + 1;
                                    delete G.policy[j].cost['influence'];
                                    G.policy[j].cost['influence II'] = newCost;
                                }

                                if (G.policy[j].cost['faith'] != undefined) {
                                    var newCost = G.policy[j].name == 'sleepy insight' ? G.policy[j].cost['faith'] / 2 : G.policy[j].cost['faith'] + 1;
                                    delete G.policy[j].cost['faith'];
                                    G.policy[j].cost['faith II'] = newCost;
                                }

                                if (G.policy[j].cost['culture'] != undefined) {
                                    var newCost = G.policy[j].cost['culture'] + 1;
                                    delete G.policy[j].cost['culture'];
                                    G.policy[j].cost['culture II'] = newCost;
                                }
                            }
                            if (G.modsByName['Market mod']) { //Interaction with Market.
                                G.getDict('bazaar_buy').effects.push({ type: 'mult', value: 1.5, req: { 'backshift': true } });
                                G.getDict('bazaar_sell').effects.push({ type: 'mult', value: 1.5, req: { 'backshift': true } });
                                G.getDict('market_buy').effects.push({ type: 'mult', value: 1.5, req: { 'backshift': true } });
                                G.getDict('market_sell').effects.push({ type: 'mult', value: 1.5, req: { 'backshift': true } });
                            }
                        }
                    }
                ],
            });
            new G.Tech({
                name: 'mining strategy', category: 'tier2',
                desc: '@Decreases the accident rate in your normal [mine]s. @Increases the efficiency of [mine] by 5%. @Also applies a small visual change to [mine]s!',
                icon: [17, 23, "magixmod"],
                cost: { 'insight II': 50, 'science': 2 },
                effects: [
                    { type: 'function', func: function () { G.getDict('mine').icon = [18, 23, "magixmod"] } }
                ],
                req: { 'policy revaluation': true, 'moderation': true, 'mining': true, 'quarrying': true, 'caretaking': false, 'improved furnace construction': true, 'symbolism': true }
            });
            new G.Tech({
                name: 'safer explosive usage', category: 'tier2',
                desc: 'Decreases the accident rate of [explosive mine]s by making them safer. @Also improves the efficiency of [explosive mine] by 5% by teaching the workers more effective ways to mine! @Also applies a visual change to [explosive mine]s.',
                icon: [19, 23, "magixmod"],
                cost: { 'insight II': 50, 'science': 2 },
                effects: [
                    { type: 'function', func: function () { G.getDict('explosive mine').icon = [20, 23, "magixmod"] } }
                ],
                req: { 'policy revaluation': true, 'caretaking': true, 'mining': true, 'quarrying': true, 'moderation': false, 'improved furnace construction': true, 'symbolism': true }
            });
            new G.Tech({
                name: 'nutritious magical soil', category: 'upgrade',
                desc: 'Increases the efficiency of [farm of withering tulips,Essence farms] by 10%. This compounds with the boost from [gt6].',
                icon: [21, 23, "magixmod"],
                cost: { 'insight II': 45, 'culture II': 15, 'faith II': 3, 'influence II': 2, 'mana': 1500, 'science': 2 },
                req: { 'policy revaluation': true, 'magical soil': true }
            });
            new G.Trait({
                name: 'magic adept',
                desc: 'Unlocks a new wonder! This trait is a reward for getting at least 1.7 million [magic essences]. //<small>Good job :D</small>',
                icon: [12, 22, "magixmod"],
                cost: { 'magic essences': 1700000 },
                chance: 4,
                req: { 'eotm': true },
                category: 'main'
            });
            new G.Tech({
                name: 'master mana-making', category: 'upgrade',
                desc: '[mana maker]s are four times faster due to improved methods of crafting [mana].',
                icon: [3, 24, "magixmod"],
                cost: { 'insight II': 90, 'culture II': 15 },
                req: { 'policy revaluation': true, 'magical soil': true },
                effects: [
                    {
                        type: 'function', func: function () {
                            // G.getDict('mana maker').icon = [4, 24, "magixmod"];
                        }
                    }
                ],
            });
            new G.Tech({
                name: 'magical presence', category: 'misc',
                displayName: '<font color="silver">Magical presence</font>',
                desc: 'You feel some weird stuff inside of your body. Sometimes it is warm, and at other times it makes you feel weird, but there doesn\'t seem to be anything bad that this presence has made. @Increases the efficiency of all [fire wizard tower,Wizard towers] by 5% without increasing [mana] upkeep. @Unlocks a new theme (make sure you have the [theme changer] by upgrading the [mausoleum] enough)',
                icon: [4, 12, "magixmod", 2, 24, "magixmod"],
                cost: {},
                req: { 'tribalism': false }
            });
            new G.Tech({
                name: 'hunting III', category: 'upgrade',
                desc: '@[hunter]s become more coordinated. This tech decreases the amount of accidents where [hunter]s get injured. @[hunter]s will have a new icon and endurance hunting will no longer be available. @[hunter]s become limited to 1 per 10 [population]',
                icon: [8, 22, "magixmod"],
                cost: { 'insight II': 65, 'science': 2, 'influence II': 3 },
                req: { 'policy revaluation': true, 'magical presence': true, 'fishing II': true },
                effects: [
                    {
                        type: 'function', func: function () {
                            G.getDict('hunter').icon = [36, 16, "magixmod"]
                            G.getDict('hunter').limitPer = { 'population': 10 };
                        }
                    }
                ],
            });
            new G.Tech({
                name: 'fishing III', category: 'upgrade',
                desc: 'This tech may unlock something that improve [fisher]s quite a lot! @[fisher]s will get a new icon, but catching by hand will no longer be available. @[fisher]s become limited to 1 per 10 [population]',
                icon: [7, 22, "magixmod"],
                cost: { 'insight II': 65, 'science': 3, 'culture II': 2 },
                req: { 'policy revaluation': true, 'magical presence': true, 'hunting III': true },
                effects: [
                    {
                        type: 'function', func: function () {
                            G.getDict('fisher').icon = [36, 15, "magixmod"]
                            G.getDict('fisher').limitPer = { 'population': 10 };
                        }
                    }
                ],
            });
            new G.Tech({
                name: 'hunter\'s coordination', category: 'tier2',
                desc: '@Decreases the amount of hunting accidents slightly and makes [hunter]s much faster through coordination practice. Requires a small amount of [food] as upkeep. @gain 10 [wisdom II] //<small>Hunting is now much easier...</small>',
                icon: [6, 23, "magixmod"],
                cost: { 'insight II': 80, 'science': 5 },
                req: { 'hunting III': true },
                effects: [
                    { type: 'provide res', what: { 'wisdom II': 10 } },
                    {
                        type: 'function', func: function () {
                            G.getDict('hunter').upkeep.food = 0.75
                        }
                    }
                ]
            });
            new G.Tech({
                name: 'an armor for Hunter', displayName: 'Hunter armor', category: 'tier2',
                desc: '@Let your [hunter]s get some makeshift armor! //Getting this will decrease the amount of hunting accidents even more.',
                icon: [14, 24, "magixmod"],
                cost: { 'insight II': 80, 'science': 5 },
                req: { 'hunting III': true },
            });
            new G.Tech({
                name: 'fisher\'s smartness', category: 'tier2',
                desc: '[fisher]s become twice as efficient with new skills, but require some [food] as upkeep. @gain 10 [wisdom II] //<small>We now know how to lure different types of fish!</small>',
                icon: [0, 23, "magixmod"],
                cost: { 'insight II': 45, 'science': 5 },
                req: { 'fishing III': true },
                effects: [
                    { type: 'provide res', what: { 'wisdom II': 10 } },
                    {
                        type: 'function', func: function () {
                            G.getDict('fisher').upkeep.food = 0.75
                        }
                    }
                ]
            });
            new G.Tech({
                name: 'hunters & fishers unification', category: 'tier2',
                displayName: 'Hunting and fishing unification',
                desc: 'Unlocks a unit that merges [hunter]s and [fisher]s into one. @[harvest rituals] now boosts the speed of the [fishers & hunters camp] by 35% instead of [fisher]s and [hunter]s. @basic [hunter]s and [fisher]s will still be available, but will now become a lot slower',
                icon: [2, 23, "magixmod"],
                cost: { 'insight II': 55, 'science': 5 },
                req: { 'fishing III': true, 'hunting III': true, 'fisher\'s smartness': true, 'hunter\'s coordination': true, 'an armor for Hunter': true },
                chance: 15,
                effects: [
                    {
                        type: 'function', func: function () {
                            G.getDict('harvest rituals').desc = 'Improves [gatherer] efficiency by 20% and the speed of [fishers & hunters camp] by 35%. Consumes 1 [faith II] roughly every 50 days; will stop if you run out.';
                        }
                    }
                ]
            });
            new G.Trait({
                name: 'camp-cooking', category: 'tier2',
                desc: '<font color="#ffc03f">Every [fishers & hunters camp] will use 1 additional [fire pit], but from now on, they will be able to make some [cooked meat] for you!</font>',
                icon: [15, 24, "magixmod"],
                cost: { 'insight II': 100 },
                req: { 'hunters & fishers unification': true },
                chance: 65,
                category: 'knowledge',
                effects: [
                    {
                        type: 'function', func: function () {
                            G.getDict('fishers & hunters camp').upkeep = { 'food': 75, 'fire pit': 3 };
                        }
                    }
                ]
            });
            new G.Tech({
                name: 'fertile bushes', category: 'upgrade',
                desc: '[house,Next-to house fruitbushes] are 20% more fertile, and [hovel with garden,Hovel gardens] are 15% more fertile. Now, they will gather 20% more [fruit]! Yummy :)',
                icon: [1, 24, "magixmod"],
                cost: { 'insight II': 100, 'culture II': 20 },
                req: { 'hunters & fishers unification': true, 'next-to house fruitbushes': true },
            });
            new G.Tech({
                name: 'supreme fast filtering', category: 'upgrade',
                desc: '[water filter]s will now perform conversion twice as often, doubling their efficiency.',
                icon: [5, 24, "magixmod"],
                cost: { 'insight II': 60 },
                req: { 'hunters & fishers unification': true },
            });
            new G.Tech({
                name: 'supreme cloudy fast filtering', category: 'upgrade',
                desc: '[cloudy water filter]s perform conversion twice as often, doubling their efficiency. //<small>but in what way is it supreme</small>',
                icon: [6, 24, "magixmod"],
                cost: { 'insight II': 80 },
                req: { 'hunters & fishers unification': true, 'supreme fast filtering': true },
            });
            new G.Tech({
                name: 'Improved alchemy techniques', category: 'upgrade',
                desc: '[basic brewing stand]s will become 50% more efficient. //<small>but how do these work</small>',
                icon: [16, 23, "magixmod"],
                cost: { 'insight II': 65, 'science': 7, 'culture II': 23 },
                req: { 'camp-cooking': true },
            });
            new G.Tech({
                name: 'mo \'wine', category: 'upgrade',
                desc: '[alcohol brewing stand] and [alcohol drink brewing stand] become thrice as efficient.',
                icon: [15, 23, "magixmod"],
                cost: { 'insight II': 80, 'science': 5 },
                req: { 'Improved alchemy techniques': true },
            });
            new G.Tech({
                name: 'burial wormhole 1/2', category: 'tier2',
                desc: 'People start thinking about how to use magic without harming their reputation, especially the darker forms of it in order to get rid of [corpse]s. //One of them said that if our people had so many portals already, couldn\'t you just make some more for burying these [corpse]s?',
                icon: [27, 3, "magixmod", 22, 22, "magixmod"],
                cost: { 'insight II': 100, 'science': 6, 'faith II': 4, 'influence II': 5 },
                req: { 'magical presence': true, 'mo \'wine': true },
            });
            new G.Tech({
                name: 'doctrine of the dark wormhole 1/5', category: 'tier2',
                desc: 'This part of the doctrine is about conception of making a small plane where the [corpse]s will lie in such a way that it can fit millions of [corpse]s! //Luckily, your [wizard]s seem really impressed reading about the doctrine. @provides 10 [wisdom II] and 2 [inspiration II]',
                icon: [21, 22, "magixmod", 16, 22, "magixmod"],
                cost: { 'insight II': 100, 'science': 6, 'faith II': 4, 'influence II': 5, 'culture II': 10 },
                req: { 'burial wormhole 1/2': true },
                effects: [
                    { type: 'provide res', what: { 'wisdom II': 10 } },
                    { type: 'provide res', what: { 'inspiration II': 2 } },
                ],
                tutorialMesg: ['tutorial', 'The next part of the wormhole doctrine is related to knowledge! Be aware that the next part of the doctrine is not cheap though. (Stages 2 and 4 are traits, while stages 1, 3, and 5 are manual researches.)', [32, 27, "magixmod"]]
            });
            new G.Trait({
                name: 'doctrine of the dark wormhole 2/5',
                desc: 'This part of the doctrine is about various spells or rituals that can keep a wormhole stable. //Your [wizard]s seem quite interested in making the first wormhole, but they want a finished doctrine first. They don\'t want to do it by just themselves, however, so they will calmly wait for the finished doctrine. @provides 10 [wisdom II] and 2 [inspiration II]',
                icon: [20, 22, "magixmod", 16, 22, "magixmod"],
                cost: { 'insight II': 105, 'science': 6, 'faith II': 4, 'influence II': 5, 'culture II': 15, 'wisdom': 100 },
                req: { 'burial wormhole 1/2': true, 'doctrine of the dark wormhole 1/5': true },
                effects: [
                    { type: 'provide res', what: { 'wisdom II': 10 } },
                    { type: 'provide res', what: { 'inspiration II': 2 } },
                ],
                category: 'knowledge',
                chance: 40
            });
            new G.Tech({
                name: 'doctrine of the dark wormhole 3/5', category: 'tier2',
                desc: 'This part of the doctrine is filled with valuable info about stability of various objects. Wormholes and portals must be stable. If anybody would enter an unstable world nobody knows what would happen to them. //Your [wizard]s feel goosebumps. @provides 10 [wisdom II] and 2 [inspiration II]',
                icon: [19, 22, "magixmod", 15, 22, "magixmod"],
                cost: { 'insight II': 105, 'science': 7, 'faith II': 4, 'influence II': 5, 'culture II': 10, 'wisdom': 50 },
                req: { 'burial wormhole 1/2': true, 'doctrine of the dark wormhole 2/5': true },
                effects: [
                    { type: 'provide res', what: { 'wisdom II': 10 } },
                    { type: 'provide res', what: { 'inspiration II': 2 } },
                ]
            });
            new G.Trait({
                name: 'doctrine of the dark wormhole 4/5', category: 'tier2',
                desc: 'This part of the doctrine describes ways of keeping the wormhole active. It is an important thing too because if it runs out of power, a ton of corpses will explode out of the wormhole and people will be really, really mad. //Your [wizard]s know exactly how big of an issue will happen if the wormhole will run out of power. @provides 10 [wisdom II] and 2 [inspiration II]',
                icon: [18, 22, "magixmod", 15, 22, "magixmod"],
                cost: { 'insight II': 130, 'science': 7, 'faith II': 4, 'influence II': 5, 'culture II': 27 },
                req: { 'burial wormhole 1/2': true, 'doctrine of the dark wormhole 3/5': true },
                effects: [
                    { type: 'provide res', what: { 'wisdom II': 10 } },
                    { type: 'provide res', what: { 'inspiration II': 2 } },
                ],
                category: 'knowledge',
                chance: 60
            });
            new G.Tech({
                name: 'doctrine of the dark wormhole 5/5', category: 'tier2',
                desc: 'This part of the doctrine is about miscellaneous information related to the wormhole. //Your [wizard]s feel secure, and are hypothesizing about how to operate the first [dark wormhole]! @provides 7 [inspiration II]',
                icon: [17, 22, "magixmod", 14, 22, "magixmod"],
                cost: { 'insight II': 150, 'science': 7, 'faith II': 3, 'influence II': 5, 'culture II': 30, 'wisdom': 50 },
                req: { 'burial wormhole 1/2': true, 'doctrine of the dark wormhole 4/5': true },
                effects: [
                    { type: 'provide res', what: { 'inspiration II': 7 } },
                ]
            });
            new G.Tech({
                name: 'burial wormhole 2/2', category: 'tier2',
                desc: 'Unlocks the [dark wormhole] (finally). It is a massive bonus to your [burial spot]s but requires upkeep (more specifically, both [mana] and [dark essence]). Dark energies of death and fear overflow within and keep the wormhole active, and the [corpse]s inside look quite scary and spooky.',
                icon: [27, 2, "magixmod", 22, 22, "magixmod"],
                cost: { 'insight II': 150, 'science': 10, 'culture II': 40 },
                req: { 'doctrine of the dark wormhole 5/5': true, 'master mana-making': true },
            });
            new G.Trait({
                name: 'corpse decay',
                desc: '<b>The wormhole you opened will now be able to make [corpse]s decay based on your [corpsedecaypoint]s!</b>',
                icon: [7, 24, "magixmod"],
                cost: { 'insight II': 125, 'dark essence': 2.5e4, 'culture II': 25, 'influence II': 3 },
                req: { 'burial wormhole 2/2': true, 'doctrine of the dark wormhole 5/5': true },
                effects: [
                ],
                chance: 90
            });
            new G.Tech({
                name: 'liberating darkness', category: 'tier2',
                desc: '[the cemetarium] can now generate [dark essence] for you...<br>but [wild corpse]s will become more deadly!',
                icon: [8, 24, "magixmod"],
                cost: { 'insight II': 130, 'science': 5, 'faith II': 5, 'mana': 20000 },
                req: { 'doctrine of the dark wormhole 5/5': true, 'master mana-making': true, 'hope of revenant abandoning': true },
            });
            new G.Tech({
                name: 'CaP',
                displayName: 'Crime and punishment',
                desc: '@provides more detailed laws related to criminals in your civilization. @you may unlock other variations of this research depending on your civilization\'s relation to death. @this variation predicts moderate punishments for various crimes such as robbery, murder. @for the biggest crimes, one can get sentenced to death.',
                icon: [30, 34, "magixmod", 22, 1],
                cost: { 'influence': 25 },
                req: { 'code of law': true, 'CaP(cruel)': false, 'CaP(light)': false },
                effects: [
                ],
                chance: 200
            });
            new G.Tech({
                name: 'Conveyor conception', category: 'tier2',
                desc: 'People led by [automation] want to learn how to automate the movement of objects, so they wouldn\'t have to move them by hand. @Getting this tech also gives 50 bonus [industry point]s',
                icon: [0, 24, "magixmod"],
                cost: { 'insight II': 135 },
                req: { 'policy revaluation': true, 'moderation': true },
                chance: 10,
                effects: [
                    { type: 'provide res', what: { 'industry point': 50 } },
                ],
            });
            if (G.modsByName['Market mod']) {
                new G.Tech({
                    name: 'backshift', category: 'tier1',
                    desc: '[bazaar_buy,Bazaars] and [market_buy,Markets] work 50% more efficient but require another [worker].',
                    icon: [30, 22, "magixmod"],
                    cost: { 'insight': 997, 'culture': 264 },
                    req: { 'ingredient crafting': true },
                    effects: [
                        {
                            type: 'function', func: function () {
                                G.getDict('bazaar_buy').use = { 'worker': 2, 'land': 1 }
                                G.getDict('bazaar_sell').use = { 'worker': 2, 'land': 1 }
                                G.getDict('market_buy').use = { 'worker': 3, 'land': 1 }
                                G.getDict('market_sell').use = { 'worker': 3, 'land': 1 }
                                G.getDict('bazaar_buy').effects.push({ type: 'mult', value: 1.5, req: { 'backshift': true } });
                                G.getDict('bazaar_sell').effects.push({ type: 'mult', value: 1.5, req: { 'backshift': true } });
                                G.getDict('market_buy').effects.push({ type: 'mult', value: 1.5, req: { 'backshift': true } });
                                G.getDict('market_sell').effects.push({ type: 'mult', value: 1.5, req: { 'backshift': true } });
                                G.getDict('bazaar_buy').icon = [29, 24, "magixmod", 26, 24, "magixmod"]
                                G.getDict('bazaar_sell').icon = [28, 24, "magixmod", 26, 24, "magixmod"]
                                G.getDict('market_buy').icon = [29, 24, "magixmod", 27, 24, "magixmod"]
                                G.getDict('market_sell').icon = [28, 24, "magixmod", 27, 24, "magixmod"]
                                G.getDict('trader_buy').icon = [29, 24, "magixmod", 30, 18, "magixmod"]
                                G.getDict('trader_sell').icon = [28, 24, "magixmod", 30, 18, "magixmod"]
                            }
                        }
                    ]
                });
                new G.Tech({
                    name: 'Essence trading', category: 'tier2',
                    desc: 'Now [market_sell] may trade with [magic essences].',
                    icon: [22, 24, "magixmod"],
                    cost: { 'insight II': 8, 'faith II': 1, 'culture II': 1 },
                    req: { 'eotm': true },
                    effects: [
                        {
                            type: 'function', func: function () {
                                G.getDict('bazaar_buy').icon = [29, 24, "magixmod", 30, 23, "magixmod"];
                                G.getDict('bazaar_sell').icon = [28, 24, "magixmod", 30, 23, "magixmod"];
                                G.getDict('market_buy').icon = [29, 24, "magixmod", 30, 24, "magixmod"];
                                G.getDict('market_sell').icon = [28, 24, "magixmod", 30, 24, "magixmod"];
                                G.getDict('trader_buy').icon = [29, 24, "magixmod", 30, 18, "magixmod"];
                                G.getDict('trader_sell').icon = [28, 24, "magixmod", 30, 18, "magixmod"];
                            }
                        }
                    ],
                });

                new G.Tech({
                    name: 'Expanded essence trading catalog', category: 'tier2',
                    desc: 'Unlocks a policy that will turn on the prospected essence trading. Now [market_sell,Markets] trade [magic essences] with bulks of 150 instead of 100.',
                    icon: [30, 21, "magixmod"],
                    cost: { 'insight II': 95, 'culture II': 3, 'science': 1, 'faith II': 1 },
                    req: { 'magic adept': true, 'magical presence': true },
                    effects: [
                    ],
                });
                new G.Tech({
                    name: 'Mo\' tradez', category: 'upgrade',
                    desc: 'Policies such as [extended basic catalog] or [extended food catalog] now have more options. //Also unlocks the [art trader], who can sell [Painting]s for [market_coin].',
                    icon: [30, 20, "magixmod"],
                    cost: { 'insight': 1490 },
                    req: { 'treeplanting': true },
                    effects: [
                    ],
                });
            }
            new G.Tech({
                name: 'mo\' beauty', category: 'upgrade',
                desc: 'Applies visual changes to some units. //Default units will get "decorated" in a new way!',
                icon: [28, 21, "magixmod", 30, 11, "magixmod"],
                cost: { 'insight II': 5 },
                req: { 'doctrine of the dark wormhole 4/5': true },
                effects: [
                    {
                        type: 'function', func: function () {
                            G.getDict('warehouse').icon = [30, 9, "magixmod"];
                            G.getDict('barn').icon = [30, 8, "magixmod"];
                            G.getDict('granary').icon = [30, 7, "magixmod"];
                            G.getDict('stockpile').icon = [30, 6, "magixmod"];
                            G.getDict('well').icon = [30, 5, "magixmod"];

                            G.getDict('well of the Plain Island').icon = [30, 3, "magixmod"];
                            G.getDict('carver').icon = [30, 2, "magixmod"];
                            G.getDict('firekeeper').icon = [30, 1, "magixmod"];
                            G.getDict('storage pit').icon = [30, 0, "magixmod"];
                            G.getDict('woodcutter').icon = [31, 0, "magixmod"];
                            G.getDict('digger').icon = [31, 1, "magixmod"];
                            G.getDict('artisan').icon = [31, 2, "magixmod"];
                            G.getDict('dreamer').icon = [31, 3, "magixmod"];
                            G.getDict('architect').icon = [31, 4, "magixmod"];
                            G.getDict('healer').icon = [31, 5, "magixmod"];
                            G.getDict('blacksmith workshop').icon = [31, 16, "magixmod"];
                            if (G.modsByName['Thot Mod']) {
                                G.getDict('thot').icon = [21, 27, "magixmod"];
                            }
                        }
                    }
                ],
                tutorialMesg: ['story2', '<b>Mo\' beauty</b> made your cities look much, much nicer. Lanterns and flower decorations are finally spreading everywhere. Sometimes even <b>tools</b> (not joking now) have some shapes and patterns carved. You wander around and the huts are even more beautiful than they ever were; it seems like your people are always in a festival!']
            });
            new G.Tech({
                name: 'symbolism III', category: 'upgrade',
                desc: 'The third level of [symbolism] will make symbolism bonuses apply to more units and become a little more powerful! //In addition, it provides: @10 [wisdom II], @10 [inspiration II], @3 [education], @5 [authority II], and @5 [spirituality II].',
                icon: [1, 39, "magixmod", 31, 17, "magixmod"],
                cost: { 'insight II': 145, 'culture II': 35, 'influence II': 5, 'faith II': 5, 'science': 10, 'novel': 20 },
                req: { 'doctrine of the dark wormhole 5/5': true },
                effects: [
                    { type: 'provide res', what: { 'inspiration II': 10 } },
                    { type: 'provide res', what: { 'wisdom II': 10 } },
                    { type: 'provide res', what: { 'education': 3 } },
                    { type: 'provide res', what: { 'authority II': 5 } },
                    { type: 'provide res', what: { 'spirituality II': 5 } },
                ]
            });
            new G.Tech({
                name: 'wizard\'s grain fertilizer', category: 'upgrade',
                desc: 'Your people can learn how to make some unique fertilizer, letting [wheat farm]s produce 150% more [wheat] instead of 50%. It was made by group of wizards who love eating [bread] for breakfast. (They cannot imagine life without it!)',
                icon: [30, 17, "magixmod"],
                cost: { 'insight II': 100, 'mana': 500, 'culture II': 33, 'faith II': 2 },
                req: { 'doctrine of the dark wormhole 3/5': true },
                effects: [
                ]
            });
            new G.Tech({
                name: 'plain island mining strategies', category: 'tier2',
                displayName: 'Safer island mining strategies',
                desc: '@Decreases the accident rate at the [mine of the plain island], and also increases their efficiency slightly. @Applies a new visual change to [mine of the plain island]\'s icon!',
                icon: [31, 7, "magixmod"],
                cost: { 'insight II': 50, 'science': 2 },
                req: { 'mining strategy': true }
            });
            new G.Trait({
                name: 'respect for the corpse',
                desc: '@this trait removes and disables the effects of [ritual necrophagy] @[art of death] no longer uses any corpses, but [painter,Artists] will still use death as a theme (without using actual [corpse]s). @allows [art of death] to be obtainable with the [belief in the beforelife,Beforelife] religion path. @unhappiness from unburied corpses is decreased by a quarter',
                icon: [25, 24, "magixmod"],
                cost: { 'culture II': 25, 'faith II': 5, 'influence II': 5 },
                req: { 'ritual necrophagy': true, 'liberating darkness': true },
                effects: [
                    {
                        type: 'function', func: function () {
                            if (G.has('ritual necrophagy')) G.deleteTrait('ritual necrophagy');
                            G.traitByName['art of death'].desc = '@[corpse]s and their parts can now only be the <u>topic</u> of an art (thanks to [respect for the corpse]).@<b><font color="#f70054">Note: This trait is rather temporary, but there is a slight chance that this trait will become permanent.</font></b>';
                        }
                    }
                ],
                chance: 35
            });
            new G.Tech({
                name: 'power of the faith', category: 'religion',
                desc: 'Now the [crafting & farm rituals] bonus applies in various amounts to: @[blacksmith workshop]s (both the normal and paradise version) @[carpenter workshop]s (both the normal and paradise version) @[holy orchard]s @[artisan]s (including some subtypes)//These bonuses only work, however, when [crafting & farm rituals] is active (note that the upkeep needed won\'t increase). @provides 5 [spirituality II]',
                icon: [24, 24, "magixmod"],
                cost: { 'culture II': 25, 'insight II': 135, 'science': 5, 'faith': 26 },
                req: { 'symbolism III': true },
                chance: 2,
                effects: [
                    { type: 'provide res', what: { 'spirituality II': 5 } },
                ]
            });
            new G.Tech({
                name: 'improved windmill motors', category: 'upgrade',
                desc: 'By improving the quality of your [windmill]s by using better construction methods, they will craft 35% more [flour].',
                icon: [31, 13, "magixmod"],
                cost: { 'insight II': 165, 'science': 5, 'culture II': 21 },
                req: { 'symbolism III': true },
                chance: 2,
            });
            new G.Tech({
                name: 'backshift at farms', category: 'upgrade',
                desc: '[sugar cane farm]s produce 150% more and [wheat farm]s become twice as efficient. //However, now these farms require 50% more [worker]s and 40% more [land] due to way people increase the harvests of the farms. //Requires [moderation] to unlock this tech. Also, each [hovel with garden] is 10% more effective.',
                icon: [31, 14, "magixmod"],
                cost: { 'insight II': 180, 'science': 5, 'influence II': 10, 'culture II': 5 },
                req: { 'improved windmill motors': true, 'moderation': true },
                chance: 2,
                effects: [
                    {
                        type: 'function', func: function () {
                            G.getDict('wheat farm').icon = [31, 19, "magixmod"]
                            G.getDict('wheat farm').use = { 'worker': 12, 'land': 21, 'stone tools': 12 }
                            G.getDict('sugar cane farm').icon = [31, 18, "magixmod"]
                            G.getDict('sugar cane farm').use = { 'worker': 12, 'land': 49, 'stone tools': 12 }
                        }
                    }
                ],
            });
            new G.Trait({
                name: 'leaves of wisdom',
                desc: 'A weird thought strikes the heads of some of your scholars. It\'s all about a [wisdom II,Wisdom tree], which seems to grow some ruby red leaves. Suddenly, the scholars begin to collaborate together to research more in-depth about various subjects, and eventually tons of detailed ideas are being discussed by the general population. //Learning about these gives you 2 [education], 35 [wisdom II], and 250 [wisdom] and allows you to unlock more techs. [essential conversion tank]s also become 25% faster.',
                icon: [31, 10, "magixmod"],
                req: { 'symbolism II': true, 'branches of wisdom': false },
                chance: 20,
                effects: [
                    { type: 'provide res', what: { 'wisdom II': 35, 'wisdom': 250 } },
                    { type: 'provide res', what: { 'education': 2 } },
                ],
                category: 'knowledge'
            });
            new G.Tech({
                name: 'embalmment', category: 'tier2',
                desc: 'Smart people found out how to make a substance that will slow down the decay of corpses and discourage people from performing [ritual necrophagy,Necrophagy] on them. They think about crafting [urn]s to store [corpse]s.',
                icon: [31, 20, "magixmod"],
                cost: { 'insight II': 110, 'science': 5, 'influence II': 10, 'culture II': 5 },
                req: { 'respect for the corpse': true },
                chance: 5,
            });
            new G.Tech({
                name: 'cremation', category: 'tier2',
                desc: 'Unlocks the [crematorium]. Burns embalmed [corpse]s and turns them into dust before putting them in an [urn].//You\'ll be able to get better ways of burying people as well. @each [burial spot] can store 4 [urn]s',
                icon: [30, 16, "magixmod"],
                cost: { 'insight II': 155, 'science': 10, 'influence II': 10, 'culture II': 35 },
                req: { 'embalmment': true },
                chance: 5,
            });
            new G.Tech({
                name: 'dark urn decay', category: 'tier2',
                desc: '[corpse decay] now affects [urn]s as well.',
                icon: [30, 15, "magixmod"],
                cost: { 'faith II': 15, 'insight II': 135, 'essenced seeds': 300 },
                req: { 'corpse decay': true, 'cremation': true },
                chance: 5,
            });
            new G.Tech({
                name: 'juicy nutritious magical soil', category: 'upgrade',
                desc: 'Increases the efficiency of [farm of withering tulips,Essence farms] by 10%. This compounds with the boost from [gt6] and previous soil upgrades.',
                icon: [31, 11, "magixmod"],
                cost: { 'insight II': 190, 'culture II': 20, 'juices': 1050, 'culture': 188 },
                req: { 'policy revaluation': true, 'nutritious magical soil': true, 'magical presence': true }
            });
            new G.Tech({
                name: 'paper mastery', category: 'upgrade',
                desc: '[Paper-crafting shack]s are thrice as efficient.',
                icon: [31, 9, "magixmod"],
                cost: { 'insight II': 125, 'science': 7, 'influence II': 3 },
                req: { 'camp-cooking': true },
            });
            new G.Tech({
                name: 'even mo\' paper', category: 'upgrade',
                desc: '[Paper-crafting shack]s produce 30% more [paper].//To get this bonus, you need to obtain [moderation] or [caretaking]. It does not matter which path your people will choose.',
                icon: [31, 12, "magixmod"],
                cost: { 'insight II': 135, 'science': 7, 'influence II': 6, 'culture II': 30, 'faith II': 2 },
                req: { 'paper mastery': true },
            });
            new G.Tech({
                name: 'more humid water', category: 'upgrade',
                desc: 'By improving the water that you use, [sugar cane farm]s produce 150% more [sugar cane].',
                icon: [31, 23, "magixmod"],
                cost: { 'insight': 590 },
                req: { 'moar juices': true },
            });
            new G.Tech({
                name: 'soil for moisture-loving plants', category: 'upgrade',
                desc: 'Improve the soil of [sugar cane farm]s, making them produce 200% more [sugar cane]. //Compounds with previous bonuses.',
                icon: [31, 24, "magixmod"],
                cost: { 'insight': 1350, 'culture': 300 },
                req: { 'ambrosium treeplanting': true },
            });
            new G.Tech({
                name: 'empowered canes', category: 'upgrade',
                desc: '[sugar cane farm]s produce 200% more [sugar cane] through better care and [nature essence]. //Compounds with previous bonuses.//<small>These farms are getting quite efficient!</small>',
                icon: [31, 25, "magixmod"],
                cost: { 'insight II': 50, 'culture II': 15, 'nature essence': 20000 },
                req: { 'eotm': true },
            });
            new G.Tech({
                name: 'essenced soil for moisture-loving plants', category: 'upgrade',
                desc: '[sugar cane farm]s produce 300% more [sugar cane] by infusing lots of [magic essences,Magic] into the soil itself. //Compounds with previous bonuses.',
                icon: [30, 25, "magixmod"],
                cost: { 'insight II': 90, 'culture II': 20, 'influence II': 3, 'science': 2, 'nature essence': 25000, 'magic essences': 200000 },
                req: { 'nutritious magical soil': true },
            });
            new G.Tech({
                name: 'Storage at the bottom of the world', category: 'tier2',
                desc: 'Unlocks the [heavy warehouse]. It is built in the dark depths that surround the Underworld and covered with heavy metal.',
                icon: [30, 13, "magixmod"],
                cost: { 'insight II': 185, 'culture II': 15, 'influence II': 1, 'science': 4 },
                req: { 'leaves of wisdom': true },
            });
            new G.Trait({
                name: 'gods and idols',
                displayName: 'Knowledge of the Seraphins',
                desc: 'May open a door to the Seraphins, who are great beings that may help your people.',
                icon: [17, 25, "magixmod"],
                req: { 'liberating darkness': true, 'power of the faith': true },
                cost: { 'faith II': 8, 'influence II': 7, 'insight II': 35, 'culture II': 10 },
                chance: 70,
                category: 'religion'
            });
            new G.Tech({
                name: 'monument-building III', category: 'upgrade',
                desc: '@[population,People] may now use almost every resource to construct mystical, beautiful wonders.',
                icon: [1, 39, "magixmod", 0, 25, "magixmod"],
                req: { 'gods and idols': true },
                cost: { 'insight II': 187, 'science': 8, 'culture II': 30 },
            });
            new G.Trait({
                name: 'sb1',
                displayName: 'Soothsayer blessing',
                desc: 'Increases the amount of [faith] gained by [soothsayer]s by 10% due to them getting closer to your religion. //<small>you got lucky this time...this increases it by the most out of all four of these traits</small>',
                icon: [13, 25, "magixmod"],
                req: { 'gods and idols': true, 'power of the faith': true, 'sb2': false, 'sb3': false, 'sb4': false },
                cost: { 'faith II': 8, 'influence II': 7, 'insight II': 35, 'culture II': 10 },
                chance: 60,
                category: 'religion'
            });
            new G.Trait({
                name: 'sb2',
                displayName: 'Soothsayer blessing',
                desc: 'Increases the amount of [faith] gained by [soothsayer]s by 5% due to them getting closer to your religion.',
                icon: [14, 25, "magixmod"],
                req: { 'gods and idols': true, 'power of the faith': true, 'sb1': false, 'sb3': false, 'sb4': false },
                cost: { 'faith II': 8, 'influence II': 7, 'insight II': 35, 'culture II': 10 },
                chance: 60,
                category: 'religion'
            });
            new G.Trait({
                name: 'sb3',
                displayName: 'Soothsayer not-blessing',
                desc: 'Sadly, getting closer to your religion doesn\'t make [soothsayer]s gain more [faith]. //<small>Try your luck next time, I guess!</small>',
                icon: [15, 25, "magixmod"],
                req: { 'gods and idols': true, 'power of the faith': true, 'sb2': false, 'sb1': false, 'sb4': false },
                cost: { 'faith II': 8, 'influence II': 7, 'insight II': 35, 'culture II': 10 },
                chance: 60,
                category: 'religion'
            });
            new G.Trait({
                name: 'sb4',
                displayName: 'Soothsayer un-blessing',
                desc: 'Nobody knows how or why, but [soothsayer]s will now gain 5% less [faith] even after getting closer to the entire God and religion! //<small>unlucky...</small>',
                icon: [16, 25, "magixmod"],
                req: { 'gods and idols': true, 'power of the faith': true, 'sb2': false, 'sb3': false, 'sb1': false },
                cost: { 'faith II': 8, 'influence II': 7, 'insight II': 35, 'culture II': 10 },
                chance: 60,
                category: 'religion'
            });
            new G.Tech({
                name: 'life in faith', category: 'misc',
                displayName: '<font color="gold">Life in faith</font>',
                desc: 'You remember that you were staying near the Temple...and this memory alone has unbelievable powers! @+1 [faith] @+1 [spirituality] @3 new themes (make sure you have the [theme changer] by upgrading the [mausoleum] enough)',
                icon: [4, 12, "magixmod", 1, 9, "magixmod"],
                cost: {},
                effects: [
                    { type: 'provide res', what: { 'spirituality': 1 } },
                    { type: 'provide res', what: { 'faith': 1 } },
                ],
                req: { 'tribalism': false }
            });
            new G.Tech({
                name: 'pantheon key', category: 'religion',
                desc: 'Unlocks the Pantheon. Within it, you will meet 12 Seraphins. Each one will offer some boost, but may come with some backfires! <font color="#f70054">Be sure to choose the Seraphins wisely!</font> //You will get 4 [worship point]s that can be spent on choosing up to 4 Seraphins. Rejecting an already chosen one will not refund a spent [worship point] back to you, so be careful and think twice before you choose a Seraphin! //Getting this key also unlocks the ability to start a trial from the Policies tab. //Provides 25 [spirituality II] and 15 [authority II].',
                icon: [4, 25, "magixmod", 24, 1],
                req: { 'life in faith': true, 'monument-building III': true },
                cost: { 'insight II': 100, 'faith II': 10, 'culture II': 30, 'godTemplePoint': 500, 'faith': 80 },
                effects: [
                    { type: 'provide res', what: { 'worship point': 4 } },
                    { type: 'provide res', what: { 'spirituality II': 25 } },
                    { type: 'provide res', what: { 'authority II': 15 } },
                ]
            });
            new G.Tech({
                name: 'skinning', category: 'tier1',
                desc: '[hunter]s will be able to gather [hide] out of killed animals.',
                icon: [31, 26, "magixmod"],
                req: { 'hunting': true, 'sewing': true },
                cost: { 'insight': 10 },
                effects: [
                    {
                        type: 'function', func: function () {
                            G.getDict('stoats').res['hunt']['hide'] = 1;
                            G.getDict('wild rabbits').res['hunt']['hide'] = 0.2;
                            G.getDict('koalas').res['hunt']['hide'] = 0.2;
                            G.getDict('deer').res['hunt']['hide'] = 0.6;
                            G.getDict('bears').res['hunt']['hide'] = 1;
                            G.getDict('polar bears').res['hunt']['hide'] = 1;
                            G.getDict('boars').res['hunt']['hide'] = 0.5;
                            G.getDict('foxes').res['hunt']['hide'] = 0.5;
                            G.getDict('wolves').res['hunt']['hide'] = 0.5;
                            G.getDict('seals').res['hunt']['hide'] = 0.5;
                            G.getDict('crocodiles').res['hunt']['leather'] = 0.5;
                        }
                    },
                ],
            });
            new G.Tech({
                name: 'herbalism', category: 'tier1',
                desc: '[gatherer]s can now gather [herbs] from some types of grass, bushes, and other plants.//Previously they were missing most of the plants because they thought that it was simply grass.',
                icon: [31, 27, "magixmod"],
                req: { 'language': true },
                cost: { 'insight': 10 },
                effects: [
                    {
                        type: 'function', func: function () {
                            G.getDict('grass').res['gather']['herbs'] = 10;
                            G.getDict('berry bush').res['gather']['herbs'] = 0.25;
                            G.getDict('wild bush').res['gather']['herbs'] = 0.25;
                            G.getDict('succulents').res['gather']['herbs'] = 3;
                            G.getDict('jungle fruits').res['gather']['herbs'] = 1;
                        }
                    },
                ],
            });
            new G.Tech({
                name: 'instruction', category: 'tier1',
                desc: 'This will improve your people\'s communication among themselves. [population,People] will now be able to guide each other while doing their work to help out! //<small>in fact, it can reduce confusion by a lot</small>',
                icon: [30, 27, "magixmod"],
                req: { 'message memory': true, 'language': true, 'a gift from the mausoleum': true, 'alphabet 1/3': true },
                cost: { 'insight': 30 },
                effects: [
                ]
            });
            new G.Tech({
                name: 'writing', category: 'tier1',
                desc: 'People can write, at least. Because they do not have any paper yet, they will write on stones, logs, and other nearby objects. Learning [writing] is required to unlock further researches.<br>//<small>writing H letter, then E, after E write L, then another L and O at the end.</small>',
                icon: [16, 27, "magixmod"],
                req: { 'language': true },
                cost: { 'insight': 25 },
                effects: [
                ]
            });
            new G.Tech({
                name: 'caligraphy', category: 'tier1',
                desc: 'Your people can write but their characters are hard to be read. This technology will be a pass for things like [city planning].<br>//<small>Now that HELLO is readable...</small>',
                icon: [17, 27, "magixmod"],
                req: { 'writing': true },
                cost: { 'insight': 30, 'culture': 5 },
                tutorialMesg: ['story1', 'You glance at your tribe members for a while. Who knows if that small tribe is on a good way to become an empire or kingdom or whatever?']
            });
            new G.Tech({
                name: 'alphabet 1/3', category: 'tier1',
                desc: 'Make people set up their own alphabet. This is needed to unlock more advanced concepts and to understand more!',
                icon: [28, 27, "magixmod", 29, 27, "magixmod"],
                req: { 'caligraphy': true },
                cost: { 'insight': 30, 'culture': 5 },
                effects: [
                ]
            });
            new G.Tech({
                name: 'alphabet 2/3', category: 'tier1',
                desc: 'Improves the set of characters in your people\'s alphabet. //May lead to the existence of native languages.',
                icon: [27, 27, "magixmod", 24, 27, "magixmod"],
                req: { 'alphabet 1/3': true, 'wizardry': true },
                cost: { 'insight': 250, 'culture': 50 },
                effects: [
                ]
            });
            new G.Tech({
                name: 'alphabet 3/3', category: 'tier1',
                desc: 'Significantly expands the amount of characters in your people\'s language.',
                icon: [26, 27, "magixmod", 25, 27, "magixmod"],
                req: { 'alphabet 2/3': true, 'artistic thinking': true, 'alchemy': true },
                cost: { 'insight': 1400, 'culture': 500, 'inspiration': 20, 'wisdom': 40, 'faith': 180 },
                effects: [
                ]
            });

            new G.Tech({
                name: 'philosophy', category: 'tier1',//Unlocks thot if Thot(actually Philosopher) Mod installed :)
                desc: 'Provides 25 [wisdom] for free. //Also increases the [symbolism] bonus for [dreamer]s from 40% to 50%. //Some people start wondering why things aren\'t different than they are.' + (G.modsByName['Thot Mod'] ? "Also unlocks [thot] and applies the [symbolism] bonus for him equal to the new [dreamer] bonus." : "") + '',
                icon: [23, 27, "magixmod"],
                req: { 'alphabet 2/3': true },
                cost: { 'insight': 400 },
                effects: [
                    { type: 'provide res', what: { 'wisdom': 25 } },
                ]
            });
            if (G.modsByName['Thot Mod']) {
                new G.Trait({
                    name: 'natural philosophy',
                    desc: '[thot] is 10% more efficient.',
                    icon: [22, 27, "magixmod"],
                    req: { 'alphabet 3/3': true },
                    cost: { 'insight': 600, 'culture': 300 },
                    effects: [
                    ],
                    chance: 100
                });
                new G.Tech({
                    name: 'natural philosophy II', category: 'upgrade',
                    desc: '[dreamer] is 10% more efficient. [thot] becomes 10% more efficient (additive with [natural philosophy,Natural philosophy I]).',
                    icon: [20, 27, "magixmod"],
                    req: { 'alphabet 3/3': true, 'symbolism III': true },
                    cost: { 'insight II': 60, 'culture II': 30 },
                    effects: [
                    ],
                    chance: 5
                });
            }
            new G.Tech({
                name: 'philosophy II', category: 'upgrade',
                desc: '' + (G.modsByName['Thot Mod'] != undefined ? "[thot] is 50% more efficient (compounding). @provides a bonus of +6 [science]" : "[dreamer]s are 75% more efficient. @provides a bonus of +6 [science]") + '',
                icon: [19, 27, "magixmod"],
                req: { 'alphabet 3/3': true, 'symbolism III': true },
                cost: { 'insight II': 150, 'culture II': 30 },
                effects: [
                    { type: 'provide res', what: { 'science': 6 } },
                    { type: 'function', func: function () { if (G.modsByName['Thot Mod']) { G.getDict('thot').effects.push({ type: 'mult', value: 1.5 }) } } },
                ],
                chance: 100
            });

            new G.Trait({
                name: 'mastered caligraphy', category: 'tier2',
                desc: '<font color="#ff9e3e">Most of your people can write and their writing skills are steadily improving! Your people are now able to write better, meaning that most things your people write down are legible now. //Provides 5 [education] and 5 [wisdom II]</font>',
                icon: [15, 27, "magixmod"],
                req: { 'eotm': true },
                cost: { 'insight II': 15, 'culture II': 15 },
                effects: [
                    { type: 'provide res', what: { 'wisdom II': 5 } },
                    { type: 'provide res', what: { 'education': 5 } },
                ],
                category: 'knowledge',
                chance: 250
            });
            new G.Tech({
                name: 'Life-guiding', category: 'tier1',
                desc: 'People start thinking about their lives. Provides 50 [inspiration] for free! //Conclusions and guides related to life begin to spread, making people less insecure and bringing answers to questions like...What to do? What to choose? How should I live?',
                icon: [18, 27, "magixmod"],
                req: { 'philosophy': true, 'paradise building': true, 'gt3': true },
                cost: { 'insight': 2220, 'culture': 500 },
                effects: [
                    { type: 'provide res', what: { 'inspiration': 50 } },
                ],
            });
            new G.Tech({
                name: 'paradise shelters', category: 'tier2',
                desc: 'Unlocks the [paradise shelter]. It is made out of [stone]s and can fit 4 [population,people], but will also be limited.<br>In addition, it adds +1 bonus [housing] for every 4 [paradise shelter]s.',
                icon: [14, 27, "magixmod"],
                req: { 'paradise housing': true, 'leaves of wisdom': true },
                cost: { 'insight II': 150, 'culture II': 40, 'influence II': 10, 'science': 10 },
            });
            new G.Tech({
                name: 'do we need that much science?', category: 'tier2',
                desc: 'Halves the amount of required [science] to roll/reroll new tech choices. @provides 20 [wisdom II].',
                icon: [9, 27, "magixmod"],
                req: { 'leaves of wisdom': true, 'power of the faith': true },
                cost: { 'insight II': 150, 'faith II': 14, 'science': 16, 'influence II': 15 },
                effects: [
                    { type: 'provide res', what: { 'wisdom II': 20 } },
                ],
            });
            new G.Trait({
                name: 'trial',
                desc: 'You are currently under a Trial. As long as you are in a Trial, new rules will apply depending on the one that you have chosen.',
                icon: [8, 27, "magixmod"],
                req: { 'tribalism': false },
                cost: {},
                effects: [
                    {
                        type: 'function', func: function () {
                            if (G.has('t8') || G.has('t6')) {
                                G.getDict('monument-building').req = { 'tribalism': false }
                            } else {
                                G.getDict('monument-building').desc = '@getting this will unlock a wonder that depends on the Trial you are currently in'
                            }
                            document.title = 'Trial active: NeverEnding Legacy'
                        }
                    },
                ],
                category: 'trial',
                skip: true
            });
            new G.Trait({
                name: 't1',
                displayName: 'Chra-nos\' Trial',
                desc: 'You are currently in the <b>Patience</b> trial.',
                icon: [7, 27, "magixmod"],
                req: { 'tribalism': false },
                cost: {},
                effects: [
                    { type: 'function', func: function () { t1start = true; } },
                ],
                category: 'trial',
                skip: true
            });
            new G.Tech({
                name: 'construction III', category: 'tier2',
                desc: 'All buildings waste five times slower, excluding [branch shelter]s. It won\'t increase building costs. @provides 15 [wisdom II]',
                icon: [12, 27, "magixmod"],
                req: { 'paradise shelters': true, 'do we need that much science?': true },
                cost: { 'insight II': 180, 'science': 17, 'influence II': 3 },
            });
            new G.Tech({
                name: 'improved construction', category: 'upgrade',
                desc: 'All buildings that can waste will decay a little slower. This won\'t increase building costs or [land] usage.',
                icon: [11, 27, "magixmod"],
                req: { 'construction III': true, 'moderation': true },
                cost: { 'insight II': 200, 'science': 14, 'influence II': 1 },
                effects: [
                    { type: 'provide res', what: { 'wisdom II': 15 } },
                ],
            });
            new G.Tech({
                name: 'mo\' shelterz', category: 'upgrade',
                desc: 'Decreases the [land] and [population] limits of [treehouse]s and [cozy lodge]s slightly. @provides 15 [wisdom II] //<small>More shelters = more housing = more people!</small>',
                icon: [10, 27, "magixmod"],
                req: { 'paradise shelters': true, 'caretaking': true },
                cost: { 'insight II': 250, 'science': 14, 'influence II': 1 },
                effects: [
                    { type: 'provide res', what: { 'wisdom II': 15 } },
                    {
                        type: 'function', func: function () {
                            G.unitByName['treehouse'].limitPer = { 'land': 4, 'population': 40 };
                            G.unitByName['cozy lodge'].limitPer = { 'land': 8, 'population': 75 };
                        }
                    }
                ],
            });
            new G.Tech({
                name: 'outstanding wisdom', category: 'tier2',
                desc: 'Make the [wisdom II,Wisdom tree] have even more leaves. <>@Unlocks [the outstander], who will provide more [wisdom II] and [education]. @provides 15 extra [wisdom II].',
                icon: [11, 28, "magixmod"],
                req: { 'leaves of wisdom': true },
                cost: { 'insight II': 175, 'science': 10, 'influence II': 5, 'culture II': 15 },
                effects: [
                    { type: 'provide res', what: { 'wisdom II': 15 } },
                ],
            });
            new G.Tech({
                name: 'smaller shacks', displayName: '<font color="#86cb00">Smaller shacks</font>',
                desc: '<font color="#c5bcff">Most [blacksmith workshop,Crafting units], [well]s, as well as [wheat farm]s and [crematorium]s in this world will use 15% less [land]. [water filter]s will also use less [land] (with Caretaking, filters will use 40% less [land], while with Moderation, filters will use 20% less [land])</font>',
                icon: [32, 20, "magixmod"],
                cost: {},
                effects: [
                    {
                        type: 'function', func: function () {
                            G.getDict('blacksmith workshop').use = { 'land': 0.85 }
                            G.getDict('furnace').use = { 'land': 0.85 }
                            G.getDict('kiln').use = { 'land': 0.85 }
                            G.getDict('hovel of colours').use = { 'land': 0.85, 'worker': 22, 'stone tools': 25 }
                            G.getDict('hut of potters').use = { 'land': 0.85, 'worker': 22, 'stone tools': 25 }
                            G.getDict('leather factory').use = { 'land': 0.85, 'worker': 16, 'stone tools': 32 }
                            G.getDict('factory of pots').use = { 'land': 0.85, 'worker': 16, 'stone tools': 32 }
                            G.getDict(';water filter').use = { 'land': 0.8, 'worker': 1 }
                            G.getDict('water filter').use = { 'land': 0.6, 'worker': 1 }
                            G.getDict('bakery').use = { 'land': 0.85, 'worker': 1 }
                            G.getDict('chef').use = { 'land': 0.85, 'worker': 1 }
                            G.getDict('well of mana').use = { 'land': 0.85 }
                            G.getDict('concrete making shack').use = { 'land': 0.85, 'worker': 1 }
                            G.getDict('well').use = { 'land': 0.85 }
                            G.getDict('crematorium').use = { 'land': 0.85, 'worker': 3 }
                        }
                    }
                ],
                req: { 'tribalism': false },
                category: 'misc',
                chance: 1,
            });
            new G.Tech({
                name: 'enchanted shovels', category: 'upgrade',
                desc: 'Bigger shovels make [digger]s 12.5% more efficient. <>Now their shovels are enchanted by the wind, meaning that they stay light but will still grow larger!',
                icon: [15, 28, "magixmod"],
                req: { 'leaves of wisdom': true },
                cost: { 'insight II': 150, 'wind essence': 20000 },
            });
            /*Insight traits will work together with culture one*/
            new G.Trait({
                name: 'creativity over smartness', //will be unlockable after level 5 mausoleum 
                desc: '@all researches, knowledges and traits have their [insight] costs reduced. <>For every 75 [insight] from the original cost, the new cost is reduced by 3 (with [roots of insight] it\'s 4). (For example, if a research costs 225 [insight], it will cost 216 as long as this trait is active.) @The maximum reduction for this is 70.//<small>smort</small>',
                icon: [24, 3, "magixmod", 8, 4, 23, 1],
                cost: { 'culture': 15, 'insight': 5 },
                chance: 150,
                category: 'short',
                lifetime: 20,
                effects: [
                    {
                        type: 'function', func: function () {
                            var res = 'insight' + (G.has('eotm') ? ' II' : '');
                            addbacksIns = [];
                            for (var i in G.know)
                                if (G.know[i].cost[res] != undefined) {
                                    var reduction = Math.floor(G.know[i].cost[res] / 75) * (G.has('roots of insight') ? 4 : 3)
                                    G.know[i].cost[res] -= reduction > 70 ? 70 : reduction;
                                    addbacksIns[i] = reduction
                                }
                        }, invert: false
                    },
                    {
                        type: 'function', func: function () {
                            var res = 'insight' + (G.has('eotm') ? ' II' : '');
                            for (var i in G.know)
                                if (G.know[i].cost[res] != undefined) {
                                    G.know[i].cost[res] += addbacksIns[i];
                                }
                        }, invert: true
                    },
                ],
                req: { 'tribalism': false }, //symbolism
            });
            new G.Trait({
                name: 'slower synapses',
                desc: '@all researches, knowledges and traits have their [insight] costs increased. <>For every 75 [insight] from the original cost, the new cost is increased by 3 (with [roots of insight] it\'s 2). (For example, if a research costs 225 [insight], it will cost 234 as long as this trait is active.) @The maximum reduction for this is 70.//<small>not smort</small>',
                icon: [23, 3, "magixmod", 8, 4, 23, 1],
                cost: { 'culture': 15, 'insight': 5 },
                chance: 150,
                category: 'short',
                lifetime: 20,
                effects: [
                    {
                        type: 'function', func: function () {
                            var res = 'insight' + (G.has('eotm') ? ' II' : '');
                            addbacksIns = [];
                            for (var i in G.know)
                                if (G.know[i].cost[res] != undefined) {
                                    var reduction = Math.floor(G.know[i].cost[res] / 75) * (G.has('roots of insight') ? 3 : 2)
                                    G.know[i].cost[res] += reduction > 70 ? 70 : reduction;
                                    addbacksIns[i] = reduction
                                }
                        }, invert: false
                    },
                    {
                        type: 'function', func: function () {
                            var res = 'insight' + (G.has('eotm') ? ' II' : '');
                            for (var i in G.know)
                                if (G.know[i].cost[res] != undefined) {
                                    G.know[i].cost[res] -= addbacksIns[i];
                                }
                        }, invert: true
                    },
                ],
                req: { 'tribalism': false }, //symbolism
            });
            new G.Trait({
                name: 'artistic thinking II', //will be unlockable after level 5 mausoleum 
                desc: '@all researches, knowledges and traits have their [culture] costs reduced. <>For every 50 [culture] from the original cost, the new cost is reduced by 2 (with [cultural roots] it\'s 3). (For example, if a research costs 200 [culture], it will cost 192 as long as this trait is active.) @The maximum reduction for this is 45.//<small>that\'s very arty art, isn\'t it?</small>',
                icon: [24, 3, "magixmod", 10, 4, 23, 1],
                cost: { 'culture': 15, 'insight': 5 },
                chance: 150,
                category: 'short',
                lifetime: 20,
                effects: [
                    {
                        type: 'function', func: function () {
                            addbacksCul = [];
                            var res = 'culture' + (G.has('eotm') ? ' II' : '');
                            for (var i in G.know)
                                if (G.know[i].cost[res] != undefined) {
                                    var reduction = Math.floor(G.know[i].cost[res] / 50) * (G.has('cultural roots') ? 3 : 2);
                                    G.know[i].cost[res] -= reduction > 45 ? 45 : reduction
                                    addbacksCul[i] = reduction
                                }
                        }, invert: false
                    },
                    {
                        type: 'function', func: function () {
                            var res = 'culture' + (G.has('eotm') ? ' II' : '');
                            for (var i in G.know)
                                if (G.know[i].cost[res] != undefined) {
                                    G.know[i].cost[res] += addbacksCul[i];
                                }
                        }, invert: true
                    },
                ],
                req: { 'tribalism': false }, //artistic thinking required
            });
            new G.Trait({
                name: 'art rejection',
                desc: '@all researches, knowledges and traits have their [culture] costs increased. <>For every 50 [culture] from the original cost, the new cost is increased by 3 (with [cultural roots] it\'s 2). (For example, if a research costs 200 [culture], it will cost 208 as long as this trait is active.) @maximum increase is 45.//<small>It\'s not culture after all...</small>',
                icon: [23, 3, "magixmod", 10, 4, 23, 1],
                cost: { 'culture': 15, 'insight': 5 },
                chance: 150,
                category: 'short',
                lifetime: 20,
                effects: [
                    {
                        type: 'function', func: function () {
                            addbacksCul = [];
                            var res = 'culture' + (G.has('eotm') ? ' II' : '');
                            for (var i in G.know)
                                if (G.know[i].cost[res] != undefined) {
                                    var reduction = Math.floor(G.know[i].cost[res] / 50) * (G.has('cultural roots') ? 3 : 2);
                                    G.know[i].cost[res] += reduction > 45 ? 45 : reduction
                                    addbacksCul[i] = reduction
                                }
                        }, invert: false
                    },
                    {
                        type: 'function', func: function () {
                            var res = 'culture' + (G.has('eotm') ? ' II' : '');
                            for (var i in G.know)
                                if (G.know[i].cost[res] != undefined) {
                                    G.know[i].cost[res] -= addbacksCul[i];
                                }
                        }, invert: true
                    },
                ],
                req: { 'tribalism': false }, //artistic thinking required
            });
            new G.Trait({ //faith will go together with influence
                name: 'faithful thinking',
                desc: '@all researches, knowledges and traits have their [faith] costs reduced. <>For every 50 [faith] from the original cost, the new cost is reduced by 2 (with [deep-rooted faith] it\'s 3). (For example, if a research costs 200 [faith], it will cost 192 as long as this trait is active.) @The maximum reduction for this is 45.//<small>Have fun with this trait: it doesn\'t last very long!</small>',
                icon: [24, 3, "magixmod", 7, 4, 23, 1],
                cost: { 'culture': 15, 'insight': 5 },
                chance: 150,
                category: 'short',
                lifetime: 20,
                effects: [
                    {
                        type: 'function', func: function () {
                            var res = 'faith' + (G.has('eotm') ? ' II' : '');
                            addbacksFai = [];
                            for (var i in G.know)
                                if (G.know[i].cost[res] != undefined) {
                                    var reduction = Math.floor(G.know[i].cost[res] / 50) * (G.has('deep-rooted faith') ? 3 : 2);
                                    G.know[i].cost[res] -= reduction > 45 ? 45 : reduction;
                                    addbacksFai[i] = reduction
                                }
                        }, invert: false
                    },
                    {
                        type: 'function', func: function () {
                            var res = 'faith' + (G.has('eotm') ? ' II' : '');
                            for (var i in G.know)
                                if (G.know[i].cost[res] != undefined) {
                                    G.know[i].cost[res] -= addbacksFai[i];
                                }
                        }, invert: true
                    },
                ],
                req: { 'tribalism': false }, //stronger faith
            });
            new G.Trait({
                name: 'atheism',
                desc: '@all researches, knowledges and traits have their [faith] costs increased. <>For every 50 [faith] from the original cost, the new cost is increased by 2 (with [deep-rooted faith] it\'s 1). (For example, if a research costs 200 [faith], it will cost 208 as long as this trait is active.) @The maximum reduction for this is 45.//<small>it seems like there are...dissenters...</small>',
                icon: [23, 3, "magixmod", 7, 4, 23, 1],
                cost: { 'culture': 15, 'insight': 5 },
                chance: 150,
                category: 'short',
                lifetime: 20,
                effects: [
                    {
                        type: 'function', func: function () {
                            var res = 'faith' + (G.has('eotm') ? ' II' : '');
                            addbacksFai = [];
                            for (var i in G.know)
                                if (G.know[i].cost[res] != undefined) {
                                    var reduction = Math.floor(G.know[i].cost[res] / 50) * (G.has('deep-rooted faith') ? 1 : 2);
                                    G.know[i].cost[res] += reduction > 45 ? 45 : reduction;
                                    addbacksFai[i] = reduction
                                }
                        }, invert: false
                    },
                    {
                        type: 'function', func: function () {
                            var res = 'faith' + (G.has('eotm') ? ' II' : '');
                            for (var i in G.know)
                                if (G.know[i].cost[res] != undefined) {
                                    G.know[i].cost[res] -= addbacksFai[i];
                                }
                        }, invert: true
                    },
                ],
                req: { 'tribalism': false }, //stronger faith
            });
            new G.Trait({ //science powerup/powerdown is standalone. Is short and very, very rare
                name: 'season for inventing',
                desc: '@all researches, knowledges and traits have their [science] costs reduced. <>For every 20 [science] from the original cost, the new cost is reduced by 1. (For example, if a research costs 100 [science], it will cost 95 as long as this trait is active.) @The maximum reduction for this is 15.//<small>This trait is very rare...</small>',
                icon: [24, 3, "magixmod", 6, 4, 23, 1],
                cost: { 'culture II': 15, 'insight II': 5 },
                chance: 1500,
                category: 'short',
                lifetime: 20,
                effects: [
                    {
                        type: 'function', func: function () {
                            var res = 'science';
                            addbacksSci = [];
                            for (var i in G.know)
                                if (G.know[i].cost[res] != undefined) {
                                    var reduction = Math.floor(G.know[i].cost[res] / 20) * (G.has('even bigger university') ? 2 : 1);
                                    G.know[i].cost[res] -= reduction > 15 ? 15 : reduction;
                                    addbacksSci[i] = reduction
                                }
                        }, invert: false
                    },
                    {
                        type: 'function', func: function () {
                            var res = 'science';
                            for (var i in G.know)
                                if (G.know[i].cost[res] != undefined) {
                                    G.know[i].cost[res] += addbacksSci[i];
                                }
                        }, invert: true
                    },
                ],
                req: { 'science blessing': true, 'sabotaged knowledge': false },
            });
            new G.Trait({
                name: 'sabotaged knowledge',
                desc: '@all researches, knowledges and traits have their [science] costs increased. <>For every 20 [science] from the original cost, the new cost is increased by 2. (For example, if a research costs 100 [science], it will cost 120 as long as this trait is active.) @maximum increase is 18.//<small>dissenters...seems like</small>',
                icon: [23, 3, "magixmod", 6, 4, 23, 1],
                cost: { 'culture II': 15, 'insight II': 5 },
                chance: 1500,
                category: 'short',
                lifetime: 20,
                effects: [
                    {
                        type: 'function', func: function () {
                            var res = 'science';
                            addbacksSci = [];
                            for (var i in G.know)
                                if (G.know[i].cost[res] != undefined) {
                                    var reduction = Math.floor(G.know[i].cost[res] / 20) * (G.has('even bigger university') ? 1 : 2);
                                    G.know[i].cost[res] += reduction > 18 ? 18 : reduction;
                                    addbacksSci[i] = reduction
                                }
                        }, invert: false
                    },
                    {
                        type: 'function', func: function () {
                            var res = 'science';
                            for (var i in G.know)
                                if (G.know[i].cost[res] != undefined) {
                                    G.know[i].cost[res] -= addbacksSci[i];
                                }
                        }, invert: true
                    },
                ],
                req: { 'science blessing': true, 'season for inventing': false },
            });
            new G.Trait({ //faith will go together with influence
                name: 'liberality', //will be unlockable after level 5 mausoleum 
                desc: '@all researches, knowledges and traits have their [influence] costs reduced. <>For every 40 [influence] from the original cost, the new cost is reduced by 2 (with [political roots] it\'s 3). (For example, if a research costs 100 [influence], it will cost 92 as long as this trait is active.) @The maximum reduction for this is 30.//<small>democration...right?</small>',
                icon: [24, 3, "magixmod", 11, 4, 23, 1],
                cost: { 'culture': 15, 'insight': 5 },
                chance: 150,
                category: 'short',
                lifetime: 20,
                effects: [
                    {
                        type: 'function', func: function () {
                            var res = 'influence' + (G.has('eotm') ? ' II' : '');
                            addbacksInf = [];
                            for (var i in G.know)
                                if (G.know[i].cost[res] != undefined) {
                                    var reduction = Math.floor(G.know[i].cost[res] / 40) * (G.has('political roots') ? 1 : 2);
                                    G.know[i].cost[res] -= reduction > 38 ? 38 : reduction;
                                    addbacksInf[i] = reduction
                                }
                        }, invert: false
                    },
                    {
                        type: 'function', func: function () {
                            var res = 'influence' + (G.has('eotm') ? ' II' : '');
                            for (var i in G.know)
                                if (G.know[i].cost[res] != undefined) {
                                    G.know[i].cost[res] += addbacksInf[i];
                                }
                        }, invert: true
                    },
                ],
                req: { 'tribalism': false }, //crime and punishment(any)
            });
            new G.Trait({
                name: 'disauthority',
                desc: '@all researches, knowledges and traits have their [influence] costs increased. <>For every 20 [influence] from the original cost, the new cost is increased by 2 (with [political roots] it\'s 1). (For example, if a research costs 100 [influence], it will cost 110 as long as this trait is active.) @maximum increase is 38.//<small>lawlesness? Isn\'t it lawlessness?</small>',
                icon: [23, 3, "magixmod", 11, 4, 23, 1],
                cost: { 'culture': 15, 'insight': 5 },
                chance: 150,
                category: 'short',
                lifetime: 20,
                effects: [
                    {
                        type: 'function', func: function () {
                            var res = 'influence' + (G.has('eotm') ? ' II' : '');
                            addbacksInf = [];
                            for (var i in G.know)
                                if (G.know[i].cost[res] != undefined) {
                                    var reduction = Math.floor(G.know[i].cost[res] / 40) * (G.has('political roots') ? 1 : 2);
                                    G.know[i].cost[res] += reduction > 38 ? 38 : reduction;
                                    addbacksInf[i] = reduction
                                }
                        }, invert: false
                    },
                    {
                        type: 'function', func: function () {
                            var res = 'influence' + (G.has('eotm') ? ' II' : '');
                            for (var i in G.know)
                                if (G.know[i].cost[res] != undefined) {
                                    G.know[i].cost[res] -= addbacksInf[i];
                                }
                        }, invert: true
                    },
                ],
                req: { 'tribalism': false }, //crime and punishment(any)
            });
            //Trait trends. A trait + tech trend is allowed
            new G.Trait({
                name: 'cart1',
                displayName: 'Carver\'s trend: Stone statuettes',
                desc: '[carver]s feel that a [statuette] made out of stone is accepted better by this tribe more than a statuette from wood or bone. <><b>Craft stone statuettes</b> becomes 5% faster.',
                icon: [25, 28, "magixmod", 2, 22, "magixmod"],
                req: { 'construction': true, 'cart2': false },
                cost: { 'insight': 25, 'culture': 25 },
                effects: [
                ],
                chance: 125, lifetime: function () { return 25 + ((this.yearOfObtainment % 10) - 5) },
                category: 'short'
            });
            new G.Trait({
                name: 'cart2',
                displayName: 'Carver\'s trend: Wooden statuettes',
                desc: '[carver]s feel that a [wooden statuette,Statuette] made out of wood is accepted better by this tribe more than a statuette from stone or other non-wood resource. <><b>Craft wooden statuettes</b> becomes 5% faster.',
                icon: [26, 28, "magixmod", 2, 22, "magixmod"],
                req: { 'construction': true, 'cart1': false },
                cost: { 'insight': 25, 'culture': 25 },
                effects: [
                ],
                chance: 125, lifetime: function () { return 25 + ((this.yearOfObtainment % 10) - 5) },
                category: 'short'
            });
            new G.Trait({
                name: 'gtt1',
                displayName: 'Gatherer\'s trend: Sticks',
                desc: '[gatherer]s gain more [stick]s. Doesn\'t disable the effect of the Decisional trend related to this unit.',
                icon: [27, 28, "magixmod", 2, 22, "magixmod"],
                req: { 'plant lore II': true, 'gtt2': false },
                cost: { 'culture': 45, 'insight': 30 },
                chance: 125,
                lifetime: function () { return 25 + ((this.yearOfObtainment % 10) - 5) },
                category: 'short'
            });
            new G.Trait({
                name: 'gtt2',
                displayName: 'Gatherer\'s trend: Water',
                desc: '[gatherer]s gain more [water]. Doesn\'t disable the effect of the Decisional trend related to this unit.',
                icon: [28, 28, "magixmod", 2, 22, "magixmod"],
                req: { 'plant lore II': true, 'gtt1': false },
                cost: { 'culture': 45, 'insight': 30 },
                chance: 125,
                lifetime: function () { return 25 + ((this.yearOfObtainment % 10) - 5) },
                category: 'short'
            });
            new G.Trait({
                name: 'dtt1',
                displayName: 'Digger\'s trend: Ice',
                desc: '[digger]s gain more [ice]. Doesn\'t disable the effect of the Decisional trend related to this unit.',
                icon: [29, 28, "magixmod", 2, 22, "magixmod"],
                req: { 'digging': true, 'dtt2': false },
                cost: { 'culture': 45, 'insight': 30 },
                chance: 125, lifetime: function () { return 25 + ((this.yearOfObtainment % 10) - 5) },
                category: 'short'
            });
            new G.Trait({
                name: 'dtt2',
                displayName: 'Digger\'s trend: Sand',
                desc: '[digger]s gain more [sand]. Doesn\'t disable the effect of the Decisional trend related to this unit.',
                icon: [30, 28, "magixmod", 2, 22, "magixmod"],
                req: { 'digging': true, 'dtt1': false },
                cost: { 'culture': 45, 'insight': 30 },
                chance: 125, lifetime: function () { return 25 + ((this.yearOfObtainment % 10) - 5) },
                category: 'short'
            });
            new G.Trait({
                name: 'htt1',
                displayName: 'Hunter\'s trend: Hide',
                desc: '[hunter]s gain more [hide]. Doesn\'t disable the effect of the Decisional trend related to this unit.',
                icon: [31, 28, "magixmod", 2, 22, "magixmod"],
                req: { 'hunting': true, 'htt2': false },
                cost: { 'culture': 45, 'insight': 30 },
                chance: 125, lifetime: function () { return 25 + ((this.yearOfObtainment % 10) - 5) },
                category: 'short'
            });
            new G.Trait({
                name: 'htt2',
                displayName: 'Hunter\'s trend: Meat',
                desc: '[hunter]s gain more [meat]. Doesn\'t disable the effect of the Decisional trend related to this unit.',
                icon: [32, 28, "magixmod", 2, 22, "magixmod"],
                req: { 'hunting': true, 'htt1': false },
                cost: { 'culture': 45, 'insight': 30 },
                chance: 125, lifetime: function () { return 25 + ((this.yearOfObtainment % 10) - 5) },
                category: 'short'
            });
            new G.Tech({
                name: 'outstanders club', category: 'upgrade',
                desc: 'Decreases the [population] for [the outstander,Outstanders] from 38k to 26.5k. @provides 5 [wisdom II]',
                icon: [0, 39, "magixmod", 14, 28, "magixmod"],
                req: { 'outstanding wisdom': true },
                cost: { 'insight II': 300, 'science': 15, 'culture II': 25 },
                effects: [
                    { type: 'provide res', what: { 'wisdom II': 5 } },
                ],
            });
            new G.Tech({
                name: 'better seeking',
                desc: '@[archaeologist]s are 20% more efficient!',
                icon: [20, 33, "magixmod"],
                cost: { 'insight': 1495, 'science': 5 },
                req: { 'archaeology': true, 'gt3': true },
                chance: 10,
            });
            new G.Tech({
                name: 'ink-fishing', category: 'tier2',
                desc: 'Now fishing can provide some [ink]. <>Fishers from your camps will finally be able to gather [ink] out of some squids.',
                icon: [32, 19, "magixmod"],
                req: { 'outstanding wisdom': true, 'hunters & fishers unification': true },
                cost: { 'insight II': 267, 'science': 20 },
            });
            new G.Tech({
                name: 'bonus1',
                displayName: '. . .',
                desc: 'You seem powerful. [guru]s can probably make more [science] now!',
                icon: [32, 5, "magixmod"],
                req: { 'tribalism': false },
                cost: {},
                category: 'misc'
            });
            new G.Tech({
                name: 'bonus2',
                displayName: '. . .',
                desc: 'You seem to have enough potential and enough power! It feels like everything is going faster and faster, which is a weird feeling.',
                icon: [32, 4, "magixmod"],
                req: { 'tribalism': false },
                cost: {},
                category: 'misc'
            });
            new G.Tech({
                name: 'bonus3',
                displayName: '. . .',
                desc: 'You are powerful. Your glory seems to be clearing away some secret darkness.',
                icon: [32, 3, "magixmod"],
                req: { 'tribalism': false },
                cost: {},
                category: 'misc'
            });
            new G.Tech({
                name: 'bonus4',
                displayName: '. . .',
                desc: 'You have . . . \'s attention. But who is he? Feels like that entity or whoever is quite proud of your strength. //<small>me???</small>',
                icon: [32, 2, "magixmod"],
                req: { 'tribalism': false },
                cost: {},
                category: 'misc'
            });
            new G.Tech({
                name: 'aiming', category: 'tier1',
                desc: 'Teach your [hunter]s and [fisher]s how to be more accurate. The problem was that hunters were shooting arrows from bows and just trying their luck. Same with spear throwing.<>However, improved accuarcy will increase the chances of good aim, meaning that <b>Bow hunting</b> and <b>Spear hunting/fishing</b> become faster.',
                icon: [33, 28, "magixmod"],
                req: { 'spears': true, 'bows': true, 'building': true },
                cost: { 'insight': 17, 'influence': 3 },
            });
            new G.Trait({
                name: 't2',
                displayName: 'Bersaria\'s Trial',
                desc: 'You are currently in the <b>Unhappy</b> trial.',
                icon: [28, 25, "magixmod", 5, 22, "magixmod"],
                req: { 'tribalism': false },
                cost: {},
                effects: [
                ],
                category: 'trial',
                skip: true
            });
            new G.Trait({
                name: 't3',
                displayName: 'Tu-ria\'s Trial',
                desc: 'You are currently in the <b>Cultural</b> trial.',
                icon: [27, 25, "magixmod", 1, 22, "magixmod"],
                req: { 'tribalism': false },
                cost: {},
                effects: [
                    { type: 'function', func: function () { G.getDict('cultural balance').desc = '[cultural balance] is the main rule of the Cultural trial. You can gain or lose [cultural balance] from various techs (for example, mathematics decreases it, but symbolism increases it). It defines the rate of cultural stability in this plane. Your [cultural balance] must not reach <b>' + (G.achievByName['cultural'].won / 2) + '</b> or <b>' + (50 - (G.achievByName['cultural'].won / 2)) + '</b>, or you will fail the Trial. So be careful!'; G.getDict('cultural balance').hidden = false; } },
                    { type: 'provide res', what: { 'inspiration': 10 } },
                    { type: 'provide res', what: { 'authority': 5 } },
                ],
                category: 'trial',
                skip: true
            });
            new G.Trait({
                name: 't4',
                displayName: 'Hartar\'s Trial',
                desc: 'You are currently in the <b>Hunted</b> trial.',
                icon: [26, 25, "magixmod", 1, 22, "magixmod"],
                req: { 'tribalism': false },
                cost: {},
                effects: [
                    { type: 'function', func: function () { G.getDict('blood').hidden = false } },
                ],
                category: 'trial',
                skip: true
            });
            new G.Tech({
                name: 'beyond the edge', category: 'tier1', //despite of costs it doesn\'t do much
                desc: 'Send your people beyond the edge of the world for the first time. You will lose 30% of your current [population] and all [insight,Essential] amounts will be reset to 0 after purchasing this tech (excluding [industry point]s or [worship point]s). [happiness] and [health] will also be completely reset.<hr><font color="#f70054">Note: This tech can unlock more in the future, but does <b>not</b> expand the map and does not add any new goods; you will simply have an extra 1.5% of [land] and [wtr]. It may help you, but there is a huge risk involved!</font>',
                req: { 'policy revaluation': true, 'focused scouting': true },
                cost: { 'insight II': 45, 'influence': 255 },
                icon: [33, 26, "magixmod"]
            });
            new G.Tech({
                name: 'sleep-speech', category: 'tier1',
                desc: '@Unlocks a special ability related to dreaming potential: <b>Sleepy insight</b>. @Sleepy insight can be controlled by its policy that will decide the chance for bonus and power of it.<>Sleepy insight gives you a chance to obtain some [insight] when a new year begins. (The amount and chance can be controlled by its policy!)',
                req: { 'ritualism': true, 'genius feeling': true },
                cost: { 'insight': 17, 'influence': 3 },
                icon: [33, 25, "magixmod"]
            });
            new G.Tech({
                name: 'coordination', category: 'tier1',
                desc: '[guard]s get better coordination, increasing the chance of successfully winning a battle against a thief and decreasing their injury chance.',
                icon: [33, 27, "magixmod"],
                req: { 'battling thieves': true, 'wizard wisdom': true }, //just to keep it for later
                cost: { 'insight': 260 },
                effects: [
                ],
                chance: 3
            });
            new G.Trait({
                name: 't10',
                displayName: 'Mamuun\'s Trial',
                desc: 'You are currently in the <b>Pocket</b> trial.',
                icon: [20, 25, "magixmod", 5, 22, "magixmod"],
                req: { 'tribalism': false },
                cost: {},
                effects: [
                    { type: 'function', func: function () { } }
                ],
                category: 'trial',
                skip: true
            });
            new G.Tech({
                name: 'valid portal frame', category: 'tier1',
                desc: 'Before wizards will be able to open a gate to a new world, they must first learn some rules. Without a properly placed portal frame, a portal will not open (and may even explode in their faces)! //<small><b>Rule 3:</b> A portal\'s passageway should should be a correctly cut perfect square to make the passage safe and stable.</small>',
                icon: [10, 29, "magixmod"],
                req: { 'Wizard complex': true, 'belief in portals': true },
                cost: { 'insight': 1015 },
            });
            new G.Tech({
                name: 'wonder \'o science', category: 'tier2',
                desc: 'Unlocks the [university of science]. The [university of science] is a wonder that can be upgraded. To unlock further tiers, you need to complete Trials at higher levels to gain more [victory point]s. The university will be able to provide way more [education] and [wisdom II]. It may also lead to some new discoveries!',
                icon: [11, 29, "magixmod"],
                req: { 'outstanders club': true, 'monument-building III': true },
                cost: { 'insight II': 305, 'culture II': 25, 'culture': 65 },
            });
            new G.Tech({
                name: 'well stored',
                displayName: '<font color="gold">Well stored I</font>',
                desc: '<font color="#aaaaff">All storage units (except [essence storages]) provide 35% more storage. Complete Pocket for the second time to increase this bonus from 35 to 55%. This bonus does not stack with [spell of capacity].</font> //<small>but why does it not apply to wells</small>',
                icon: [12, 15, "magixmod", 13, 15, "magixmod"],
                cost: {},
                effects: [
                ],
                req: { 'tribalism': false },
                category: 'misc'
            });
            new G.Tech({
                name: 'well stored 2',
                displayName: '<font color="#d0ab34">Well stored II</font>',
                desc: '<font color="#aaaaff">All storage units (except [essence storages]) provide 55% more storage. You reached the maximum bonus that Mamuun can provide to you for completing Pocket. This bonus does not stack with [spell of capacity].</font>',
                icon: [11, 15, "magixmod", 13, 15, "magixmod"],
                cost: {},
                effects: [
                ],
                req: { 'tribalism': false },
                category: 'misc',
            });
            new G.Tech({
                name: 'beyond the edge II', category: 'tier2',
                desc: 'Send your people beyond the edge of the world for the second time. You will lose 40% of your current [population], all remaining [adult]s will become [sick], and all [insight,Essential] amounts will be reset to 0 after purchasing this tech (excluding [industry point]s or [worship point]s). [happiness] and [health] will also be completely reset.<hr><font color="#f70054">Note: This tech can unlock more in the future, but does not expand the map and it does not add any new goods. Getting this will give you an extra 7% of [land] and [wtr] rather than 1.5%, overriding the previous tech. It may help you, but there is an even larger risk now! The further you push beyond the edge, a stronger scourge will fall on you and your civilization...</font>',
                req: { 'beyond the edge': true, 'wonder \'o science': true },
                cost: { 'insight II': 345, 'science': 26, 'culture II': 24 },
                icon: [0, 39, "magixmod", 0, 30, "magixmod"],
                effects: [
                    { type: 'provide res', what: { 'wisdom II': 20 } },
                    { type: 'provide res', what: { 'education': 1 } },
                ]
            });
            new G.Tech({
                name: 'mirrors', category: 'tier1',
                desc: 'Getting this will let your people can learn a whole lot more about mirrors work and even know how to make simple ones themselves! @provides 20 [wisdom II] and 1 [education]',
                req: { 'burial in new world': true },
                cost: { 'insight': 625 },
                icon: [8, 30, "magixmod"],
                effects: [
                    { type: 'provide res', what: { 'wisdom II': 20 } },
                    { type: 'provide res', what: { 'education': 1 } },
                ]
            });
            new G.Tech({
                name: 'parallel theory 1/3', category: 'tier1',
                desc: 'What if you can a make mirror work like a portal? //This part of the theory is about the general concept.',
                req: { 'physics II': true, 'mirrors': true },
                cost: { 'insight': 1600 },
                icon: [28, 27, "magixmod", 9, 30, "magixmod"],
                effects: [
                ]
            });
            new G.Tech({
                name: 'parallel theory 2/3', category: 'tier2',
                desc: 'What if you can a make mirror work like a portal? //This part of the theory is about the portal and its stability.',
                req: { 'physics II': true, 'parallel theory 1/3': true, 'symbolism III': true },
                cost: { 'insight II': 150 },
                icon: [27, 27, "magixmod", 9, 30, "magixmod"],
                effects: [
                ]
            });
            new G.Tech({
                name: 'parallel theory 3/3', category: 'tier2',
                desc: 'What if you can a make mirror work like a portal? //This part is related to the creation of the mirror world!',
                req: { 'parallel theory 2/3': true, 'wonder \'o science': true },
                cost: { 'insight II': 400, 'science': 60, 'culture II': 30, 'faith II': 30, 'influence II': 25 },
                icon: [26, 27, "magixmod", 9, 30, "magixmod"],
                effects: [
                ]
            });
            new G.Tech({
                name: 'mirror world 1/2', category: 'tier2',
                desc: 'Unlocks a [grand mirror], which will double your [land] amount upon its completion. It compounds with bonuses from [beyond the edge] and [beyond the edge II]. The cost and display depends on your people\'s path. In fact, it is a passage to an exact copy of the current world before your civilization set up anything! Make sure you fulfill the upkeep of the mirror, however, because if you do not, then the [grand mirror] will disable and you will lose your land.',
                req: { 'parallel theory 3/3': true, 'wonder \'o science': true, 'bigger university': true },
                cost: { 'insight II': 400, 'science': 62, 'culture II': 38 },
                icon: [27, 3, "magixmod", 10, 30, "magixmod"],
                effects: [
                ]
            });
            new G.Tech({
                name: 'mirror world 2/2', category: 'tier2',
                desc: 'The amount of [land] and [wtr] you have is doubled from now on! Enjoy...but it is seriously time to stop. //<b>The more worlds you open, the more unstable your world will become...</b>',
                req: { 'mirror world 1/2': true },
                cost: { 'insight II': 425, 'science': 62, 'culture II': 38, 'faith II': 30, 'dark essence': 200000, 'tablet \'o mirror': 1 },
                icon: [27, 2, "magixmod", 10, 30, "magixmod"],
                effects: [
                ]
            });
            new G.Tech({
                name: 'bigger university', category: 'tier2',
                desc: '@Unlocks the next level of the [university of science]. Requires 4 [victory point]s to level up. Also unlocks a huge mirror...',
                icon: [9, 29, "magixmod"],
                cost: { 'insight II': 300, 'university point': 300, 'science': 50 },
                req: { 'wonder \'o science': true, 'Wizard complex': true },
            });
            new G.Tech({
                name: 'druidism', category: 'tier1',
                desc: '@unlocks [druid]s, who gather more [faith] and [happiness] than [soothsayer]s (although with a limit)',
                icon: [25, 30, "magixmod"],
                cost: { 'insight': 35, 'faith': 5, 'culture': 25, 'influence': 10 },
                req: { 'ritualism': true, 'symbolism': true, 'language': true },
            });
            new G.Trait({
                name: 'druidsymbolism1',
                displayName: 'Druidish merriment',
                desc: '[druid]s gather 30% more [happiness]. //<b>This trait is always temporary but has a varied lifespan.</b>',
                icon: [27, 30, "magixmod"],
                cost: { 'faith': 5, 'culture': 15 },
                req: { 'druidism': true, 'druidsymbolism2': false },
                lifetime: function () { return (Math.pow((this.yearOfObtainment + 50) / 2, 2)) % 700 },
                switchCategory: false,
                chance: 100
            });
            new G.Trait({
                name: 'druidsymbolism2',
                displayName: 'Faithful worship',
                desc: '[druid]s gather 10% more [faith] and also improve [health]. //<b>This trait is always temporary but has a varied lifespan.</b>',
                icon: [28, 30, "magixmod"],
                cost: { 'faith': 5, 'culture': 15 },
                req: { 'druidism': true, 'druidsymbolism1': false },
                chance: 100,
                switchCategory: false,
                lifetime: function () { return (Math.pow((this.yearOfObtainment + 50) / 2, 2)) % 700 }
            });
            new G.Trait({
                name: 'gardening',
                desc: '<font color="#57ff96">A key for unlocking farms! People learn how to use water for crops, allowing your people to start thinking about making some small gardens.</font>',
                icon: [10, 0, "magixmod"],
                cost: { 'insight': 40 },
                req: { 'druidism': true, 'city planning': true },
                chance: 15,
                category: 'knowledge'
            });
            new G.Tech({
                name: 'deep mining & quarrying', category: 'tier2',
                desc: '@Unlocks <b>Deep mining</b> and <b>Deep quarrying</b> for their respective units',
                icon: [10, 1, "magixmod"],
                cost: { 'insight II': 125, 'influence II': 10, 'science': 5 },
                req: { 'leaves of wisdom': true, 'prospecting II': true },
                effects: [
                    { type: 'show context', what: ['deep mine'] },
                    { type: 'show context', what: ['deep quarry'] },
                ]
            });
            new G.Tech({
                name: 'mining II', category: 'upgrade',
                desc: 'Strike the earth (even stronger) for new minerals and mystical wonders! @[mine]s can mine even deeper. To unlock prospecting for them, get the [prospecting III] research.',
                icon: [0, 39, "magixmod", 12, 1, "magixmod"],
                cost: { 'insight II': 190, 'science': 12, 'culture II': 8 },
                req: { 'digging': true, 'construction': true, 'eotm': true, 'deep mining & quarrying': true },
                effects: [
                    {
                        type: 'function', func: function () {
                            G.getDict('rocky substrate').res['mine']['osmium ore'] = 0.003;
                            G.getDict('tundra rocky substrate').res['mine']['osmium ore'] = 0.0041;
                            G.getDict('ice desert rocky substrate').res['mine']['osmium ore'] = 0.004;
                            G.getDict('dead rocky substrate').res['mine']['osmium ore'] = 0.0005;
                            G.getDict('badlands substrate').res['mine']['osmium ore'] = 0.001;
                        }
                    }
                ],
            });
            new G.Tech({
                name: 'quarrying III', category: 'upgrade',
                desc: 'Quarries can reach even deeper, allowing you to gain 10% more from <b>all</b> modes. @If you have [prospecting III], this will unlock a new mode that will mainly focus on gathering deeper and rarer minerals.',
                icon: [12, 0, "magixmod"],
                cost: { 'insight II': 170, 'science': 12, 'faith II': 4, 'culture II': 2, 'influence II': 2 },
                req: { 'quarrying II': true, 'cozy building': true, 'deep mining & quarrying': true, 'eotm': true },
                effects: [
                ],
            });
            new G.Tech({
                name: 'prospecting III', category: 'upgrade',
                desc: '[prospecting] improvements: @[mine]s can get new minerals from <b>Deep mining</b> @[quarry,Quarries] gain a mode that will gather three times more minerals that can only be obtained by quarrying, but six times less of non-minerals',
                icon: [1, 39, "magixmod", 11, 1, "magixmod"],
                cost: { 'insight II': 200, 'science': 15, 'influence II': 5 },
                req: { 'quarrying II': true, 'cozy building': true, 'deep mining & quarrying': true, 'eotm': true },
                effects: [
                ],
            });
            new G.Tech({
                name: 'furnace modernization', category: 'upgrade',
                desc: '<b>Furnaces</b> will turn into <b>Blackium furnaces</b>. These require three times the upkeep but can smelt plenty of new ores. In addition, it is 2% more efficient, regardless of the path chosen by your people.',
                icon: [8, 12, 11, 0, "magixmod", 0, 18, "magixmod"],
                cost: { 'insight II': 235, 'science': 15 },
                req: { 'quarrying III': true, 'mining II': true, 'deep mining & quarrying': true },
                effects: [
                    {
                        type: 'function', func: function () {
                            G.getDict('furnace').icon = [30, 4, "magixmod"];
                            G.getDict('furnace').icon = [11, 0, "magixmod"];
                            G.getDict('furnace').displayName = 'Blackium furnace';
                            G.getDict('furnace').upkeep = { 'log': 3, 'coal': 3, 'lightning essence': 2 };
                            G.getDict('furnace').cost = { 'basic building materials': 115, 'blackium ore': 50, 'coal': 75 };
                        }
                    }
                ],
            });
            new G.Tech({
                name: 'time measuring 1/2', category: 'tier1',
                desc: 'People now know how to measure time. Getting this will let you see what year it is in your tribe! Also allows to see when <b>temporary traits</b> will expire. //To be able to see see what day it is, obtain the next part of this research.',
                icon: [27, 3, "magixmod", 34, 30, "magixmod"],
                cost: { 'insight': 50 },
                req: { 'maths II': true, 'primary time measure': true },
                chance: 10
            });
            new G.Trait({
                name: 'time measuring 2/2',
                desc: '<font color="#e7ff4d">Now you can see what year and day it currently is.</font>',
                icon: [27, 2, "magixmod", 36, 26, "magixmod"],
                cost: { 'insight': 400 },
                effects: [
                ],
                req: { 'time measuring 1/2': true, 'belief in portals': true },
                chance: 75,
                category: 'knowledge'
            });
            new G.Tech({
                name: 'osmium-working', category: 'tier2',
                desc: '@[furnace]s can now make [soft metal ingot]s from [osmium ore]',
                icon: [16, 30, "magixmod"],
                cost: { 'insight II': 183, 'science': 2 },
                req: { 'mining II': true, 'furnace modernization': true },
            });
            new G.Tech({
                name: 'lead-working', category: 'tier2',
                desc: '@[furnace]s can now make [hard metal ingot]s from [lead ore]',
                icon: [13, 30, "magixmod"],
                cost: { 'insight II': 183, 'science': 2 },
                req: { 'mining II': true, 'furnace modernization': true },
            });
            new G.Tech({
                name: 'mythril-working', category: 'tier2',
                desc: '@[furnace]s can now make [precious metal ingot]s from [mythril ore]@[blacksmith workshop]s can forge [various metal block]s out of [mystical metal ingot]s now',
                icon: [14, 30, "magixmod"],
                cost: { 'insight II': 200, 'science': 5 },
                req: { 'mining II': true, 'furnace modernization': true },
            });
            new G.Tech({
                name: 'zinc-working', category: 'tier2',
                desc: '@[furnace]s can now make [hard metal ingot]s from [zinc ore]',
                icon: [15, 30, "magixmod"],
                cost: { 'insight II': 183, 'science': 2 },
                req: { 'mining II': true, 'furnace modernization': true },
            });

            new G.Tech({
                name: 'blackium-working', category: 'tier2',
                desc: '@[furnace]s can now make [mystical metal ingot]s from [blackium ore]',
                icon: [17, 30, "magixmod"],
                cost: { 'insight II': 180 },
                req: { 'mining II': true, 'furnace modernization': true },
            });
            new G.Tech({
                name: 'dinium & unknownium working', category: 'tier2',
                desc: '@[furnace]s can now make [mystical metal ingot]s from [dinium ore] and [unknownium ore]. However, there\'s only a 50% chance that it will succeed.',
                icon: [18, 30, "magixmod"],
                cost: { 'insight II': 300, 'science': 30 },
                req: { 'mining II': true, 'furnace modernization': true, 'wonder \'o science': true, 'osmium-working': true, 'blackium-working': true, 'zinc-working': true, 'mythril-working': true, 'lead-working': true },
            });
            new G.Trait({
                name: 'primary time measure',
                desc: '<font color="#efffa5">People can now measure passing time in centuries.</font>',
                icon: [34, 29, "magixmod"],
                cost: { 'culture': 10 },
                effects: [
                ],
                req: { 'oral tradition': true },
                chance: 12,
                category: 'knowledge'
            });
            new G.Tech({
                name: 'block-smithery', category: 'tier2',
                desc: '@Unlocks the [block-smith workshop]. This is a subtype of the [blacksmith workshop], but will forge blocks out of even more precious resources. @After obtaining this, your [blacksmith workshop] will no longer forge blocks. @Uses [land of the Plain Island].',
                icon: [20, 30, "magixmod"],
                cost: { 'insight II': 340, 'science': 40 },
                req: { 'dinium & unknownium working': true, 'mirror world 1/2': true },
            });
            new G.Tech({
                name: 'handwashC',
                displayName: 'Handwashing', category: 'tier1',
                desc: 'People will now wash their hands. However, they do not know how to make soap properly. (At least handwashing can clean hands though!) Raises your people\'s [health] level slightly and decreases the rate of sickness by a small amount.',
                icon: [8, 18, "magixmod"],
                req: { 'caretaking': true, 'moderation': false },
                cost: { 'insight': 435 },
                effects: [
                ],
                chance: 3
            });
            new G.Tech({
                name: 'handwashM',
                displayName: 'Handwashing', category: 'tier1',
                desc: 'People will now wash their hands. However, they do not know how to make soap, and they\'ll forget to do it often. (At least handwashing can clean hands though!) Raises your people\'s [health] level slightly and decreases the rate of sickness by a tiny amount.',
                icon: [34, 24, "magixmod"],
                req: { 'moderation': true, 'caretaking': false },
                cost: { 'insight': 435 },
                effects: [
                ],
                chance: 3
            });
            new G.Tech({
                name: 'primary intuition', category: 'tier1',
                desc: '[primary intuition] is an important key for some researches. However, if [population,people] will expand their intuition, they should be able to think about further, more complicated researching. //Having just [primary intuition] allows you to research up to [oral tradition]. More complicated researches like sewing and crafting can be unlocked only with "secondary" [intuition].', //fun how it actually doesn't do anything except for like one thing in second civ
                startWith: true,
                icon: [34, 31, "magixmod"],
            });
            new G.Trait({
                name: 'intuition',
                desc: '[intuition] opens a way to more complex researching. Researches related to crafting, building, planning, and other related ideas can be "on-plan" from now on.',
                icon: [35, 31, "magixmod"],
                chance: 1.75,
                cost: { 'culture': 1, 'insight': 1, 'influence': 1 },
                req: { 'oral tradition': true },
            });
            new G.Tech({
                name: 'manufacture units II', category: 'tier2',
                desc: 'Now, more units will be merged into one. [artisan]s\' crafting of [stone weapons], [stone tools], [bow]s and [crossbow]s will no longer be available and will no longer work in those modes!',
                icon: [16, 31, "magixmod"],
                req: { 'moderation': false, 'caretaking': true, 'manufacture units I': true, 'outstanding wisdom': true, 'wonder \'o science': true, 'tool refinery 2/2': true },
                cost: { 'insight II': 350 },
                effects: [
                ],
                chance: 3
            });
            new G.Tech({
                name: 'mentors of nature', category: 'tier1',
                desc: '[druid]s will now generate [health]. //Some people call them Nature\'s Descendants, which might be part of the reason.',
                icon: [31, 31, "magixmod"],
                req: { 'Wizard complex': true, 'smaller but efficient': true },
                cost: { 'insight': 750 },
                effects: [
                ],
                chance: 3
            });
            new G.Trait({
                name: 'no knapping anymore',
                desc: 'Depending on the chosen path, people will produce way less [knapped tools]. Additionally, [healer]s, [digger]s, and [woodcutter]s will use [stone tools] instead of [knapped tools] now. However, it won\'t increase their efficiency! //For [moderation] it is 95% slower, while for [caretaking] it is 85% slower.',
                icon: [27, 31, "magixmod"],
                cost: { 'culture II': 10 },
                effects: [
                ],
                req: { 'oral tradition': true },
                chance: 50,
            });
            new G.Tech({
                name: 'factories II', category: 'tier2',
                desc: 'Now, more units will be merged into one. [artisan]s that craft [stone weapons], [stone tools], and [bow]s will refuse to work. @unlocks the [heat factory], which will replace the <b>Start fires</b> mode for [firekeeper]s @you can also specify what resource [heat factory,Heat factories] will use to make [fire pit]s',
                icon: [17, 31, "magixmod"],
                req: { 'moderation': true, 'caretaking': false, 'factories I': true, 'outstanding wisdom': true, 'wonder \'o science': true, 'tool refinery 2/2': true },
                cost: { 'insight II': 330, 'lightning essence': 8000 },
                effects: [
                ],
                chance: 3
            });
            new G.Tech({
                name: 'villas of victory', category: 'tier2',
                desc: 'Unlocks a rather unique way to give people [housing]...//This unit will provide more [housing] based on the amount of [victory point]s you have. @provides 15 [inspiration II], 5 [spirituality II] and 5 [authority II]',
                icon: [0, 31, "magixmod"],
                req: { 'bigger university': true },
                cost: { 'insight II': 325, 'science': 50, 'culture II': 25 },
                effects: [
                    { type: 'provide res', what: { 'inspiration II': 15 } },
                    { type: 'provide res', what: { 'spirituality II': 5 } },
                    { type: 'provide res', what: { 'authority II': 5 } },
                ],
                chance: 3
            });
            new G.Tech({
                name: 'dynamics', category: 'tier1',
                desc: 'Provides 25 [wisdom] for free. This tech will help people understand more complicated concepts in this large and expansive world!',
                icon: [32, 31, "magixmod"],
                req: { 'physics': true, 'gt3': true },
                cost: { 'insight': 1400, 'science': 1 },
                effects: [
                    { type: 'provide res', what: { 'wisdom': 25 } },
                ],
                chance: 30
            });
            new G.Tech({
                name: '"dark season"', category: 'seasonal',
                displayName: '\u201cDark season\u201d',
                desc: 'With this tech, people will begin to find entertainment out of spooky things. //<small>Prepare for a festival of fear...</small>',
                icon: [5, 7, 'seasonal'],
                req: { 'tribalism': false, 'culture of celebration': true, 'sedentism': true, 'intuition': true },//tribalism switches to true when halloween season starts
                cost: { 'culture': 30, 'faith': 5 },
                effects: [
                ],
                chance: 3
            });
            new G.Tech({
                name: 'pumpkins', category: 'seasonal',
                desc: 'Your people will now be able to discover various pumpkins that will give you some treats...but some of them are just a tricks. This should help your civilization grow up. //<b>Happy Halloween!</b><br>However, you won\'t keep getting pumpkins forever. Once Halloween ends you won\'t be able to get any more until Halloween starts again!',
                icon: [6, 7, 'seasonal'],
                req: { '"dark season"': true },
                cost: { 'insight': 100 },
                effects: [
                ],
                chance: 3
            });
            new G.Tech({
                name: 'pumpkins II', category: 'seasonal',
                desc: 'You can find pumpkins that will give you [insight,Essentials], [juices], and various other benefits! //<small>Do you like pumpkins?</small>',
                icon: [0, 39, "magixmod", 10, 7, 'seasonal'],
                req: { 'pumpkins': true, 'alchemy': true },
                cost: { 'insight': 1000 },
                effects: [
                ],
                chance: 3
            });
            //New DTs and GTs
            new G.Trait({
                name: 'dt19',
                displayName: 'Devil\'s trait #19 Extinguishing',
                desc: 'Towers producing [fire essence] produces 12% less of it, excluding the [Wizard Complex]. //<small>DON\'T PLAY WITH FIRE!!!</small>',
                icon: [34, 23, "magixmod"],
                cost: { 'culture II': 10, 'influence II': 1, 'wisdom': 10, 'faith II': 1 },
                req: { 'doctrine of the dark wormhole 5/5': true, 'gt7': false, 'belief in the afterlife': true },
                chance: 50,
                category: 'devils'
            });
            new G.Trait({
                name: 'dt20',
                displayName: 'Devil\'s trait #20 Secret thirst',
                desc: 'Towers producing [water essence] produces 12% less of it, excluding the [Wizard Complex]. //<small>i need to hydrate myself, but there is no water</small>',
                icon: [34, 22, "magixmod"],
                cost: { 'culture II': 10, 'influence II': 1, 'wisdom': 10, 'faith II': 1 },
                req: { 'doctrine of the dark wormhole 5/5': true, 'gt8': false, 'belief in the afterlife': true },
                chance: 50,
                category: 'devils'
            });
            new G.Trait({
                name: 'dt21',
                displayName: 'Devil\'s trait #21 Atmospheric silence',
                desc: 'Towers producing [wind essence] produces 12% less of it, excluding the [Wizard Complex]. //<small>not even a breeze</small>',
                icon: [34, 21, "magixmod"],
                cost: { 'culture II': 10, 'influence II': 1, 'wisdom': 10, 'faith II': 1 },
                req: { 'doctrine of the dark wormhole 5/5': true, 'gt9': false, 'belief in the afterlife': true },
                chance: 50,
                category: 'devils'
            });
            new G.Trait({
                name: 'dt22',
                displayName: 'Devil\'s trait #22 Drought',
                desc: 'Towers producing [nature essence] produces 12% less of it, excluding the [Wizard Complex].//<small>not a full-on drought though</small>',
                icon: [34, 20, "magixmod"],
                cost: { 'culture II': 10, 'influence II': 1, 'wisdom': 10, 'faith II': 1 },
                req: { 'doctrine of the dark wormhole 5/5': true, 'gt10': false, 'belief in the afterlife': true },
                chance: 50,
                category: 'devils'
            });
            new G.Trait({
                name: 'dt23',
                displayName: 'Devil\'s trait #23 Discharge',
                desc: 'Towers producing [lightning essence] produces 12% less of it, excluding the [Wizard Complex]. //<small>the lightbulb is flickering</small>',
                icon: [34, 19, "magixmod"],
                cost: { 'culture II': 10, 'influence II': 1, 'wisdom': 10, 'faith II': 1 },
                req: { 'doctrine of the dark wormhole 5/5': true, 'gt11': false, 'belief in the afterlife': true },
                chance: 50,
                category: 'devils'
            });
            new G.Trait({
                name: 'dt24',
                displayName: 'Devil\'s trait #24 Deterrence',
                desc: 'Towers producing [dark essence] produces 12% less of it, excluding the [Wizard Complex]. //<small>it is suspiciously bright tonight</small>',
                icon: [34, 18, "magixmod"],
                cost: { 'culture II': 10, 'influence II': 1, 'wisdom': 10, 'faith II': 1 },
                effects: [
                ],
                req: { 'doctrine of the dark wormhole 5/5': true, 'gt12': false, 'belief in the afterlife': true },
                chance: 50,
                category: 'devils'
            });
            new G.Trait({
                name: 'gt7',
                displayName: 'God\'s trait #7 Triumphal flame',
                desc: '[fire essence] becomes the Trend of Gods. Towers producing [fire essence] (excluding [Wizard Complex]) operate 2% faster. //<small>LET\'S SPREAD OUR PEOPLE\'S FIRE!!!</small>',
                icon: [35, 23, "magixmod"],
                cost: { 'culture II': 10, 'influence II': 1, 'wisdom': 10, 'faith II': 1 },
                effects: [
                ],
                req: { 'doctrine of the dark wormhole 5/5': true, 'dt19': false, 'belief in the afterlife': true },
                chance: 50,
                category: 'gods'
            });
            new G.Trait({
                name: 'gt8',
                displayName: 'God\'s trait #8 Holy rain',
                desc: '[water essence] becomes the Trend of Gods. Towers producing [water essence] (excluding [Wizard Complex]) operate 2% faster. //<small>A strange rain indeed.</small>',
                icon: [35, 22, "magixmod"],
                cost: { 'culture II': 10, 'influence II': 1, 'wisdom': 10, 'faith II': 1 },
                effects: [
                ],
                req: { 'doctrine of the dark wormhole 5/5': true, 'dt20': false, 'belief in the afterlife': true },
                chance: 50, category: 'gods'
            });
            new G.Trait({
                name: 'gt9',
                displayName: 'God\'s trait #9 Windy wisdom',
                desc: '[wind essence] becomes the Trend of Gods. Towers producing [wind essence] (excluding [Wizard Complex]) operate 2% faster. //<small>Dude it\'s so windy today I\'d better stay in my tower.</small>',
                icon: [35, 21, "magixmod"],
                cost: { 'culture II': 10, 'influence II': 1, 'wisdom': 10, 'faith II': 1 },
                effects: [
                ],
                req: { 'doctrine of the dark wormhole 5/5': true, 'dt21': false, 'belief in the afterlife': true },
                chance: 50, category: 'gods'
            });
            new G.Trait({
                name: 'gt10',
                displayName: 'God\'s trait #10 Natural merge',
                desc: '[nature essence] becomes the Trend of Gods. Towers producing [nature essence] (excluding [Wizard Complex]) operate 2% faster. //<small>Looks like some plant has grown in my stomach. But it is good for my health, someone said.</small>',
                icon: [35, 20, "magixmod"],
                cost: { 'culture II': 10, 'influence II': 1, 'wisdom': 10, 'faith II': 1 },
                effects: [
                ],
                req: { 'doctrine of the dark wormhole 5/5': true, 'dt22': false, 'belief in the afterlife': true },
                chance: 50, category: 'gods'
            });
            new G.Trait({
                name: 'gt11',
                displayName: 'God\'s trait #11 Electricity',
                desc: '[lightning essence] becomes the Trend of Gods. Towers producing [lightning essence] (excluding [Wizard Complex]) operate 2% faster. //<small>Dude...you burnt my outlet in the kitchen...</small>',
                icon: [35, 19, "magixmod"],
                cost: { 'culture II': 10, 'influence II': 1, 'wisdom': 10, 'faith II': 1 },
                effects: [
                ],
                req: { 'doctrine of the dark wormhole 5/5': true, 'dt23': false, 'belief in the afterlife': true },
                chance: 50, category: 'gods'
            });
            new G.Trait({
                name: 'gt12',
                displayName: 'God\'s trait #12 Dark bait',
                desc: '[dark essence] becomes the Trend of Gods. Towers producing [dark essence] (excluding [Wizard Complex]) operate 2% faster. //<small>The attention! This night will be the darkest one universe had ever seen...wait, universe?</small>',
                icon: [35, 18, "magixmod"],
                cost: { 'culture II': 10, 'influence II': 1, 'wisdom': 10, 'faith II': 1 },
                effects: [
                ],
                req: { 'doctrine of the dark wormhole 5/5': true, 'dt24': false, 'belief in the afterlife': true },
                chance: 50, category: 'gods'
            });
            new G.Tech({
                name: 'tool refinery 1/2', category: 'tier1',
                desc: 'Many of your tools are old and easily craftable, which will slowly cause them to decay. Is there a way to make them decay slower? People will (hopefully) figure it out later.',
                icon: [27, 3, "magixmod", 25, 31, "magixmod"],
                req: { 'paradise crafting': true },
                cost: { 'insight': 1500, 'wisdom': 15 },
                effects: [
                    {
                        type: 'function', func: function () {
                            G.getDict('stone tools').icon = [19, 31, "magixmod"];
                            G.getDict('stone weapons').icon = [21, 31, "magixmod"];
                            G.getDict('metal tools').icon = [20, 31, "magixmod"];
                        }
                    }
                ],
                chance: 3
            });
            new G.Trait({
                name: 'deep-rooted faith',
                desc: 'Religions built from centuries or millenniums will slowly become deep-rooted, meaning that almost nothing can make their religion die. @provides 50 [spirituality II], 100 [spirituality], and 90 [inspiration II]',
                icon: [35, 24, "magixmod"],
                cost: { 'culture II': 50, 'faith II': 35, 'insight II': 350, 'science': 60 },
                effects: [
                    { type: 'provide res', what: { 'spirituality II': 50 } },
                    { type: 'provide res', what: { 'spirituality': 100 } },
                    { type: 'provide res', what: { 'inspiration II': 90 } },
                ],
                req: { 'villas of victory': true },
                chance: 50,
                category: 'main'
            });
            new G.Tech({
                name: 'dynamics II', category: 'tier2',
                desc: 'You people will understand dynamics much better, and know exactly how gravity behaves. @Thanks to a more exact understanding of the world, higher-level researches may become easier. @provides 2 [education] and 25 [wisdom II]',
                icon: [0, 39, "magixmod", 33, 31, "magixmod"],
                req: { 'physics II': true, 'gt3': true, 'doctrine of the dark wormhole 3/5': true },
                cost: { 'insight II': 200, 'science': 15 },
                effects: [
                    { type: 'provide res', what: { 'wisdom II': 25 } },
                ],
                chance: 30
            });
            new G.Tech({
                name: 'tool refinery 2/2', category: 'tier2',
                desc: '[stone tools] become refined, making them decay slower. Also, [artisan]s are no longer able to craft them. Obtain [factories II] or [manufacture units II] to unlock a unit that will let you craft them again if you do not have it yet! //<font color="#f70054">Make sure that you get those technologies quickly once you research this. You only have a limited time to do so before your [metal tools] decay, at which point you will no longer be able to get all of the items needed for [Toolhut]s to function!</font>',
                icon: [27, 2, "magixmod", 25, 31, "magixmod"],
                req: { 'tool refinery 1/2': true, 'outstanding wisdom': true, 'wonder \'o science': true },
                cost: { 'insight II': 150, 'science': 5 },
                chance: 3,
                effects: [
                    {
                        type: 'function', func: function () {
                            G.getDict('artisan').modes["stone tools"].desc = 'No longer produce anything due to [tool refinery 2/2]!';
                            G.getDict('stone tools').icon = [22, 31, "magixmod"];
                            G.getDict('stone weapons').icon = [23, 31, "magixmod"];
                            G.getDict('metal tools').icon = [20, 31, "magixmod"];
                            G.getDict('stone tools').displayName = 'Refined tools';
                            G.getDict('stone weapons').displayName = 'Refined weapons';
                        }
                    }
                ],
            });
            new G.Tech({
                name: 'Automation', category: 'tier1', //capitalized since it is the caretaking version
                desc: 'One effect of [caretaking] is that people focus less on industrialization or technological innovations, but that doesn\'t mean they don\'t care about automating things! @provides 200 [industry point]s',
                icon: [15, 31, "magixmod"],
                req: { 'paradise crafting': true, 'bigger university': true, },
                cost: { 'insight': 1500, 'wisdom': 15 },
                effects: [
                    { type: 'provide res', what: { 'industry point': 200 } },
                ],
                chance: 3
            });
            new G.Tech({
                name: 'even bigger university', category: 'upgrade',
                desc: '@Unlocks the 3rd level of the [university of science]! Requires 10 [victory point]s to level up. @Makes [season for inventing] reduce science costs more and also decreases the effect of [sabotaged knowledge].',
                icon: [21, 30, "magixmod"],
                cost: { 'insight II': 600, 'university point': 300, 'science': 80, 'culture II': 115, 'faith II': 80 },
                req: { 'wonder \'o science': true, 'Wizard complex': true, 'bigger university': true, 'deep-rooted faith': true, 'dynamics II': true },
            });
            new G.Trait({
                name: 'brahim the angel of authority',
                desc: 'Provides 15 [spirituality II] and 15 [authority II].',
                icon: [35, 30, "magixmod"],
                cost: { 'faith II': 40, 'influence II': 30, 'culture II': 30 },
                effects: [
                    { type: 'provide res', what: { 'spirituality II': 15 } },
                    { type: 'provide res', what: { 'authority II': 15 } },
                ],
                req: { 'villas of victory': true, 'sergius the angel of belief': false },
                chance: 500,
                category: 'religion',
            });
            new G.Trait({
                name: 'sergius the angel of belief',
                desc: 'Provides 30 [spirituality II].',
                icon: [35, 29, "magixmod"],
                cost: { 'faith II': 40, 'influence II': 30, 'culture II': 30 },
                effects: [
                    { type: 'provide res', what: { 'spirituality II': 30 } },
                ],
                req: { 'villas of victory': true, 'brahim the angel of authority': false },
                chance: 500,
                category: 'religion',
            });
            new G.Trait({
                name: 'spark\'o religion',
                desc: '[spark\'o religion] opens a path to [ritualism] and things related to religion (such as spirits, beliefs, and hopes). Who knows if you can even reach some sort of...[magic essences,Magic]?',
                icon: [35, 15, "magixmod"],
                chance: 1.3,
                cost: { 'culture': 2 },
                req: { 'oral tradition': true },
                category: 'religion',
                effects: [
                    { type: 'provide res', what: { 'dark decay': 50 } },
                ]
            });
            new G.Trait({
                name: 't11',
                displayName: 'Enlightened\' Trial',
                desc: 'You are currently in the <b>Faithful</b> trial.',
                icon: [19, 25, "magixmod", 1, 22, "magixmod"],
                req: { 'tribalism': false },
                cost: {},
                effects: [
                    { type: 'provide res', what: { 'spirituality': 100, 'faith': 100 } },
                ],
                category: 'trial',
                skip: true
            });
            new G.Tech({
                name: 'tile inspection', category: 'tier1',
                desc: '@From now on, you can inspect discovered tiles in you <b>Territory</b> tab by clicking on them. @You can see goods and their density on the tile. @You can also inspect newly discovered tiles and get full info about its goods. @However, you still can\'t see exactly how many of a resource you have within your territory!',
                icon: [34, 14, "magixmod"],
                cost: { 'insight': 10, 'culture': 15 },
                req: { 'intuition': true, 'scouting': true, 'plant lore': true, 'hunting': true },
            });
            new G.Trait({
                name: 'tile inspection II',
                desc: '<font color="#3ae3ff">Now you can see how much of a certain resource you have within your territory, and how much total land and ocean is explored.</font>',
                icon: [0, 39, "magixmod", 35, 14, "magixmod"],
                cost: { 'insight': 50 },
                req: { 'maths': true, 'tile inspection': true, 'writing': true, 'alphabet 1/3': true },
                chance: 30,
                category: 'knowledge'
            });
            new G.Trait({
                name: 'enlightenment',
                desc: '[soothsayer]s and [druid]s from now on are more efficient. @[soothsayer] is more likely to generate [faith] successfully. [church] generates 2% more [faith]. Also, for every 5 [church,Churches], you will gain 1 [spirituality]. //<font color="#f70054">Note: [enlightenment] is fragile and will no longer work once any evolution occurs.</font>',
                icon: [35, 28, "magixmod"],
                req: { 'tribalism': false },
                chance: 30,
                category: 'religion'
            });

            //* * * * * CHRISTMAS TECHS/TRAITS * * * * *
            new G.Tech({
                name: 'winter holidays', category: 'seasonal',
                desc: '@You want to bring one of events/festivities you know from somewhere else right to your tribe...something about winter. //It is mainly about snow! However, no one has shown to anyone what a [snowman] looks like or what a winter ornament is. @[digger]s will start digging for [snow] if available.',
                icon: [1, 11, 'seasonal'],
                cost: { 'insight': 210, 'culture': 45, 'faith': 5 },
                req: { 'culture of celebration': true, 'philosophy': true, 'tribalism': false },
            });
            new G.Tech({
                name: 'the christmas', category: 'seasonal',
                displayName: '<font color="#30b783">Christmas</font>',
                desc: 'People realize that this event will create holiday cheer everywhere and result in various decorations like ornaments and lights! They are excited to start the celebrations.',
                icon: [2, 11, 'seasonal'],
                cost: { 'insight': 400, 'culture': 100, 'faith': 32 },
                req: { 'culture of celebration': true, 'Wizard complex': true, 'tribalism': false, 'winter holidays': true },
            });
            new G.Tech({
                name: 'carols', category: 'seasonal',
                desc: 'Christmas is a very special time indeed. Now people will sing/play not only normal songs, but also various carols! @[musician]s will now be able to craft [christmas essence] from those songs!',
                icon: [9, 11, 'seasonal'],
                cost: { 'insight II': 20, 'culture II': 30, 'christmas essence': 1020 },
                req: { 'symbolism II': true, 'ritualism II': true, 'music': true, 'tribalism': false },
            });

            new G.Tech({
                name: 'xmas1',
                displayName: 'Christmas upgrade: Artisans',
                icon: [10, 12, 'seasonal'],
                effects: [
                ],
                req: { 'tribalism': false },
                category: 'misc'
            });
            new G.Tech({
                name: 'xmas2',
                displayName: 'Christmas upgrade: Clothiers',
                icon: [11, 12, 'seasonal'],
                effects: [
                ],
                req: { 'tribalism': false },
                category: 'misc'
            });
            new G.Tech({
                name: 'xmas3',
                displayName: 'Christmas upgrade: Potters',
                icon: [12, 12, 'seasonal'],
                effects: [
                ],
                req: { 'tribalism': false },
                category: 'misc'
            });
            new G.Tech({
                name: 'xmas4',
                displayName: 'Christmas upgrade: Carving',
                icon: [13, 12, 'seasonal'],
                effects: [
                ],
                req: { 'tribalism': false },
                category: 'misc'
            });
            new G.Tech({
                name: 'snowmen', category: 'seasonal',
                desc: 'Since [digger]s are able to dig for [snow] and they understand the concept of it, you can explain what [snow] is to all of the kids in your civilization!',
                icon: [10, 11, 'seasonal'],
                cost: { 'insight': 90, 'culture': 50 },
                req: { 'winter holidays': true },
            });
            new G.Tech({
                name: 'festive robot print', category: 'seasonal',
                desc: 'A new unit can now help gather [christmas essence] from [snowman,Snowmen] built by [child,Children]! This unit is slow and quite limited, but can be upgraded many times. @However, with each overclock, a chance to lose a [snowman] upon getting [christmas essence,Essence] increases.',
                icon: [14, 12, 'seasonal'],
                cost: { 'insight': 1000, 'wisdom': 100 },
                req: { 'the christmas': true, 'snowmen': true },
            });
            new G.Tech({
                name: 'f.r.o.s.t.y overclock I', category: 'seasonal',
                desc: 'Wizards figured out how to overclock [f.r.o.s.t.y]. However, it seems this increase in speed comes at a slightly higher likelyhood of [snowman,Snowmen] being destroyed. @<font color="#54d431">[f.r.o.s.t.y] becomes 50% faster</font> @<font color="#f70054">[f.r.o.s.t.y] is 5% more likely to destroy a [snowman]</font>',
                icon: [5, 12, 'seasonal'],
                cost: { 'insight': 600, 'culture': 100, 'influence': 50, 'christmas essence': 114 },
                req: { 'festive robot print': true, 'land acknowledge': true, 'tribalism': false },
            });
            new G.Tech({
                name: 'f.r.o.s.t.y overclock II', category: 'seasonal',
                desc: 'Wizards figured out how to overclock [f.r.o.s.t.y] even more than before and are excited to speed up the process!<br>but this overclock increases the chance for that at least as for now it is possible. @<font color="#54d431">[f.r.o.s.t.y] is 80% faster (compounding)</font> @<font color="#f70054">[f.r.o.s.t.y] is 8% more likely to destroy a [snowman]</font>',
                icon: [4, 12, 'seasonal'],
                cost: { 'insight II': 110, 'culture II': 20, 'influence II': 5, 'science': 5, 'christmas essence': 546 },
                req: { 'festive robot print': true, 'policy revaluation': true, 'f.r.o.s.t.y overclock I': true },
            });
            new G.Tech({
                name: 'f.r.o.s.t.y overclock III', category: 'seasonal',
                desc: 'Wizards really want to overclock [f.r.o.s.t.y] even more! They have come up with an elaborate scientific solution to tackle this problem, although the [snowman,Snowmen] aren\'t really happy about it. @<font color="#54d431">[f.r.o.s.t.y] becomes twice as fast</font> @<font color="#f70054">[f.r.o.s.t.y] is 30% more likely to destroy a [snowman]</font>',
                icon: [3, 12, 'seasonal'],
                cost: { 'insight II': 400, 'science': 45 },
                req: { 'festive robot print': true, 'bigger university': true, 'f.r.o.s.t.y overclock II': true, 'dynamics II': true },
            });
            new G.Tech({
                name: 'festive lights', category: 'seasonal',
                desc: 'Artisan of christmas can now craft festive lights. Let the streets be even nicer. Obtaining [mo\' beauty] doubles your [happiness] gain from lights, but makes them used in more places.',
                icon: [18, 12, 'seasonal'],
                cost: { 'insight': 800, 'christmas essence': 593 },
                req: { 'festive robot print': true, 'physics': true, 'dynamics': true },
            });
            new G.Tech({
                name: 'festive lights II', category: 'seasonal',
                desc: 'Lights bring more [happiness] and are used even more. //<small>So joyful all around!</small>',
                icon: [0, 39, "magixmod", 16, 12, 'seasonal'],
                cost: { 'insight II': 200, 'science': 5 },
                req: { 'outstanding wisdom': true, 'the christmas': true, 'festive lights': true, 'mo\' beauty': true },
            });
            new G.Trait({
                name: 'punish the grinch!',
                desc: 'If available, [population,people] will use some household objects and [snow] to punish bad guys (like [thief,Thieves] and [wild corpse]s) who try to destroy Christmas! Works only during its season.',
                icon: [17, 12, 'seasonal'],
                cost: { 'culture': 300, 'influence': 50, 'faith': 25, 'insight': 100 },
                req: { 'battling thieves': true, 'the christmas': true },
                effects: [
                    {
                        type: 'function', func: function () {
                            if (day >= 350 && day <= 363) {
                                if (G.getRes('snow').amount >= 12 && G.getRes('stone').amount >= 4) {
                                    G.lose('snow', 12, 'winter punishment');
                                    G.lose('stone', 4, 'winter punishment');

                                    G.lose('thief', 2, 'winter punishment');
                                    G.gain('wounded', 1, 'thief punished');

                                    G.lose('wild corpse', 2, 'winter punishment');
                                    G.gain('slain corpse', 2);
                                }
                            }
                        }
                    }
                ],
                chance: 60,
                category: 'seasonal'
            });

            new G.Trait({
                name: 'policies',
                displayName: '<font color="fuschia">Policies</font>',
                desc: '@Now you can spend your [influence]! @Unlocking this lets you control some policies, one of the main parts of your civilization. Go to the <b>Policies</b> tab to unlock new options!',
                icon: [34, 13, "magixmod"],
                chance: 0.25,
                effects: [
                    { type: 'function', func: function () { G.pb = 1; G.pa = 2 } },
                ],
                req: { 'tribalism': true },
            });
            new G.Trait({
                name: 'where am i?',
                displayName: '<font color="#7f7fff">Where am I?</font>',
                desc: '@Unlocks primary information about your small-but-still world, one of the main parts of your civilization. @Go to the <b>Territory</b> tab to see what goods you can gain from the territory and where your tribe has settled. //<small>Seriously though, where am I?</small>',
                icon: [35, 11, "magixmod"],
                chance: 1.11,
                cost: { 'insight': 1 },
                req: { 'tribalism': true, 'policies': true },
            });

            new G.Tech({
                name: 'globetrottering', category: 'tier1',
                desc: '@Unlocks the curious [globetrotter]. //[globetrotter]s not only want to explore and discover new landscapes and terrain but also want to deepen their knowledge about new lands a little more.',
                icon: [35, 1, "magixmod"],
                cost: { 'insight': 30, 'culture': 10 },
                req: { 'scouting': true, 'building': true, 'a gift from the mausoleum': true },
            });
            new G.Tech({
                name: 'festive artisanistry', category: 'seasonal',
                desc: '@unlocks the [artisan of christmas,Artisan of Christmas] //<small>That\'s quite a nice name, isn\'t it?</small>',
                icon: [15, 11, 'seasonal'],
                cost: { 'insight': 600, 'culture': 100, 'influence': 50 },
                req: { 'winter holidays': true, 'tribalism': false },
            });
            new G.Tech({
                name: 'valentine1',
                displayName: 'Waters of love',
                icon: [3, 18, 'seasonal'],
                effects: [{ type: 'provide res', what: { 'water': 80 } }],
                req: { 'tribalism': false },
                category: 'misc'
            });
            new G.Tech({
                name: 'valentine2',
                displayName: 'Lovely herbs',
                icon: [4, 18, 'seasonal'],
                effects: [{ type: 'provide res', what: { 'herbs': 80 } }],
                req: { 'tribalism': false },
                category: 'misc'
            });
            new G.Tech({
                name: 'valentine3',
                displayName: 'Meat of falling love',
                icon: [5, 18, 'seasonal'],
                effects: [{ type: 'provide res', what: { 'cooked meat': 60 } }],
                req: { 'tribalism': false },
                category: 'misc'
            });
            new G.Tech({
                name: 'valentine4',
                displayName: 'Amore\'s child',
                icon: [6, 18, 'seasonal'],
                effects: [{ type: 'provide res', what: { 'child': 1, 'insight': 1 } }],
                req: { 'tribalism': false },
                category: 'misc'
            });
            new G.Tech({
                name: 'love grows around us', category: 'seasonal', displayName: '<font color="pink">Love grows around us</font>',
                desc: '@One person that loves a lot of other people is enough...right? You are ruler of the tribe and love people a lot. And they also seem to love you back. @Getting this will unlock [love], which is important for this season and may even provide some rewards if your [love] level is high enough.',
                icon: [18, 17, 'seasonal'],
                cost: { 'insight': 240, 'culture': 45, 'faith': 5, 'research': 80 },
                req: { 'culture of celebration': true, 'philosophy': true, 'tribalism': false },
                effects: [
                    { type: 'function', func: function () { if (day + leap >= 40 && day + leap <= 46) G.getDict('love').hidden = false; } },
                ]
            });
            new G.Trait({
                name: 'parental love',
                desc: 'Now newborn [baby,Babies] provide some [love,Love points] for each one born. This trait may lead to even more [love] sources!',
                icon: [19, 17, 'seasonal'],
                cost: { 'culture': 75, 'research': 90 },
                req: { 'love grows around us': true },
                category: 'seasonal', chance: 35,
            });
            new G.Trait({
                name: 'discovery with love',
                desc: 'You may gain [love] from [research] after getting this trait! Every single year, you will also gain some [love] points. The amount of points is based on your techs and traits!</font>',
                icon: [3, 16, 'seasonal'],
                cost: { 'culture': 75, 'research': 120, 'insight': 400 },
                req: { 'parental love': true, 'time measuring 1/2': true },
                category: 'seasonal', chance: 50,
            });
            new G.Trait({
                name: 'compliments',
                desc: 'Now, [child,Children] can generate [love] points. //(Not all children though!) //<small>The good-mannered children will appreciate and help others, generating [love] in the process!</small>',
                icon: [4, 16, 'seasonal'],
                cost: { 'culture': 125, 'research': 120, 'faith': 100 },
                req: { 'parental love': true, 'alphabet 3/3': true },
                category: 'seasonal', chance: 150,
            });
            new G.Trait({
                name: 'very artful compliments',
                desc: '[child,Children] generate even more [love] points.',
                icon: [5, 16, 'seasonal'],
                cost: { 'culture II': 25, 'research': 150, 'insight II': 15 },
                req: { 'parental love': true, 'compliments': true, 'alphabet 3/3': true },
                category: 'seasonal', chance: 35,
            });
            new G.Tech({
                name: 'lovely monument',
                desc: 'You will now be able to construct the [fortress of love]. //<small><font color="pink">A place for all Senpais...aww</font></small>',
                icon: [7, 16, 'seasonal'],
                cost: { 'culture II': 25, 'research': 150, 'insight II': 15 },
                req: { 'parental love': true, 'compliments': true, 'alphabet 3/3': true, 'monument-building II': true },
                category: 'seasonal', chance: 35,
            });
            new G.Trait({
                name: 'peace',
                desc: 'During the <b>Valentine\'s day</b> event, no [thief,Thieves] and [wild corpse]s appear much less often. //<small>Why it is this only during Valentines?</small>',
                icon: [6, 16, 'seasonal'],
                cost: { 'culture': 500, 'research': 100, 'faith': 500 },
                req: { 'compliments': true },
                category: 'seasonal', chance: 135,
            });
            new G.Tech({
                name: 'families full of love',
                desc: 'Every year, you gain some [love] from the [elder]s of all the families in your world.',
                icon: [10, 16, 'seasonal'],
                cost: { 'culture': 75, 'research': 130, 'faith': 120, 'influence': 10, 'insight': 600 },
                req: { 'love grows around us': true, 'time measuring 2/2': true, 'compliments': true, 'alchemy': true },
                category: 'seasonal', chance: 10,
            });
            new G.Trait({
                name: 'voodoo spirit',
                desc: '@gain two bonuses: //<b>Early-game bonus</b>: [dark decay], which acts as bonus [burial spot]s. //<b>Late-game bonus:</b> All units that provide [burial spot]s provide twice as much (except the [dark wormhole] and the [cemetary of Plain Island]; the island cemetary gains 2,500 additional [burial spot]s.)',
                icon: [24, 5, "magixmod"],
                effects: [
                    {
                        type: 'function', func: function () {
                            G.getDict('dark decay').hidden = false; if (!G.has('spiritual piety')) { G.getDict('grave').icon = [26, 32, "magixmod"] };/*bc its earlygame*/
                            G.getDict('single grave').icon = [30, 32, "magixmod"]; G.getDict('family graves').icon = [28, 32, "magixmod"]; G.getDict('cemetary of Plain Island').icon = [29, 32, "magixmod"];
                        }
                    },
                ],
                req: { 'tribalism': true },
            });
            new G.Trait({
                name: 'patron1',
                displayName: 'Aflamtnaja the Phoenix of Fire',
                desc: '[patron1] represents flames and fires. @This patron also symbolizes fight and decisiveness. @Your [wizard]s and people picking this patron wish to mark that their decisions are made with confidence. Also, [wizard]s believe that the Phoenix will lead them to the right paths of their lives. //Belief in that patron persists through the ages. <font color="fuschia">Be aware that patrons do not involve gameplay in any way. It is just some lore.</font>',
                icon: [0, 32, "magixmod"],
                cost: { 'culture': 75, 'faith': 5, 'insight': 105 },
                req: { 'wizardry': true, 'patron2': false, 'patron3': false, 'patron4': false, 'patron5': false, 'patron6': false, 'patron8': false, 'patron7': false, 'unknown patron': false, 'nonpatronage': false },
                effects: [
                    { type: 'function', func: function () { G.getDict('patron1').displayName = G.getName('civ')[0].toUpperCase() + 'flamtnaja the Phoenix of Fire'; } },
                ],
                category: 'religion', chance: 60,
                switchCategory: false,
                lifetime: function () { return Infinity }
            });
            new G.Trait({
                name: 'patron2',
                displayName: 'Wuraloik The Son of the Forest',
                desc: '[patron2] represents nature and its flora. @This patron is also symbolizes calm and peace. @Your [wizard]s and people picking this patron want to mark that peace has often fixes a lot of troubles and that aggression isn\'t needed to solve most problems. Also, [wizard]s believe that The Son created once a true Oasis of Peace. //Belief in that patron persists through the ages. <font color="fuschia">Be aware that patrons do not involve gameplay in any way. It is just some lore.</font>',
                icon: [1, 32, "magixmod"],
                cost: { 'culture': 75, 'faith': 5, 'insight': 105 },
                req: { 'wizardry': true, 'patron1': false, 'patron3': false, 'patron4': false, 'patron5': false, 'patron6': false, 'patron8': false, 'patron7': false, 'unknown patron': false, 'nonpatronage': false },
                effects: [
                    { type: 'function', func: function () { G.getDict('patron2').displayName = G.getName('civ')[0].toUpperCase() + 'wuraloik The Son of the Forest'; } },
                ],
                category: 'religion', chance: 60,
                switchCategory: false,
                lifetime: function () { return Infinity }
            });
            new G.Trait({
                name: 'patron3',
                displayName: 'Rvikol The Guide of the Winds',
                desc: '[patron3] represents winds and hurricanes. @This patron is also symbolizes time and impetuosity. @Your [wizard]s picking and sending their hopes to [patron3,Him] want to mark that change may be sudden, but can result in being better off. Also, [wizard]s believe that one of [patron3,His] winds will blow their souls right to the Heaven, preventing them from being absorbed by darkness of the Hell or Underworld. //Belief in that patron persists through the ages. Belief in that patron persists through the ages. <font color="fuschia">Be aware that patrons do not involve gameplay in any way. It is just some lore.</font>',
                icon: [2, 32, "magixmod"],
                cost: { 'culture': 75, 'faith': 5, 'insight': 105 },
                req: { 'wizardry': true, 'patron2': false, 'patron1': false, 'patron4': false, 'patron5': false, 'patron6': false, 'patron8': false, 'patron7': false, 'unknown patron': false, 'nonpatronage': false },
                effects: [
                    { type: 'function', func: function () { G.getDict('patron3').displayName = G.getName('civ')[0].toUpperCase() + 'rvikol The Guide of the Winds'; } },
                ],
                category: 'religion', chance: 60,
                switchCategory: false,
                lifetime: function () { return Infinity }
            });
            new G.Trait({
                name: 'patron4',
                displayName: 'Uselatarraya the Dark Dragon',
                desc: '[patron4] represents mysteries, secrets and insecurity. @This patron also symbolizes withdrawal and concealment. @Your [wizard]s picking this patron know that their lives are full of secrets and mysteries. Also, [wizard]s believe that [patron4,The Dragon] will protect their secrets from being leaked and will curse "the leakers" involved. Isn\'t that just great? //Belief in that patron persists through the ages. <font color="fuschia">Be aware that patrons do not involve gameplay in any way. It is just some lore.</font>',
                icon: [3, 32, "magixmod"],
                cost: { 'culture': 75, 'faith': 5, 'insight': 105 },
                req: { 'wizardry': true, 'patron2': false, 'patron3': false, 'patron1': false, 'patron5': false, 'patron6': false, 'patron8': false, 'patron7': false, 'unknown patron': false, 'nonpatronage': false },
                effects: [
                    { type: 'function', func: function () { G.getDict('patron4').displayName = G.getName('civ')[0].toUpperCase() + 'uselatarraya the Dark Dragon'; } },
                ],
                category: 'religion', chance: 60,
                switchCategory: false,
                lifetime: function () { return Infinity }
            });
            new G.Trait({
                name: 'patron5',
                displayName: 'Takerus The Stormlord',
                desc: '[patron5] represents precision and impulsivity. @This patron also symbolizes indigation and quick action. @Your [wizard]s picking this patron want to mark that sometimes all of us need to perform a decision in a short period of time. Also, [wizard]s believe that [patron5,The Stormlord] will guide through the lives of [population,people], helping to make decisions with His precision. //Belief in that patron persists through the ages. <font color="fuschia">Be aware that patrons do not involve gameplay in any way. It is just some lore.</font>',
                icon: [4, 32, "magixmod"],
                cost: { 'culture': 75, 'faith': 5, 'insight': 105 },
                req: { 'wizardry': true, 'patron2': false, 'patron3': false, 'patron4': false, 'patron1': false, 'patron6': false, 'patron8': false, 'patron7': false, 'unknown patron': false, 'nonpatronage': false },
                effects: [
                    { type: 'function', func: function () { G.getDict('patron5').displayName = G.getName('civ')[0].toUpperCase() + 'takerus The Stormlord'; } },
                ],
                category: 'religion', chance: 60,
                switchCategory: false,
                lifetime: function () { return Infinity }
            });
            new G.Trait({
                name: 'patron6',
                displayName: 'Kolier\'ali, Eye of the Sea',
                desc: '[patron6] represents restraint and observation. @This patron also symbolizes cautioness and prudence. @Your [wizard]s picking this patron want to mark that you cannot always finish something quickly...you need to do it slowly and thoughtfully. Also, [wizard]s believe that [patron6,The Eye] will help [population,people] restrain the impatient and prevent obsession. //Belief in that patron persists through the ages. <font color="fuschia">Be aware that patrons do not involve gameplay in any way. It is just some lore.</font>',
                icon: [5, 32, "magixmod"],
                cost: { 'culture': 75, 'faith': 5, 'insight': 105 },
                req: { 'wizardry': true, 'patron2': false, 'patron3': false, 'patron4': false, 'patron5': false, 'patron1': false, 'patron8': false, 'patron7': false, 'unknown patron': false, 'nonpatronage': false },
                effects: [
                    { type: 'function', func: function () { G.getDict('patron6').displayName = G.getName('civ')[0].toUpperCase() + 'kolier\'ali, Eye of the Sea'; } },
                ],
                category: 'religion', chance: 60,
                switchCategory: false,
                lifetime: function () { return Infinity }
            });
            new G.Trait({
                name: 'unknown patron',
                desc: 'You have an unknown patron, somehow. You don\'t know who that strange being is. @Maybe it is a group of spirits or demigods...@It is pretty much impossible to point what it represents. @Each [wizard] will tell you a different thing about it. //Belief in that unknown patron persists through the ages. <font color="fuschia">Be aware that patrons do not involve gameplay in any way. It is just some lore.</font>',
                icon: [6, 32, "magixmod"],
                cost: { 'culture': 75, 'faith': 5, 'insight': 105 },
                req: { 'wizardry': true, 'patron2': false, 'patron3': false, 'patron4': false, 'patron5': false, 'patron1': false, 'patron7': false, 'patron8': false, 'patron6': false, 'nonpatronage': false },
                category: 'religion', chance: 100,
                switchCategory: false,
                lifetime: function () { return Infinity }
            });
            new G.Trait({
                name: 'patron7',
                displayName: 'Chirus the time watcher',
                desc: '[patron7] is all about time and how it passes. @This patron also symbolizes how things pass away all the time. @Your [wizard]s picking this patron want to mark that they realize this. Also, [wizard]s believe that [patron7,The Time Watcher] will prolong their lives. //<b>Carpe diem!</b> //Belief in that patron persists through the ages. <font color="fuschia">Be aware that patrons do not involve gameplay in any way. It is just some lore.</font>',
                icon: [8, 32, "magixmod"],
                cost: { 'culture': 75, 'faith': 5, 'insight': 105 },
                req: { 'wizardry': true, 'patron2': false, 'patron3': false, 'patron4': false, 'patron5': false, 'patron1': false, 'patron6': false, 'patron8': false, 'unknown patron': false, 'nonpatronage': false },
                effects: [
                    { type: 'function', func: function () { G.getDict('patron7').displayName = G.getName('civ')[0].toUpperCase() + 'chirus the time watcher'; } },
                ],
                category: 'religion', chance: 60,
                switchCategory: false,
                lifetime: function () { return Infinity }
            });
            new G.Trait({
                name: 'patron8',
                displayName: 'Hzakilok the homepeace keeper',
                desc: '[patron8] is a patron of [housing,Houses]. @This patron also symbolizes how the best place is still your own home. @Your [wizard]s picking this patron want to point out how their homeland should be a peaceful place. Also, [wizard]s believe that [patron8,The Homepeace keeper] will protect [housing,Houses] from evil and dark powers. //Belief in that patron persists through the ages. <font color="fuschia">Be aware that patrons do not involve gameplay in any way. It is just some lore.</font>',
                icon: [7, 32, "magixmod"],
                cost: { 'culture': 75, 'faith': 5, 'insight': 105 },
                req: { 'wizardry': true, 'patron2': false, 'patron3': false, 'patron4': false, 'patron5': false, 'patron1': false, 'patron6': false, 'patron7': false, 'unknown patron': false, 'nonpatronage': false },
                effects: [
                    { type: 'function', func: function () { G.getDict('patron8').displayName = G.getName('civ')[0].toUpperCase() + 'hzakilok the homepeace keeper'; } },
                ],
                category: 'religion', chance: 60,
                switchCategory: false,
                lifetime: function () { return Infinity }
            });
            new G.Trait({
                name: 'nonpatronage',
                desc: 'Seems like your tribe wants to live without any patrons. <b>The reasons might be:</b> @A first decision that has been spread through the tribe @Fear @Insecurity @Their religion say nothing about patronage //Through the rest of the run, [wizard]s and eventually [population,people] will not pick or create their own Patron. <font color="fuschia">Be aware that patrons do not involve gameplay in any way. It is just some lore.</font> //<small>Not having a patron is also fine, don\'t worry too much :)</small>',
                icon: [9, 32, "magixmod"],
                cost: { 'culture': 75, 'faith': 5, 'insight': 105 },
                req: { 'wizardry': true, 'patron2': false, 'patron3': false, 'patron4': false, 'patron5': false, 'patron1': false, 'patron7': false, 'patron8': false, 'patron6': false, 'unknown patron': false },
                category: 'religion', chance: 80,
                switchCategory: false,
                lifetime: function () { return Infinity }
            });
            new G.Trait({
                name: 't8',
                displayName: 'Buri\'o dak\'s Trial',
                desc: 'You are currently in the <b>Buried</b> trial. After you successfully finish this trial, you will no longer be able to rerun it.',
                icon: [22, 25, "magixmod", 1, 22, "magixmod"],
                req: { 'tribalism': false },
                cost: {},
                effects: [
                    { type: 'provide res', what: { 'spirituality': 3, 'faith': 3 } },
                    {
                        type: 'function', func: function () { //BECAUSE DURING BURIED YOU HAVE WAY MORE HOUSING BUT IT DECAYS
                            G.getDict('house').desc = '@provides 25 [housing]<>A sturdy home built to last.';
                            G.getDict('hovel').desc = '@provides 20 [housing]<>A simple home for a family of villagers.';
                            G.getDict('hut').desc = '@provides 12 [housing]<>Small dwelling built out of hardened mud and branches.';
                            G.getDict('mud shelter').desc = '@provides 8 [housing]<>Basic, frail dwelling in which a small family can live.';
                            G.getDict('branch shelter').desc = '@provides 8 [housing]<>Basic, very frail dwelling in which a small family can live. The weakest shelter.';
                            G.getDict('shelter on water').desc = '@provides 15 [housing]<>Small dwelling with roof out of branches and walls out of [bamboo].';
                            //G.getDict('dark essence').limit=null;
                        }
                    },
                ],
                category: 'trial',
                skip: true
            });
            new G.Tech({
                name: 'message memory',
                desc: '@your message history will be increased from 25 to 50 @unlocks [instruction]',
                icon: [35, 13, "magixmod"],
                cost: { 'culture': 15, 'insight': 5 },
                req: { 'oral tradition': true, 'caligraphy': true },
                category: 'tier1', chance: 7,
                effects: [
                    {
                        type: 'function', func: function () {
                            G.maxMessages = G.getSetting('lessMax') ? 25 : 50;
                        }
                    },
                ],
                tutorialMesg: ['tutorial', G.resets >= 3 ? 'Remember that because you\'ve performed three ascensions already, you can always open the <font color="#d4af37"><b>Magix</b></font> tab to edit message settings.' : 'Perform three ascensions to unlock the <font color="#d4af37"><b>Message filter</b></font>. You will be able to use it via the <font color="#e2a900"><b>Magix</b></font> tab!', [32, 27, "magixmod"]]
            });
            new G.Tech({
                name: 'bII(acceptance)',
                displayName: 'Burial II', category: 'tier1',
                desc: '@Increases the positive effects of [acceptance of death] and [belongings preservance] by 5% <>@Funeral ceremonies are more common. @provides 30 [inspiration]',
                icon: [0, 39, "magixmod", 13, 23, "magixmod", 24, 1],
                cost: { 'insight': 510 },
                req: { 'burial': true, 'philosophy': true, 'bII(normal)': false },
                effects: [
                    { type: 'provide res', what: { 'inspiration': 30 } },
                ],
                chance: 15,
            });
            new G.Trait({
                name: 'constellations',
                desc: '<font color="#a4baff">A naming system for star constellations has been invented. Your people are now really interested in the sky! //<small>Big dog, Little dog, Dove, Centaur, Water bearer, Octant, Balance, Sea serpent, Crane...yeah, these are names of our constellations...</small></font>',
                icon: [36, 32, "magixmod"],
                cost: { 'culture II': 35, 'insight II': 600, 'science': 100 },
                chance: 6,
                category: 'knowledge',
                req: { 'even bigger university': true },
                effects: [
                    {
                        type: 'function', func: function () {
                            if (G.getRes('tragedy').amount == 0) {
                                G.getRes('tragedy').amount = 15 + Math.round(Math.random() * 3);
                            }
                        }
                    },
                ]
            });
            //halloween part two
            new G.Tech({
                name: 'halloween ornaments',
                desc: 'Increases your [spookiness] gain from all sources by +25%. //Various [halloween ornaments,Spooky ornaments] create better a Halloween climate, which makes everything more festive (in a slightly scary way). //<small>Woah...*trembles*</small>',
                icon: [7, 9, 'seasonal'],
                cost: { 'insight': 250, 'culture': 100, 'wisdom': 25 },
                req: { 'trick or treat': true },
                category: 'seasonal',
                effects: [
                    {
                        type: 'function', func: function () {
                            spookboost = 1.25;
                        }
                    },
                ],
                chance: 25,
            });
            new G.Tech({
                name: 'costume-crafting',
                desc: '[clothier]s will now be able to create spookier and scarier [colored clothing]s. While sewing these, [clothier]s will also gain some [spookiness]!//Note: After Halloween ends, crafting costumes will be replaced with <b>Craft colored clothing</b> \'till next Halloween. //<small>Let\'s begin that scary mascarade...for real.</small>',
                icon: [5, 9, 'seasonal'],
                cost: { 'insight': 300, 'culture': 30 },
                req: { 'weaving II': true, '"dark season"': true },
                category: 'seasonal',
                chance: 3,
                effects: {
                    type: 'function', func: function () {
                        if (day + leap >= 289 && day + leap <= 305) {
                            G.getDict("clothier").effects.push({ type: 'gather', what: { 'spookiness xp': 0.01 * spookboost }, mode: 'weave leather colored clothing' });
                            G.getDict("clothier").effects.push({ type: 'gather', what: { 'spookiness xp': 0.01 * spookboost }, mode: 'weave fiber colored clothing' });
                            G.getDict("clothier").effects.push({ type: 'gather', what: { 'spookiness xp': 0.01 * spookboost }, mode: 'dye already made clothing' });
                        }
                    }
                }
            });
            new G.Tech({
                name: 'spirit-summoning',
                desc: 'Unlocks the [spirit summoner]. //Can summon ghosts of dead people from the past. Rarely, they will challenge themselves to summon a demon...which ends up with some rather concerning sickness. @This is another source of [spookiness]! //Note: [spirit summoner]s will only work during Halloween. //<small>Don\'t you DARE disturb their eternal sleep!</small>',
                icon: [3, 9, 'seasonal'],
                cost: { 'faith': 80, 'culture': 40 },
                req: { "Wizard complex": true, '"dark season"': true },
                category: 'seasonal',
                chance: 6,
            });
            new G.Tech({
                name: 'candy-crafting',
                desc: '[artisan] can now craft [candy,Candies]. //Unlocking [trick or treat] can also help you gather [halloween essence] out of the candies.//Note: This mode only works during Halloween. After the event ends, [artisan]s won\'t produce any more [candy,Candies] until Halloween starts again!//<small>Candies are so tasty! Mmmm...</small>',
                icon: [8, 8, 'seasonal'],
                cost: { 'insight': 800, 'culture': 100 },
                req: { 'farm of the sugar cane': true, '"dark season"': true },
                category: 'seasonal',
                chance: 3,
            });
            new G.Trait({
                name: 'trick or treat',
                desc: 'People living in houses can now use their halloween costumes to gather sweet [candy,Candies] in the tribe. //And, thanks to this tech, you have another source of [halloween essence] and [spookiness]! //Note: [paradise housing] does not provide [halloween essence] or [spookiness] with this upgrade.//<small>Candies are so sweet and tasty...wonderful!</small>',
                icon: [19, 8, 'seasonal'],
                cost: { 'insight': 800, 'culture': 100, 'colored clothing': 1000, 'halloween essence': 2500 },
                req: { 'candy-crafting': true, 'costume-crafting': true },
                category: 'seasonal',
                chance: 3,
                effects: [
                    {
                        type: 'function', func: function () {
                            if (day + leap >= 289 && day + leap <= 305) {
                                G.getDict("house").effects.push({ type: 'gather', what: { 'halloween essence': 0.001, 'spookiness xp': 0.005 * spookboost, 'candy': 0.05 } });//since it's built a lot it needs to give less
                                G.getDict("hovel").effects.push({ type: 'gather', what: { 'halloween essence': 0.002, 'spookiness xp': 0.011 * spookboost, 'candy': 0.1 } });
                                G.getDict("hut").effects.push({ type: 'gather', what: { 'halloween essence': 0.002, 'spookiness xp': 0.01 * spookboost, 'candy': 0.05 } });
                                G.getDict("shelter on water").effects.push({ type: 'gather', what: { 'halloween essence': 0.002, 'spookiness xp': 0.01 * spookboost, 'candy': 0.05 } });
                                G.getDict("branch shelter").effects.push({ type: 'gather', what: { 'halloween essence': 0.0022, 'spookiness xp': 0.012 * spookboost, 'candy': 0.2 } });
                                G.getDict("Hardened house").effects.push({ type: 'gather', what: { 'halloween essence': 0.001, 'spookiness xp': 0.005 * spookboost, 'candy': 0.05 } }); //since it's built a lot it needs to give less
                                G.getDict("hardened house").effects.push({ type: 'gather', what: { 'halloween essence': 0.0012, 'spookiness xp': 0.014 * spookboost, 'candy': 0.1 } });
                            }
                        }
                    },
                ],
            });
            new G.Trait({
                name: 'vampirism',
                desc: '@some [population,people] will start to occasionally drink blood from living [population,people] and their [corpse]s, generating [spookiness] but harming [health] even more, as well as sacring people and decreasing their [happiness] more. //Note: [vampirism] works only during Halloween. That means after Halloween, [vampirism] and its [health] harm will stop. //<small>that is even more eww</small>',
                icon: [2, 9, 'seasonal'],
                cost: { 'faith': 50, 'culture': 50 },
                req: { '"dark season"': true, 'ritual necrophagy': true },
                category: 'seasonal',
                chance: 300,
            });
            new G.Tech({
                name: 'demon-summoning',
                desc: '[spirit summoner]s are now able to summon demons of Halloween at the cost of [halloween essence] to minimalize risk of any sort of curses. //While in the new mode, [spirit summoner,Summoners] gain more [spookiness] but use more. //Note: [spirit summoner]s will only work during Halloween. //<small>Eh? Ok, but don\'t tell me later that I didn\'t warn you.</small>',
                icon: [6, 9, 'seasonal'],
                cost: { 'faith': 100, 'culture': 100 },
                req: { "spirit-summoning": true, 'trick or treat': true },
                category: 'seasonal',
                chance: 10,
            });
            new G.Tech({
                name: 'hallow1',
                displayName: 'Darkness wandering',
                icon: [16, 9, 'seasonal'],
                req: { 'tribalism': false },
                category: 'misc'
            });
            new G.Tech({
                name: 'hallow2',
                displayName: 'Floral ritualists',
                icon: [17, 9, 'seasonal'],
                req: { 'tribalism': false },
                category: 'misc'
            });
            new G.Tech({
                name: 'hallow3',
                displayName: 'Anti-mana',
                icon: [18, 9, 'seasonal'],
                req: { 'tribalism': false },
                category: 'misc'
            });
            new G.Tech({
                name: 'hallow4',
                displayName: 'Dark tricks',
                icon: [19, 9, 'seasonal'],
                req: { 'tribalism': false },
                category: 'misc'
            });
            new G.Tech({
                name: 'halloween-spirits',
                displayName: 'Ancient spirits',
                desc: '[spirit summoner]s can now summon Halloween spirits, granting a little bit of [spookiness] and extra [halloween essence]. //<small>Those are probably the safest and best ancient spirits to summon, but they won\'t last forever.</small>',
                icon: [11, 9, 'seasonal'],
                cost: { 'culture II': 10 },
                req: { "eotm": true, 'spirit-summoning': true },
                category: 'seasonal',
                chance: 10,
            });
            new G.Tech({
                name: 'basic mapping', category: 'tier1',
                desc: '@Allows <b>Exploration</b> units to travel more. //Increases the exploration softcap.',
                icon: [9, 9, "magixmod"],
                cost: { 'insight': 40 },
                req: { 'scouting': true, 'writing': true, 'caligraphy': true, 'alphabet 1/3': true },
            });
            new G.Tech({
                name: 'map details', category: 'tier1',
                desc: '@Allows <b>Exploration</b> units to travel and explore more. They will become more advanced and may explore further lands. //Increases the exploration softcap.',
                icon: [10, 9, "magixmod"],
                cost: { 'insight': 1200 },
                req: { 'basic mapping': true, 'alphabet 2/3': true, 'plain island building': true },
            });
            new G.Tech({
                name: 'advanced mapping', category: 'tier2',
                desc: '@Allows <b>Exploration</b> units to travel and explore even more! //<b>Removes</b> exploration barriers.',
                icon: [11, 9, "magixmod"],
                cost: { 'insight II': 85 },
                req: { 'map details': true, 'focused scouting': true },
            });
            new G.Trait({
                name: 'plant lore II', category: 'knowledge',
                desc: '<font color="#28d82d">@unlocks the [florist]. The [florist] is a gatherer tasked with collecting various [flowers] instead of other resources. //Also unlocks new modes for [healer]s, allowing you to heal the [sick] and [wounded] faster.</font>',
                icon: [8, 7, "magixmod"],
                cost: { 'insight': 25 },
                req: { 'herbalism': true, 'a gift from the mausoleum': true, 'plant lore': true },
                effects: [
                ],
                chance: 6,
            });
            new G.Trait({
                name: 'acceptance of death',
                desc: '@unhappiness from death is halved@may evolve into more complex spiritual thinking //<small>That had to happen. Death is merciless...</small>',
                icon: [21, 1],
                cost: { 'culture': 8, 'insight': 1 },
                chance: 10,
                category: 'long',
                lifetime: function () { return 300 + ((this.yearOfObtainment % 250) - 125) },
                req: { 'language': true, 'spark\'o religion': true, 'fear of death': false, 't2': false, 'death indifference': false, 'death scepticism': false },
                effects: [
                    { type: 'provide res', what: { 'dark decay': 50 } },
                    {
                        type: 'function', func: function () {
                            G.getDict('belief in the afterlife').req = { 'acceptance of death': true, 'oral tradition': true, 'spark\'o religion': true, 'belief in the beforelife': false };
                            G.getDict('belief in the beforelife').req = { 'acceptance of death': true, 'oral tradition': true, 'spark\'o religion': true, 'belief in the afterlife': false, 'ritual necrophagy': false };
                        }
                    }
                ],
            });
            new G.Trait({
                name: 'belief in the beforelife',
                desc: '@prevents [ritual necrophagy,Corpse cruelty] traits from being occasionally adopted. @if this trait is adopted after [ritual necrophagy,Necrophagy] or [art of death], then it will be instantly removed because they believe respecting their ancestors is a key to well being.',
                icon: [8, 8, "magixmod"],
                cost: { 'culture': 5, 'faith': 2 },
                chance: 10,
                req: { 'fear of death': true, 'oral tradition': true, 'spark\'o religion': true, 'belief in the afterlife': false, 'ritual necrophagy': false },
                category: 'religion',
                effects: [
                    { type: 'provide res', what: { 'dark decay': 150 } },
                    {
                        type: 'function', func: function () {
                            G.getDict('7th essence').req = { '2nd portal past': true, 'ancestors world building': true };
                            if (G.getRes('victory point').amount > 60) {
                                for (var i = 1; i <= 12; i++) {
                                    if (G.policyByName['se' + (i < 10 ? "0" + i : i)].cost['faith II'] != undefined)
                                        delete G.policyByName['se' + (i < 10 ? "0" + i : i)].cost['faith II'];
                                }
                                if (!G.has('pantheon key')) {
                                    G.gainTech(G.techByName['pantheon key']);
                                    G.Message({ type: "important tall", text: 'Your great victories in the planes of the Seraphins attracted a great <b>Them</b> and made them available to you much earlier. You look into your pocket and feel that something has appeared inside. You take it out to see a shiny <b>Pantheon key</b>!', icon: [4, 25, "magixmod", 22, 1] });
                                }
                            }

                            G.getDict('spiritual piety').req = { 'ritualism II': true };
                            G.getDict('belief in revenants').req = { 'belief in the beforelife': true };
                            G.getDict('belief in revenants').desc += "//<small>No, that cannot be it. Most likely it may be an ancestor...or maybe you from your previous run...<b>who knows?</b></small>";
                            G.getDict('dark side').req = { 'ancestors world building': true };
                            //ambrosium shard shack
                            G.getDict('ambrosium shard shack').icon = [13, 13, "magixmod", 8, 9, "magixmod"];
                            G.getDict('ambrosium shard shack').cost = { 'basic building materials': 900 };
                            G.getDict('ambrosium shard shack').use = { 'land of the Past': 1, 'industry point': 1 };
                            G.getDict('ambrosium shard shack').req = { 'tree-caring': true, 'ancestors world building': true, 'ambrosium crafting': true };
                            G.getDict('ambrosium shard shack').category = 'ancestorsunit';
                            G.getDict('ambrosium crafting').req = { 'tree-caring': true, 'ancestors world building': true };
                            G.getDict('cooking II').req = { '2nd portal past': true, 'ancestors world building': true };

                            //treehouse altering
                            G.getDict('treehouse').icon = [7, 9, "magixmod"];
                            G.getDict('treehouse').desc = G.getDict('treehouse').desc.replace('Paradise', 'Ancestors world');
                            G.getDict('treehouse').category = 'ancestorsunit';
                            G.getDict('treehouse').req = { 'ancestors world housing': true };
                            G.getDict('treehouse').use = { 'land of the Past': 1 / 3 };


                            //temple of "Paradise" altering
                            G.getDict("temple of the Paradise").displayName = 'Temple of Ancestors';
                            G.getDict("temple of the Paradise").desc = '@leads to the <b>Victory next to the God</b>. //A big, precious temple which is the homeland of Seraphins and the Ancestors. A temple made out of many ruins, wrecks and other Ancestors leftovers with their beauty restored. It glows faintly of ambrosium.';
                            G.getDict("temple of the Paradise").icon = [1, 8, "magixmod"];
                            G.getDict("temple of the Paradise").wideIcon = [0, 8, "magixmod"];
                            G.getDict("temple of the Paradise").cost = { 'basic building materials': 100000, 'precious building materials': 5000, 'gold block': 100, 'platinum block': 10, 'cloud': 45000, 'ambrosium shard': 10000 },
                                G.getDict("temple of the Paradise").costPerStep = { 'basic building materials': 1000, 'precious building materials': 500, 'gold block': 10, 'platinum block': 1, 'influence II': 1, 'ambrosium shard': 1000, 'godTemplePoint': -1 },
                                G.getDict("temple of the Paradise").steps = 400,
                                G.getDict("temple of the Paradise").messageOnStart = 'The construction of the <b>Temple of Ancestors</b> has been started. You are incredibly hopeful that someday make the Leader of the Ancestors will appear next to you and show his true good-natured face after its completion.',
                                G.getDict("temple of the Paradise").finalStepCost = { 'wisdom': 125, 'population': 25000, 'precious building materials': 24500, 'gem block': 500, 'insight': 1000, 'ambrosium shard': 10000, 'holy essence': 225000, 'faith II': 5, 'faith': 125, 'influence': 400, 'influence II': 10, 'spirituality': 25, 'godTemplePoint': -100 },
                                G.getDict("temple of the Paradise").finalStepDesc = 'To complete the wonder and be even closer to the Ancestors Leader, you must perform this final step: 25k [population,people] must be sacrificed...and many other ingredients.',
                                G.getDict("temple of the Paradise").use = { 'land of the Past': 30 };

                            G.getDict('monument-building').req = { 'construction': true, 'burial': true, 'belief in the beforelife': true };
                            G.getDict('missionary').req = { 'ritualism': true, 'symbolism': true, 'belief in the beforelife': true };
                            G.getDict('pantheon key').icon = [4, 25, "magixmod", 22, 1];
                            G.getDict('belief in portals').req = { 'belief in the beforelife': true, 'Wizard complex': true };
                            G.getDict('treeplanting').icon = [8, 12, 4, 7, "magixmod"];
                            G.getDict('treeplanting').req = { 'ancestors world building': true, '2nd portal past': true };
                            G.getDict('land acknowledge').icon = [8, 12, 5, 7, "magixmod"];
                            G.getDict('holy orchard').icon = [6, 7, "magixmod"];
                            G.getDict('holy orchard').category = 'ancestorsunit';
                            G.getDict('holy orchard').use = { 'land of the Past': 50, 'industry point': 5 };
                            G.getDict('holy orchard').req = { 'tree-caring': true, 'ancestors world building': true };
                            G.getDict('holy orchard').upkeep = { 'water': 30 };
                            G.getDict('holy orchard').displayName = 'Antique orchard';
                            G.getDict('holy essence storage').use = { 'land of the Past': 0.8 };
                            G.getDict('holy essence storage').req = { 'stockpiling': true, 'building': true, 'essence storages': true, 'ancestors world building': true, '7th essence': true },
                                G.getDict('land acknowledge').req = { '2nd portal past': true };
                            G.getDict('tool refinery 1/2').req = { 'ancestors world crafting': true };

                            // fix by @painekillers
                            //random stuff altering
                            G.getDict('combat potion & concoction brewing').req = { 'alcohol brewing': true, 'medicaments brewing': true, 'alchemy': true, 'ancestors world building': true };
                            G.getDict('bigger potion pallet').req = { 'alcohol brewing': true, 'medicaments brewing': true, 'alchemy': true, 'ancestors world building': true };
                            G.getDict('explosive crafting & mining').req = { 'ambrosium treeplanting': true, 'ancestors world building': true };
                            G.getDict('intelligent blasting').req = { 'ambrosium treeplanting': true, 'ancestors world building': true };

                            //paradise unit altering (REMEMBER TO SWITCH THE ICONS)
                            G.getDict('Floored warehouse').req = { 'stockpiling': true, 'construction': true, 'ancestors world building': true };
                            G.getDict('Floored warehouse').desc = G.getDict('Floored warehouse').desc.replace('Paradise', 'Ancestors world');
                            G.getDict('Floored warehouse').category = 'ancestorsunit';
                            G.getDict('Floored warehouse').use = { 'land of the Past': 4, 'industry point': 0.2 };
                            G.getDict('hardened warehouse').req = { 'stockpiling': true, 'construction': true, 'ancestors world building': true };
                            G.getDict('hardened warehouse').desc = G.getDict('hardened warehouse').desc.replace('Paradise', 'Ancestors world');
                            G.getDict('hardened warehouse').category = 'ancestorsunit';
                            G.getDict('hardened warehouse').use = { 'land of the Past': 3, 'industry point': 0.2 };

                            //Make gods and idols possible to get without revenants(required for temple of ancestors/paradise)
                            G.getDict('gods and idols').req = { 'power of the faith': true };
                            //I just removed liberating darkness

                            mausoleumEvolve();
                            rootPolicyEvolve();
                            rootCultureEvolve();
                            rootKnowEvolve();
                            if (G.has('ritual necrophagy')) G.deleteTrait('ritual necrophagy');
                            if (G.has('art of death') && !G.has('respect for the corpse')) G.deleteTrait('art of death');
                        }
                    },
                ],
            });
            new G.Trait({
                name: 'culture of the beforelife',
                desc: '<b>Beliefs have slowly morphed into advanced culture. People will now try to be closer to the ancestor or ancestors they worship. Who knows if they will build another wonder</b>. @unhappiness from death varies: on odd numbered decades it increases by 10%, while on even numbered decades it decreases by 10%.',
                icon: [12, 33, "magixmod"],
                cost: { 'insight': 50, 'culture': 200, 'inspiration': 20, 'authority': 20, 'spirituality': 30, 'faith': 40 },
                chance: 300,
                req: { 'belief in the beforelife': true, 'time measuring 1/2': true },
                category: 'religion',
                effects: [
                    {
                        type: 'function', func: function () {
                            G.getDict("monument-building II").req = { 'construction': true, 'burial': true, 'culture of the beforelife': true, 'physics': true };
                            if (G.getRes('victory point').amount > 25) {
                                for (var i = 1; i <= 12; i++) {
                                    if (G.policyByName['se' + (i < 10 ? "0" + i : i)].cost['faith II'] != undefined)
                                        delete G.policyByName['se' + (i < 10 ? "0" + i : i)].cost['faith II'];
                                }
                                if (!G.has('pantheon key')) {
                                    G.gainTech(G.techByName['pantheon key']);
                                    G.Message({ type: "important tall", text: 'Your victories attracted a great <b>Seraphin</b> and made it available to you way earlier. You look into your pocket and feel a small weight. You take it out to see a glowing <b>Pantheon key</b>!', icon: [4, 25, "magixmod", 22, 1] });
                                }
                            }
                        }
                    }
                ],
            });
            new G.Tech({
                name: 'missionary', category: 'tier1',
                desc: '@provides 1 [spirituality] when your [mausoleum]\'s level is at least <b>LV5</b> @also increases your [faith] gain from [druid]s by 5% //Send a religious tribe to spread your religion and its concept all over the world. //<small>Hey! Do not consider it as profanation. It is not like that...</small>',
                icon: [17, 33, "magixmod"],
                cost: { 'faith': 10, 'culture': 5, 'insight': 10 },
                req: { 'ritualism': true, 'symbolism': true, 'belief in the afterlife': true },
                effects: [

                ],
            });
            new G.Trait({
                name: 'archaeology',
                desc: '<font color="#ffc16a">Throughout many ascensions, there have been some [relic]s left on this world by previous civilizations. @unlocks the [archaeologist], someone who forage and dig into the surface to investigate stuff previous civilizations left behind</font><br><font color="#f70054">A some point, [archaeologist]s may have a harder time locating after nearby [relic]s have all been discovered.</font>',
                icon: [19, 33, "magixmod"],
                cost: { 'insight': 250 },
                req: { 'gardening': true, 'will to know more': true, 'tribalism': false },
                category: 'knowledge',
                chance: 20,
            });

            new G.Tech({
                name: 'doctoral analysis',
                desc: '@[archaeologist]s gain [wisdom II,Essentials II] instead of [wisdom,Essentials I] from rare relics. Also, every relic that is <font color="#d4af37">Legendary</font> or rarer provides [science]. //<small>This type of analysis can give way more information!</small>',
                icon: [21, 33, "magixmod"],
                cost: { 'science': 70, 'insight II': 300 },
                req: { 'better seeking': true, 'bigger university': true },
                chance: 10,
            });
            new G.Trait({
                name: 'out of relics',
                desc: 'Most of the relics have been found. From now on, [archaeologist]s will dig out stuff left by previous generations. Luckily, there is still a chance to find a rare finding based on the current rarity levels. @[archaeologist]s are 80% less efficient. @This trait will automatically disappear after several hundred years after your civilization evolves for many generations and cannot be removed.',
                icon: [3, 12, 24, 33, "magixmod"],
                cost: {},
                req: { 'archaeology': true, 'tribalism': false },
                chance: 2000,
                lifetime: 400,
            });
            new G.Tech({
                name: '2nd portal past',
                displayName: 'Second portal to new world',
                category: 'tier1',
                desc: 'After your people heard [the ancestors call], your wizards figured out a way to activate a strange portal to the Ancestors land inside the basement of the latest wonder, among some stored [relic]s.',
                icon: [25, 33, "magixmod"],
                cost: { 'insight': 1595, 'culture': 300, 'mana': 2500, 'influence': 70, 'spirituality': 50, 'population': 1000 },
                req: { 'belief in portals': true, 'first portal to new world': true, 'the ancestors call': true, 'monument-building II': true },
            });
            new G.Trait({
                name: 'the ancestors call',
                displayName: 'The call of the Ancestors',
                desc: 'The <b>ancestors</b>...they called your people...to their old world...full of hopes...full of new adventures...in their very own realm!',
                icon: [4, 0, "magixmod"],
                cost: { 'insight': 650, 'influence': 60, 'authority': 20, 'spirituality': 30, 'faith': 40 },
                chance: 175,
                req: { 'culture of the beforelife': true },
            });
            new G.Tech({
                name: 'ancestors world building', category: 'tier1',
                desc: 'Unlocks a unique sheet of buildings which can only be built in the newly opened <b>Ancestors world</b>! //<font color="#f70054"><b>After getting this, rolling new researches will cost 2 [idea tablet]s instead of 1 from now on.</b> This technology also costs 20 additional idea tablets on its own.</font> //<small>It would be quite useful to construct huge houses in their world. But if you did...it would really insult the ancestors.</small>',
                icon: [32, 33, "magixmod"],
                cost: { 'insight': 4, 'ancestors tablet': 1, 'idea tablet': 20 },
                effects: [
                    { type: 'provide res', what: { 'industry point': 800 } },
                    { type: 'show res', what: ['industry point'] },
                ],
                req: { '2nd portal past': true },
            });
            new G.Tech({
                name: 'tree-caring', category: 'tier1',
                desc: '@Unlocks [holy orchard]s, letting you get [ambrosium leaf,Ambrosium leaves]. //<small>It is hard to believe that something as holy as Ambrosium can be found within the ancestors world...</small>',
                icon: [4, 7, "magixmod"],
                cost: { 'insight': 1015 },
                req: { 'ancestors world building': true, 'land acknowledge': true, 'treeplanting': true },
            });
            new G.Trait({
                name: 't7',
                displayName: 'Herbalia\'s Trial',
                desc: 'You are currently in the <b>Herbalism</b> trial.',
                icon: [7, 0, "magix2", 5, 22, "magixmod"],
                req: { 'tribalism': false },
                cost: {},
                effects: [
                    {
                        type: 'function', func: function () {
                            G.resByName['food'].subRes = [G.getRes('herbs')];
                            G.getDict('gatherer').icon = [17, 0, 'magix2'];
                            if (!G.has("herbalism")) G.gainTech(G.techByName['herbalism']);
                            if (!G.has("wizardry")) G.gainTech(G.techByName['wizardry']);
                            if (!G.has("mana brewery")) G.gainTech(G.techByName['mana brewery']);
                            G.getDict("mana").limit = 'herb essence';
                            G.getDict("wizard").req = { 'wizardry': true };
                            G.getDict("the Herboleum").costPerStep = { 'precious metal ingot': 20, 'precious building materials': 50, 'herb essence': 100 * (G.achievByName['herbalism'].won + 1) }
                            G.getDict("the Herboleum").finalStepCost['herbs'] = 10000 * (G.achievByName['herbalism'].won + 1);
                            for (i in G.res) {
                                if (G.res[i].turnToByContext == undefined) continue;
                                if (G.res[i].partOf == "food" && G.res[i].name != "herbs") {
                                    G.res[i].hidden = true;
                                    G.res[i].turnToByContext['eating'] = { 'spoiled food': 0.01 };
                                    G.res[i].partOf = 'misc materials';
                                }
                            }
                        }
                    }
                ],
                category: 'trial',
                skip: true
            });
            new G.Tech({
                name: 'blessed herbs',
                desc: '[herbs] provide a little bit more [health] when consumed and no longer harm [happiness].',
                icon: [8, 12, 4, 6, 3, 22, "magixmod"],
                req: { 'tribalism': false },
                cost: {},
                effects: [
                    {
                        type: 'function', func: function () {
                            G.getDict("herbs").desc += " However, eating them won\'t make [population,people] people mad.";
                            G.getDict("herbs").turnToByContext['eating'] = { 'health': 0.006 };
                        }
                    }
                ],
                category: "misc"
            });
            new G.Tech({
                name: 'bonus5',
                displayName: '. . .',
                desc: 'The attention of . . . is getting stronger. A whole bunch of thoughts, questions, and strange feelings constantly try to merge into one. Feels like that entity feels quite proud of your strength.',
                icon: [32, 1, "magixmod"],
                req: { 'tribalism': false },
                cost: {},
                category: 'misc'
            });
            new G.Tech({
                name: 'bonus6',
                displayName: '. . .',
                desc: 'The attention of that unidentified entity feels like it is fully granted. //<small>13th Seraphin, isn\'t he?</small>',
                icon: [32, 0, "magixmod"],
                req: { 'tribalism': false },
                cost: {},
                category: 'misc'
            });
            new G.Trait({
                name: 'faunal vampirism',
                desc: '@some [hunter]s and [fisher]s will start to occasionally drink blood from living animals and their [corpse]s, increasing [spookiness] but harming [health] even more, and increasing people\'s fear, harming [happiness] in exchange for more [spookiness]. //Note: [faunal vampirism] works only during Halloween. That means after Halloween, [faunal vampirism] and its [health] harm will stop. //<small>That is even more eww than biting a human</small>',
                icon: [12, 9, 'seasonal'],
                cost: { 'faith': 50, 'culture': 50 },
                req: { '"dark season"': true, 'belief in the beforelife': true },
                category: 'seasonal',
                chance: 300,
                effects: [
                    {
                        type: 'function', func: function () {
                            if (day + leap >= 289 && day + leap <= 305) {
                                G.getDict('hunter').effects.push({ type: 'gather', what: { 'spookiness xp': 0.3 }, chance: 1 / 2, notMode: 'endurance' });
                                G.getDict('hunter').effects.push({ type: 'gather', what: { 'health': -0.2 }, chance: 1 / 2, notMode: 'endurance' });
                                G.getDict('fisher').effects.push({ type: 'gather', what: { 'spookiness xp': 0.05 }, chance: 1 / 2, notMode: 'catch by hand' });
                                G.getDict('fisher').effects.push({ type: 'gather', what: { 'health': -0.02 }, chance: 1 / 2, notMode: 'catch by hand' });
                                G.getDict('fishers & hunters camp').effects.push({ type: 'gather', what: { 'spookiness xp': 5 } });
                                G.getDict('fishers & hunters camp').effects.push({ type: 'gather', what: { 'health': -0.5 } });
                            }
                        }
                    }
                ]
            });
            new G.Tech({
                name: 'glorious agriculture', category: 'tier2',
                desc: 'Unlocks [wheat farmland,Farmlands] for [land of the Past,ancestors world]. [wheat farmland,Farmlands] not only produce [wheat, Food], but also provide a small amount of [housing] and [food storage].',
                icon: [3, 9, "magixmod"],
                req: { 'ancestors world housing': true, 'leaves of wisdom': true },
                cost: { 'insight II': 151, 'culture II': 40, 'influence II': 10, 'science': 10 },
                effects: [
                ],
            });
            new G.Tech({
                name: 'ancestors world housing conceptions', category: 'tier1',
                desc: 'This technology doesn\'t unlock new housing yet. But, in the future, you will obtain a similar technology that finally will unlock new [housing].',
                icon: [6, 8, "magixmod"],
                cost: { 'insight': 1000, 'culture': 390, 'inspiration': 16, 'faith': 259 },
                req: { 'ancestors world building': true },
            });
            new G.Tech({
                name: 'ancestors world housing', category: 'tier2',
                desc: 'Allows you to unlock the [treehouse] in this world.',
                icon: [7, 8, "magixmod"],
                cost: { 'insight II': 70 },
                req: { 'ancestors world building': true, 'ancestors world housing conceptions': true, 'cozy building': true },
            });
            //Ancestors traits
            new G.Trait({
                name: 'at1',
                displayName: 'Ancestors trait #1 Authority in churches',
                desc: '@[church,Churches] and [cathedral]s have a small chance to generate [influence]. Every 3 [church,Churches] and [cathedral]s increase the annual influence bonus by 1. In addition, getting this trait provides 25 [authority].',
                icon: [16, 34, "magixmod", 22, 1],
                cost: {},
                chance: 250,
                effects: [
                    { type: 'provide res', what: { 'authority': 25 } },
                ],
                req: { 'the ancestors call': true, '7th essence': true, 'roots of insight': true, 'at5': false },
                category: 'ancestors',
            });
            new G.Trait({
                name: 'at2',
                displayName: 'Ancestors trait #2 Water safety',
                desc: 'Allows you to use 1 more percent of your [wtr,Oceans]. //<small>How divine!</small>',
                icon: [15, 34, "magixmod", 22, 1],
                cost: {},
                chance: 250,
                req: { 'the ancestors call': true, '7th essence': true, 'at4': false },
                category: 'ancestors',
            });
            new G.Trait({
                name: 'at3',
                displayName: 'Ancestors trait #3 Science transmutation',
                desc: '@unlocks the [transcendentalist], who can convert a few hundred [insight] into 1 [science]. However, it has a very high chance of wasting [insight], providing nothing in return. @further researches may improve the performance of this new mode.',
                icon: [14, 34, "magixmod", 22, 1],
                cost: {},
                chance: 250,
                req: { 'the ancestors call': true, '7th essence': true },
                category: 'ancestors',
            });
            new G.Trait({
                name: 'at4',
                displayName: 'Ancestors trait #4 Aquatic protection',
                desc: '@[boat]s become less likely to sink.',
                icon: [13, 34, "magixmod", 22, 1],
                cost: {},
                chance: 250,
                req: { 'the ancestors call': true, '7th essence': true, 'at2': false },
                category: 'ancestors',
            });
            new G.Trait({
                name: 'at5',
                displayName: 'Ancestors trait #5 Afterlife punishment',
                //desc: '@[thief,Thieves] are a quarter more likely to be killed for their actions, so their spawn rate is reduced by a quarter. @harms [happiness] with [fear of death], while with [acceptance of death], this trait makes everyone less scared of [thief,Thieves]. @[fear of death] reduces their spawn rate by an additional 5% @[acceptance of death] increases the probability of [thief] being sentenced to death instead of being sent to prison by 2.5%//<small>Just don\'t execute them in public please.</small>',
                desc: '@[thief,Thieves] are more likely to be killed for their actions, so their spawn rate is reduced by a quarter. However, they end up living twice as long!//<small>Just don\'t execute them in public please.</small>',
                icon: [12, 34, "magixmod", 22, 1],
                cost: {},
                chance: 250,
                req: { 'the ancestors call': true, '7th essence': true, 'at1': false },
                category: 'ancestors',
            });
            new G.Tech({
                name: 'essential transmutation II', category: 'tier2',
                desc: '@[transcendentalist]s are five times as efficient, but will only use [insight II] from now on. @[dreamer]s will have a four times larger chance to succeed at transmuting knowledge essentials! //<small>Looks like this civilization will create a new type of science soon!</small>',
                icon: [17, 34, "magixmod"],
                cost: { 'insight II': 15, 'science': 5, 'mana': 500 },
                req: { 'at3': true, 'symbolism II': true },
            });
            new G.Trait({
                name: 'fear of revenants',
                desc: '@[grave]s and [family graves,Cemetaries] generate [spookiness].//<small>You know that you are safe, yet you still feel scared while seeing these graves, which is pretty common, right? Others also do and feel the same.</small>',
                icon: [13, 9, 'seasonal'],
                cost: { 'faith': 50, 'culture': 50 },
                req: { '"dark season"': true, 'belief in revenants': true },
                category: 'seasonal',
                effects: [
                    {
                        type: 'function', func: function () {
                            //so it only applies while halloween is active
                            if (day + leap >= 289 && day + leap <= 305) {
                                G.getDict('grave').effects.push({ type: 'gather', what: { 'spookiness': 0.6 }, chance: 0.2 });
                                G.getDict('single grave').effects.push({ type: 'gather', what: { 'spookiness': 0.2 }, chance: 0.2 });
                                G.getDict('family graves').effects.push({ type: 'gather', what: { 'spookiness': 0.6 }, chance: 0.5 });
                                G.getDict('cemetary of Plain Island').effects.push({ type: 'gather', what: { 'spookiness': 5 } });
                            }
                        }
                    }
                ],
                chance: 30
            });
            new G.Trait({
                name: 'cold heart',
                desc: '@unhappiness from a lack of [fire pit]s or other heating sources is halved and [health] gain from warmth will be decreased by 1.5% (at other times it will be 2.5%). @happiness from having [fire pit]s or other heating sources is decreased by 10%  //<small>Your tribe is getting used to low temperatures, meaning that they\'ll have to partially accept that fact in order to survive and making your civilization become unforgettable.</small>',
                icon: [20, 34, "magixmod", 24, 1],
                cost: { 'culture': 10 },
                req: { 'fire-making': true, 'hot heart': false, 'neutral heart': false, 'fluid heart': false, 'oral tradition': true },
                chance: 10,
                lifetime: function () { return 125 + ((this.yearOfObtainment % 100) - 50) },
                category: 'long'
            });
            new G.Trait({
                name: 'hot heart',
                desc: '@unhappiness from a lack of [fire pit]s or other heating sources is increased by 50%. @happiness from having [fire pit]s or other heating sources is increased by a quarter//<small>Your tribe needs warmth. They really love the warmth brought to them by fire or other heating sources.</small>',
                icon: [21, 34, "magixmod", 26, 0, "magixmod"],
                cost: { 'culture': 10 },
                req: { 'fire-making': true, 'cold heart': false, 'neutral heart': false, 'fluid heart': false, 'oral tradition': true },
                chance: 10,
                lifetime: function () { return 125 + ((this.yearOfObtainment % 100) - 50) },
                category: 'long'
            });
            new G.Trait({
                name: 'neutral heart',
                desc: '@[happiness] from having or lacking [fire pit]s or other heating sources isn\'t increased or decreased in any way. //<small>simply, it\'s neutral.</small>',
                icon: [22, 34, "magixmod", 22, 1],
                cost: { 'culture': 10 },
                req: { 'fire-making': true, 'cold heart': false, 'hot heart': false, 'fluid heart': false, 'oral tradition': true },
                chance: 10,
                lifetime: function () { return 125 + ((this.yearOfObtainment % 100) - 50) },
                category: 'long'
            });
            new G.Trait({
                name: 'fluid heart',
                desc: '@unhappiness from a lack of [fire pit]s or other heating sources is fluid, meaning every some period of time it will switch between: @being increased by a quarter @being reduced by a quarter <>[happiness] gain from having heat sources will also switch between: @being increased by 5% @being decreased by 5% //<small>Your tribe probably is not going to clearly state if they are fine with cold nights or they prefer warmth and safety. That\'s why they will change their statement sometimes.</small>',
                icon: [9, 15, "magixmod", 23, 34, "magixmod"],
                cost: { 'culture': 10 },
                req: { 'fire-making': true, 'cold heart': false, 'hot heart': false, 'neutral heart': false, 'oral tradition': true },
                chance: 10,
                lifetime: function () { return 50 + ((this.yearOfObtainment % 40) - 20) },
                category: 'short'
            });
            new G.Trait({
                name: 'nudist culture',
                desc: '@unhappiness from a lack of [basic clothes,Clothing] is halved. @[basic clothes,Clothing] brings 5% or 10% less [happiness] and improves [health] 2.5% or 4% less.',
                icon: [19, 34, "magixmod", 24, 1],
                cost: { 'culture': 10 },
                req: { 'weaving': true, 'strict dress code': false, 'clothing unconcern': false, 'fluid dress code': false },
                chance: 10,
                lifetime: function () { return 80 + (((this.yearOfObtainment + 25) % 125) - 5) },
                category: 'long'
            });
            new G.Trait({
                name: 'strict dress code',
                desc: '@unhappiness from a lack of [basic clothes,Clothing] is multiplied by 1.5.//<small>Strict dress codes may affect relationships between people. Sometimes it feels unfair and sounds stupid, doesn\'t it?</small>',
                icon: [19, 34, "magixmod", 26, 0, "magixmod"],
                cost: { 'culture': 10 },
                req: { 'weaving': true, 'nudist culture': false, 'fluid dress code': false, 'clothing unconcern': false },
                chance: 10,
                lifetime: function () { return 80 + (((this.yearOfObtainment + 25) % 125) - 5) },
                category: 'long'
            });
            new G.Trait({
                name: 'clothing unconcern',
                desc: '@[happiness] from having or lacking [colored clothing,Clothing] isn\'t increased or decreased in any way. //<small>simply, it\'s just neutral.</small>',
                icon: [19, 34, "magixmod", 22, 1],
                cost: { 'culture': 10 },
                req: { 'weaving': true, 'fluid dress code': false, 'nudist culture': false, 'strict dress code': false },
                chance: 10,
                lifetime: function () { return 80 + (((this.yearOfObtainment + 25) % 125) - 5) },
                category: 'long'
            });
            new G.Trait({
                name: 'fluid dress code',
                desc: 'unhappiness from a lack of [basic clothes,Clothing] or other heating sources is fluid, meaning every some period of time it will switch between: @being increased by a quarter @being reduced by a quarter <>[happiness] gain from having clothing will also switch between: @being increased by 4% @being reduced by 4% //<small>Dress code will kind of vary for your people, it seems.</small>',
                icon: [9, 15, "magixmod", 24, 34, "magixmod"],
                cost: { 'culture': 10 },
                req: { 'weaving': true, 'clothing unconcern': false, 'nudist culture': false, 'strict dress code': false },
                chance: 10,
                lifetime: function () { return 150 + (((this.yearOfObtainment + 25) % 125) - 5) },
                category: 'long'
            });
            new G.Trait({
                name: 'decent nourishment',
                desc: '@unhappiness from eating [bugs] and [spoiled food] is doubled. @<b><font color="#f70054">Note: This trait is rather temporary and has a varied lifetime, but has a chance of becoming permanent.</font></b>//<small>But what if this is only food you have?...Here\'s some advice: do not even think about serving them any sort of worms at all. Just throw it all away or eat it yourself!</small>',
                icon: [8, 11, 26, 0, "magixmod"],
                chance: 5,
                req: { 'insects as food': 'on', 'insect-eating': false, 'worm culture': false },
                effects: [
                    { type: 'function', func: function () { G.getDict('bugs').turnToByContext['eating']['happiness'] *= 2; G.getDict('spoiled food').turnToByContext['eating']['happiness'] *= 2; } },
                ],
                lifetime: function () { return 10 + (this.yearOfObtainment + (this.yearOfObtainment % 20)) % 191 > 175 ? Infinity : 10 + (this.yearOfObtainment + 20) % 191 },
                switchCategory: false,
                category: 'main'
            });
            new G.Trait({
                name: 'worm culture',
                desc: '@your people are no longer unhappy when eating [bugs]. @in addition, one-third of its [happiness] harm will turn into a <b>boost</b>. @<b><font color="#f70054">Note: This trait is rather temporary and has a varied lifetime, but has a chance of becoming permanent.</font></b>//<small>There are some countries that put worms into dishes. Consumers are okay with that, as they say it improves the dish\'s taste!</small>',
                icon: [8, 11, 24, 1],
                chance: 15,
                req: { 'insects as food': 'on', 'insect-eating': false, 'decent nourishment': false },
                effects: [
                    { type: 'function', func: function () { G.getDict('bugs').turnToByContext['eating']['happiness'] /= -3; } }, //negate and divide by 3
                ],
                lifetime: function () { return 10 + (this.yearOfObtainment + (this.yearOfObtainment % 20)) % 191 > 175 ? Infinity : 10 + (this.yearOfObtainment + 20) % 191 },
                switchCategory: false,
                category: 'main'
            });
            new G.Trait({
                name: 'death indifference',
                desc: '@unhappiness from death is not affected in any way. @may evolve into more complex spiritual thinking...',
                icon: [8, 8, "magixmod"],
                cost: { 'culture': 8, 'insight': 1 },
                chance: 20,
                category: 'long',
                lifetime: function () { return 300 + ((this.yearOfObtainment % 250) - 125) },
                req: { 'language': true, 'spark\'o religion': true, 'fear of death': false, 't2': false, 'acceptance of death': false, 'death scepticism': false },
                effects: [
                    { type: 'provide res', what: { 'dark decay': 50 } },
                    {
                        type: 'function', func: function () {
                            G.getDict('belief in the afterlife').req = { 'death indifference': true, 'oral tradition': true, 'spark\'o religion': true, 'belief in the beforelife': false };
                            G.getDict('belief in the beforelife').req = { 'death indifference': true, 'oral tradition': true, 'spark\'o religion': true, 'belief in the afterlife': false, 'ritual necrophagy': false };
                        }
                    }
                ],
            });
            new G.Trait({
                name: 'death scepticism',
                desc: '@unhappiness from death is fluid, meaning that its effect will change between: @being increased by one-third @being reduced by one-third. <> @may evolve into more complex spiritual thinking @<b><font color="#f70054">Note: This trait is rather temporary, but there is a slight chance that this trait will become permanent.</font></b>',
                icon: [9, 15, "magixmod", 25, 34, "magixmod"],
                cost: { 'culture': 4, 'insight': 1 },
                chance: 50,
                category: 'long',
                lifetime: function () { return 300 + ((this.yearOfObtainment % 250) - 125) },
                req: { 'language': true, 'spark\'o religion': true, 'fear of death': false, 't2': false, 'acceptance of death': false, 'death indifference': false },
                effects: [
                    { type: 'provide res', what: { 'dark decay': 50 } },
                    {
                        type: 'function', func: function () {
                            G.getDict('belief in the afterlife').req = { 'death scepticism': true, 'oral tradition': true, 'spark\'o religion': true, 'belief in the beforelife': false };
                            G.getDict('belief in the beforelife').req = { 'death scepticism': true, 'oral tradition': true, 'spark\'o religion': true, 'belief in the afterlife': false, 'ritual necrophagy': false };
                        }
                    }
                ],
            });
            new G.Trait({
                name: 'meat diet',
                desc: '@allows [healer]s to generate  some [health] @cooked and cured [meat] will generate 10% more [health]',
                icon: [26, 34, "magixmod"],
                cost: { 'culture': 150, 'wisdom': 25, 'insight': 100, 'influence': 10 },
                chance: 120,
                effects: [
                    { type: 'function', func: function () { G.getDict('cooked meat').turnToByContext['eating']['health'] *= 1.1; } },
                    { type: 'function', func: function () { G.getDict('cured meat').turnToByContext['eating']['health'] *= 1.1; } },
                    { type: 'function', func: function () { G.getDict('cooked seafood').turnToByContext['eating']['health'] *= 1.1; } },
                    { type: 'function', func: function () { G.getDict('cured seafood').turnToByContext['eating']['health'] *= 1.1; } },
                ],
                req: { 'juice-crafting': true, 'nutrition': false },
                lifetime: function () { return Math.pow(this.yearOfObtainment, 3) % 1000 },
                switchCategory: false,
            });
            //New DTs and ATs . These ones can be only obtained in the beforelife part
            function ContextBuff(context, mult) {
                for (var i in G.goods) {
                    if (G.goods[i].res[context] == undefined) continue;
                    else {
                        for (var j in G.goods[i].res[context]) {
                            G.goods[i].res[context][j] *= mult;
                        }
                    }
                }
            }
            new G.Trait({
                name: 'dt25',
                displayName: 'Devil\'s trait #25 Miner\'s curse',
                desc: 'Every good provides 2% less resources from mining (regardless of mining depth) //<small>Today I have broken 3 stone pickaxes.</small>',
                icon: [1, 34, "magixmod", 26, 0, "magixmod"],
                cost: { 'culture II': 10, 'influence II': 1, 'wisdom': 10, 'faith II': 1 },
                effects: [{ type: 'function', func: function () { ContextBuff('mine', 0.98) } }],
                req: { 'doctrine of the dark wormhole 5/5': true, 'at6': false, 'belief in the beforelife': true },
                chance: 50,
                category: 'devils'
            });
            new G.Trait({
                name: 'dt26',
                displayName: 'Devil\'s trait #26 Quarrial insecurity',
                desc: 'Every good provides 2% less resources from quarrying (regardless of quarrying depth) //<small>Are we sure this mineral is the right kind? How is fear devouring our minds while we are in a quarry?</small>',
                icon: [3, 34, "magixmod", 26, 0, "magixmod"],
                cost: { 'culture II': 10, 'influence II': 1, 'wisdom': 10, 'faith II': 1 },
                effects: [{ type: 'function', func: function () { ContextBuff('mine', 0.98) } }],
                req: { 'doctrine of the dark wormhole 5/5': true, 'at7': false, 'belief in the beforelife': true },
                chance: 50,
                category: 'devils'
            });
            new G.Trait({
                name: 'dt27',
                displayName: 'Devil\'s trait #27 not durable axes',
                desc: 'Every good provides 2% less resources from chopping. //<small>These axes aren\'t as good as they said they were.</small>',
                icon: [5, 34, "magixmod", 26, 0, "magixmod"],
                cost: { 'culture II': 10, 'influence II': 1, 'wisdom': 10, 'faith II': 1 },
                effects: [{ type: 'function', func: function () { ContextBuff('chop', 0.98) } }],
                req: { 'doctrine of the dark wormhole 5/5': true, 'at8': false, 'belief in the beforelife': true },
                chance: 50,
                category: 'devils'
            });
            new G.Trait({
                name: 'dt28',
                displayName: 'Devil\'s trait #28 Filthy mana',
                desc: 'Wizardry is weakened by 5%. //<small>This mana is FAKE! I am SURE OF IT!</small>',
                icon: [7, 34, "magixmod", 26, 0, "magixmod"],
                cost: { 'culture II': 10, 'influence II': 1, 'wisdom': 10, 'faith II': 1 },
                req: { 'doctrine of the dark wormhole 5/5': true, 'at9': false, 'belief in the beforelife': true },
                chance: 50,
                category: 'devils'
            });
            new G.Trait({
                name: 'dt29',
                displayName: 'Devil\'s trait #29 Awakening of the devil',
                desc: 'Triggers two of the first 18 devil\'s traits. @has a chance to get [dt9] if not obtained during this run. //<small>dark forces are now awakening</small>',
                icon: [9, 34, "magixmod", 26, 0, "magixmod"],
                cost: { 'culture II': 10, 'influence II': 1, 'wisdom': 10, 'faith II': 1 },
                effects: [
                    {
                        type: 'function', func: function () {
                            var interval = setInterval(function () {
                                if (!G.resByName["demon decay"]) {
                                    return
                                }
                                clearInterval(interval)
                                if (G.getRes('demon decay').amount == 0) {
                                    var k = Math.ceil(Math.random() * 18);
                                    var m = Math.ceil(Math.random() * 18);
                                    while (!G.has('dt' + k)) k = Math.ceil(Math.random() * 18);
                                    while (!G.has('dt' + m)) m = Math.ceil(Math.random() * 18);
                                    G.gainTrait(G.traitByName['dt' + k]);
                                    G.gainTrait(G.traitByName['dt' + m]);
                                    G.gain('demon decay', 1, 'spell');
                                }
                            }, 100);
                        }
                    },
                ],
                req: { 'doctrine of the dark wormhole 5/5': true, 'at10': false, 'belief in the beforelife': true },
                chance: 50,
                category: 'devils'
            });
            new G.Trait({
                name: 'dt30',
                displayName: 'Devil\'s trait #30 Smart fishes',
                desc: 'Every good provides 2% less resources from fishing. //<small>these fishes are really smart...or are they? Or are they controlled by smart forces and in reality they are a little stupid?</small>',
                icon: [11, 34, "magixmod", 26, 0, "magixmod"],
                cost: { 'culture II': 10, 'influence II': 1, 'wisdom': 10, 'faith II': 1 },
                effects: [{ type: 'function', func: function () { ContextBuff('fish', 0.98) } }],
                req: { 'doctrine of the dark wormhole 5/5': true, 'at11': false, 'belief in the beforelife': true },
                chance: 50,
                category: 'devils'
            });
            new G.Trait({
                name: 'at6',
                displayName: 'Ancestors trait #6 Old Miner\'s luck',
                desc: 'Every good provides 1% more resources from mining (regardless of mining depth) //<small>Now hard work down in the mines will feel more rewarding.</small>',
                icon: [0, 34, "magixmod", 22, 1],
                cost: { 'culture II': 10, 'influence II': 1, 'wisdom': 10, 'faith II': 1 },
                effects: [{ type: 'function', func: function () { ContextBuff('mine', 1.01) } }],
                req: { 'doctrine of the dark wormhole 5/5': true, 'dt25': false, 'belief in the beforelife': true },
                chance: 50,
                category: 'ancestors'
            });
            new G.Trait({
                name: 'at7',
                displayName: 'Ancestors trait #7 The Quarry\'s Lord',
                desc: 'Every good provides 1% more from quarrying (regardless of depth) //<small>just look at this big bunch of cut stones behind me!</small>',
                icon: [2, 34, "magixmod", 22, 1],
                cost: { 'culture II': 10, 'influence II': 1, 'wisdom': 10, 'faith II': 1 },
                effects: [{ type: 'function', func: function () { ContextBuff('quarry', 1.01) } }],
                req: { 'doctrine of the dark wormhole 5/5': true, 'dt26': false, 'belief in the beforelife': true },
                chance: 50,
                category: 'ancestors'
            });
            new G.Trait({
                name: 'at8',
                displayName: 'Ancestors trait #8 Blessing of the forests',
                desc: 'Every good provides 1% more from chopping. //<small>\u201cHer blessing is real! I have just enough wood I need for this winter,\u201d an old woodcutter says.</small>',
                icon: [4, 34, "magixmod", 22, 1],
                cost: { 'culture II': 10, 'influence II': 1, 'wisdom': 10, 'faith II': 1 },
                effects: [{ type: 'function', func: function () { ContextBuff('chop', 1.01) } }],
                req: { 'doctrine of the dark wormhole 5/5': true, 'dt27': false, 'belief in the beforelife': true },
                chance: 50,
                category: 'ancestors'
            });
            new G.Trait({
                name: 'at9',
                displayName: 'Ancestors trait #9 Ancestor wizardry',
                desc: 'Units related to magic and wizardry produce 3.5% more of magical resources. //<small>Bibiddi bobiddi boo! Did it sound familiar to you?</small>',
                icon: [6, 34, "magixmod", 22, 1],
                cost: { 'culture II': 10, 'influence II': 1, 'wisdom': 10, 'faith II': 1 },
                req: { 'doctrine of the dark wormhole 5/5': true, 'dt28': false, 'belief in the beforelife': true },
                chance: 50,
                category: 'ancestors'
            });
            new G.Trait({
                name: 'at10',
                displayName: 'Ancestors trait #10 Decaying devil',
                desc: 'Removes two of your Devil\'s traits. (Applies to these traits that are from 1 to 18, excluding [dt9].) These removed traits won\'t return for the rest of the run! //<small>dark forces are fading away</small>',
                icon: [8, 34, "magixmod", 22, 1],
                cost: { 'culture II': 10, 'influence II': 1, 'wisdom': 10, 'faith II': 1 },
                req: { 'doctrine of the dark wormhole 5/5': true, 'dt29': false, 'belief in the beforelife': true },
                chance: 50,
                effects: [
                    {
                        type: 'function', func: function () {
                            var interval = setInterval(function () {
                                if (!G.resByName["demon decay"]) {
                                    return
                                }
                                clearInterval(interval)
                                if (G.getRes('demon decay').amount == 0) {
                                    var removed = 0;
                                    for (var i in G.trait) {
                                        if (removed > 1) break;
                                        if (G.trait[i].category != 'devils' || G.trait[i].name == 'dt9') continue; //why would we bother ourself with non-devils and lucky #9?
                                        if (G.trait[i].category == 'devils' && G.has(G.trait[i].name)) {
                                            G.deleteTrait(G.trait[i].name);
                                            removed++;
                                        }
                                    }
                                    var counter;
                                    for (var i in G.trait) {
                                        if (counter > 16) break; //we negated it all
                                        if (G.trait[i].category != 'devils') continue;
                                        if (G.trait[i].category == 'devils') {
                                            counter++;
                                            G.trait[i].req = { 'tribalism': false };
                                        }
                                    }
                                    G.gain('demon decay', 1, 'spell')
                                };
                            }, 100);
                        }
                    },
                ],
                category: 'ancestors'
            });
            new G.Trait({
                name: 'at11',
                displayName: 'Ancestors trait #11 Fisher\'s good old luck',
                desc: 'Every good provides 0.5% more resources from fishing.',
                icon: [10, 34, "magixmod", 22, 1],
                cost: { 'culture II': 10, 'influence II': 1, 'wisdom': 10, 'faith II': 1 },
                effects: [{ type: 'function', func: function () { ContextBuff('fish', 1.005) } }],
                req: { 'doctrine of the dark wormhole 5/5': true, 'dt30': false, 'belief in the beforelife': true },
                chance: 50,
                category: 'ancestors'
            });
            new G.Trait({
                name: 'ground weapons',
                desc: '@all [stone weapons,Weaponry] out of basic materials such as [stone] and [stick,Wood] will be crafted 20% faster. More complex weaponry will be crafted 10% faster. All weaponry will decay 5% slower.',
                icon: [27, 34, "magixmod"],
                cost: { 'insight': 7 },
                chance: 15,
                switchCategory: false,
                req: { 'spears': true, 'ground tools': false, 'ground pots': false },
                lifetime: function () { return Math.pow(this.yearOfObtainment % 10, 4) > 7 ? undefined : Infinity },
            });
            new G.Trait({
                name: 'ground pots',
                desc: '@units on modes related to [pottery] craft 20% faster. @[basket-weaving] is boosted by 10%.',
                icon: [28, 34, "magixmod"],
                cost: { 'insight': 7 },
                chance: 15,
                switchCategory: false,
                req: { 'pottery': true, 'ground weapons': false, 'ground tools': false },
                lifetime: function () { return Math.pow(this.yearOfObtainment % 10, 4) < 4 ? undefined : Infinity },
            });
            new G.Trait({
                name: 'consumption stability',
                desc: '@people\'s [food] consumption isn\'t affected by this trait in any way. @may unlock more food habit traits //<small>What else do you need except for breakfast, lunch, and dinner? Looks like your tribe doesn\'t need more than a few dishes a day.</small>',
                icon: [10, 15, "magixmod", 19, 1],
                cost: { 'culture': 7.5 },
                chance: 60,
                lifetime: function () { return 150 + ((this.yearOfObtainment % 100) - 50) },
                category: 'long',
                effects: [
                    { type: 'function', func: function () { G.getDict('healthy life').req = { 'consumption stability': true, 'ambrosium crafting': true, 'supreme healthy life': false } } },
                ],
                req: { 'tribalism': true, 'joy of eating': false, 'culture of moderation': false, 'unstable eating habits': false, 'unstable consumption habits': false },
            });
            new G.Trait({
                name: 'unstable eating habits',
                desc: '@people\'s [food] consumption is fluid, meaning that it may change over time. The consumption modifier will switch every so often between: @5% less but deriving less joy from eating @5% more but deriving more joy from eating <> @may unlock more food habit traits //<small>In real human history diets, nutritional habits were also "fluid" to some extent, right?</small>',
                icon: [9, 15, "magixmod", 8, 15, "magixmod"],
                cost: { 'culture': 7.5 },
                chance: 70,
                lifetime: function () { return 150 + ((this.yearOfObtainment % 100) - 50) },
                effects: [
                    { type: 'function', func: function () { G.getDict('healthy life').req = { 'unstable eating habits': true, 'juicy expertise': true, 'supreme healthy life': false }; G.getDict('supreme healthy life').req = { 'unstable eating habits': true, 'juicy expertise': true, 'healthy life': false } } },
                ],
                category: 'long',
                req: { 'tribalism': true, 'culture of moderation': false, 'joy of eating': false, 'consumption stability': false, 'unstable drinking habits': false, 'unstable consumption habits': false },
            });
            new G.Tech({
                displayName: 'Crime and punishment (heavy)',
                name: 'CaP(cruel)',
                desc: '@provides more detailed laws related to criminals in your civilization. @you may unlock other variations of this research depending on your civilization\'s relation to death. @this variation introduces a death sentence for various crimes such as robbery or murder, following "an eye for an eye, a tooth for a tooth" more strictly, at the cost of more criminals trying to flee.',
                icon: [30, 34, "magixmod", 26, 0, "magixmod"],
                cost: { 'influence': 25 },
                req: { 'code of law': true, 'CaP': false, 'CaP(light)': false },
                chance: 200,
                effects: [
                    {
                        type: 'function', func: function () {
                            G.getDict('imprisonment').req = { 'CaP(cruel)': true, 'construction': true }
                        }
                    }
                ],
            });
            new G.Tech({
                displayName: 'Crime and punishment (light)',
                name: 'CaP(light)',
                desc: '@provides more detailed laws related to criminals in your civilization. @you may unlock other variations of this research depending on your civilization\'s relation to death. @this variation doesn\'t contain tortures or death penalties, decreasing the rate of criminals fleeing at the cost of more freed criminals. For much more serious crimes, people may simply be moved away.',
                icon: [30, 34, "magixmod", 24, 1],
                cost: { 'influence': 25 },
                req: { 'code of law': true, 'CaP(cruel)': false, 'CaP': false },
                chance: 200,
                effects: [
                    {
                        type: 'function', func: function () {
                            G.getDict('imprisonment').req = { 'CaP(light)': true, 'construction': true }
                        }
                    }
                ],
            });
            new G.Tech({
                name: 'city planning II', category: 'upgrade',
                desc: '@[architect]s can construct 2 more buildings each (so instead 10 houses per 1 architect, now it will be 12 per architect). <>They may also plan some decorations for everyone around! //<small>This knowledge may make cities constructed by your civilization look much less cluttered and better-looking...who knows what decorations they can come up with?</small>',
                icon: [31, 34, "magixmod"],
                cost: { 'insight': 668, 'wisdom': 2 },
                req: { 'construction II': true, 'architects knowledge': true, 'will to know more': true },
            });
            new G.Tech({
                name: 'city planning III', category: 'upgrade',
                desc: '@[architect]s can construct 3 more buildings each (so instead of 12 houses per architect, it will be 15). <>Also, with each construction setup that an [architect] builds, you will get some [happiness].//<small>\u201cNow that street I walk along every day looks stunning,\u201d says an elder who lived has lived in the same house since their birth.</small>',
                icon: [32, 34, "magixmod"],
                cost: { 'insight II': 75, 'science': 10 },
                req: { 'city planning II': true, 'caretaking': true, 'eotm': true },
            });
            new G.Tech({
                name: 'city planning III(m)', category: 'upgrade',
                displayName: 'City planning III',
                desc: '[architect]s can construct 2 more buildings each (so instead of 12 houses per architect, it will be 14). //<small>That\'s moderation...the planning goes to the smallest, fastest, most efficient people with few decorations on the streets.</small>',
                icon: [33, 34, "magixmod"],
                cost: { 'insight II': 75, 'science': 10 },
                req: { 'city planning II': true, 'moderation': true, 'guilds unite': true },
            });
            new G.Tech({
                name: 'imprisonment', category: 'tier1',
                desc: '@[population,people] will now actively try to imprison [thief,Bad guys] temporarily until [guard]s can officially move them to [prison]s. @decreases theft rates @required to unlock [prison]s (along with [construction II] and [imprisonment II])',
                icon: [6, 15, "magixmod"],
                cost: { 'insight': 70 },
                req: { 'CaP': true, 'construction': true },
            });
            new G.Tech({
                name: 'imprisonment II', category: 'tier1',
                desc: '@unlocks [prison]s if [construction II] is researched. @[warehouse]s can store 5 [prisoner]s each should one dare to steal some resources.',
                icon: [0, 39, "magixmod", 5, 15, "magixmod"],
                cost: { 'insight': 700 },
                req: { 'plain island building': true, 'imprisonment': true },
                effects: [
                    {
                        type: 'function', func: function () {
                            G.getDict('prison space').hidden = false;
                            G.getDict('warehouse').desc = '@provides 4,000 [material storage] @can house 5 [prisoner]s<>A large building for storing materials. Staffed with two guards to prevent theft.';
                        }
                    }
                ]
            });
            new G.Tech({
                name: 'imprisonment III', category: 'tier2',
                desc: 'The chance for [prisoner]s escaping a [prison] is lowered by quite a bit, but each [prison] will use 20 more [worker]s for tighter security. Also changes what your [prison]s look like.',
                icon: [1, 39, "magixmod", 4, 16, "magixmod"],
                cost: { 'insight II': 35, 'science': 5 },
                req: { 'leaves of wisdom': true, 'imprisonment II': true },
                effects: [
                    {
                        type: 'function', func: function () {
                            G.getDict('prison').icon = [7, 15, "magixmod", 19, 12, "magixmod"];
                            G.getDict('prison').use['worker'] = 100;
                        }
                    },
                ],
            });
            new G.Trait({
                name: 'sharp edges',
                desc: '@the rate of [prison] escapes is reduced by a quarter //<small>Ouchie!</small>',
                icon: [6, 16, "magixmod"],
                cost: { 'culture': 100 },
                category: 'short',
                lifetime: 50,
                chance: 200,
                req: { 'imprisonment II': true, 'fragile bars': false },
            });
            new G.Trait({
                name: 'fragile bars',
                desc: '@the rate of [prison] escapes is increased by a quarter //<small>If these bars are just made of thick sticks it is no wonder why they can flee just like that...</small>',
                icon: [5, 16, "magixmod"],
                cost: { 'culture': 100 },
                category: 'short',
                lifetime: 50,
                chance: 200,
                req: { 'imprisonment II': true, 'sharp edges': false },
            });
            new G.Trait({
                name: 'longer prison sentences',
                desc: '@[prisoner]s spend more time in prisons and are sentenced for longer prison penalties. @the amount of freed prisoners decreases by 40% @the amount of escaping prisoners increases by 20%',
                icon: [4, 15, "magixmod"],
                cost: { 'culture': 100 },
                category: 'short',
                lifetime: 50,
                chance: 50,
                req: { 'imprisonment II': true, 'shorter prison sentences': false, 'CaP(light)': false },
            });
            new G.Trait({
                name: 'shorter prison sentences',
                desc: '@[prisoner]s spend less time in prisons and are sentenced for shorter prison penalties. @the amount of freed prisoners increases by 20% @the amount of escaping prisoners decreases by 40%',
                icon: [7, 16, "magixmod"],
                cost: { 'culture': 100 },
                category: 'short',
                lifetime: 50,
                chance: 50,
                req: { 'imprisonment II': true, 'longer prison sentences': false, 'CaP(cruel)': false },
            });
            new G.Trait({
                name: 'dry throats',
                desc: '@people drink 15% less [water], but derive less joy from drinking. @may unlock more drinking habit traits //<small>Don\'t drink less than 1 liter of water daily!</small>',
                icon: [3, 12, 34, 34, "magixmod"],
                cost: { 'culture': 7.5 },
                chance: 40,
                category: 'long',
                lifetime: function () { return 150 + ((this.yearOfObtainment % 100) - 50) },
                req: { 'tribalism': true, 'joy of drinking': false, 'drinking stability': false, 'unstable drinking habits': false, 'unstable consumption habits': false, 'culture of moderation': false },
            });
            new G.Trait({
                name: 'joy of drinking',
                desc: '@people drink 15% more [water], but are happier when drinking. @may unlock more drinking habit traits //<small>Don\'t drink too much. About 7 liters of water can kill a human.</small>',
                icon: [4, 12, 34, 34, "magixmod"],
                cost: { 'culture': 7.5 },
                chance: 40,
                category: 'long',
                lifetime: function () { return 150 + ((this.yearOfObtainment % 100) - 50) },
                req: { 'tribalism': true, 'dry throats': false, 'drinking stability': false, 'unstable drinking habits': false, 'joy of eating': false, 'unstable consumption habits': false },
            });
            new G.Trait({
                name: 'drinking stability',
                desc: '@people\'s drinkage isn\'t affected by this trait in any way. @may unlock more drinking habit traits //<small>They simply need several cups of water per day to be happy. Just watch them, they don\'t need more or less.</small>',
                icon: [10, 15, "magixmod", 34, 34, "magixmod"],
                cost: { 'culture': 7.5 },
                chance: 60,
                category: 'long',
                lifetime: function () { return 150 + ((this.yearOfObtainment % 100) - 50) },
                req: { 'tribalism': true, 'joy of drinking': false, 'dry throats': false, 'unstable drinking habits': false, 'unstable consumption habits': false },
            });
            new G.Trait({
                name: 'unstable drinking habits',
                desc: '@people\'s drinkage is fluid, meaning that it may change over time. The consumption modifier will switch every so often between: @5% less but deriving less joy from drinking @5% more deriving more joy from drinking <> @may unlock more drinking habit traits //<small>In real diets, nutritional habits might also be fluid, don\'t you think?</small>',
                icon: [9, 15, "magixmod", 35, 34, "magixmod"],
                cost: { 'culture': 7.5 },
                chance: 70,
                category: 'long',
                lifetime: function () { return 150 + ((this.yearOfObtainment % 100) - 50) },
                req: { 'tribalism': true, 'culture of moderation': false, 'joy of eating': false, 'drinking stability': false, 'unstable eating habits': false, 'unstable consumption habits': false },
            });
            new G.Trait({
                name: 'unstable consumption habits',
                desc: '@The amount that people eat is fluid, meaning that it will change gradually. The consumption modifier will switch every so often between: @5% less but slightly less [happiness] from eating @5% more and slightly more [happiness] from eating from consumption @2.5% more and not affecting [happiness] @2.5% less and not affecting [happiness] //<small>variety in its true form</small>',
                icon: [9, 15, "magixmod", 36, 34, "magixmod"],
                cost: { 'culture': 7.5 },
                chance: 250,
                category: 'long',
                lifetime: function () { return 250 + ((this.yearOfObtainment % 200) - 100) },
                req: { 'tribalism': true, 'culture of moderation': false, 'joy of eating': false, 'drinking stability': false, 'unstable eating habits': false },
            });
            new G.Trait({
                name: 'branches of wisdom',
                desc: 'The feeling of slowly extending knowledge is getting stronger and stronger. It feels like the [wisdom II,Wisdom tree] has so many branches that it is getting close to the amount of leaves! Suddenly one your scholars realizes that there are many more subjects than previously thought and drafts a brilliant paper that shows what else the world offers. @gain <b>1 extra technology choice when rolling researches</b>, 60 [wisdom II], and 250 [wisdom]. @[essential conversion tank]s become 25% faster.',
                icon: [26, 31, "magixmod"],
                req: { 'symbolism II': true, 'leaves of wisdom': false },
                chance: 25,
                effects: [
                    { type: 'provide res', what: { 'wisdom II': 60, 'wisdom': 250 } },
                    { type: 'function', func: function () { G.getDict('research box').choicesN++; } }
                ]
            });
            new G.Trait({
                name: 'art of death',
                desc: '@[corpse]s and their parts are now part of a new art, creating some [culture] at the cost of [health].@<b><font color="#f70054">Note: This trait is rather temporary, but there is a slight chance that this trait will become permanent.</font></b> //<small>ughhh</small>',
                icon: [15, 6, "magixmod"],
                cost: { 'culture': 25 },
                category: 'long',
                chance: 500,
                req: { 'tribalism': true, 'ritualism': true, 'belief in the beforelife': false, 'ritual necrophagy': false, 'belongings preservance': false },
                lifetime: function () { return ((this.yearOfObtainment + 350) % 450 >= 383 && (this.yearOfObtainment + 350) % 450 <= 400 ? Infinity : (this.yearOfObtainment + 350) % 450) }
            });
            new G.Trait({
                name: 'royal treatment',
                desc: '@[corpse]s are treated with full respect now, meaning people will be very respectful towards them. @<b><font color="#f70054">Note: This trait is rather temporary, but there is a slight chance that this trait will become permanent.</font></b>//<small>That is glorious. Just pure glory. Treating dead bodies with a royal attitude will surely make everybody less scared of death.</small>',
                icon: [19, 1, "magixmod"],
                cost: { 'culture': 25 },
                category: 'long',
                chance: 750,
                req: { 'tribalism': true, 'ritualism': true, 'belief in the beforelife': true, 'belongings preservance': false },
                lifetime: function () { return ((this.yearOfObtainment + 350) % 450 >= 383 && (this.yearOfObtainment + 350) % 450 <= 400 ? Infinity : (this.yearOfObtainment + 350) % 450) }
            });
            new G.Trait({
                name: 'belongings preservance',
                desc: '@A [corpse,Dead person\'s] belongings become preserved and stored by the family instead of being taken for common use (unless the person didn\'t have one). @<b><font color="#f70054">Note: This trait is rather temporary, but there is a slight chance that this trait will become permanent.</font></b>',
                icon: [16, 6, "magixmod"],
                cost: { 'culture': 25 },
                category: 'long',
                chance: 500,
                req: { 'tribalism': true, 'ritualism': true, 'belief in the beforelife': true, 'royal treatment': false, 'art of death': false, 'ritual necrophagy': false },
                lifetime: function () { return ((this.yearOfObtainment + 350) % 450 >= 383 && (this.yearOfObtainment + 350) % 450 <= 400 ? Infinity : (this.yearOfObtainment + 350) % 450) }
            });
            new G.Tech({
                name: 'bII(normal)',
                displayName: 'Burial II', category: 'tier1',
                desc: '@Reduces the bad effects of [fear of death] and [belief in revenants] by 5%. <>@Funeral ceremonies are more common. @provides 30 [inspiration]',
                icon: [0, 39, "magixmod", 13, 23, "magixmod", 22, 1],
                cost: { 'insight': 510 },
                req: { 'burial': true, 'philosophy': true, 'bII(acceptance)': false },
                effects: [
                    { type: 'provide res', what: { 'inspiration': 30 } },
                ],
                chance: 15,
            });
            new G.Tech({
                name: 'physics III', category: 'tier1',
                desc: '@provides 10 [education] and 25 [wisdom II] @People\'s understanding of physics and anomalies in reality increases. From now on, people will be able to understand the 3-dimensional world more. //<small>So this thing moves here...</small>',
                icon: [1, 39, "magixmod", 16, 28, "magixmod"],
                cost: { 'insight II': 300, 'science': 100 },
                effects: [
                    { type: 'provide res', what: { 'education': 10, 'wisdom II': 25 } },
                ],
                req: { 'physics II': true, 'bigger university': true },
            });
            new G.Tech({
                name: 'mathV(sums)',
                displayName: 'Maths V', category: 'tier1',
                desc: '@provides 10 [education] and 25 [wisdom II] @By picking this mathematical tech, your scholars and mathematicians working in your university will mostly discover endless sums, sequences etc.//<small>Fibonacci, here we go...</small>',
                icon: [3, 39, "magixmod", 17, 28, "magixmod"],
                cost: { 'insight II': 500, 'science': 100 },
                effects: [
                    { type: 'provide res', what: { 'education': 10, 'wisdom II': 25 } },
                ],
                req: { 'maths IV': true, 'even bigger university': true, 'mathV(3dgeo)': false, 'mathV(algebra)': false },
            });
            new G.Tech({
                name: 'mathV(3dgeo)',
                displayName: 'Maths V', category: 'tier1',
                desc: '@provides 10 [education] and 25 [wisdom II] @By picking this mathematical tech, your scholars and mathematicians working in your university will mostly try to understand all secrets of 3 dimensional geometry.//<small>It is x axis, y axis, and z axis</small>',
                icon: [3, 39, "magixmod", 18, 28, "magixmod"],
                cost: { 'insight II': 500, 'science': 100 },
                effects: [
                    { type: 'provide res', what: { 'education': 10, 'wisdom II': 25 } },
                ],
                req: { 'maths IV': true, 'even bigger university': true, 'mathV(sums)': false, 'mathV(algebra)': false },
            });
            new G.Tech({
                name: 'mathV(algebra)',
                displayName: 'Maths V', category: 'tier1',
                desc: '@provides 10 [education] and 25 [wisdom II] @By picking this mathematical tech, your scholars and mathematicians working in your university will master algebra.//<small>3 variable equations?</small>',
                icon: [3, 39, "magixmod", 19, 28, "magixmod"],
                cost: { 'insight II': 500, 'science': 100 },
                effects: [
                    { type: 'provide res', what: { 'education': 10, 'wisdom II': 25 } },
                ],
                req: { 'maths IV': true, 'even bigger university': true, 'mathV(3dgeo)': false, 'mathV(sums)': false },
            });
            new G.Trait({
                name: 'carcass-looting',
                desc: '@[gatherer]s can loot carcasses granting some [meat] and [bone]s from dead [foxes,Animals]. @<b><font color="#f70054">Note: This trait is rather temporary and has a varied lifetime, but has a moderate chance to become permanent. Eventually, if this trait doesn\'t get adopted for good, it will no longer appear or swap with other traits from the primary category.</font></b>',
                icon: [21, 1, "magixmod"],
                chance: 1,
                req: { 'tribalism': true, 'scavenging': false, 'active exploration': false, 'dreaming': false },
                lifetime: function () { return 5 + (Math.pow(this.yearOfObtainment, 1.5) % 42 > 28 && Math.pow(this.yearOfObtainment, 1.5) % 42 < 32 ? Infinity : (this.yearOfObtainment * 2) % 75) }
            });
            new G.Trait({
                name: 'dreaming',
                desc: '@idle [worker]s gather [insight] with a tenth of the speed of a [dreamer]. @<b><font color="#f70054">Note: This trait is rather temporary and has a varied lifetime, but has a moderate chance to become permanent. Eventually, if this trait doesn\'t get adopted for good, it will no longer appear or swap with other traits from the primary category.</font></b>',
                icon: [21, 2, "magixmod"],
                chance: 1,
                req: { 'tribalism': true, 'scavenging': false, 'active exploration': false, 'carcass-looting': false },
                lifetime: function () { return 5 + (Math.pow(this.yearOfObtainment, 1.5) % 42 > 32 && Math.pow(this.yearOfObtainment, 1.5) % 42 < 36 ? Infinity : this.yearOfObtainment % 50) }
            });
            new G.Trait({
                name: 'active exploration',
                desc: '@hired [wanderer]s gather [insight] with 8% of the speed of a [dreamer] and gather resources with 8% of the speed of a [gatherer]. @<b><font color="#f70054">Note: This trait is rather temporary and has a varied lifetime, but has a moderate chance to become permanent. Eventually, if this trait doesn\'t get adopted for good, it will no longer appear or swap with other traits from the primary category.</font></b>',
                icon: [21, 3, "magixmod"],
                chance: 3,
                req: { 'tribalism': true, 'scavenging': false, 'carcass-looting': false, 'dreaming': false },
                lifetime: function () { return 3 + (Math.pow(this.yearOfObtainment, 1.5) % 42 > 4 && Math.pow(this.yearOfObtainment, 1.5) % 42 < 10 ? Infinity : (this.yearOfObtainment * 2) % 50) }
            });
            new G.Tech({
                name: 'symbI', category: 'upgrade',
                displayName: 'Symbolism',
                desc: '@[dreamer]s produce 40% more [insight]@obtaining techs now refund 1 [insight] for every 150 [insight] spent on research, rounded up.@adopting traits now provide 1 bonus [culture].<>The manifestation of one thing for the meaning of another; to make the cosmos relate to itself; this one focuses on colours. There are two types of [symbI] that you can unlock!',
                icon: [36, 11, "magixmod"],
                cost: { 'culture': 10, 'insight': 10 },
                req: { 'oral tradition': true, 'intuition': true, 'symbolism': false },
                effects: [
                    { type: 'provide res', what: { 'cultural balance': 3 } },
                    {
                        type: 'function', func: function () {
                            G.getDict('code of law').req = { 'sedentism': true, 'writing': true, 'chieftains': true };
                            G.getDict('druidism').req = { 'ritualism': true, 'language': true };
                            G.getDict('symbolism II').req = { 'oral tradition': true, 'ritualism II': true, 'Improved rhetoric': true, 'richer language': true };
                        }
                    }
                ],
            });
            new G.Tech({
                name: 'rafts', category: 'tier1',
                //TODO : fishing boats
                desc: '@Allows exploration through ocean shores @[rafts] are inefficient on the <b>Tundra</b>, <b>Prairie</b>, <b>Ice desert</b>, and <b>Forest</b> biomes<>//Rafts are good but a risky and uneasy way to explore the larger parts of the ocean. Depending on your closest location, consider picking [canoes] instead and make this tech be obtainable in a slightly later game stage.',
                icon: [22, 6, "magixmod"],
                cost: { 'insight': 15 },
                req: { 'tool-making': true, 'woodcutting': true, 'canoes': false },
                effects: [
                    { type: 'allow', what: ['shore exploring'] },
                    {
                        type: 'function', func: function () {
                            G.getDict('canoes').req = { 'tile inspection II': true, 'basic mapping': true, 'woodcutting': true };
                            if (!G.has('t6')) G.getDict('boat building').req = { 'carpentry': true, 'intuition': true, 'construction': true };
                        }
                    }
                ],
            });
            new G.Trait({
                name: 'symbolic cultural colors',
                desc: '@another [culture] point can be refunded every research, and the amount needed for each refund is reduced to 100. @having [symbolic cultural colors] or <b>this</b> trait allows you to get [coloral symbolism III] later on. @this trait happened because of small but important breakthroughts @<b><font color="#f70054">Note: This trait is rather temporary and has a long lifetime, with a slight chance to become permanent.</font></b>',
                icon: [0, 39, "magixmod", 35, 33, "magixmod"],
                cost: { 'culture': 75, 'insight': 10 },
                chance: 125,
                req: { 'symbI': true, 'philosophy': true, 'time measuring 2/2': true, 'symbolic knowledge colors': false },
                effects: [
                    { type: 'function', func: function () { G.getDict('coloral symbolism III').req = { 'doctrine of the dark wormhole 5/5': true, 'symbolism': false, 'symbolic cultural colors': true } } }
                ],
                lifetime: function () { return 120 + (Math.pow(this.yearOfObtainment, 1.5) % 42 > 32 && Math.pow(this.yearOfObtainment, 1.5) % 42 < 36 ? Infinity : (Math.round(this.yearOfObtainment * 1.4) % 150)) },
                category: 'long'
            });
            new G.Trait({
                name: 'symbolic knowledge colors',
                desc: '@another [insight] point can be refunded every research, and the amount needed for each refund is reduced to 100. @having [symbolic cultural colors] or <b>this</b> trait allows you to get [coloral symbolism III] later on. @this trait happened because of small but important breakthroughts @<b><font color="#f70054">Note: This trait is rather temporary and has a long lifetime, with a slight chance to become permanent.</font></b>',
                icon: [0, 39, "magixmod", 36, 33, "magixmod"],
                cost: { 'culture': 75, 'insight': 10 },
                chance: 125,
                req: { 'symbI': true, 'philosophy': true, 'time measuring 2/2': true, 'symbolic cultural colors': false },
                effects: [
                    { type: 'function', func: function () { G.getDict('coloral symbolism III').req = { 'doctrine of the dark wormhole 5/5': true, 'symbolism': false, 'symbolic knowledge colors': true } } }
                ],
                lifetime: function () { return 120 + (Math.pow(this.yearOfObtainment, 1.5) % 42 > 32 && Math.pow(this.yearOfObtainment, 1.5) % 42 < 36 ? Infinity : (Math.round(this.yearOfObtainment * 1.4) % 150)) },
                category: 'long'
            });
            new G.Trait({
                name: 'coloral symbolism III',
                desc: '@the [dreamer] bonus is increased by 15% @[lawyer]s, [chieftain]s, [druid]s, [cathedral]s, and [guru]s become 20% more efficient',
                icon: [1, 39, "magixmod", 36, 14, "magixmod"],
                cost: { 'culture II': 50, 'insight II': 100, 'science': 10 },
                chance: 125,
                category: 'knowledge',
                req: { 'doctrine of the dark wormhole 5/5': true, 'symbolism': false, 'symbolic knowledge colors': true },
            });
            new G.Tech({
                name: 'exploration trips', category: 'tier1',
                desc: '@unlocks a new mode for [wanderer]s, allowing them to discover nearby tiles if your primary terrain is decently explored.<>[wanderer]s will discover nearby terrain if their homeland is decently discovered.<>The alternative is [scouting], which can also be obtained at the same time upon reaching [wizardry]. (Be aware that not having [scouting] will prevent you from voyaging deeply into the ocean.)<>Keep in mind that to make <b>Exploration</b> units explore more terrain, you will need more researches.//Getting this increases the exploration softcap by a little bit.',
                icon: [36, 13, "magixmod"],
                cost: { 'insight': 10 },
                req: { 'tool-making': true, 'language': true, 'intuition': true, 'scouting': false },
                effects: [
                ],
                chance: 2,
            });

            new G.Tech({
                name: 'around the world', category: 'tier1',
                displayName: 'Exploration trips II',
                desc: 'Increases the speed of [wanderer]s when exploring new tiles by 20%.//<small>We\'re gonna go around the world!</small>',
                icon: [0, 39, "magixmod", 36, 13, "magixmod"],
                cost: { 'insight': 40 },
                req: { 'exploration trips': true },
                effects: [
                ],
            });
            new G.Tech({
                name: 'trails', category: 'tier1',
                desc: 'Increases the speed of [wanderer]s by 15%, but decreases the speed of [scout]s by 5%. Decreases the chance of [wanderer]s getting lost.//<small>Explore the world...without getting lost.</small>',
                icon: [2, 2, 0, 0, "magix2"],
                cost: { 'insight': 10 },
                req: { 'scouting': true, 'horses': false },
                effects: [
                    {
                        type: 'function',
                        func: function () {
                            G.unitByName['wanderer'].effects.push({ type: 'mult', value: 1.15 });
                            G.unitByName['scout'].effects.push({ type: 'mult', value: 0.95 });
                        }
                    }
                ],
            });
            new G.Tech({
                name: 'horses', category: 'tier1',
                displayName: 'Adventurous people',
                desc: 'Increases the speed of [scout]s by 15%, but decreases the speed of [wanderer]s by 5%. Decreases the chance of [scout]s getting lost.//<small>Explore the world...without getting lost.</small>',
                icon: [24, 3, 0, 0, "magix2"],
                cost: { 'insight': 10 },
                req: { 'scouting': true, 'trails': false },
                effects: [
                    {
                        type: 'function',
                        func: function () {
                            G.unitByName['wanderer'].effects.push({ type: 'mult', value: 0.95 });
                            G.unitByName['scout'].effects.push({ type: 'mult', value: 1.15 });
                        }
                    }
                ],
            });
            new G.Tech({
                name: 'sandy shores', category: 'tier1',
                desc: '@Your [digger]s will be able to to collect small amounts of [sand] from the ocean, based on your [wtr] @The effect of [wtr] is capped at 1,000 and is based on your <b>explored water</b>. //<small>A window...to dig...</small>',
                icon: [4, 9, 24, 1],
                cost: { 'insight': 50 },
                req: { 'boat building': true },
                effects: [
                ],
            });
            new G.Tech({
                name: 'sandy shores II', category: 'tier1',
                desc: 'Your [digger]s collect twice as much [sand] from your world\'s shores.',
                icon: [0, 39, "magixmod", 4, 9, 24, 1],
                cost: { 'insight': 180 },
                req: { 'sandy shores': true },
                effects: [
                ],
            });
            new G.Tech({
                name: 'concentrated juices',
                displayName: 'Moar juices II', category: 'tier1',
                desc: 'Use a different strategy of transporting materials to your [artisan of juice,Artisans of juice], doubling how fast they can make [juices]. However, making [juices] now requires 3 times as much [water].//<small>Even MOAR JUICE!!! (But concentrated this time.)</small>',
                icon: [0, 39, "magixmod", 17, 4, "magixmod"],
                cost: { 'insight': 1600 },
                req: { 'more humid water': true },
                effects: [
                ],
            });
            new G.Tech({
                name: 'beekeeping', category: 'tier1',
                desc: '@unlocks a new [honey]-related mode for [firekeeper]s, although it has a very large chance to fail',
                icon: [1, 1, "magix2"],
                cost: { 'insight': 80 },
                req: { 'care for nature': true },
                tutorialMesg: ['important', 'You take a bite out of some honey. It\'s sweet and delicious! You also realize a useful trait of honey: honey will <b>never</b> decay! You start thinking of other ways to use honey...', [5, 0, 'magix2']],
                effects: [
                ],
            });
            new G.Tech({
                name: 'beekeeping II', category: 'tier1',
                desc: 'Teach your people about how to ensure that bees survive through the winter, increasing the chance of future [honey] harvests! @you can also get [honeycomb]s from bee nests slowly, which are great for your people\'s [health] @also get a policy that sets the honey-related habits of your people',
                icon: [0, 39, "magixmod", 1, 1, "magix2"],
                cost: { 'insight': 450 },
                req: { 'beekeeping': true, 'wizard wisdom': true },
                effects: [
                ],
            });
            new G.Tech({
                name: 'beekeeping III', category: 'tier1',
                desc: 'Discover a way to use [nature essence] to get bees out of hives, increasing [honey] gain. It is also is more likely to succeed! @unlocks a new method of getting [honey] that requires [nature essence] //<small>with a better knowledge of bees, your beekeepers also feel a little safer</small>',
                icon: [1, 39, "magixmod", 1, 1, "magix2"],
                cost: { 'insight': 1200, 'wisdom': 25 },
                req: { 'beekeeping II': true },
                effects: [
                ],
            });
            new G.Tech({
                name: 'superior winds', category: 'tier1',
                desc: 'Unlocks a new mode for [boat]s that will allow you to use [wind essence] to increase their effectiveness. //<small>Let the magical whooshing start!</small>',
                icon: [1, 1, "magixmod", 28, 7],
                cost: { 'insight': 250 },
                req: { 'essence storages': true },
                effects: [
                ],
            });
            new G.Tech({
                name: 'salty sand', category: 'tier1',
                desc: 'You will be able to get some additional [salt] from your world\'s shores by hiring [digger]s, who will process the [salt] out of [sand].',
                icon: [11, 7, 0, 0, "magix2"],
                cost: { 'insight': 300 },
                req: { 'essence storages': true, 'sandy shores': true },
                effects: [
                ],
            });
            new G.Tech({
                name: 'salty sand II', category: 'tier1',
                desc: 'After getting this tech, [digger]s will be able to get significantly more [salt] from your oceans by drying some saltwater out. //<small>that\'s pretty salty...</small>',
                icon: [0, 39, "magixmod", 11, 7, 0, 0, "magix2"],
                cost: { 'insight': 600, 'wisdom': 50 },
                req: { 'sandy shores II': true, 'salty sand': true, 'care for nature': true },
                effects: [
                ],
            });
            new G.Tech({
                name: 'smartness of essentials', category: 'tech1',
                desc: '@Your people become smarter, making [essential conversion tank]s produce 50% more [insight II] and 20% more of other essentials. @However, [essential conversion tank]s will now require twice as much [mana] for upkeep and now require 550 of the lower tier essential. //<small>time to use our big brains</small>',
                icon: [6, 22, "magixmod"],
                cost: { 'insight II': 80 },
                req: { 'essential conversion tank overclock I': true },
                effects: [
                    {
                        type: 'function', func: function () {
                            G.getDict('essential conversion tank').upkeep = { 'mana': 100 }
                        }
                    }
                ],
            });
            new G.Tech({
                name: 'science master', category: 'tier1',
                desc: 'Getting this lets you hire [guru]s that produce [insight] and a small amount of [science]. @provides 1 bonus [science]',
                icon: [27, 0, "magixmod", 29, 5, "magixmod"],
                cost: { 'insight II': 5 },
                req: { 'eotm': true },
                effects: [
                    { type: 'provide res', what: { 'science': 1 } },
                ],
            });
            new G.Tech({
                name: 'stronger faith II', category: 'tier1',
                desc: '[cathedral]s become 4 times as powerful, but require twice as much [holy essence] as upkeep.',
                icon: [0, 39, "magixmod", 19, 3, "magixmod"],
                cost: { 'insight': 800, 'faith': 200 },
                req: { 'stronger faith': true, '7th complex tower': true },
                effects: [
                    {
                        type: 'function', func: function () {
                            G.getDict('cathedral').upkeep = { 'food': 2, 'holy essence': 2 };
                        }
                    }
                ]
            });
            new G.Tech({
                name: 'hotter factories', category: 'tier1',
                desc: '[heat factory,Heat factories] are much less likely to fail their production and produce products faster.',
                icon: [34, 16, "magixmod", 24, 1],
                cost: { 'insight II': 125, 'lightning essence': 80000 },
                req: { 'factories II': true },
                effects: [
                ]
            });
            new G.Tech({
                name: 'trees of faith', category: 'tier1',
                desc: '[cathedral]s become 25% more effective and will provide some [health] now.//<small>planting these unique trees will give us a truly ultimate belief</small>',
                icon: [36, choose([2, 3]), "magixmod", 24, 1],
                cost: { 'faith': 800 },
                req: { 'stronger faith II': true, 'mentors of nature': true, 'better healing': true },
                effects: [
                ]
            });
            new G.Tech({
                name: 'trees of faith II', category: 'tier1',
                desc: 'The [leaves of wisdom] and [branches of wisdom] traits can now be obtained at the same time! In addition, you have a 4% chance of getting both of them at the same time at the start of a new year. Be warned, however, as <b>getting this trait will cost some [wisdom II]</b> (you can get more back, however, by adopting both traits).',
                icon: [0, 39, "magixmod", 36, choose([2, 3]), "magixmod", 24, 1],
                cost: { 'insight II': 125, 'wisdom II': 50 },
                req: { 'treeplanting': true, 'trees of faith': true, 'richer language': true },
                effects: [
                    {
                        type: 'function', func: function () {
                            G.getDict('leaves of wisdom').req = { 'symbolism II': true }
                            G.getDict('branches of wisdom').req = { 'symbolism II': true }
                        }
                    }
                ],
            });
            new G.Tech({
                name: 'careful water storage', category: 'tier1',
                desc: 'Carefully storing the [water] within your tribe is a good first step in preventing its rapid decay. @decreases [water] decay during droughts @[cloudy water] decay will be decreased slightly',
                icon: [7, 6, 0, 0, "magix2"],
                cost: { 'insight': 120 },
                req: { 'droughtNew': true, 'well-digging': true, 'paradise building': true },
                effects: [
                ],
            });
            new G.Tech({
                name: 'deeper wells II', category: 'tier1',
                desc: 'Making sure to make your people\'s wells deep enough can ensure that they have enough when droughts or famines strike. @boosts all types of [well]s by 50%',
                icon: [0, 39, "magixmod", 31, 15, "magixmod"],
                cost: { 'insight': 600, 'wisdom': 50 },
                req: { 'careful water storage': true },
                effects: [
                ],
            });
            new G.Tech({
                name: 'faith in water', category: 'tier1',
                desc: 'Unlocks a new ritual related to [water] gathering that costs [magic essences] instead of [faith].',
                icon: [25, 3, 0, 0, "magix2"],
                cost: { 'magic essences': 100000 },
                req: { 'stronger faith II': true },
                effects: [
                ],
            });
            new G.Tech({
                name: 'art of cooking II', category: 'tier1',
                desc: 'Cooking is complex, but your [chef]s are willing to learn! @Getting this unlocks 2 new modes for them, which may provide additional [happiness] or [health] when produced. @Obtaining this will also make your [population,people] smarter at storing [meals], slowing their decay somewhat.',
                icon: [0, 39, "magixmod", 23, 13, "magixmod"],
                cost: { 'insight': 600, 'wisdom': 50, 'culture': 600 },
                req: { 'art of cooking': true },
                effects: [
                ],
            });
            new G.Tech({
                name: 'magical filtering II', category: 'tier1',
                desc: 'Use the power of the [water essence,Waters], [wind essence,Winds], and [cloud]s! @your filters that process [cloudy water] work twice as fast',
                icon: [0, 39, "magixmod", 25, 8, "magixmod"],
                cost: { 'insight': 1600, 'wind essence': 40000, 'water essence': 40000, 'cloud': 21000 },
                req: { 'magical filtering': true },
                effects: [
                ],
            });
            new G.Tech({
                name: 'plant-loving bees', category: 'tier1',
                desc: 'Use some [nature essence] and gather some nearby [herbs] to improve the production of bees. @Increases all [honey] gain by 50%',
                icon: [1, 2, "magixmod", 24, 1],
                cost: { 'insight': 400, 'nature essence': 5000, 'herbs': 10000, 'faith': 15 },
                req: { 'beekeeping II': true, 'wizard wisdom': true, 'druidism': true, 'plant lore II': true },
                effects: [
                ],
            });
            new G.Tech({
                name: 'power from beneath', category: 'tier1',
                desc: 'You notice that the deeper you go into the Underworld, the hotter it becomes. However, [wind essence] and some simple walls seem to do the trick of cooling everything down! @decreases the cost and [land of the Underworld,Underworld land] limit of [fort]s and makes them take up 10% less space',
                icon: [10, 19, "magixmod", 24, 1],
                cost: { 'insight': 200, 'basic building materials': 5000, 'wind essence': 64000 },
                req: { 'underworld\'s ascendant': true, 'underworld building 2/2': true },
                effects: [
                    {
                        type: 'function', func: function () {
                            G.getDict('fort').use = { 'land of the Underworld': 0.9, 'wand': 6, 'armor set': 3, 'metal weapons': 3, 'worker': 3 }
                            G.getDict('fort').limitPer = { 'population': 50, 'land of the Underworld': 6 }
                        }
                    }
                ],
            });
            new G.Tech({
                name: 'superior honey', category: 'tier1',
                desc: 'Your people love [honey] so much that they can\'t wait for more of it! @Increases the [happiness] gain from eating [honey] and [honeycomb]s by 20% @Unlocks a new ritual related to them',
                icon: [3, 1, "magix2", 24, 1],
                cost: { 'insight': 1500, 'honey': 2500, 'nature essence': 10000 },
                req: { 'plant-loving bees': true, 'care for nature II': true },
                effects: [
                    { type: 'function', func: function () { G.getDict('honey').turnToByContext['eating']['happiness'] *= 1.2; G.getDict('honeycomb').turnToByContext['eating']['happiness'] *= 1.2; } },
                ],
            });
            new G.Tech({
                name: 'golden crafting', category: 'tier1',
                desc: '[golden fish] normally only have a 20% chance to be properly crafted. Triple the chance of success by teaching your people how to more carefully shape the [seafood,Fish]!',
                icon: [5, 0, "magix2", 24, 1],
                cost: { 'insight': 80, 'precious metal ingot': 1 },
                req: { 'smelting': true, 't6': true },
                skip: true,
                effects: [
                ],
            });
            new G.Tech({
                name: 'ocean decay I', category: 'tier1',
                desc: 'Decrease the rate of [land] decaying by 40%.',
                icon: [9, 0, "magix2", 24, 1],
                cost: { 'insight': 25 },
                req: { 't6': true, 'stone-knapping': true },
                skip: true,
                effects: [
                ],
            });
            new G.Tech({
                name: 'ocean decay II', category: 'tier1',
                desc: 'Decrease the rate of [land] decaying by 40% again. This effect does not stack additively with the other techs!',
                icon: [0, 39, "magixmod", 9, 0, "magix2", 24, 1],
                cost: { 'insight': 25 },
                req: { 'ocean decay I': true, 'boat building': true },
                skip: true,
                effects: [
                ],
            });
            new G.Tech({
                name: 'ocean decay III', category: 'tier1',
                desc: 'Decrease the rate of [land] decaying by 40% once more. This effect does not stack additively with the other techs!',
                icon: [1, 39, "magixmod", 9, 0, "magix2", 24, 1],
                cost: { 'insight': 125 },
                req: { 'ocean decay II': true, 'wizard wisdom': true },
                skip: true,
                effects: [
                ],
            });
            new G.Tech({
                name: 'ocean decay IV', category: 'tier1',
                desc: 'Decrease the rate of [land] decaying by 40% yet again. This effect does not stack additively with the other techs!',
                icon: [2, 39, "magixmod", 9, 0, "magix2", 24, 1],
                cost: { 'insight': 400, 'wisdom': 10 },
                req: { 'ocean decay III': true, 'Wizard complex': true },
                skip: true,
                effects: [
                ],
            });
            new G.Tech({
                name: 'ocean decay V', category: 'tier1',
                desc: 'Decrease the rate of [land] decaying by 40% for a final time. This effect does not stack additively with the other techs!',
                icon: [3, 39, "magixmod", 9, 0, "magix2", 24, 1],
                cost: { 'insight': 600, 'wisdom': 25 },
                req: { 'ocean decay IV': true },
                skip: true,
                effects: [
                ],
            });
            new G.Tech({
                name: 'ocean reversion', category: 'tier1',
                desc: '@[land] decay is reverted by 1 every 5 days',
                icon: [8, 0, "magix2", 24, 1],
                cost: { 'insight': 25 },
                req: { 'ocean decay II': true },
                skip: true,
                effects: [
                ],
            });
            new G.Tech({
                name: 'fruit identification', category: 'tier1',
                desc: 'Most people in your tribe seem to have a particular soft spot for some types of unique fruits. What if you could categorize them? @From now on, you will be able to gain two unique types of fruits: [exotic fruit] and [fruit,Normal fruit]. [exotic fruit] cannot be found in all lands with fruit. These unique fruit provide 250% as much [happiness] than normal [fruit], with no downsides! @also unlocks a new tech related to [exotic juices,A new type of juice]',
                icon: [9, 2, "magix2", 24, 1],
                cost: { 'insight': 100 },
                req: { 'juicy expertise': true },
                effects: [
                ],
            });
            new G.Tech({
                name: 'exotic blending', category: 'tier1',
                desc: 'After trying out some [exotic fruit], your people seem to enjoy them a whole bunch. @After unlocking this, you\'ll be able to craft [exotic juices] @this type of drink will provide much, much more [happiness] as normal [juices]',
                icon: [10, 2, "magix2", 24, 1],
                cost: { 'insight': 25 },
                req: { 'fruit identification': true },
                effects: [
                ],
            });
            new G.Tech({
                name: 'fruit identification II', category: 'tier1',
                desc: 'People will become better-trained at finding out if various plants are poisonous or not, increasing [fruit], [herbs,Herb], and [flowers,Flower] gain by 10% and [exotic fruit] gain by 25%.',
                icon: [0, 39, "magixmod", 9, 2, "magix2", 24, 1],
                cost: { 'insight': 100 },
                req: { 'exotic blending': true },
                effects: [
                ],
            });
            new G.Tech({
                name: 'spicy foods', category: 'tier1',
                desc: 'After all this time...your tribe still hasn\'t known about the power of spice yet. Maybe it\'s time to teach them! @unlocks [spices], which are collected from your [gatherer]s @unlocks a new recipe for your [chef]s //<small>ooohh that\'s spicy</small>',
                icon: [12, 2, "magix2"],
                cost: { 'insight': 900, 'wisdom': 100, 'inspiration': 125 },
                req: { 'art of cooking II': true },
                effects: [
                ],
            });
            new G.Tech({
                name: 'spicy foods II', category: 'tier1',
                desc: 'Gain more information about how [spices] are collected, increasing its collection rate by 50%. //<small>my tongue is burning!!!</small>',
                icon: [0, 39, "magixmod", 12, 2, "magix2"],
                cost: { 'insight': 1400, 'wisdom': 80, 'inspiration': 20 },
                req: { 'spicy foods': true },
                effects: [
                ],
            });
            new G.Tech({
                name: 'spicy foods III', category: 'tier1',
                desc: 'Go deeper into the world of spicy ingredients and start getting your people to begin cultivating various [spices] themselves. //Getting this will triple your [spices,Spice] gain. //<small>THAT IS WAY TOO SPICY!!!!</small>',
                icon: [1, 39, "magixmod", 12, 2, "magix2"],
                cost: { 'insight': 750, 'influence': 150 },
                req: { 'leaves of wisdom': true, 'leaves of wisdom': true, 'spicy foods II': true },
                effects: [
                ],
            });
            new G.Tech({
                name: 'art of cooking III', category: 'tier1',
                desc: 'Teach your [population,people] how to cook dishes themselves, allowing them to cook [meals] themselves without needing [chef]s! @Every 10 days, your [population,people] will switch to a different [meals,Meal] to cook!<>Because not all of them are trained [chef]s, they will use 1 [cooked meat] or 1 [cooked seafood] and combine them with half of a [herbs,Herb], [fruit], or [vegetables,Vegetable] to produce 1 [meals,Meal] (using 0.1 more [food] than normally hired [chef]s). //They will switch what ingredients that they use every ten days and cycle through them.',
                icon: [1, 39, "magixmod", 23, 13, "magixmod"],
                cost: { 'insight II': 200, 'influence II': 12 },
                req: { 'spicy foods III': true },
                effects: [
                ],
            });
            new G.Tech({
                name: 'smarter people', category: 'tier1',
                desc: '@Increases the chance of getting [eotm] significantly if you don\'t already have it. That trait is a key step in unlocking more advanced ideas and technologies! @provides 100 [wisdom] and 1 [education] @also triples the chance of unlocking [transcendentalist]s from a lucky trait',
                icon: [23, 19, "magixmod", 0, 0, "magix2"],
                cost: { 'insight': 4000, 'influence': 1000 },
                req: { 'power from beneath': true },
                effects: [
                    { type: 'provide res', what: { 'wisdom': 1 } },
                    { type: 'provide res', what: { 'education': 1 } },
                    {
                        type: 'function', func: function () {
                            G.getDict('eotm').chance = 10
                            G.getDict('at3').chance /= 3
                        }
                    },
                ],
            });
            new G.Tech({
                name: 'people of the arts', category: 'tier1',
                desc: '@improve the art and drawing skills of your people @makes [painter]s generate very small amounts of [culture II] @provides 5 [inspiration II]',
                icon: [11, 7, "magixmod", 12, 4, "magixmod", 24, 1],
                cost: { 'culture II': 25, 'faith II': 2 },
                req: { 'symbolism III': true },
                effects: [
                    { type: 'provide res', what: { 'inspiration II': 5 } },
                ],
            });
            new G.Tech({
                name: 'mana brewery III', category: 'tier1',
                desc: 'Use a more effective method of creating [mana], allowing all [mana maker]s and [alchemist]s to make it 50% faster. //<small>first, add some water here...</small>',
                icon: [1, 39, "magixmod", 19, 2, "magixmod"],
                cost: { 'insight': 1500, 'water': 2e5, 'mana': 50000 },
                req: { 'mana brewery II': true },
            });
            new G.Tech({
                name: 'hive frames', category: 'tier1',
                desc: '@unlocks more advanced methods of getting bees to work, allowing you to construct [hive frame]s from [carpenter workshop]s @your [firekeeper]s that attend to bees will now work three times faster whenever [hive frame]s are available (excluding non-essenced [honey] collection)',
                icon: [5, 1, "magix2"],
                cost: { 'insight': 600, 'wisdom': 50 },
                req: { 'construction': true, 'superior honey': true },
                effects: [
                ],
            });
            new G.Tech({
                name: 'magical hive frames', category: 'tier1',
                desc: '@allows you to create [essenced hive frame]s from [carpenter workshop]s using some [lumber] and [nature concoction]s @unlocks a new mode for [firekeeper]s that will collect both [honey] and [honeycomb]s @also lets you craft both normal and essenced frames in the Paradise version',
                icon: [7, 1, "magix2"],
                cost: { 'insight': 1250, 'wisdom': 200, 'culture': 50 },
                req: { 'paradise crafting': true, 'hive frames': true },
                effects: [
                ],
            });
            new G.Tech({
                name: 'people of the arts II', category: 'tier1',
                desc: 'Getting this tech doubles the [culture II] gain from [painter]s and lets [essential conversion tank,Conversion tanks] produce [culture II] 50% faster!',
                icon: [0, 39, "magixmod", 11, 7, "magixmod", 12, 4, "magixmod", 24, 1],
                cost: { 'insight II': 50, 'culture II': 35 },
                req: { 'caretaking': true, 'smartness of essentials': true, 'people of the arts': true },
                effects: [
                ],
            });
            new G.Tech({
                name: 'oil-digging II', category: 'tier1',
                desc: '[oil] can now be used along with [lightning essence] and [charcoal] to unlock a new mode for your [heat factory,Heat factories].',
                icon: [0, 39, "magixmod", 29, 2, "magixmod"],
                cost: { 'insight II': 400, 'oil': 10000 },
                req: { 'oil-digging': true },
                effects: [
                ],
            });

            new G.Trait({ //New trait by @1_e0 to counter happiness slightly
                name: 'ungrateful tribe',
                desc: '@people consume 3% less [food] and 2% less [water], but gain 25% less [happiness] from <b>everything</b>. ([happiness] loss is not affected.) This negative effect can be decreased by upgrading the [mausoleum], but also gets worse over time.//<small>we\'re getting used to our resources...</small>',
                icon: [2, 4, 1, 0, "magix2"],
                chance: 2,
                req: { 'rules of food': true },
            });
            new G.Trait({ //New trait by @1_e0 to counter happiness slightly
                name: 'ungrateful tribe II',
                desc: '@people consume 5% less [food], but gain 10% less [happiness] from <b>everything</b> (stacks after the previous trait). ([happiness] loss is not affected.)//<small>we\'re getting used to everything...once more...</small>',
                icon: [3, 6, 1, 0, "magix2"],
                chance: 600,
                req: { 'ungrateful tribe': true, 'sedentism': true, 'tribe of eaters': false },
            });
            new G.Trait({ //New trait by @1_e0
                name: 'tribe of eaters',
                desc: '@people consume 20% more [food], but the negative effect of [ungrateful tribe] is halved.//<small>Your tribe apologizes for being ungrateful. They know they will probably keep complaining, but at least they don\'t mind nearly as much anymore.</small>',
                icon: [0, 3, 4, 12, 24, 1],
                chance: 600,
                req: { 'ungrateful tribe': true, 'sedentism': true, 'ungrateful tribe II': false },
            });
            new G.Trait({ //New trait by @1_e0
                name: 'care for nature',
                desc: '@people now respect nature much more, and appreciate its resources @unlocks a tech related to [honey]',
                icon: [2, 0, "magix2"],
                chance: 120,
                req: { 'cooking': true },
            });
            new G.Trait({
                name: 'faster understanding',
                desc: 'Your people gain the ability to more rapidly understand and think of new technologies, decreasing their need of [insight II] when rolling researches by 40%.',
                icon: [18, 19, "magixmod", 0, 0, "magix2"],
                req: { 'physics II': true, 'symbolism II': true },
                chance: 30,
                category: 'knowledge'
            });
            new G.Trait({
                name: 'drought', // this is unused
                desc: '@<b>Your people are in a <u style="color:#c48b10">drought</u>, which means that they will get 85% less [water] from [gatherer]s and 70% less from all [well] types.</b> @In addition, [muddy water] gathering is decreased by 50%, non-magical farms become 40% slower, and [water] now decays faster (although the decay rate is based on how long the drought has lasted). @[cloudy water] will also decay faster, although slower than [water]. @However, during a <b><u style="color:#c48b10">drought</u></b>, you may research unique technologies!',
                icon: [9, 10, 1, 0, "magix2"],
                req: { 'tribalism': false },
                category: 'main',
                skip: true
            });
            new G.Trait({
                name: 'famine',
                desc: '<b>Your people are in a <u style="color:#c48b10">famine</u>, which simply means that [food] will spoil much faster.</b>',
                icon: [33, 12, "magixmod", 1, 0, "magix2"],
                req: { 'droughtNew': true },
                category: 'main',
                chance: 6,
                skip: true
            });
            new G.Trait({
                name: 'drought preparation',
                desc: 'During droughts, your people will automatically consume 5% less [water].',
                icon: [33, 12, "magixmod", 24, 1],
                req: { 'droughtNew': true },
                category: 'main',
                chance: 25,
            });
            new G.Trait({
                name: 'care for nature II',
                desc: '@people now respect nature even more @may result in more advanced techs',
                icon: [0, 39, "magixmod", 2, 0, "magix2"],
                chance: 80,
                req: { 'faith in water': true, 'beekeeping III': true },
            });
            new G.Trait({
                name: 't6',
                displayName: 'Ocean\'s Trial',
                desc: 'You are currently in the <b>Ocean</b> trial.',
                icon: [8, 0, "magix2", 5, 22, "magixmod"],
                req: { 'tribalism': false },
                cost: {},
                effects: [
                    {
                        type: 'function', func: function () {
                            //Uhhh that's a lot, isn't it?
                            G.getDict('hunting').req = { 'tribalism': false };
                            G.getDict('boat building').req = { 'woodcutting': true };
                            G.getDict('scouting').req = { 'language': true };
                            G.getDict('fisher').limitPer = { 'wtr': 6 };
                            G.getDict('fisher').upkeep = { 'bugs': 0.1 };
                            if (!G.has("fishing")) G.gainTech(G.techByName['fishing']);
                            G.getDict('insects as food').icon = [6, 12, 13, 0, 'magix2']
                            G.getDict('eat raw meat and fish').displayName = 'Eat raw fish';
                            G.getDict('eat raw meat and fish').icon = [11, 0, 'magix2'];
                            G.getDict('eat raw meat and fish').desc = '[seafood] is eaten raw, which is slightly unhealthy.';
                            G.getDict('bugs').icon = [13, 0, 'magix2'];
                            G.getDict('bugs').desc = "[bugs] are a good source of bait and may also be eaten sometimes.";
                            G.getDict('seafood').icon = [11, 0, 'magix2'];
                            G.getDict('seafood').desc = "[seafood] is a decent source of food for an ocean-based civilization. Luckily for you, [seafood,Fish] will harm [health] less than normal in tribes that know which ones are the least dangerous!";
                            G.getDict('seafood').turnToByContext = { 'eating': { 'health': -0.006, 'happiness': 0.0065, 'bone': 0.02 }, 'decay': { 'spoiled food': 1 } }
                            G.getDict('wtr').icon = [10, 0, 'magix2'];
                            G.getDict("tomb of oceans").costPerStep = { 'gold block': 1 + G.achievByName['ocean'].won, 'gem block': 10, 'precious metal ingot': 25, 'strong metal ingot': 10, 'basic building materials': 75, 'golden fish': 25 * (G.achievByName['ocean'].won + 1) };
                            G.getDict("tomb of oceans").finalStepCost['golden fish'] = 1000 * (G.achievByName['ocean'].won * 0.5 + 1);
                        }
                    }
                ],
                category: 'trial',
                skip: true
            });
            new G.Trait({
                name: 't5',
                displayName: 'Fishyar\'s Trial',
                desc: 'You are currently in the <b>Unfishy</b> trial.',
                icon: [25, 25, "magixmod", 5, 22, "magixmod"],
                req: { 'tribalism': false },
                cost: {},
                effects: [
                    {
                        type: 'function', func: function () {
                            //Whelp, i suppose i've gotta do this all over again...
                            G.getDict('fishing').req = { 'tribalism': false };
                            G.getDict('hunting').req = { 'tribalism': false };
                            G.getDict('famine').chance = 0.2;
                            G.getDict('seafood').desc = "[seafood,Raw seafood] such as fish, clams, and shrimps aren\'t exactly the best for the body. Unfortunately for you, they are absolutely <b>hated</b> by your [population,people], causing your [happiness] level to rapidly drop!";
                            G.getDict('seafood').turnToByContext = { 'eating': { 'health': -0.02, 'happiness': -2, 'bone': 0.02 }, 'decay': { 'spoiled food': 1 } };
                            if (!G.has("well-digging")) G.gainTech(G.techByName['well-digging']);
                            G.getDict('well').cost = { 'stone': 3, 'archaic building materials': 15 };
                            G.getDict('well').limitPer = { 'land': 125 };
                            G.getDict('platinum-working').cost = { 'insight': 90 };
                            G.getDict('platinum-working').req = { 'prospecting': true, 'steel-making': true };
                            G.getDict("platinum fish statue").costPerStep = { 'platinum block': 3 + 2 * G.achievByName['unfishy'].won, 'seafood': 250 + 100 * G.achievByName['unfishy'].won, 'gems': 6, 'water': 20 + 10 * G.achievByName['unfishy'].won, 'cut stone': 50, 'marble': 10 + 2 * G.achievByName['unfishy'].won };
                        }
                    }
                ],
                category: 'trial',
                skip: true
            });
            new G.Trait({
                name: 'scientific minds',
                desc: 'Your people have gained a deeper cultural appreciation of [science]. @With so many minds of science, your people will gain [science] <b>extremely slowly</b> (but based on your [culture II] amount). @provides 1 [education] and 1 [inspiration II]',
                icon: [choose([3, 4, 5, 6]), 27, "magixmod", 0, 0, "magix2"],
                cost: { 'culture II': 5 },
                chance: 6,
                req: { 'eotm': true },
                effects: [
                    { type: 'provide res', what: { 'inspiration II': 1 } },
                    { type: 'provide res', what: { 'education': 1 } },
                ],
                category: 'main'
            });
            new G.Trait({
                name: 'love of spice',
                desc: 'Your people love eating [spices] along with other [food], meaning that they will gain 20% more happiness when eating them! //<small>Spicy!</small>',
                icon: [11, 2, "magix2", 24, 1],
                cost: { 'culture II': 5 },
                chance: 16,
                req: { 'spicy foods': true },
                effects: [
                ],
                category: 'main'
            });
            new G.Trait({
                name: 'cultural people',
                desc: 'Your tribe is becoming more and more [culture II,Cultural], meaning that they have begun to think of ways to use their creativity to create more and more... @[painter]s create [painting]s and [culture II] faster @[musician]s provide a little bit of [culture II] now, just like [painter]s @may also lead to [eota,Something new]...',
                icon: [3, 3, "magix2"],
                cost: { 'culture II': 20 },
                chance: 20,
                req: { 'people of the arts': true, 'music': true },
                effects: [
                ],
                category: 'main'
            });
            new G.Trait({
                name: 'eota',
                displayName: 'Evolution of the arts',
                desc: 'Don\'t worry; this research won\'t involve as many changes as [eotm]! @from now on, you will need to use [culture II] to roll or reroll new technologies @more techs will be available @although these new techs will cost a lot of [culture II], [the outstander]s will be able to provide some [inspiration II] now',
                icon: [4, 3, "magix2"],
                cost: { 'culture II': 30 },
                chance: 40,
                req: { 'cultural people': true, 'music instruments': true },
                effects: [
                    {
                        type: 'function', func: function () {
                            //Update outstanders so that this trait works properly
                            for (var i = 0; i < G.unitsOwned.length; i++) {
                                if (G.unitsOwned[i].unit.name == "the outstander") {
                                    var unit = G.unitsOwned[i]
                                    unit.idle = unit.amount
                                    unit.amount = 0
                                }
                            }
                            G.getDict('the outstander').desc = 'Interestingly, [the outstander] has a lot of knowledge, and some people speculate that he is a true erudite. Anyway, people call [the outstander,Outstanders] like this one Guru\'s children.<>Each outstander provides 5 [wisdom II] (1 extra for every 4 [the outstander,Outstanders] obtained), 2 [inspiration II], and 1 [education] each.'
                        }
                    }
                ],
                category: 'main'
            });

            //so uh this is bad news...but some saves may have been screwed up because traits and techs are considered to be similar in the code, meaning that they will have the same ID structure...which means various issues could happen with techs/traits swapping! (this is quite fun, whelp)
            new G.Tech({
                name: 'larger toolhuts', category: 'tier1',
                desc: 'Your [Toolhut]s will now work 50% faster, but will require 60 more [worker]s and will also need 10 [stone tools]. (Really make sure you won\'t run out of [stone tools]!)',
                icon: [11, 15, "magixmod", 17, 18, "magixmod"],
                req: { 'manufacture units II': true },
                cost: { 'insight II': 350 },
                effects: [
                    {
                        type: 'function', func: function () {
                            G.getDict('Toolhut').use.worker = 140
                            G.getDict('Toolhut').use["stone tools"] = 10
                        }
                    },
                ],
                chance: 2
            });
            new G.Tech({
                name: 'superior culture', category: 'tier1',
                desc: '@provides 2 [inspiration II]',
                icon: [5, 3, "magix2"],
                cost: { 'culture II': 30 },
                req: { 'cultural people': true },
                effects: [
                    { type: 'provide res', what: { 'inspiration II': 2 } },
                ],
            });
            new G.Tech({
                name: 'passionate artistry', category: 'tier1',
                desc: 'Unlocks the [art school], which may turn a [child] into an [artist]. //<small>quite arty art indeed</small>',
                icon: [6, 3, "magix2"],
                cost: { 'culture II': 60 },
                req: { 'eota': true },
                effects: [
                ],
            });
            new G.Tech({
                name: 'better art schools', category: 'tier1',
                desc: '@[art school]s will now be twice as likely to turn a [child] into a [virtuoso of art] @provides 10 [inspiration II]',
                icon: [7, 3, "magix2", 24, 1],
                cost: { 'culture II': 100 },
                req: { 'superior culture': true, 'passionate artistry': true },
                effects: [
                    { type: 'provide res', what: { 'inspiration II': 10 } },
                ],
            });
            new G.Tech({
                name: 'art shows', category: 'tier1',
                desc: '@[art school]s will now host art shows to show off the amazing drawing skills of their [virtuoso of art,Virtuoso], meaning that each [work of art] will provide a little bit of [culture II] @[work of art,Works of art] will decay a little slower with proper art storage',
                icon: [10, 3, "magix2", 24, 1],
                cost: { 'culture II': 140 },
                req: { 'passionate artistry': true },
                effects: [
                ],
            });
            new G.Tech({
                name: 'mentors of nature II', category: 'tier1',
                desc: '[druid]s generate 50% more [health] now!',
                icon: [0, 39, "magixmod", 31, 31, "magixmod"],
                req: { 'eotm': true, 'trees of faith': true, 'caretaking': true },
                cost: { 'insight II': 40, 'culture II': 10 },
                effects: [
                ],
            });
            new G.Tech({
                name: 'beekeeping IV', category: 'tier1',
                desc: 'Let your [firekeeper]s find the optimal strategies for keeping bees, improving how much [honey] and [honeycomb]s that you gain from [essenced hive frame]s by 20%.',
                icon: [2, 39, "magixmod", 1, 1, "magix2"],
                cost: { 'insight II': 150, 'nature essence': 125000 },
                req: { 'maths IV': true, 'magical hive frames': true },
                effects: [
                ],
            });
            new G.Tech({
                name: 'quarrying IV', category: 'tier1',
                desc: 'Quarries will become less dangerous, making injuries much, much less likely!',
                icon: [2, 39, "magixmod", 12, 0, "magixmod"],
                cost: { 'insight II': 200, 'science': 15, 'influence II': 20 },
                req: { 'quarrying III': true, 'maths IV': true },
                effects: [
                ],
            });
            new G.Tech({
                name: 'beekeeping V', category: 'tier1',
                desc: 'The final beekeeping tech... @gives you a small chance to collect some additional [honey] from <b>all</b> firekeeping modes',
                icon: [3, 39, "magixmod", 1, 1, "magix2"],
                cost: { 'insight II': 150, 'nature essence': 125000 },
                req: { 'physics III': true, 'beekeeping IV': true },
                effects: [
                ],
            });
            new G.Tech({
                name: 'mentors of nature III', category: 'tier1',
                desc: 'From now on, more units will be able to generate [health] in small amounts: @[healer]s (twice as much as [druid]s, adding with any traits that also provide [health]) @[firekeeper]s (one fifth as much as [druid]s) @[florist]s (one tenth as much as [druid]s) @very, very rarely, your [gatherer]s will provide some [health]',
                icon: [1, 39, "magixmod", 31, 31, "magixmod"],
                req: { 'mentors of nature II': true, 'eota': true },
                cost: { 'insight II': 40, 'culture II': 10 },
                effects: [
                ],
            });
            new G.Tech({
                name: 'prospecting IV', category: 'tier1',
                desc: '@[mine]s will now be able to get rare [valuable gems] @unlocks new techs related to [carver]s',
                icon: [3, 7, "magix2"],
                cost: { 'insight II': 300, 'culture II': 100, 'science': 20 },
                req: { 'prospecting III': true, 'eota': true },
                effects: [
                    {
                        type: 'function', func: function () {
                            G.getDict('rocky substrate').res['mine']['valuable gems'] = 0.0002;
                            G.getDict('warm rocky substrate').res['mine']['valuable gems'] = 0.0002;
                            G.getDict('tundra rocky substrate').res['mine']['valuable gems'] = 0.0002;
                            G.getDict('ice desert rocky substrate').res['mine']['valuable gems'] = 0.0002;
                            G.getDict('wet rocky substrate').res['mine']['valuable gems'] = 0.0002;
                            G.getDict('lush rocky substrate').res['mine']['valuable gems'] = 0.0002;
                            G.getDict('badlands substrate').res['mine']['valuable gems'] = 0.0004;
                        }
                    }
                ],
            });
            new G.Tech({
                name: 'culture of gems', category: 'tier1',
                desc: '@[carver]s will now be able to create [valuable gem block]s from [valuable gems], which may be used as decorations @while creating these blocks, [carver]s will get some [culture II] @provides 10 [inspiration II]',
                icon: [0, 4, "magix2"],
                cost: { 'insight II': 100, 'culture II': 125, 'faith II': 20, 'science': 10 },
                req: { 'prospecting IV': true, 'passionate artistry': true },
                effects: [
                    { type: 'provide res', what: { 'inspiration II': 10 } },
                ],
            });
            new G.Tech({
                name: 'culture of gems II', category: 'tier1',
                desc: '@[carver]s generate twice as much [culture II] from making [valuable gem block]s now and are much less likely to fail when crafting one @[valuable gems] are mined 10% more often',
                icon: [1, 4, "magix2"],
                cost: { 'insight II': 550, 'culture II': 150 },
                req: { 'culture of gems': true, 'art shows': true },
                effects: [
                    {
                        type: 'function', func: function () {
                            G.getDict('rocky substrate').res['mine']['valuable gems'] = 0.0002 * 1.1;
                            G.getDict('warm rocky substrate').res['mine']['valuable gems'] = 0.0002 * 1.1;
                            G.getDict('tundra rocky substrate').res['mine']['valuable gems'] = 0.0002 * 1.1;
                            G.getDict('ice desert rocky substrate').res['mine']['valuable gems'] = 0.0002 * 1.1;
                            G.getDict('wet rocky substrate').res['mine']['valuable gems'] = 0.0002 * 1.1;
                            G.getDict('lush rocky substrate').res['mine']['valuable gems'] = 0.0002 * 1.1;
                            G.getDict('badlands substrate').res['mine']['valuable gems'] = 0.0004 * 1.1;
                        }
                    }
                ],
            });
            new G.Tech({
                name: 'music instruments II', category: 'tier2',
                displayName: 'Musical instruments II',
                desc: '[musician]s generate twice as much [happiness] with improved instruments and ideas! //<small>time to compose a song</small>',
                icon: [0, 39, "magixmod", 29, 18, "magixmod"],
                cost: { 'insight II': 200, 'culture II': 75 },
                req: { 'passionate artistry': true },
                effects: [
                ],
            });
            new G.Tech({
                name: 'culture of gems III', category: 'tier1',
                desc: '@[carver]s creating [gem block]s and [valuable gem block]s will be better trained at using their tools, allowing them to make these blocks three times quicker',
                icon: [1, 39, "magixmod", 1, 4, "magix2"],
                cost: { 'insight II': 550, 'culture II': 160 },
                req: { 'culture of gems II': true, 'music instruments II': true },
                effects: [
                ],
            });
            new G.Tech({
                name: 'charcoal production I', category: 'tier1',
                desc: '@[charcoal] can now be produced from your [kiln]s',
                icon: [5, 4, "magix2", 23, 1],
                cost: { 'insight II': 250 },
                req: { 'oil-digging': true, 'bigger kilns': true },
                effects: [
                ],
            });
            new G.Tech({
                name: 'charcoal production II', category: 'tier1',
                desc: '@[charcoal] production produces 25% more [charcoal], without increasing the amount of [log]s needed',
                icon: [0, 39, "magixmod", 5, 4, "magix2", 23, 1],
                cost: { 'insight II': 550, 'culture II': 160 },
                req: { 'oil-digging II': true },
                effects: [
                ],
            });
            new G.Tech({
                name: 'veggie fertilizer', category: 'tier1',
                desc: '@[vegetable farm]s and [mushroom farm]s will now use much better fertilizer, improving their harvests by +80%',
                icon: [6, 4, "magix2", 2, 22, "magixmod"],
                cost: { 'insight': 800, 'culture': 100 },
                req: { 'agriculture': true },
                effects: [
                ],
            });
            new G.Tech({
                name: 'bellows', category: 'tier1',
                desc: '@bellows may be used to improve [furnace]s, allowing them to work 25% faster',
                icon: [7, 4, "magix2", 23, 1],
                cost: { 'insight II': 20, 'culture II': 2 },
                req: { 'eotm': true },
                effects: [
                ],
            });
            new G.Tech({
                name: 'alchemical fuels', category: 'tier1',
                desc: 'Using their knowledge of alchemy, your civilization will be able to improve the speed of [furnace]s by 10%. //<small>pretty interesting materials...</small>',
                icon: [8, 4, "magix2", 24, 1],
                cost: { 'insight': 800, 'wisdom': 25, 'culture': 200 },
                req: { 'alchemy': true },
                effects: [
                ],
            });
            new G.Tech({
                name: 'gardening II', category: 'tier1',
                desc: 'Learn about how to use irrigation to create more advanced farms, boosting crop gains of your large farms by +125%.',
                icon: [0, 39, "magixmod", 10, 0, "magixmod"],
                cost: { 'insight II': 40 },
                req: { 'agriculture': true, 'eotm': true },
                effects: [
                ],
            });
            new G.Tech({
                name: 'more mana making', category: 'tier1',
                desc: 'Unlock a new method to make [mana] very effectively with a special type of [golden mana maker,Mana maker].',
                icon: [2, 5, "magix2"],
                cost: { 'insight': 1200, 'culture': 200 },
                req: { 'mana brewery III': true },
                effects: [
                ],
            });
            new G.Tech({
                name: 'aquatic food', category: 'tier1',
                desc: 'You will now be able to use gather [kelp], which can be eaten along with other [food] for some easy [health] benefits.',
                icon: [4, 5, "magix2", 24, 1],
                cost: { 'insight': 200 },
                req: { 'caretaking': true },
                effects: [
                ],
            });
            new G.Tech({
                name: 'plain island ideas', category: 'tier1',
                desc: 'Using the [plain island tablet], unlock a several new possibilities for your people!',
                icon: [14, 9, "magixmod", 24, 1],
                cost: { 'insight': 120, 'plain island tablet': 1 },
                effects: [
                ],
                req: { 'first portal to new world': true },
            });
            new G.Tech({
                name: 'mushroom farming', category: 'tier1',
                desc: '@unlocks the [mushroom farm], which lets you to gather some [mushroom]s every day',
                icon: [7, 5, "magix2", 24, 1],
                cost: { 'insight': 300, 'culture': 25 },
                effects: [
                    { type: 'provide res', what: { 'mushroom': 1 } },
                ],
                req: { 'plain island ideas': true },
                chance: 2
            });
            new G.Tech({
                name: 'mushroom crafting', category: 'tier1',
                desc: '@gain the ability to craft [golden mushroom]s from [gold block]s and [mushroom]s in your [blacksmith workshop]s//<small>why golden mushrooms, you may ask? honestly not sure myself</small>',
                icon: [0, 39, "magixmod", 7, 5, "magix2", 24, 1],
                cost: { 'insight': 300, 'culture': 25 },
                req: { 'mushroom farming': true },
                chance: 1.5,
                effects: [
                ],
            });
            new G.Tech({
                name: 'the well of ideas', category: 'tier1',
                desc: 'Unlocks a new well: the [well of ideas]. This well is able to produce [idea tablet]s are needed to unlock new researches. //<font color="#f70054"><b>However, rolling new researches will cost [idea tablet]s from now on.</b> (Rerolling doesn\'t cost extra though!)</font> @gain 10 [idea tablet]s from the well to start off',
                icon: [3, 6, "magix2"],
                cost: { 'insight': 120 },
                effects: [
                    { type: 'provide res', what: { 'idea tablet': 10 } },
                ],
                req: { 'mushroom farming': true },
            });
            new G.Tech({
                name: 'baking III', category: 'tier2',
                desc: '<li>Baking [bread] becomes even faster!</li>//[wheat farm]s also become four times faster. //<small>Maybe one day, every citizen can enjoy this food...</small>',
                icon: [1, 39, "magixmod", 22, 12, "magixmod"],
                cost: { 'insight II': 65, 'culture II': 5 },
                req: { 'baking II': true },
                effects: [
                ],
            });
            new G.Tech({
                name: 'gardening III', category: 'tier2',
                desc: 'Get even better farms! @[wheat farm]s become twice as fast now, and the [sugar cane], [vegetables], and [mushroom] farms become +20% faster. @In addition, [wheat farm]s take up 20 less [land], while other farms will take up 10 less [land]!//<small>Maybe wheat will finally become a reasonable food source and not a luxury! (Well, possibly.)</small>',
                icon: [1, 39, "magixmod", 10, 0, "magixmod"],
                cost: { 'insight II': 200, 'culture II': 30 },
                req: { 'baking III': true, 'art of cooking III': true },
                effects: [
                    {
                        type: 'function', func: function () {
                            //This way of setting use costs doesn't seem to be implemented in the rest of the code, but it makes it much more readable, so...
                            G.getDict("wheat farm").use.land = 10
                            G.getDict("vegetable farm").use.land = 25
                            G.getDict("sugar cane farm").use.land = 25
                            G.getDict("mushroom farm").use.land = 25
                        }
                    }
                ],
            });
            new G.Tech({
                name: 'battling thieves II', category: 'tier1',
                desc: '[thief,Thieves] are quite smart, but you can also fight back against them! @let your soldiers use [windy spikes] and [dark concoction]s against [thief,Thieves]',
                icon: [1, 7, "magix2"],
                cost: { 'windy spikes': 10, 'dark concoction': 10 },
                req: { 'combat potion & concoction brewing': true, 'battling thieves': true },
                effects: [
                ],
            });
            new G.Tech({
                name: 'battling thieves III', category: 'tier1',
                desc: '[population,People] in your tribe grow smarter and find ways to help [guard]s do their job better. @[guard]s become twice as effective!',
                icon: [2, 7, "magix2"],
                cost: { 'insight II': 40, 'windy spikes': 1200, 'dark concoction': 1200 },
                req: { 'eota': true },
                effects: [
                ],
            });
            new G.Tech({
                name: 'advanced flower gathering', category: 'tier1',
                desc: 'Your [florist]s aren\'t very good at collecting [flowers], sadly. So why not teach them better ways of going about it? @use [nature book]s to help teach [florist]s just starting off, doubling their gathering rate',
                icon: [0, 7, "magix2"],
                cost: { 'insight II': 9, 'nature book': 100 },
                req: { 'eota': true },
                effects: [
                ],
            });
            new G.Tech({
                name: 'more useful bricks', category: 'tier1',
                desc: 'So far, you have only been able to construct [brick house with a silo,Brick houses] with your [brick]s, but you are sure that there could be more uses for them. @unlocks buildings that require [brick]s in the future',
                icon: [0, 39, "magixmod", 5, 2, "magixmod"],
                cost: { 'insight': 1200, 'brick': 1500 },
                req: { 'construction II': true },
                effects: [
                ],
            });
            new G.Tech({
                name: 'festive robot print II', category: 'seasonal',
                desc: '[f.r.o.s.t.y] is no longer so limited!',
                icon: [0, 39, "magixmod", 14, 12, 'seasonal'],
                cost: { 'insight II': 8 },
                req: { 'the christmas': true, 'snowmen': true, 'eotm': true },
                effects: [
                    {
                        type: 'function', func: function () {
                            G.getDict("f.r.o.s.t.y").limitPer.land = 2500
                        }
                    }
                ],
            });
            new G.Tech({
                name: 'ultimate mushroom crafting', category: 'tier1',
                desc: 'Getting this makes [blacksmith workshop]s twice as likely to craft [golden mushroom]s successfully!',
                icon: [1, 39, "magixmod", 7, 5, "magix2", 24, 1],
                cost: { 'insight II': 320, 'culture': 35 },
                req: { 'eota': true, 'mushroom crafting': true },
                chance: 1.5,
                effects: [
                ],
            });


            new G.Res({
                name: 'drought year old', //A resource that tells you the next predicted drought
                displayName: 'Next predicted drought year',
                desc: 'This number is the predicted year that the next drought will be at. It may be off by a year or two or not happen in the first place!',
                icon: [9, 10],
                category: 'demog',
                getDisplayAmount: function () {
                    return "???"; //(B(G.has('time measuring 1/2') && isFinite(G.getRes('drought year').amount)) ? G.getRes('drought year').amount : "???")
                },
            });
            new G.Res({
                name: 'honey', //Added by @1_e0 (the only food that doesn't spoil)
                desc: 'Eating [honey] is both extraordinarily satisfying and quite healthy for the body, and is even better when eaten in combination with other [food]. Although it is quite difficult to find, it never spoils and will provide the most [happiness] out of all [food]! //<small>yummers</small>',
                icon: [3, 1, "magix2"],
                turnToByContext: { 'eating': { 'health': 0.03, 'happiness': 0.1 }, 'decay': { 'honey': 1 } },
                partOf: 'food',
                category: 'food',
            });
            new G.Res({
                name: 'honeycomb', //Added by @1_e0 (well, the only OTHER food that doesn't spoil)
                desc: 'Although [honeycomb]s may be difficult to find, they are absolutely packed with various nutrients and quite tasty! They will never spoil and provide the most [health] out of any other [food].',
                icon: [2, 1, "magix2"],
                turnToByContext: { 'eating': { 'health': 0.15, 'happiness': 0.025 }, 'decay': { 'honeycomb': 1 } },
                partOf: 'food',
                category: 'food',
            });
            new G.Res({
                name: 'deep ocean',
                desc: '[deep ocean] is a strange and rather wasteful ocean tile that is produced when your [wtr] tiles decay. It cannot be used for construction or buildings, sadly, except for building the wonder in this Trial.',
                icon: [9, 0, "magix2"],
                category: 'terr',
                tick: function (me, tick) {
                    if (G.has('t6') && G.year >= 7) {
                        me.amount += 0.02 + G.ocean * 0.0015
                    }
                }
            });
            new G.Res({
                name: 'golden fish',
                desc: '[golden fish] are created using some [precious metal ingot]s and [seafood,Fish], as well as a little luck. //<small>Seems to be a lot of work just for a little decoration...</small>',
                icon: [5, 0, "magix2"],
                category: 'build',
            });
            new G.Res({
                name: 'wtrDecay', //Debug res to track ocean decay; can have an override or become positive if you wish
                displayName: 'Water decay',
                icon: [3, 0, "magix2"],
                hidden: true,
                tick: function (me, tick) {
                    if (G.has('t6') && G.year >= 5) {
                        var decayMult = (G.has('ocean decay I') ? 0.6 : 1) * (G.has('ocean decay II') ? 0.6 : 1) * (G.has('ocean decay III') ? 0.6 : 1) * (G.has('ocean decay IV') ? 0.6 : 1) * (G.has('ocean decay V') ? 0.6 : 1) * Math.min(0.3 + G.year * 0.08, 1)
                        if (G.day % 30 == 0) {
                            me.amount += Math.pow(G.year * 0.5, 1.8) * decayMult
                        }
                        me.amount += (0.03 + G.getRes('land').amount * 0.0015) * decayMult - (G.day % 5 == 0 && G.has('ocean reversion') ? 1 : 0)
                        me.amount = Math.min(me.amount, 0)
                    }
                }
            });
            new G.Res({
                name: 'exotic fruit',
                desc: '[exotic fruit] have a particularly pleasing taste and appearance that your people love. These are consumed as a more tasty alternative to [fruit], but are rarer to come by (and require a few researches to get).',
                icon: [9, 2, "magix2"],
                turnToByContext: { 'eating': { 'health': 0.02, 'happiness': 0.0275 }, 'decay': { 'spoiled food': 1 } },
                partOf: 'food',
                category: 'food',
            });
            new G.Res({
                name: 'exotic juices',
                desc: '[exotic juices] are super popular and taste very unique, meaning people will drink them a little faster. They also provide much more [happiness] than normal [juices]!',
                icon: [10, 2, "magix2"],
                tick: function (me, tick) {
                    if (G.checkPolicy('disable spoiling') == 'off') {
                        var toSpoil = me.amount * 0.012;
                        var spent = G.lose(me.name, randomFloor(toSpoil), 'drinking exotic juices');
                        G.gain('health', spent * 0.2, 'drinking exotic juices');
                        changeHappiness(spent * 1.2, 'drinking exotic juices');
                        G.gain('spoiled juices', randomFloor(spent * 0.32), 'decay');
                    }
                },
            });
            new G.Res({
                name: 'spices',
                desc: '[spices] are, well, spicy to the tongue, and are great when combined with other tasty foods!',
                icon: [11, 2, "magix2"],
                partOf: 'misc materials',
                category: 'misc',
            });
            new G.Res({
                name: 'hive frame',
                desc: 'Each [hive frame] is carefully crafted from part of a [log] and may be used in beekeeping. They will work for all types of [honey] collection, although essenced collection will make these more effective.',
                icon: [6, 1, "magix2"],
                partOf: 'misc materials',
                category: 'misc',
            });
            new G.Res({
                name: 'essenced hive frame',
                desc: 'Each and every [essenced hive frame] is meticulously crafted with the utmost care, and can be used with [nature essence] to get [honey] and [honeycomb]s quickly.',
                icon: [8, 1, "magix2"],
                partOf: 'misc materials',
                category: 'misc',
            });
            new G.Res({
                name: 'artist',
                desc: '[artist]s are those who have studied art from a young age and have turned into [adult]s.They are able to draw [painting]s (and very rarely, they may produce an incredible [work of art]).',
                category: 'demog',
                partOf: 'population',
                icon: [8, 3, "magix2"],
                tick: function (me, tick) {
                    var n = randomFloor(G.getRes('artist').amount * 0.0002);
                    G.gain('painting', randomFloor(G.getRes('artist').amount * 0.3), 'artists painting');
                    G.gain('work of art', randomFloor(G.getRes('artist').amount * 0.0001), 'artists painting');
                    G.gain('elder', n, 'aging up');
                    G.lose('artist', n, 'aging up');
                },
            });
            new G.Res({
                name: 'virtuoso of art',
                desc: '[virtuoso of art,Virtuosos of art] are the best of the best. These students have grown into true artists, and will produce a variety of [painting]s and [work of art,Works of art] with their gifted talent and skill. //<small>what about pixel art?</small>',
                category: 'demog',
                partOf: 'population',
                icon: [9, 3, "magix2"],
                tick: function (me, tick) {
                    var n = randomFloor(G.getRes('virtuoso of art').amount * 0.0002);
                    G.gain('painting', randomFloor(G.getRes('virtuoso of art').amount * 1), 'virtuosos of art painting');
                    G.gain('work of art', randomFloor(G.getRes('virtuoso of art').amount * 0.03), 'virtuosos of art painting');
                    G.gain('elder', n, 'aging up');
                    G.lose('virtuoso of art', n, 'aging up');
                },
            });
            new G.Res({
                name: 'work of art',
                desc: '[work of art,Works of art] are truly thought-provoking and amazing artworks that capture the culture of your people well. These will decay into [culture II].',
                icon: [10, 3, "magix2"],
                category: 'misc',
                tick: function (me, tick) {
                    var toSpoil = me.amount * 0.0001;
                    if (G.has('art shows')) {
                        toSpoil *= 0.7; //art shows decrease the decay of works of art
                        G.gain('culture II', randomFloor(toSpoil * 0.3), 'art shows');
                    }
                    var spent = G.lose(me.name, randomFloor(toSpoil), 'decay');
                    G.pseudoGather(G.getRes('culture II'), randomFloor(spent));
                },
            });
            new G.Res({
                name: 'valuable gems',
                desc: 'These are extremely expensive and hard-to-find [valuable gems,Gems] with a unique color, clarity, and look. Can be processed into [valuable gem block,Blocks]!',
                icon: [2, 4, "magix2"],
                partOf: 'misc materials',
                category: 'build',
            });
            new G.Res({
                name: 'valuable gem block',
                desc: 'These have unique colors and refract light in all directions. These might be displayed in cultural exhibits!',
                icon: [3, 4, "magix2"],
                partOf: 'misc materials',
                category: 'build',
            });
            new G.Res({
                name: 'charcoal',
                desc: 'A useful fuel for creating a source of heat. //<small>no, you cannot eat it!</small>',
                icon: [5, 4, "magix2"],
                partOf: 'misc materials',
                category: 'build',
            });
            new G.Res({
                name: 'kelp2',
                displayName: 'Kelp',
                desc: 'May be eaten along with other [food], providing some easy [health] benefits.',
                icon: [4, 5, "magix2"],
                turnToByContext: { 'eating': { 'health': 0.035, 'happiness': 0.02 } },
                partOf: 'food',
                category: 'food',
            });
            new G.Res({
                name: 'mushroom',
                desc: 'Unfortunately not edible, as the vast majority are dangerous. :(',
                icon: [5, 5, "magix2"],
                partOf: 'misc materials',
                category: 'misc'
            });
            new G.Res({
                name: 'golden mushroom',
                desc: 'Certainly not edible, but has its niche uses. :)',
                icon: [6, 5, "magix2"],
                partOf: 'misc materials',
                category: 'misc'
            });
            new G.Res({
                name: 'idea tablet',
                desc: 'A unique tablet that lets you unlock more complex researches.',
                icon: [4, 6, "magix2"],
                category: 'main',
                tick: function (me, tick) {
                    var index = G.unitsOwnedNames.indexOf("well of ideas")
                    if (index !== -1 && G.unitsOwned[index]) {
                        var percent = G.unitsOwned[index].percent
                        var inflation = percent > 0 ? Math.pow(Math.floor(percent * 0.1) * 0.24, 0.82) + 1 : 1
                        G.getDict("well of ideas").costPerStep = { 'platinum block': 15 * Math.sqrt(inflation), 'golden mushroom': 100 * Math.pow(inflation, 0.9), 'precious building materials': 25 * Math.sqrt(inflation), 'herbs': 400000 * inflation, 'fruit': 100000 * inflation, 'vegetables': 20000 * inflation }
                    }
                }
            });




            /*=====================================================================================
            POLICIES
            =======================================================================================*/


            new G.Policy({
                name: 'disable aging',
                desc: 'Aging, disease, births, and deaths are disabled.',
                icon: [3, 12, 8, 3],
                cost: {},
                startWith: true,
                category: 'debug',
            });
            new G.Policy({
                name: 'disable eating',
                desc: 'Eating and drinking are disabled.',
                icon: [3, 12, 3, 6],
                cost: {},
                startWith: true,
                category: 'debug',
            });
            new G.Policy({
                name: 'disable spoiling',
                desc: 'All resource spoilage is disabled.',
                icon: [3, 12, 3, 7],
                cost: {},
                startWith: true,
                category: 'debug',
            });
            new G.Policy({
                name: 'child workforce',
                desc: '[child,Children] now count as [worker]s; working children are more prone to accidents and malnutrition. They will also require <b>10% more food</b> with this enabled. //<q>Can\'t you just make them work willingly? Do you really have to force them to?</q>',
                icon: [7, 12, 3, 3],
                cost: { 'influence': 2 },
                req: { 'tribalism': true },
                category: 'work',
            });
            new G.Policy({
                name: 'elder workforce',
                desc: '[elder]s now count as [worker]s; working elders are more prone to accidents and malnutrition and early death. //<b>In addition, [sick] and [wounded] people will age after recovering, and other [worker]s are at a higher risk of being [wounded] due to additional risks.</b>',
                //an interesting side-effect of this and how population is coded is that elders are now much more prone to illness and wounds, and should they recover they will magically turn back into adults, thus blessing your civilization with a morally dubious way of attaining eternal life
                //however, i've balanced this by making sick and wounded people turn into elders when healed whenever this policy is on!
                icon: [7, 12, 5, 3],
                cost: { 'influence': 2 },
                req: { 'tribalism': true },
                category: 'work',
            });
            new G.Policy({
                name: 'food rations',
                desc: 'Specifies how much [food] your people are given each day.//Bigger rations will make your people happier, while smaller ones may lead to sickness and starvation.',
                icon: [5, 12, 3, 6],
                cost: { 'influence': 2 },
                startMode: 'sufficient',
                req: { 'rules of food': true },
                modes: {
                    'none': { name: 'None', desc: 'Eating food is forbidden.<br>Your people will start to starve.' },
                    'meager': { name: 'Meager', desc: 'Your people receive half a portion per day.' },
                    'sufficient': { name: 'Sufficient', desc: 'Your people receive a full portion per day.' },
                    'plentiful': { name: 'Plentiful', desc: 'Your people receive a portion and a half per day.' },
                },
                category: 'food',
            });
            new G.Policy({
                name: 'water rations',
                desc: 'Specifies how much [water] your people are given each day.//Bigger rations will make your people happier, while smaller ones may lead to sickness and dehydration.',
                icon: [5, 12, 7, 6],
                cost: { 'influence': 2 },
                startMode: 'sufficient',
                req: { 'rules of food': true },
                modes: {
                    'none': { name: 'None', desc: 'Drinking water is forbidden.<br>Your people will start to die from dehydration.' },
                    'meager': { name: 'Meager', desc: 'Your people receive half a portion per day.' },
                    'sufficient': { name: 'Sufficient', desc: 'Your people receive a full portion per day.' },
                    'plentiful': { name: 'Plentiful', desc: 'Your people receive a portion and a half per day.', req: { 't3': false } },
                },
                category: 'food',
            });
            new G.Policy({
                name: 'eat spoiled food',
                desc: 'Your people will eat [spoiled food] when other [food] gets scarce, with dire consequences for health and morale.',
                icon: [6, 12, 3, 7],
                cost: { 'influence': 1 },
                startMode: 'on',
                req: { 'rules of food': true },
                category: 'food',
            });
            new G.Policy({
                name: 'drink muddy water',
                desc: 'Your people will drink [muddy water] when clean [water] gets scarce, with dire consequences for health and morale.',
                icon: [6, 12, 8, 6],
                cost: { 'influence': 1 },
                startMode: 'on',
                req: { 'rules of food': true },
                category: 'food',
            });
            new G.Policy({
                name: 'insects as food',
                desc: '[bugs] now count as [food], although most people find them unpalatable.',
                icon: [6, 12, 8, 11],
                cost: { 'influence': 1 },
                req: { 'rules of food': true },
                effects: [
                    { type: 'make part of', what: ['bugs'], parent: 'food' },
                ],
                effectsOff: [
                    { type: 'make part of', what: ['bugs'], parent: '' },
                ],
                category: 'food',
            });
            new G.Policy({
                name: 'eat raw meat and fish',
                desc: '[meat] and [seafood] are eaten raw, which may be unhealthy.',
                icon: [6, 12, 5, 7],
                cost: { 'influence': 1 },
                startMode: 'on',
                req: { 'rules of food': true },
                effects: [
                    { type: 'make part of', what: ['meat', 'seafood'], parent: 'food' },
                ],
                effectsOff: [
                    { type: 'make part of', what: ['meat', 'seafood'], parent: '' },
                ],
                category: 'food',
            });
            new G.Policy({
                name: 'fertility rituals',
                desc: 'Increases birth rates by 20%. Consumes 1 [faith] roughly every 20 days; will stop if you run out. //<small>we may need more people</small>',
                icon: [8, 12, 2, 3],
                cost: { 'faith': 1 },
                startMode: 'off',
                req: { 'ritualism': true },
                category: 'faith',
            });
            new G.Policy({
                name: 'harvest rituals',
                desc: 'Improves the speed of [gatherer]s, [hunter]s and [fisher]s by 10%. Consumes 1 [faith] roughly every 20 days; will stop if you run out. //<small>Tasty...I\'d like some more!</small>',
                icon: [8, 12, 4, 7],
                cost: { 'faith': 1 },
                startMode: 'off',
                req: { 'ritualism': true },
                category: 'faith',
            });
            new G.Policy({
                name: 'flower rituals',
                desc: 'People get sick slower and recover faster. Consumes 1 [faith] roughly every 20 days; will stop if you run out.',
                icon: [8, 12, 4, 5],
                cost: { 'faith': 1 },
                startMode: 'off',
                req: { 'ritualism': true },
                category: 'faith',
            });
            new G.Policy({
                name: 'wisdom rituals',
                desc: 'Improves [dreamer] and [storyteller] efficiency by 20%. Consumes 1 [faith] roughly every 20 days; will stop if you run out. //<small>Two plus two is four</small>',
                icon: [8, 12, 8, 5],
                cost: { 'faith': 1 },
                startMode: 'off',
                req: { 'ritualism': true },
                category: 'faith',
            });

            new G.Policy({
                name: 'population control',
                desc: 'Set rules on how many children your people are allowed to have. //<small>...no words for that</small>',
                icon: [4, 12, 2, 3],
                cost: { 'influence': 3 },
                startMode: 'normal',
                req: { 'tribalism': true },
                modes: {
                    'forbidden': { name: 'Forbidden', desc: 'Your people are not allowed to make children.//Your population will not grow.' },
                    'limited': { name: 'Limited', desc: 'Your people are only allowed to have one child.//Your population will grow slowly.' },
                    'normal': { name: 'Normal', desc: 'You have no specific rules regarding children.//Your population will grow normally.' },
                },
                category: 'population',
            });
            //MAGIX
            new G.Policy({
                name: 'harvest rituals for flowers',
                displayName: 'flower harvesting rituals',
                desc: 'Improves the speed of [florist]s by 20%. Consumes 1 [faith] and 1 [influence] roughly every 20 days; will stop if you run out.',
                icon: [8, 12, 11, 8, "magixmod"],
                cost: { 'faith': 1, 'influence': 3 },
                startMode: 'off',
                req: { 'ritualism': true, 'a gift from the mausoleum': true },
                category: 'faith',
            });
            new G.Policy({
                name: 'crafting & farm rituals',
                desc: 'Improves [Paper-crafting shack]s, [Well of mana,Wells of mana], various crafting units, and [vegetable farm,Farms] by various amounts. Consumes 10 [faith] and 10 [influence] roughly every 20 days; will stop if you run out.',
                icon: [8, 12, 14, 2, "magixmod"],
                cost: { 'faith': 5, 'influence': 5 },
                startMode: 'off',
                req: { 'ritualism': true, 'papercrafting': true },
                category: 'faith',
            });
            new G.Policy({
                name: 'Teach alchemists',
                desc: 'This policy is not used for anything.',
                icon: [12, 9, "magixmod", 12, 5, "magixmod"],
                cost: { 'land': 1000000000 },
                startMode: 'on',
                req: { 'tribalism': false },
                skip: true
            });
            new G.Policy({
                name: 'se01', //This value is a raw ID and is kept to prevent crashes; the display names still work properly
                displayName: 'Chra-nos The Seraphin of Time',
                desc: 'The effect depends on time.<br><font color="lime">Each year, [food] decays slower by 0.1% (range: 1 to 10%). This bonus applies to [water] as well, but is only half as powerful.</font><br><hr color="fuschia"><font color="#f70054">Backfire: All miscellaneous materials decay faster.</font>',
                icon: [29, 25, "magixmod"],
                cost: { 'worship point': 1, 'faith II': 10 },
                startMode: 'off',
                req: { 'pantheon key': true },
                category: 'pantheon',
            });
            new G.Policy({
                name: 'drink spoiled juice',
                desc: 'Your people will drink [spoiled juices] even when you have clean [water], with very dire consequences for health and morale.',
                icon: [6, 12, 14, 5, "magixmod"],
                cost: { 'influence': 3 },
                startMode: 'off',
                req: { 'rules of food': true, 'juice-crafting': true },
                category: 'food',
            });
            new G.Policy({
                name: 'drink cloudy water',
                desc: 'Your people will drink [cloudy water], which has the same positive effects as [water].',
                icon: [6, 12, 11, 14, "magixmod"],
                cost: { 'influence': 1 },
                startMode: 'on',
                req: { 'rules of food': true, 'paradise building': true },
                category: 'food',
            });
            new G.Policy({
                name: 'theme changer',
                desc: 'Let your population enjoy various themes! Only applies to background and only switches every ten days. //<small>Life has its theme too...</small>',
                icon: [28, 21, "magixmod"],
                cost: {},
                req: { 'life has its theme': true },
                startMode: 'Default',
                modes: {
                    'Default': { name: 'Default', desc: 'Switches to the default theme.', icon: [4, 22, "magixmod"] },
                    'Green': { name: 'Green', desc: 'Switches to the green theme.', icon: [3, 22, "magixmod"] },
                    'Blue': { name: 'Blue', desc: 'Switches to the blue theme.', icon: [2, 22, "magixmod"] },
                    'Red': { name: 'Red', desc: 'Switches to the red theme.', icon: [0, 22, "magixmod"] },
                    'Cyan': { name: 'Cyan', desc: 'Switches to the cyan theme.', icon: [5, 22, "magixmod"] },
                    'Gray': { name: 'Gray', desc: 'Switches to the gray theme.', icon: [1, 22, "magixmod"] },
                    'Indigo': { name: 'Indigo', desc: 'Switches to the indigo theme. A reward for getting <b>Magical victory</b>.', req: { 'magical presence': true } },
                    'Bronze': { name: 'Bronze', desc: 'Switches to the bronze theme. A reward for getting <b>Next to the Deities</b>.', req: { 'life in faith': true } },
                    'Silver': { name: 'Silver', desc: 'Switches to the silver theme. A reward for getting <b>Next to the Deities</b>.', req: { 'life in faith': true } },
                    'Golden': { name: 'Golden', desc: 'Switches to the golden theme. A reward for getting <b>Next to the Deities</b>.', req: { 'life in faith': true } },
                    'Black': { name: 'Black', desc: 'Switches to the black theme. A reward for getting <b>Talented?</b>.', req: { 'smaller shacks': true } },
                },
                category: 'work',
            });


            new G.Policy({
                name: 'se02',
                displayName: 'Bersaria the Seraphin of Madness',
                desc: '<font color="lime">Increases the speed of thief hunters and other guards by 40%.</font><br><hr color="fuschia"><font color="#f70054">Backfire: Harms [happiness] and makes thieves appear 2% more.</font>',
                icon: [28, 25, "magixmod"],
                cost: { 'worship point': 1, 'faith II': 10 },
                startMode: 'off',
                req: { 'pantheon key': true },
                category: 'pantheon',
            });
            new G.Policy({
                name: 'se03',
                displayName: 'Tu-ria the Seraphin of Inspiration',
                desc: '<font color="lime">Doubles [culture] gathering and decreases the [population] limit of [musician]s.</font><br><hr color="fuschia"><font color="#f70054">Backfire: [dreamer]s gather 5% less [insight] and [faith,faith units] gather 5% less [faith].</font>',
                icon: [27, 25, "magixmod"],
                cost: { 'worship point': 1, 'faith II': 10 },
                startMode: 'off',
                req: { 'pantheon key': true },
                category: 'pantheon',
                effects: [
                    {
                        type: 'function', func: function () {
                            G.getDict('musician').limitPer = { 'population': 250 }
                        }
                    }
                ],
            });
            new G.Policy({
                name: 'se04',
                displayName: 'Hartar the Seraphin of Hunting',
                desc: '<font color="lime">Increases the efficiency of [hunter]s by 35%. For [fishers & hunters camp], your [meat] gain will increase by that amount as well.</font><br><hr color="fuschia">This Seraphin doesn\'t have a backfire, but choosing [se04] blocks you from [se05] unless you unselect this Seraphin.',
                icon: [26, 25, "magixmod"],
                cost: { 'worship point': 1, 'faith II': 10 },
                startMode: 'off',
                req: { 'pantheon key': true },
                category: 'pantheon',
            });
            new G.Policy({
                name: 'se05',
                displayName: 'Fishyar the Seraphin of Fishing',
                desc: '<font color="lime">Increases the efficiency of fishing units by 35%. After [hunters & fishers unification], it increases income of [seafood] by that amount as well.</font><br><hr color="fuschia">This Seraphin doesn\'t have a backfire, but choosing [se05] blocks you from [se04] unless you unselect this Seraphin.',
                icon: [25, 25, "magixmod"],
                cost: { 'worship point': 1, 'faith II': 10 },
                startMode: 'off',
                req: { 'pantheon key': true },
                category: 'pantheon',
            });
            new G.Policy({
                name: 'se06',
                displayName: 'Posi\'zul the Seraphin of Water',
                desc: '<font color="lime">Decreases the rate of [water] spoiling and increases the speed of all well types by 25%.</font><br><hr color="fuschia"><font color="#f70054">Backfire: Increases your [food] spoiling rate slightly.</font>',
                icon: [8, 0, "magix2"],
                cost: { 'worship point': 1, 'faith II': 10 },
                startMode: 'off',
                req: { 'pantheon key': true },
                category: 'pantheon',
            });
            new G.Policy({
                name: 'se07',
                displayName: 'Herbalia the Seraphin of Recovery',
                desc: '<font color="lime">Boosts your [health] level. [healer]s are 25% more efficient.</font><br><hr color="fuschia"><font color="#f70054">Backfire: the upper limit of [happiness] is now 175%, and [happiness] decreases a little faster when negative. [gatherer]s will also gain 15% less.</font>',
                icon: [7, 0, "magix2"],
                cost: { 'worship point': 1, 'faith II': 10 },
                startMode: 'off',
                req: { 'pantheon key': true },
                category: 'pantheon',
            });
            new G.Policy({
                name: 'se08',
                displayName: 'Buri\'o dak the Seraphin of Burial',
                desc: '<font color="lime">Each [burial spot] will 10% more [corpse]s or 5 [urn]s instead.</font><br><hr color="fuschia"><font color="#f70054">Backfire: Harms your [health] by a very very small amount and decreases [healer] efficiency by 5%.</font>',
                icon: [22, 25, "magixmod"],
                cost: { 'worship point': 1, 'faith II': 10 },
                startMode: 'off',
                req: { 'pantheon key': true },
                category: 'pantheon',
            });
            new G.Policy({
                name: 'se09',
                displayName: 'Moai the Seraphin of the Stone',
                desc: '<font color="lime">All [mine]s are 25% more efficient. (Doesn\'t apply to [gems] and only applies to [prospecting] modes.) Also, [digger]s are 2% more efficient and [carver]s work 3% faster at modes related to [stone].</font><br><hr color="fuschia"><font color="#f70054">Backfire: [well]s are 15% less efficient (not including [Well of mana,Wells of mana]) and [artisan]s are 7.5% less efficient.</font>',
                icon: [21, 25, "magixmod"],
                cost: { 'worship point': 1, 'faith II': 10 },
                startMode: 'off',
                req: { 'pantheon key': true },
                category: 'pantheon',
            });
            new G.Policy({
                name: 'se10',
                displayName: 'Mamuun the Seraphin of Richness',
                desc: '<font color="lime">Gold and [precious building materials] decay 10% slower. You\'ll also unlock a variety of Trials.</font><br><hr color="fuschia"><font color="#f70054">Backfire: [archaic building materials] decay 40% faster, [basic building materials] decay 12% faster, and [advanced building materials] decay 3% faster. [food] will also spoil faster.</font>',
                icon: [20, 25, "magixmod"],
                cost: { 'worship point': 1, 'faith II': 10 },
                startMode: 'off',
                req: { 'pantheon key': true },
                category: 'pantheon',
            });
            new G.Policy({
                name: 'se11',
                displayName: 'An Enlightened Seraphin of Faith',
                desc: '<font color="lime">All [faith] gathering is increased by 25%. [faith II] is produced 50% faster.</font><br><hr color="fuschia"><font color="#f70054">Backfire: All [influence] and [insight] units are weakened by 25% (including [guru]s).</font>',
                icon: [19, 25, "magixmod"],
                cost: { 'worship point': 1, 'faith II': 10 },
                startMode: 'off',
                req: { 'pantheon key': true },
                category: 'pantheon',
            });
            new G.Policy({
                name: 'se12',
                displayName: 'Okar the Seer the Seraphin of Knowledge',
                desc: '<font color="lime">[guru] and [dreamer]s are 50% more efficient.</font><br><hr color="fuschia"><font color="#f70054">Backfire: [dreamer]s and [guru]s will require [food] and [water] as upkeep. Weakens [gatherer]s and [florist]s by 20%. [culture] gain from units will be lowered by 10%.</font>',
                icon: [18, 25, "magixmod"],
                cost: { 'worship point': 1, 'faith II': 10 },
                startMode: 'off',
                req: { 'pantheon key': true },
                category: 'pantheon',
            });
            function trialPrep(trialStrId) {
                setTimeout(function () {
                    G.dialogue.close();
                    G.getDict("research box").choices = [];
                    G.unitsOwned.length = 0;
                    G.policy.length = 0;
                    G.techN = 0; G.traitN = 0;
                    G.traitsOwned.length = 0;
                    G.techsOwned.length = 0;

                    for (i in G.res) {
                        G.res[i].amount = 0;
                        G.res[i].used = 0;
                        G.res[i].visible = false;
                    }
                    G.NewGameConfirm();
                    G.doFunc('new game');
                    G.fastTicks = 0;
                    G.gainTrait(G.traitByName[trialStrId]);
                    G.gainTrait(G.traitByName['trial']);
                    G.gainTech(G.techByName['a gift from the mausoleum']);
                    G.year = 0; G.day = 0;
                    G.getRes('influence').amount = G.getRes('authority').amount;
                    G.Save();
                    onbeforeunload = null;
                    location.reload();
                }, 1000)
            }
            var noteStr = 'Note: Starting a trial will be similar to a full ascension, but only some bonuses from achievements will carry to the Trial. These are the +1 tech choice bonus (from Row 3\'s completion) and a possible earlier Seraphin unlock based on your Victory points.'
            new G.Policy({
                name: 'Patience',
                desc: 'Starts [se01] (you will be warned and given more info before starting).',
                icon: [24, 18, "magixmod", 29, 25, "magixmod", 1, 22, "magixmod"],
                startMode: 'off', cost: {},
                req: { 'se01': 'on' },
                category: 'trial',
                effects: [
                    {
                        type: 'function', func: function () {
                            G.dialogue.popup(function (div) {
                                return '<div style="width:580px;min-height:550px;height:75%;">' +
                                    '<div class="fancyText title"><font color="#d4af37" size="5">- - Patience - -</font></div>' +
                                    '<div class="fancyText">The Chra-nos trial</font></div><br>' +
                                    '<img class="pixelate" src="' + magixURL + '1.png" width="72" height="72"/>' +
                                    '<div class="fancyText bitBiggerText scrollBox underTitle" style="text-align:left;padding:32px;">' +
                                    '<br><br><Br><br>' +
                                    '<center><font color="#f70054">' + noteStr + '</font>' +
                                    '<br>Trial rules<br>' +
                                    'Enter the plane where I will show you that the time is mo\' than just years and days, weeks and months. Each year in my plane will decrease productivity of all your units by a random amount up to 0.5%, and the penalty from unhappiness is more aggressive. In addition, Dreamers in this plane don\'t exist, and neither do Thieves, but I will bring down to you arandom amount of <font color="#f4b">Insight</font> each year (in this trial, the amount of <font color="#f4b">Insight</font> can be equal to 160% of <font color="#f4b">Wisdom</font> amount). Finish the trial by building the wonder and ascending for me. I will reward you with a small improvement. After each trial completion, the bonus cap will be increased by 2.5% and other parts of the trial will get harder too. (Like most other trials, this trial is repeatable but will get harder and harder after each completion.)<br><Br><BR>' +
                                    '<div class="fancyText title">Tell me your choice now...</div>' +
                                    '<center>' + G.button({
                                        text: 'Start the trial', tooltip: 'Let the Trial begin. You\'ll pseudoascend.',
                                        onclick: function () {
                                            trialPrep("t1");
                                            G.dialogue.popup(function (div) {
                                                G.middleText('The Patience trial has been started. You are in Chra-nos\'s plane now.', 'slow');
                                                G.Save(); return '<div class="fancyText">Alrighty then...good luck<br>The trial will begin :)</font></div>' + G.dialogue.getCloseButton('Okay')
                                            })
                                        }
                                    }) + '' + G.button({ tooltip: 'You can always choose to do this Trial another time or prepare first.', text: 'Wait, I\'m not ready yet!', onclick: function () { G.dialogue.forceClose(); G.setPolicyModeByName('Patience', 'off'); } }) + '</center>' +
                                    '</div>' +
                                    '</div><div class="buttonBox">' +
                                    '</div></div>'
                            })
                        }
                    }
                ],
            });
            new G.Policy({
                name: 'Unhappy',
                desc: 'Starts [se02] (you will be warned and given more info before starting).',
                icon: [24, 18, "magixmod", 28, 25, "magixmod", 1, 22, "magixmod"],
                startMode: 'off', cost: {},
                req: { 'se02': 'on' },
                category: 'trial',
                effects: [
                    {
                        type: 'function', func: function () {
                            G.dialogue.popup(function (div) {
                                return '<div style="width:580px;min-height:550px;height:75%;">' +
                                    '<div class="fancyText title"><font color="#d4af37" size="5">- - Unhappy - -</font></div>' +
                                    '<div class="fancyText">The Bersaria trial</font></div><br>' +
                                    '<img class="pixelate" src="' + magixURL + '2.png" width="72" height="72"/>' +
                                    '<div class="fancyText bitBiggerText scrollBox underTitle" style="text-align:left;padding:32px;">' +
                                    '<br><br><br><br>' +
                                    '<center><font color="#f70054">' + noteStr + '</font>' +
                                    '<br>Trial rules<br>' +
                                    'I am a Madness. This plane is full of anger...No way to make\'em happy. You will somehow have to handle it. In fact, people\'s happiness will start at -200% and can\'t be raised, and will decrease as time passes. In addition, the penalty from unhappiness is more aggressive. Reaching -400% happiness causes Madness to kick you out of this plane. Every 3 discoveries, My penalty from unhappiness raises up by 10% (which compounds). Construct a Wonder of Madness for Bersaria and ascend using it to finish the challenge. Beating mah challenge for the first time will make mah backfire strong and thee Thieves al-most unharmable!<br><Br><BR>' +
                                    '<div class="fancyText title">Tell me your choice...</div>' +
                                    '<center>' + G.button({
                                        text: 'Start the trial', tooltip: 'Let the Trial begin. You\'ll pseudoascend.',
                                        onclick: function () {
                                            trialPrep("t2");
                                            G.dialogue.popup(function (div) {
                                                G.middleText('The Unhappy trial has been started. You are in Bersaria\'s plane now.', 'slow');
                                                G.Save(); return '<div class="fancyText">Alrighty then...good luck<br>The trial will begin :)</font></div>' + G.dialogue.getCloseButton('Okay')
                                            })
                                        }
                                    }) + '' + G.button({ tooltip: 'You can always choose to do this Trial another time or prepare first.', text: 'Wait, I\'m not ready yet!', onclick: function () { G.dialogue.forceClose(); G.setPolicyModeByName('Unhappy', 'off'); } }) + '</center>' +
                                    '</div>' +
                                    '</div><div class="buttonBox">' +
                                    '</div></div>'
                            })
                        }
                    }
                ],
            });
            new G.Policy({
                name: 'Cultural',
                desc: 'Starts [se03] (you will be warned and given more info before starting).',
                icon: [24, 18, "magixmod", 27, 25, "magixmod", 1, 22, "magixmod"],
                startMode: 'off', cost: {},
                req: { 'se03': 'on' },
                category: 'trial',
                effects: [
                    {
                        type: 'function', func: function () {
                            G.dialogue.popup(function (div) {
                                return '<div style="width:580px;min-height:550px;height:75%;">' +
                                    '<div class="fancyText title"><font color="#d4af37" size="5">- - Cultural - -</font></div>' +
                                    '<div class="fancyText">The Turia<br></div><br>' +
                                    '<img class="pixelate" src="' + magixURL + '3.png" width="72" height="72"/>' +
                                    '<div class="fancyText bitBiggerText scrollBox underTitle" style="text-align:left;padding:32px;">' +
                                    '<br><br><Br><br>' +
                                    '<center><font color="#f70054">' + noteStr + '</font>' +
                                    '<br>Trial rules<br>' +
                                    'I am a personification of Inspiration. Ya met me ' + G.getName('ruler') + '! Ya want me to be closer to ya and your people. Al tha right! But show me ya are worthy of me. In my plane no one except me can gather <font color="#7bfe90">Culture</font> or <font color="#7bfe90">Influence</font> for ya. (their amounts can go past the cap but Tu-ria won\'t bring down to you the next portion if even just one of those essentials go past the cap) Onle me! Just me! Researching and discovering will be tougher. For this trial, your people\'s water rations cannot be set to plentiful (food rations can be still be set)! In addition, you will be forced to keep cultural stability. Doing anything related to researching or discovering causes stability to go low while doing cultural things will bring it up. (In addition, a few researches will increase the stability.) Don\'t get too little or too much (it will make the trial attempt fail). Completing mah challenge for the first time will encourage me to make yar Cultural units gain more Culture for ya. My penalty will go lower for ya.<br><Br><BR>' +
                                    '<div class="fancyText title">Tell me your choice...</div>' +
                                    '<center>' + G.button({
                                        text: 'Start the trial', tooltip: 'Let the Trial begin. You\'ll pseudoascend.',
                                        onclick: function () {
                                            trialPrep("t3");
                                            G.dialogue.popup(function (div) {
                                                G.middleText('The Cultural trial has been started. You are in Tu-ria\'s plane now.', 'slow');
                                                G.Save(); return '<div class="fancyText">Alrighty then...good luck<br>The trial will begin :)</font></div>' + G.dialogue.getCloseButton('Okay')
                                            })
                                        }
                                    }) + '' + G.button({ tooltip: 'You can always choose to do this Trial another time or prepare first.', text: 'Wait, I\'m not ready yet!', onclick: function () { G.dialogue.forceClose(); G.setPolicyModeByName('Cultural', 'off'); } }) + '</center>' +
                                    '</div>' +
                                    '</div><div class="buttonBox">' +
                                    '</div></div>'
                            })
                        }
                    }
                ],
            });
            new G.Policy({
                name: 'Hunted',
                desc: 'Starts [se04] (you will be warned and given more info before starting).',
                icon: [24, 18, "magixmod", 26, 25, "magixmod", 1, 22, "magixmod"],
                startMode: 'off', cost: {},
                req: { 'se04': 'on' },
                category: 'trial',
                effects: [
                    {
                        type: 'function', func: function () {
                            G.dialogue.popup(function (div) {
                                return '<div style="width:580px;min-height:550px;height:75%;">' +
                                    '<div class="fancyText title"><font color="#d4af37" size="5">- - Hunted - -</font></div>' +
                                    '<div class="fancyText">The Hartar<br></div><br>' +
                                    '<img class="pixelate" src="' + magixURL + '4.png" width="72" height="72"/>' +
                                    '<div class="fancyText bitBiggerText scrollBox underTitle" style="text-align:left;padding:32px;">' +
                                    '<br><br><Br><br>' +
                                    '<center><font color="#f70054">' + noteStr + '</font>' +
                                    '<br>Trial rules<br>' +
                                    'I am patron of hunters! But in my plane, you will hunt yourself instead by hunting your own weak points! In my plane, your people won\'t like the taste of green and will desperately wish for meat. <font color="pink">Gatherers</font> and <font color="pink">Fishers</font> don\'t exist there too. But you have no time for eating and being happy from the taste of hunted deer. Each year 3% of your people will die and your <font color="pink">Health</font> will go lower and lower, increasing your people\'s vulnerability to diseases. Happiness goes from -200% to just 98%. You\'ll be able to bring health back to 0 only once (via policies), but it will consume half of your total food. Build a wonder of my religion. After completing the trial for the first time, I will empower all hunting units and cooked meat, and cured meat will decay slower.<br><Br><BR>' +
                                    '<div class="fancyText title">Tell me your choice...</div>' +
                                    '<center>' + G.button({
                                        text: 'Start the trial', tooltip: 'Let the Trial begin. You\'ll pseudoascend.',
                                        onclick: function () {
                                            trialPrep("t4");
                                            G.dialogue.popup(function (div) {
                                                G.middleText('The Hunted trial has been started. You are in Hartar\'s plane now.', 'slow');
                                                G.Save(); return '<div class="fancyText">Alrighty then...good luck<br>The trial will begin :)</font></div>' + G.dialogue.getCloseButton('Okay')
                                            })
                                        }
                                    }) + '' + G.button({ tooltip: 'You can always choose to do this Trial another time or prepare first.', text: 'Wait, I\'m not ready yet!', onclick: function () { G.dialogue.forceClose(); G.setPolicyModeByName('Hunted', 'off'); } }) + '</center>' +
                                    '</div>' +
                                    '</div><div class="buttonBox">' +
                                    '</div></div>'
                            })
                        }
                    }
                ],
            });
            new G.Policy({
                name: 'sleepy insight',
                desc: 'At the start of a new year, you have a chance to gain some [insight]. This policy has a meter with a scale from 3 to 3. <>Modes less than 0 will cause the ability to be stronger at the cost of chance, while modes greater than 0 be less powerful, but with a larger chance.',
                icon: [8, 12, 33, 24, "magixmod"],
                cost: { 'faith': 10, 'insight': 2 },
                startMode: '0',
                req: { 'ritualism': true, 'sleep-speech': true },
                category: 'faith',
                modes: {
                    '-3': { name: '<font color="#3399ff">-3</font>', desc: 'A 8.25% chance to receive 13 to 27 [insight] at the start of new year.' },
                    '-2': { name: '<font color="#4dc3ff">-2</font>', desc: 'A 13.5% chance to receive 9 to 18 [insight] at the start of new year.' },
                    '-1': { name: '<font color="#B3ffff">-1</font>', desc: 'A 15% chance to receive 5 to 12 [insight] at the start of new year.' },
                    '0': { name: '0', desc: 'A 21% chance to receive 3 to 9 [insight] at the start of new year.' },
                    '+1': { name: '<font color="#ffc34d">+1</font>', desc: 'A 24% chance to receive 1 to 5 [insight] at the start of new year.' },
                    '+2': { name: '<font color="#ff884d">+2</font>', desc: 'A 28.5% chance to receive 0.25 to 2 [insight] at the start of new year.' },
                    '+3': { name: '<font color="#ff8066">+3</font>', desc: 'A 30.75% chance to receive 0.15 to 1.5 [insight] at the start of new year.' },
                },
            });

            new G.Policy({
                name: 'reset health level',
                desc: 'Resets your [health] back to 0%. Available only once per Hunted attempt and only exists in this trial.',
                icon: [21, 29, "magixmod"],
                cost: { 'influence': 1 },
                startMode: 'inactive',
                modes: {
                    'inactive': { name: 'Inactive', desc: 'This ability is currently unused and may be activated at any time.' },
                    'activate': { name: 'Activate', desc: 'You can only use this ability <b>once</b> (so be sure you want to use it)!' },
                    'alreadyused': { name: 'Already used', req: { 'tribalism': false } },
                },
                req: { 't4': true, 'trial': true },
                skip: true,
                category: 'population',
            });
            new G.Policy({
                name: 'Unfishy',
                desc: 'Starts [se05] (you will be warned and given more info before starting).',
                icon: [24, 18, "magixmod", 25, 25, "magixmod", 1, 22, "magixmod"],
                startMode: 'off', cost: {},
                req: { 'se10': 'on' },
                category: 'trial',
                effects: [
                    {
                        type: 'function', func: function () {
                            G.dialogue.popup(function (div) {
                                return '<div style="width:580px;min-height:550px;height:75%;">' +
                                    '<div class="fancyText title"><font color="#d4af37" size="5">- - Unfishy - -</font></div>' +
                                    '<div class="fancyText">The Fishyar<br></div><br>' +
                                    '<img class="pixelate" src="' + magixURL2 + 'Trial5.png" width="72" height="72"/>' +
                                    '<div class="fancyText bitBiggerText scrollBox underTitle" style="text-align:left;padding:32px;">' +
                                    '<br><br><Br><br>' +
                                    '<center><font color="#f70054">' + noteStr + '</font>' +
                                    '<br>Trial rules<br>' +
                                    'In this trial, your people hate fish, but they will become the only decent source of food (because gatherers are 80% worse at everything, but will now catch significant amounts of fish). Also, the idea of hunting does not exist here at all, and you\'ll have to deal with a drought that never ends, as well as a famine soon after. Platinum-working is a little cheaper, may be unlocked earlier, and will unlock platinum prospecting within mines as soon as you get it (only available in this specific trial). Wells are unlocked instantly and are cheaper, although they will be affected by the drought as well and will become much more limited. You\'ll have to deal with an angry tribe, as well as the fact that gatherers will not gather anything except for seafood. In addition, each year, you will have to provide <font color="#cc0671">Fruit</font> for your tribe, which will boost how happy your people are. Your people will also try to trade some uncooked <font color="#cc0671">Seafood</font> with Fishyar with some valuable water to fend off the eternal drought (Fishyar is trying rather forgivingly to help your people). For every step of the wonder that you complete, the drought will worsen, so be extra careful!<br><br><br>' +
                                    '<div class="fancyText title">Tell me your choice...</div>' +
                                    '<center>' + G.button({
                                        text: 'Start the trial', tooltip: 'Let the Trial begin. You\'ll pseudoascend.',
                                        onclick: function () {
                                            trialPrep("t5");
                                            G.dialogue.popup(function (div) {
                                                G.middleText('The Unfishy trial has been started. You are in Fishyar\'s plane now.', 'slow');
                                                G.Save(); return '<div class="fancyText">Alrighty then...good luck<br>The trial will begin :)</font></div>' + G.dialogue.getCloseButton('Okay')
                                            })
                                        }
                                    }) + '' + G.button({ tooltip: 'You can always choose to do this Trial another time or prepare first.', text: 'Wait, I\'m not ready yet!', onclick: function () { G.dialogue.forceClose(); G.setPolicyModeByName('Unfishy', 'off'); } }) + '</center>' +
                                    '</div>' +
                                    '</div><div class="buttonBox">' +
                                    '</div></div>'
                            })
                        }
                    }
                ],
            });
            new G.Policy({
                name: 'Ocean',
                desc: 'Starts [se06] (you will be warned and given more info before starting).',
                icon: [24, 18, "magixmod", 8, 0, "magix2", 1, 22, "magixmod"],
                startMode: 'off', cost: {},
                req: { 'se07': 'on' },
                category: 'trial',
                effects: [
                    {
                        type: 'function', func: function () {
                            G.dialogue.popup(function (div) {
                                return '<div style="width:580px;min-height:550px;height:75%;">' +
                                    '<div class="fancyText title"><font color="#d4af37" size="5">- - Oceanic - -</font></div>' +
                                    '<div class="fancyText">The Deep Ocean<br></div><br>' +
                                    '<img class="pixelate" src="' + magixURL2 + 'Trial6.png" width="72" height="72"/>' +
                                    '<div class="fancyText bitBiggerText scrollBox underTitle" style="text-align:left;padding:32px;">' +
                                    '<br><br><Br><br>' +
                                    '<center><font color="#f70054">' + noteStr + '</font>' +
                                    '<br>Trial rules<br>' +
                                    'In this trial, fish are the only acceptable source of meat. Gatherers become 60% less efficient and hunters no longer exist. In addition, bugs act as bait instead, which will allow you to catch fish (because of this, the upkeep of fishers is less and they work 50% faster). You will also be able to unlock boats and scouts earlier. After a few years, your people\'s valuable Land will gradually decay into Ocean, while those tiles themselves will gradually become Deep Ocean later on. Be warned: when you run out of land, you will immediately fail the trial! Luckily, there are a variety of techs in this specific trial that may be used to counter this decay. Can you stop the sinking of your civilization and prove your worth by collecting enough golden fish to satisfy the Deep Ocean?<br><br><br>' +
                                    '<div class="fancyText title">Tell me your choice...</div>' +
                                    '<center>' + G.button({
                                        text: 'Start the trial', tooltip: 'Let the Trial begin. You\'ll pseudoascend.',
                                        onclick: function () {
                                            trialPrep("t6");
                                            G.dialogue.popup(function (div) {
                                                G.middleText('The Ocean trial has been started. You are in Ocean\'s plane now.', 'slow');
                                                G.Save(); return '<div class="fancyText">Alrighty then...good luck<br>The trial will begin :)</font></div>' + G.dialogue.getCloseButton('Okay')
                                            })
                                        }
                                    }) + '' + G.button({ tooltip: 'You can always choose to do this Trial another time or prepare first.', text: 'Wait, I\'m not ready yet!', onclick: function () { G.dialogue.forceClose(); G.setPolicyModeByName('Ocean', 'off'); } }) + '</center>' +
                                    '</div>' +
                                    '</div><div class="buttonBox">' +
                                    '</div></div>'
                            })
                        }
                    }
                ],
            });
            new G.Policy({
                name: 'Herbalism',
                desc: 'Starts [se07] (you will be warned and given more info before starting).',
                icon: [24, 18, "magixmod", 7, 0, "magix2", 1, 22, "magixmod"],
                startMode: 'off', cost: {},
                req: { 'se07': 'on' },
                category: 'trial',
                effects: [
                    {
                        type: 'function', func: function () {
                            G.dialogue.popup(function (div) {
                                return '<div style="width:580px;min-height:550px;height:75%;">' +
                                    '<div class="fancyText title"><font color="#d4af37" size="5">- - Herbalism - -</font></div>' +
                                    '<div class="fancyText">The Herbalia<br></div><br>' +
                                    '<img class="pixelate" src="' + magixURL2 + 'Trial7.png" width="72" height="72"/>' +
                                    '<div class="fancyText bitBiggerText scrollBox underTitle" style="text-align:left;padding:32px;">' +
                                    '<br><br><Br><br>' +
                                    '<center><font color="#f70054">' + noteStr + '</font>' +
                                    '<br>Trial rules<br>' +
                                    'The only food acceptable here is healthy herbs. In this plane you start with <b>Wizardry</b> unlocked, as well as the ability to unlock mana wells and wands much earlier. Gatherers can exclusively gather herbs, but only in a very small area. To finish the wonder of Herbalia\'s plane, you will need Herb essence. Herb essence will be consumed by cultural, political, and exploring units as upkeep, and occasionally to keep happiness at a neutral level. Lacking Herb essence will make happiness and health drop significantly, as a lack of clothing or warmth won\'t drop its level as much as a lack of essence will. Completing this trial for the first time will remove the happiness drop from eating herbs, making these not affect its actual level.<br><br><br>' +
                                    '<div class="fancyText title">Tell me your choice...</div>' +
                                    '<center>' + G.button({
                                        text: 'Start the trial', tooltip: 'Let the Trial begin. You\'ll pseudoascend.',
                                        onclick: function () {
                                            trialPrep("t7");
                                            G.dialogue.popup(function (div) {
                                                G.middleText('The Herbalism trial has been started. You are in Herbalia\'s plane now.', 'slow');
                                                G.Save(); return '<div class="fancyText">Alrighty then...good luck<br>The trial will begin :)</font></div>' + G.dialogue.getCloseButton('Okay')
                                            })
                                        }
                                    }) + '' + G.button({ tooltip: 'You can always choose to do this Trial another time or prepare first.', text: 'Wait, I\'m not ready yet!', onclick: function () { G.dialogue.forceClose(); G.setPolicyModeByName('Herbalism', 'off'); } }) + '</center>' +
                                    '</div>' +
                                    '</div><div class="buttonBox">' +
                                    '</div></div>'
                            })
                        }
                    }
                ],
            });
            new G.Policy({
                name: 'Buried',
                desc: 'Starts [se08] (you will be warned and given more info before starting).',
                icon: [24, 18, "magixmod", 22, 25, "magixmod", 1, 22, "magixmod"],
                startMode: 'off', cost: {},
                req: { 'se10': 'on', 'voodoo spirit': false },
                category: 'trial',
                effects: [
                    {
                        type: 'function', func: function () {
                            if (G.achievByName['buried'].won > 0) {
                                G.setPolicyModeByName('Buried', 'off');
                                return
                            }
                            G.dialogue.popup(function (div) {
                                return '<div style="width:580px;min-height:550px;height:75%;">' +
                                    '<div class="fancyText title"><font color="#d4af37" size="5">- - Buried - -</font></div>' +
                                    '<div class="fancyText">The Buri\'o dak<br></div><br>' +
                                    '<img class="pixelate" src="' + magixURL + '8.png" width="72" height="72"/>' +
                                    '<div class="fancyText bitBiggerText scrollBox underTitle" style="text-align:left;padding:32px;">' +
                                    '<br><br><Br><br>' +
                                    '<center><font color="#f70054">' + noteStr + '</font>' +
                                    '<br>Trial rules<br>' +
                                    'My plane is full of one thing...Death. And it\'s full of darkness. Also, everything that provides you with <font color="white">Housing</font> is more powerful. However, every 300th morning and night cycle, some of your <font color="white">Housing</font> and <font color="white">Land</font> will decay and some of your <font color="white">People</font> will die, producing Dark Essence. You unlock the Wonder at the very beginning in this plane. Completing the trial will grant you a special award. You won\'t be able to do get anything from this trial again after its completion, however.<br><Br><BR>' +
                                    '<div class="fancyText title">Tell me your choice...</div>' +
                                    '<center>' + G.button({
                                        text: 'Start the trial', tooltip: 'Let the Trial begin. You\'ll pseudoascend.', onclick: function () {
                                            trialPrep("t8");
                                            G.dialogue.popup(function (div) {
                                                G.middleText('The Buried trial has been started. You are in Buri\'o dak\'s plane now.', 'slow');
                                                G.Save(); return '<div class="fancyText">Alrighty then...good luck<br>The trial will begin :)</font></div>' + G.dialogue.getCloseButton('Okay')
                                            })
                                        }
                                    }) + '' + G.button({ tooltip: 'You can always choose to do this Trial another time or prepare first.', text: 'Wait, I\'m not ready yet!', onclick: function () { G.dialogue.forceClose(); G.setPolicyModeByName('Buried', 'off'); } }) + '</center>' +
                                    '</div>' +
                                    '</div><div class="buttonBox">' +
                                    '</div></div>'
                            })
                        }
                    }
                ],
            });
            new G.Policy({
                name: 'Underground',
                desc: 'Starts [se09] (you will be warned and given more info before starting).',
                icon: [24, 18, "magixmod", 21, 25, "magixmod", 1, 22, "magixmod"],
                startMode: 'off', cost: {},
                req: { 'se10': 'on', 'tribalism': false },
                category: 'trial',
                skip: true,
                effects: [
                ],
            });
            new G.Policy({
                name: 'Pocket',
                desc: 'Starts [se10] (you will be warned and given more info before starting).',
                icon: [24, 18, "magixmod", 20, 25, "magixmod", 1, 22, "magixmod"],
                startMode: 'off', cost: {},
                req: { 'se10': 'on' },
                category: 'trial',
                effects: [
                    {
                        type: 'function', func: function () {
                            G.dialogue.popup(function (div) {
                                return '<div style="width:580px;min-height:550px;height:75%;">' +
                                    '<div class="fancyText title"><font color="#d4af37" size="5">- - Pocket - -</font></div>' +
                                    '<div class="fancyText">The Mamuun<br></div><br>' +
                                    '<img class="pixelate" src="' + magixURL + '10.png" width="72" height="72"/>' +
                                    '<div class="fancyText bitBiggerText scrollBox underTitle" style="text-align:left;padding:32px;">' +
                                    '<br><br><Br><br>' +
                                    '<center><font color="#f70054">' + noteStr + '</font>' +
                                    '<br>Trial rules<br>' +
                                    'My plane is for rich people. Are you one of them? Well. In this plane you will earn money. Gatherers can also gather money there...in 3 tiers. Also, exploring units are 250% as efficient. To buy resources that you can\'t gather, you will need the 3rd tier of currency. None of the crafting units exist (in fact, crafting isn\'t even possible in this plane)! Remember, however, that lower tiers of currency decay faster. From year ' + (80 - G.achievByName['pocket'].won * 2) + ' onwards, you will start losing money because of thievery, which is earlier than normal. See if you can lead your people to build a wonder of Mamuun and ascend! Completing this trial for the first time will increase the capacity of all [stockpile,storage units] by 35%. (Beating this trial a second time will increase the effect to 55%. You can only complete this trial 10 times.)<br><Br><BR>' +
                                    '<div class="fancyText title">Tell me your choice...</div>' +
                                    '<center>' + G.button({
                                        text: 'Start the trial', tooltip: 'Let the Trial begin. You\'ll pseudoascend.', onclick: function () {
                                            if (G.achievByName['pocket'].won >= 10) {
                                                G.setPolicyModeByName('Pocket', 'off');
                                                return
                                            }
                                            trialPrep("t10");
                                            G.dialogue.popup(function (div) {
                                                G.middleText('The Pocket trial has been started. You are in Mamuun\'s plane now.', 'slow');
                                                G.Save(); return '<div class="fancyText">Alrighty then...good luck<br>The trial will begin :)</font></div>' + G.dialogue.getCloseButton('Okay')
                                            })
                                        }
                                    }) + '' + G.button({ tooltip: 'You can always choose to do this Trial another time or prepare first.', text: 'Wait, I\'m not ready yet!', onclick: function () { G.dialogue.forceClose(); G.setPolicyModeByName('Pocket', 'off'); } }) + '</center>' +
                                    '</div>' +
                                    '</div><div class="buttonBox">' +
                                    '</div></div>'
                            })
                        }
                    }
                ],
            });
            new G.Policy({
                name: 'Faithful',
                desc: 'Starts [se11] (you will be warned and given more info before starting).',
                icon: [24, 18, "magixmod", 19, 25, "magixmod", 1, 22, "magixmod"],
                startMode: 'off', cost: {},
                req: { 'se11': 'on' },
                category: 'trial',
                effects: [
                    {
                        type: 'function', func: function () {
                            G.dialogue.popup(function (div) {
                                return '<div style="width:580px;min-height:550px;height:75%;">' +
                                    '<div class="fancyText title"><font color="#d4af37" size="5">- - Faithful - -</font></div>' +
                                    '<div class="fancyText">The Enlightened<br></div><br>' +
                                    '<img class="pixelate" src="' + magixURL + '11.png" width="72" height="72"/>' +
                                    '<div class="fancyText bitBiggerText scrollBox underTitle" style="text-align:left;padding:32px;">' +
                                    '<br><br><Br><br>' +
                                    '<center><font color="#f70054">' + noteStr + '</font>' +
                                    '<br>Trial rules<br>' +
                                    'Be faithful. Only faith will lead you to victory. In this plane you start with 100 <font color="#d51eef">Spirituality</font> and 100 <font color="#d51eef">Faith</font>. Each year you will lose ' + (5 + G.achievByName['faithful'].won) + ' Faith. Be careful! If you lose all of your Faith, you will immediately fail the trial and you will come back to the mortal world. The more you research, the more Faith you will lose. In addition, Soothsayer will only work at 10% of its normal efficiency. Build up a replacement of the Mausoleum...the Faithoselum...and try to ascend by it. Completing the trial causes Soothsayers to generate faith more, so early-game faith gathering will be easier because of Enlightened\'s helpers.' +
                                    '<div class="fancyText title">Tell me your choice...</div>' +
                                    '<center>' + G.button({
                                        text: 'Start the trial', tooltip: 'Let the Trial begin. You\'ll pseudoascend.', onclick: function () {
                                            trialPrep("t11");
                                            G.dialogue.popup(function (div) {
                                                G.middleText('The Faithful trial has been started. You are in Enlightened\'s plane now.', 'slow');
                                                return '<div class="fancyText">Alrighty then...good luck<br>The trial will begin :)</font></div>' + G.dialogue.getCloseButton('Okay')
                                            })
                                        }
                                    }) + '' + G.button({ tooltip: 'You can always choose to do this Trial another time or prepare first.', text: 'Wait, I\'m not ready yet!', onclick: function () { G.dialogue.forceClose(); G.setPolicyModeByName('Faithful', 'off'); } }) + '</center>' +
                                    '</div>' +
                                    '</div><div class="buttonBox">' +
                                    '</div></div>'
                            })
                        }
                    }
                ],
            });
            new G.Policy({
                name: 'Dreamy',
                desc: 'Starts [se12] (you will be warned and given more info before starting).',
                icon: [24, 18, "magixmod", 18, 25, "magixmod", 1, 22, "magixmod"],
                startMode: 'off',
                req: { 'se10': 'on', 'tribalism': false },
                category: 'trial',
                skip: true,
                effects: [
                ],
            });
            new G.Policy({
                name: 'discovery rituals',
                desc: 'Use these unique rituals to improve exploration slightly, with these boosts: @[wanderer]s: +5% speed @[scout]s: +3% speed @[globetrotter]s: +4% speed //Consumes 2 [faith] roughly every 20 days; will stop if you run out.',
                icon: [35, 0, "magixmod"],
                cost: { 'faith': 4 },
                startMode: 'off',
                req: { 'ritualism': true, 'globetrottering': true },
                category: 'faith',
            });
            new G.Policy({
                name: 'eat on gather',
                desc: 'Your people will eat a lot of [food] right after gathering it, meaning that a only a small portion of food will be shared with others. This will lead to increased [happiness] at the cost of significantly reduced gathering rates for food-gathering units. @Be aware that this policy cannot bring [happiness] level over 100% and will only provide [happiness] once it is lower than a specific percentage. Note that if your food or water rations are set to <b>Plentiful</b>, then this policy disables automatically.',
                icon: [5, 12, 16, 33, "magixmod"],
                cost: { 'influence': 2 },
                startMode: 'off',
                req: { 'rules of food': true },
                category: 'food',
            });
            new G.Policy({
                name: 'far foraging',
                desc: '@[gatherer]s will explore like [wanderer]s but have a chance to become lost in terrain. This policy will keep working until you get more [land] explored. //It doesn\'t affect the food gathering efficiency of [gatherer]s. //When you have explored 60 [land], this policy will be disabled automatically and won\'t be visible from then on. (That autotoggle won\'t cost you any [influence].)',
                icon: [15, 33, "magixmod"],
                cost: { 'influence': 3 },
                startMode: 'off',
                req: {},
                category: 'work',
            });

            if (G.modsByName['Market mod']) {
                new G.Policy({
                    name: 'extended essences catalog',
                    desc: 'The trading of [magic essences] will be refined. You will be able to fine-tune what specific items from the category you want to trade (instead of the whole category).',
                    icon: [0, 2, "market_images", 20, 13, "magixmod"],
                    cost: { 'influence': 10 },
                    startMode: 'off',
                    req: { 'Expanded essence trading catalog': true },
                    category: 'trading_policies',
                });
            }
            if (G.modsByName['Laws Of Food']) {
                new G.Policy({
                    name: 'eat meals',
                    desc: 'Decide if your people can eat [meals] or not.',
                    icon: [6, 12, 2, 7, "magix2"],
                    cost: { 'influence': 2 },
                    startMode: 'on',
                    req: { 'cooking II': true },
                    category: 'food',
                    effects: [
                        { type: 'make part of', what: ['meals'], parent: 'food' },
                    ],
                    effectsOff: [
                        { type: 'make part of', what: ['meals'], parent: '' },
                    ],
                });
                new G.Policy({
                    name: 'eat vegetables',
                    desc: 'Decide if your people can eat [vegetables] or not.',
                    icon: [6, 12, 11, 11, "magixmod"],
                    cost: { 'influence': 0 },
                    startMode: 'on',
                    req: { 'rules of food': true },
                    category: 'food',
                    effects: [
                        { type: 'make part of', what: ['vegetables'], parent: 'food' },
                    ],
                    effectsOff: [
                        { type: 'make part of', what: ['vegetables'], parent: '' },
                    ],
                });
                new G.Policy({
                    name: 'drink juices',
                    desc: 'Decide if your people can drink [juices] or not.',
                    icon: [6, 12, 14, 3, "magixmod"],
                    cost: { 'influence': 2 },
                    startMode: 'on',
                    req: { 'juice-crafting': true },
                    category: 'food',
                    effects: [
                        { type: 'make part of', what: ['juices'], parent: 'water' },
                    ],
                    effectsOff: [
                        { type: 'make part of', what: ['juices'], parent: '' },
                    ],
                });
            }
            if (G.modsByName['Laws Of Food Free Version']) {
                new G.Policy({
                    name: 'eat meals',
                    desc: 'Decide if your people can eat [meals] or not.',
                    icon: [6, 12, 2, 7, "magix2"],
                    cost: { 'influence': 0 },
                    startMode: 'on',
                    req: { 'cooking II': true },
                    category: 'food',
                    effects: [
                        { type: 'make part of', what: ['meals'], parent: 'food' },
                    ],
                    effectsOff: [
                        { type: 'make part of', what: ['meals'], parent: '' },
                    ],
                });
                new G.Policy({
                    name: 'eat vegetables',
                    desc: 'Decide if your people can eat [vegetables] or not.',
                    icon: [6, 12, 11, 11, "magixmod"],
                    cost: { 'influence': 0 },
                    startMode: 'on',
                    req: { 'rules of food': true },
                    category: 'food',
                    effects: [
                        { type: 'make part of', what: ['vegetables'], parent: 'food' },
                    ],
                    effectsOff: [
                        { type: 'make part of', what: ['vegetables'], parent: '' },
                    ],
                });
                new G.Policy({
                    name: 'drink juices',
                    desc: 'Decide if your people can drink [juices] or not.',
                    icon: [6, 12, 14, 3, "magixmod"],
                    cost: { 'influence': 0 },
                    startMode: 'on',
                    req: { 'juice-crafting': true },
                    category: 'food',
                    effects: [
                        { type: 'make part of', what: ['juices'], parent: 'water' },
                    ],
                    effectsOff: [
                        { type: 'make part of', what: ['juices'], parent: '' },
                    ],
                });
            }
            new G.Policy({
                name: 'prisoner workforce',
                desc: 'This policy is not used for anything.',
                icon: [7, 12, 17, 0, "magixmod"],
                cost: { 'land': 1000000000 },
                req: { 'tribalism': false },
                category: 'work',
            });
            // New policies:
            new G.Policy({
                name: 'eat honey and honeycombs',
                desc: 'Your people will eat [honey] and [honeycomb]s, which makes them both happy and healthy.',
                icon: [6, 12, 3, 1, "magix2"],
                cost: { 'influence': 1 },
                startMode: 'on',
                req: { 'beekeeping II': true },
                effects: [
                    { type: 'make part of', what: ['honey', 'honeycomb'], parent: 'food' },
                ],
                effectsOff: [
                    { type: 'make part of', what: ['honey', 'honeycomb'], parent: '' },
                ],
                category: 'food',
            });
            new G.Policy({
                name: 'water rituals',
                desc: 'Improves [water] production from all well types by 15%. During a drought, this effect is increased to 60%. This ritual requires 150 [magic essences] every day as upkeep instead, and because of this, this ritual\'s cost will not be changed by any trait or tech.',
                icon: [8, 12, 7, 6],
                cost: { 'magic essences': 5000 },
                startMode: 'off',
                req: { 'faith in water': true },
                category: 'faith',
            });
            new G.Policy({
                name: 'love of honey',
                desc: 'Improves [honeycomb] gain by 25% and advanced forms of [honey] or [honeycomb] gain by 60%. This ritual requires 250 [nature essence] every day as upkeep instead, and because of this, this ritual\'s cost will not be changed by any trait or tech.',
                icon: [8, 12, 4, 1, "magix2"],
                cost: { 'nature essence': 10000 },
                startMode: 'off',
                req: { 'superior honey': true },
                category: 'faith',
            });
            new G.Policy({
                name: 'trait rituals',
                desc: 'Improves the chance of getting potentially eternal traits based on [population] (currently <b>+0%</b>) through the faster spread of beliefs. Consumes 1 [culture], [faith], and [influence] every 5 days.',
                icon: [8, 12, choose([0, 1, 2, 3, 4, 5]), 2, "magix2"],
                cost: { 'culture': 1, 'faith': 1, 'influence': 1 },
                startMode: 'off',
                req: { 'ritualism': true, 'a gift from the mausoleum': true },
                category: 'faith',
            });

            /*=====================================================================================
            LANDS
            =======================================================================================*/

            new G.Land({
                name: 'ocean',
                names: ['Ocean'],
                goods: [
                    { type: 'saltwater fish', min: 1, max: 3 },
                    { type: 'saltwater' },
                    { type: 'squid', min: 0.1, max: 2, chance: 1 / 3 },
                    { type: 'kelp', min: 0.01, max: 1.5, chance: 0.88 },
                ],
                ocean: true,
                image: 3,
                score: 0,
            });
            new G.Land({
                name: 'arctic ocean',
                names: ['Icesheet'],
                goods: [
                    { type: 'saltwater fish', min: 1, max: 3 },
                    { type: 'snow cover' },
                    { type: 'saltwater' },
                    { type: 'kelp', min: 0.01, max: 1.35, chance: 0.76 },
                ],
                ocean: true,
                image: 2,
                score: 0,
            });
            new G.Land({
                name: 'lukewarm ocean',
                names: ['Lukewarm ocean', 'Lush ocean'],
                goods: [
                    { type: 'saltwater fish', min: 1, max: 3.5 },
                    { type: 'saltwater' },
                    { type: 'saltwater fish', min: 0.5, max: 2, chance: 1 / 3 },
                    { type: 'kelp', min: 0.07, max: 1.5, chance: 0.9 },
                    { type: 'coral reef', min: 0.04, max: 0.3, chance: 0.08 },
                ],
                ocean: true,
                image: 20,
                score: 0,
            });
            new G.Land({
                name: 'tropical ocean',
                names: ['Tropical ocean'],
                goods: [
                    { type: 'saltwater fish', min: 1, max: 4 },
                    { type: 'saltwater' },
                    { type: 'saltwater fish', min: 0.5, max: 2, chance: 1 / 3 },
                    { type: 'kelp', min: 0.11, max: 1.5, chance: 0.95 },
                    { type: 'coral reef', min: 0.1, max: 0.77, chance: 0.27 },
                ],
                ocean: true,
                image: 4,
                score: 0,
            });
            new G.Land({
                name: 'prairie',
                names: ['Prairie', 'Grassland', 'Plain', 'Steppe', 'Meadow'],
                goods: [
                    { type: ['oak', 'birch'], chance: 1, min: 0.1, max: 0.2 },
                    { type: ['oak', 'birch'], chance: 0.5, min: 0.1, max: 0.4 },
                    { type: ['berry bush', 'wild bush'], chance: 0.9 },
                    { type: 'grass', amount: 2 },
                    { type: 'vfb1', chance: 0.2 },
                    { type: 'vfb2', chance: 0.05 },
                    { type: 'Sugar cane', min: 0.2, max: 1, chance: 0.5 },
                    { type: ['wild rabbits', 'stoats'], chance: 0.9 },
                    { type: ['foxes'], chance: 0.5, amount: 0.5 },
                    { type: ['wolves', 'bears'], chance: 0.2, amount: 0.5 },
                    { type: ['deer'], chance: 0.2, amount: 0.2 },
                    { type: 'wild bugs' },
                    { type: 'freshwater fish', chance: 0.8, min: 0.1, max: 0.5 },
                    { type: 'freshwater', amount: 1 },
                    { type: 'bee nest', min: 0.2, max: 0.5 },
                    { type: ['lush rocky substrate', 'rocky substrate'] },
                ],
                modifiers: { 'river': 0.4, 'volcano': 0.2, },
                image: 6,
                score: 10,
            });
            new G.Land({
                name: 'shrubland',
                names: ['Shrubland', 'Drylands', 'Highlands', 'Heath'],
                goods: [
                    { type: ['oak', 'birch'], chance: 0.5, min: 0.2, max: 0.4 },
                    { type: 'dead tree', amount: 0.5 },
                    { type: 'berry bush', chance: 0.2 },
                    { type: 'wild bush', chance: 0.2 },
                    { type: 'grass', amount: 1.5 },
                    { type: 'vfb1', chance: 0.5 },
                    { type: 'Sugar cane', min: 0.2, max: 2 },
                    { type: ['wild rabbits', 'stoats'], chance: 0.6 },
                    { type: ['foxes'], chance: 0.4, amount: 0.3 },
                    { type: ['wolves', 'bears'], chance: 0.1, amount: 0.2 },
                    { type: 'wild bugs' },
                    { type: 'freshwater fish', chance: 0.3, min: 0.1, max: 0.3 },
                    { type: 'freshwater', amount: 0.8 },
                    { type: 'bee nest', min: 0.3, max: 0.55 },
                    { type: 'rocky substrate' },
                ],
                modifiers: { 'river': 0.4, 'volcano': 0.2, },
                image: 5,
                score: 7,
            });
            new G.Land({
                name: 'forest',
                names: ['Forest', 'Forest', 'Woodland', 'Swamp', 'Marsh'],
                goods: [
                    { type: ['oak', 'birch'], min: 2.75, max: 3.6 },
                    { type: ['oak', 'birch', 'dead tree'], chance: 0.5 },
                    { type: ['berry bush', 'wild bush'], chance: 0.6 },
                    { type: 'forest mushrooms', chance: 0.8 },
                    { type: 'grass' },
                    { type: 'rb1', chance: 0.5 },
                    { type: 'rb2', chance: 0.5 },
                    { type: 'Sugar cane', min: 0.1, max: 0.5, chance: 0.05 },
                    { type: 'bush of tulips', chance: 0.5, min: 0.3, max: 0.9 },
                    { type: ['wild rabbits', 'stoats'], chance: 0.2 },
                    { type: ['foxes'], chance: 0.2, amount: 0.2 },
                    { type: ['wolves', 'bears'], chance: 0.5, min: 0.5, max: 1 },
                    { type: ['boars'], chance: 0.5, amount: 0.5 },
                    { type: 'deer', chance: 0.7, amount: 0.5 },
                    { type: 'wild bugs', min: 1, max: 1.5 },
                    { type: 'freshwater fish', chance: 0.1, min: 0.1, max: 0.3 },
                    { type: 'freshwater', amount: 1 },
                    { type: 'rocky substrate' },
                ],
                image: 7,
                score: 8,
            });
            new G.Land({
                name: 'tundra',
                names: ['Tundra', 'Cold plain', 'Cold steppe'],
                goods: [
                    { type: ['fir tree', 'pine tree'], min: 0.9, max: 1.05 },
                    { type: ['berry bush'], chance: 0.8 },
                    { type: 'grass' },
                    { type: ['wild rabbits', 'stoats'], chance: 0.1 },
                    { type: ['foxes'], chance: 0.3, amount: 0.4 },
                    { type: ['wolves'], chance: 0.5, min: 0.5, max: 1 },
                    { type: ['seals'], chance: 0.2, amount: 0.5 },
                    { type: 'deer', chance: 0.2, amount: 0.1 },
                    { type: ['polar bears'], chance: 0.3, min: 0.1, max: 0.5 },
                    { type: 'wild bugs' },
                    { type: 'freshwater fish', chance: 0.8, min: 0.1, max: 0.5 },
                    { type: 'freshwater', amount: 1 },
                    { type: 'snow cover' },
                    { type: 'tundra rocky substrate' },
                ],
                image: 9,
                score: 7,
            });
            new G.Land({
                name: 'ice desert',
                names: ['Ice desert', 'Cold desert'],
                goods: [
                    { type: 'dead tree', amount: 0.5 },
                    { type: ['fir tree'], amount: 0.2 },
                    { type: 'berry bush', chance: 0.5, amount: 0.2 },
                    { type: 'grass', chance: 0.4, amount: 0.2 },
                    { type: ['wild rabbits', 'stoats'], chance: 0.05 },
                    { type: ['wolves'], chance: 0.1, min: 0.1, max: 0.5 },
                    { type: ['seals'], chance: 0.2, amount: 0.4 },
                    { type: ['polar bears'], chance: 0.5, min: 0.1, max: 0.5 },
                    { type: 'wild bugs', amount: 0.05 },
                    { type: 'freshwater fish', chance: 0.3, min: 0.1, max: 0.3 },
                    { type: 'freshwater', amount: 0.2 },
                    { type: 'snow cover' },
                    { type: 'ice desert rocky substrate' },
                ],
                image: 8,
                score: 2,
            });
            new G.Land({
                name: 'boreal forest',
                names: ['Boreal forest', 'Pine forest', 'Taiga'],
                goods: [
                    { type: ['fir tree'], min: 1.2, max: 2 },
                    { type: ['pine tree'], min: 1.2, max: 2 },
                    { type: 'berry bush', chance: 0.9 },
                    { type: 'wild bush', chance: 0.05, min: 0.1, max: 0.3 },
                    { type: 'forest mushrooms', chance: 0.4 },
                    { type: 'rb1', chance: 0.5 },
                    { type: 'rb2', chance: 0.5 },
                    { type: 'grass' },
                    { type: ['wild rabbits', 'stoats'], chance: 0.2 },
                    { type: ['wolves'], chance: 0.5, min: 0.5, max: 1 },
                    { type: ['polar bears', 'bears'], chance: 0.3, amount: 0.5 },
                    { type: 'deer', chance: 0.7, amount: 0.5 },
                    { type: 'Sugar cane', min: 0.25, max: 1.1 },
                    { type: 'wild bugs' },
                    { type: 'freshwater fish', chance: 0.1, min: 0.1, max: 0.3 },
                    { type: 'freshwater', amount: 1 },
                    { type: 'snow cover' },
                    { type: 'rocky substrate' },
                ],
                image: 10,
                score: 8,
            });
            new G.Land({
                name: 'savanna',
                names: ['Savannah', 'Savannah', 'Sun prairie'],
                goods: [
                    { type: 'acacia', amount: 1 },
                    { type: 'palm tree', chance: 0.4, amount: 0.3 },
                    { type: ['berry bush', 'wild bush'], chance: 0.6 },
                    { type: 'succulents', chance: 0.4, min: 0.1, max: 0.3 },
                    { type: 'grass', amount: 1.5 },
                    { type: ['wild rabbits', 'stoats'], chance: 0.3 },
                    { type: ['foxes'], chance: 0.4, amount: 0.5 },
                    { type: ['boars'], chance: 0.3, amount: 0.5 },
                    { type: 'wild bugs' },
                    { type: 'Sugar cane', min: 0.1, max: 0.8 },
                    { type: 'freshwater fish', chance: 0.6, min: 0.1, max: 0.5 },
                    { type: 'freshwater', amount: 0.8 },
                    { type: 'sandy soil', chance: 0.3 },
                    { type: 'ostrich', chance: 0.2, min: 0.15, max: 0.5 },
                    { type: 'bee nest', min: 0.2, max: 0.45 },
                    { type: 'warm rocky substrate' },
                ],
                image: 12,
                score: 7,
            });
            new G.Land({
                name: 'desert',
                names: ['Desert', 'Scorched land'],
                goods: [
                    { type: 'dead tree', amount: 0.5 },
                    { type: 'acacia', amount: 0.2, chance: 0.4 },
                    { type: 'succulents', min: 0.1, max: 0.6 },
                    { type: 'grass', chance: 0.3, amount: 0.1 },
                    { type: 'wild rabbits', chance: 0.05 },
                    { type: ['foxes'], chance: 0.3, min: 0.1, max: 0.3 },
                    { type: ['wolves'], chance: 0.1, min: 0.1, max: 0.3 },
                    { type: 'wild bugs', amount: 0.15 },
                    { type: 'Sugar cane', min: 0.05, max: 0.15, chance: 0.075 },
                    { type: 'freshwater', amount: 0.1 },
                    { type: 'sandy soil' },
                    { type: 'ostrich', chance: 0.2, min: 0.15, max: 0.5 },
                    { type: 'warm rocky substrate' },
                ],
                image: 11,
                score: 2,
            });
            new G.Land({
                name: 'jungle',
                names: ['Jungle', 'Tropical forest', 'Mangrove'],
                goods: [
                    { type: ['palm tree'], min: 2.75, max: 4 },
                    { type: 'jungle fruits', chance: 1 },
                    { type: 'grass' },
                    { type: 'koalas', chance: 0.3 },
                    { type: 'Sugar cane', min: 0.05, max: 1 },
                    { type: ['boars'], chance: 0.2, amount: 0.5 },
                    { type: 'wild bugs', min: 1, max: 2 },
                    { type: 'freshwater fish', chance: 0.1, min: 0.1, max: 0.3 },
                    { type: 'freshwater', amount: 1 },
                    { type: 'jungle rocky substrate' },
                ],
                image: 13,
                score: 8,
            });
            new G.Land({
                name: 'swamplands',
                goods: [
                    { type: ['swampflowers'], amount: 1 },
                    { type: 'grass', chance: 3 },
                    { type: 'wet rocky substrate' },
                    { type: 'Sugar cane', min: 0.1, max: 0.7 },
                    { type: 'crocodiles', min: 0.2, max: 0.8 },
                    { type: 'deer', min: 0.1, max: 0.9, chance: 0.9 },
                    { type: ['willow'], amount: 2 },
                    { type: ['willow', 'mangrove'], chance: 0.6 },
                ],
                image: 14,
                score: 5,
            });
            new G.Land({
                name: 'lavender fields',
                goods: [
                    { type: ['lavender'], amount: 2 },
                    { type: 'grass', min: 0.75, max: 1.1 },
                    { type: ['lush rocky substrate', 'rocky substrate'] },
                    { type: 'foxes', min: 0.2, max: 0.8 },
                    { type: 'wolves', min: 0.1, max: 0.75, chance: 3 },
                    { type: 'wild rabbits', chance: 0.9, min: 0.3, max: 0.6 },
                    { type: ['jacaranda'], min: 0.5, max: 1.5 },
                ],
                image: 15,
                score: 3,
            });
            new G.Land({
                name: 'glacier',
                goods: [
                    { type: 'snow cover', min: 0.4, max: 3 },
                    { type: 'Ice', min: 2, max: 5.7 },
                    { type: 'seals', min: 0.05, max: 1, chance: 0.2 },
                    { type: 'saltwater fish', min: 0.05, max: 0.3, chance: 0.01 },
                    { type: 'freshwater', amount: 0.75 },
                ],
                image: 16,
                score: 3,
                ocean: true
            });
            new G.Land({
                name: 'dead forest',
                names: ['Deadlands', 'Dead forest'],
                goods: [
                    { type: ['dead tree'], amount: 3 },
                    { type: 'forest mushrooms', chance: 0.1 },
                    { type: 'dead grass', min: 3, max: 6 },
                    { type: 'wild bugs', min: 0.6, max: 1.5 },
                    { type: 'mudwater', min: 0.75, max: 1 },
                    { type: 'dead rocky substrate' },
                    { type: 'animal corpse', min: 0.005, max: 2.5 },
                    { type: 'dead fishes', min: 0.05, max: 0.5, chance: 0.5 },
                    { type: 'spoiled fruits', min: 0.05, max: 0.3, chance: 0.4 },
                ],
                image: 17,
                score: 0.5,
            });
            new G.Land({
                name: 'badlands',
                names: ['Badlands', 'Mesa'],
                goods: [
                    { type: 'dead tree', chance: 0.9, min: 1 / 3, max: 2.5 },
                    { type: ['dead grass', 'grass'], chance: 0.4 },
                    { type: 'wild bugs', chance: 0.8, min: 0.1, max: 2 },
                    { type: 'freshwater', min: 0.1, max: 0.35 },
                    { type: 'badlands substrate' },
                    { type: 'succulents', min: 0.07, max: 0.6 },
                    { type: 'wolves', min: 0.15, max: 0.45, chance: 1 / 3 },
                    { type: 'foxes', min: 0.1, max: 0.3, chance: 0.25 },
                    { type: 'sandy soil', chance: 1 / 3 },
                    { type: 'ostrich', chance: 0.4, min: 0.21, max: 0.5 },
                    { type: 'wild rabbits', chance: 0.045 },
                ],
                image: 18,
                score: 2.25,
            });
            new G.Land({
                name: 'xeric shrubland',
                goods: [
                    { type: 'dead tree', min: 0.5, max: 0.9 },
                    { type: 'wild bush', chance: 0.1, min: 0.01, max: 0.08 },
                    { type: 'grass', min: 0.5, max: 1.5 },
                    { type: 'vfb1', chance: 0.32, min: 0.1, max: 1 },
                    { type: 'Sugar cane', min: 0.2, max: 0.4, chance: 0.075 },
                    { type: ['wild rabbits', 'stoats'], chance: 0.5 },
                    { type: ['foxes'], chance: 0.5, amount: 0.32 },
                    { type: ['wolves', 'bears'], chance: 0.08, min: 0.2, max: 0.45 },
                    { type: 'wild bugs' },
                    { type: 'freshwater fish', chance: 0.03, min: 0.1, max: 0.3 },
                    { type: 'freshwater', min: 0.07, max: 1 / 3 },
                    { type: 'succulents', min: 0.5, max: 2.25, chance: 0.99 },
                    { type: ['warm rocky substrate', 'xeric substrate', 'lush rocky substrate'] },
                    { type: 'sandy soil', min: 0.3, max: 1.8 },
                    { type: 'bee nest', min: 0.4, max: 0.7 },
                ],
                modifiers: { 'river': 0.1 },
                image: 19,
                score: 3.8,
            });
            new G.Land({
                name: 'cherry blossom grove',
                goods: [
                    { type: 'cherry blossom', min: 0.95, max: 2 },
                    { type: ['berry bush', 'wild bush'], chance: 0.4, min: 0.1, max: 0.5 },
                    { type: 'grass', min: 0.4, max: 1 },
                    { type: 'vfb2', chance: 0.32, min: 0.1, max: 0.5 },
                    { type: ['wild rabbits', 'stoats', 'foxes'], chance: 0.5 },
                    { type: ['wolves', 'bears'], chance: 0.08, min: 0.2, max: 0.45 },
                    { type: 'wild bugs' },
                    { type: 'saltwater fish', chance: 0.03, min: 0.1, max: 0.3 },
                    { type: 'saltwater', min: 0.07, max: 0.4 },
                    { type: 'lush rocky substrate' },
                ],
                modifiers: { 'river': 0.13 },
                image: 21,
                score: 5,
            });
            //TODO : all the following
            new G.Land({
                name: 'mountain',
                names: ['Mountain'],
                modifier: true,
                goods: [
                ],
            });
            new G.Land({
                name: 'volcano',
                names: ['Volcano'],
                modifier: true,
                goods: [
                ],
            });
            new G.Land({
                name: 'hills',
                names: ['Hills'],
                modifier: true,
                goods: [
                ],
            });
            new G.Land({
                name: 'canyon',
                names: ['Canyon', 'Rift', 'Gorge', 'Ravine'],
                modifier: true,
                goods: [
                ],
            });
            new G.Land({
                name: 'cliffs',
                names: ['Cliffs'],
                modifier: true,
                goods: [
                    //TODO : some limestone source here
                ],
            });
            new G.Land({
                name: 'beach',
                names: ['Beach', 'Sandy beach', 'Volcanic beach'],
                modifier: true,
                goods: [
                    { type: 'saltwater fish', min: 0.3, max: 1 },
                    { type: ['crabs', 'clams'], chance: 0.1, min: 0.1, max: 0.5 },
                    { type: 'sandy soil' },
                ],
            });
            new G.Land({
                name: 'river',
                names: ['River'],
                modifier: true,
                goods: [
                    { type: 'freshwater fish', min: 0.2, max: 1 },
                    { type: ['crabs', 'clams'], chance: 0.2, min: 0.1, max: 0.3 },
                    { type: 'freshwater', min: 0.5, max: 1.5 },
                ],
            });
            /*=====================================================================================
            GOODS
            =======================================================================================*/

            G.contextNames['gather'] = '<font color="#E6FFEA">Gathering</font>';
            G.contextNames['fish'] = '<font color="#CCFFEE">Fishing</font>';
            G.contextNames['hunt'] = '<font color="#FFDDCC">Hunting</font>';
            G.contextNames['chop'] = '<font color="#FF6619">Chopping</font>';
            G.contextNames['dig'] = '<font color="#FFE666">Digging</font>';
            G.contextNames['mine'] = '<font color="#707070">Mining</font>';
            G.contextNames['quarry'] = '<font color="#9E9E9E">Quarrying</font>';
            G.contextNames['flowers'] = '<font color="#80ffaa">Flowers</font>';
            G.contextNames['deep mine'] = '<font color="#404040">Deep mining</font>';
            G.contextNames['deep quarry'] = '<font color="#999999">Deep quarrying</font>';

            //plants
            new G.Goods({
                name: 'grass',
                desc: '[grass] will sometimes hide [fruit]s and [stick]s that can be found by foraging.',
                icon: [10, 10],
                res: {
                    'gather': { 'fruit': 0.5, 'stick': 0.5 },
                },
                mult: 10,
            });
            new G.Goods({
                name: 'oak',
                desc: 'The [oak] tree is a mighty tree that thrives in temperate climates, rich in [log]s and [stick]s.',
                icon: [0, 10],
                res: {
                    'chop': { 'log': 3, 'stick': 6 },
                    'gather': { 'stick': 1 },
                },
                affectedBy: ['deforestation'],
                mult: 5,
            });
            new G.Goods({
                name: 'birch',
                desc: '[birch,Birch trees] have white bark and are rather frail, but are a good source of [log]s and [stick]s.',
                icon: [1, 10],
                res: {
                    'chop': { 'log': 2, 'stick': 4 },
                    'gather': { 'stick': 1 },
                },
                affectedBy: ['deforestation'],
                mult: 5,
            });
            new G.Goods({
                name: 'palm tree',
                desc: '[palm tree]s prefer warm climates and provide [log]s and [stick]s when chopped. [exotic fruit]s (such as bananas) are common in these trees, as well as small amounts of normal [fruit].',
                icon: [2, 10],
                res: {
                    'chop': { 'log': 2, 'stick': 4 },
                    'gather': { 'fruit': 0.2, 'stick': 1 },
                    'exotic': { 'exotic fruit': 1 }
                },
                affectedBy: ['deforestation'],
                mult: 5,
            });
            new G.Goods({
                name: 'acacia',
                desc: 'The [acacia,Acacia tree] tends to grow in warm, dry climates, and can be chopped for [log]s and some [stick]s.',
                icon: [8, 10],
                res: {
                    'chop': { 'log': 2, 'stick': 4 },
                    'gather': { 'stick': 1 },
                },
                affectedBy: ['deforestation'],
                mult: 5,
            });
            new G.Goods({
                name: 'fir tree',
                desc: '[fir tree]s can endure cold climates and keep their needles year-long; they can provide [log]s and [stick]s.',
                icon: [3, 10],
                res: {
                    'chop': { 'log': 2, 'stick': 6 },
                    'gather': { 'stick': 1 },
                },
                affectedBy: ['deforestation'],
                mult: 5,
            });
            new G.Goods({
                name: 'pine tree',
                desc: '[pine tree]s are tall and able to endure cold climates and will keep their needles year-long; they can provide [log]s and [stick]s.',
                icon: [16, 10, "magixmod"],
                res: {
                    'chop': { 'log': 2, 'stick': 6 },
                    'gather': { 'stick': 1 },
                },
                affectedBy: ['deforestation'],
                mult: 5,
            });
            new G.Goods({
                name: 'wild bush',
                desc: '[wild bush,Wild bushes] can be foraged for [vegetables], [stick]s, and the occasional [herbs,Herb] or rare [exotic fruit].',
                icon: [17, 10, "magixmod"],
                res: {
                    'gather': { 'vegetables': 3, 'stick': 0.5, 'herbs': 0.02 },
                    'exotic': { 'exotic fruit': 0.05 }
                },
                affectedBy: ['scarce forageables'],
                mult: 10,
            });
            new G.Goods({
                name: 'dead tree',
                desc: 'While an ornery sight, [dead tree]s are an adequate source of dry [log]s and [stick]s.',
                icon: [9, 10],
                res: {
                    'chop': { 'log': 1, 'stick': 2 },
                    'gather': { 'stick': 0.5 },
                },
                affectedBy: ['deforestation'],
                mult: 5,
            });
            new G.Goods({
                name: 'berry bush',
                desc: '[berry bush,Berry bushes] can be foraged for [fruit]s, [stick]s, and the rare [exotic fruit].',
                icon: [4, 10],
                res: {
                    'gather': { 'fruit': 3, 'stick': 0.5 },
                    'exotic': { 'exotic fruit': 0.3 }
                },
                affectedBy: ['scarce forageables'],
                mult: 10,
            });
            new G.Goods({
                name: 'forest mushrooms',
                desc: '[forest mushrooms] grow in the penumbra of the underbrush, and may extremely rarely yield a [mushroom] or two. It\'s much more easy to gather these by farming though.',
                icon: [5, 10],
                res: {
                },
                affectedBy: ['scarce forageables'],
                mult: 10,
            });
            new G.Goods({
                name: 'succulents',
                desc: 'Hardy cacti that grow in the desert. While tricky to harvest, [succulents] can provide valuable [fruit] and may even produce an [exotic fruit]!',
                icon: [6, 10],
                res: {
                    'gather': { 'fruit': 1 },
                    'exotic': { 'exotic fruit': 0.15 }
                },
                affectedBy: ['scarce forageables'],
                mult: 10,
            });
            new G.Goods({
                name: 'jungle fruits',
                desc: '[jungle fruits] come in all shapes, colors and sizes, and will yield [fruit]s and [exotic fruit]s to those willing to forage around.',
                icon: [7, 10],
                res: {
                    'gather': { 'fruit': 2 },
                    'exotic': { 'exotic fruit': 0.5 }
                },
                affectedBy: ['scarce forageables'],
                mult: 10,
            });
            //animals
            new G.Goods({
                name: 'wild rabbits',
                desc: '[wild rabbits] are quick and hard to catch, and yield [meat], [bone]s and [hide]s.//Carcasses can sometimes be gathered for a little [spoiled food].',
                icon: [0, 11],
                res: {
                    'gather': { 'spoiled food': 0.5 },
                    'hunt': { 'meat': 2, 'bone': 0.2 },
                },
                affectedBy: ['over hunting'],
                mult: 5,
            });
            new G.Goods({
                name: 'stoats',
                desc: 'Besides being a source of high-quality [hide,Furs], these carnivorous mammals can provide [meat] and [bone]s.//Carcasses can sometimes be gathered for [spoiled food].',
                icon: [1, 11],
                res: {
                    'gather': { 'spoiled food': 0.5 },
                    'hunt': { 'meat': 2, 'bone': 0.2 },
                },
                affectedBy: ['over hunting'],
                mult: 5,
            });
            new G.Goods({
                name: 'koalas',
                desc: 'While they are placid leaf-eaters, these tree-dwelling mammals have been rumored to drop down on unsuspecting passersby. They can be hunted for [meat], [bone]s and [hide]s.//Carcasses can sometimes be gathered for [spoiled food].',
                icon: [2, 11],
                res: {
                    'gather': { 'spoiled food': 0.5 },
                    'hunt': { 'meat': 2, 'bone': 0.2 },
                },
                affectedBy: ['over hunting'],
                mult: 5,
            });
            new G.Goods({
                name: 'deer',
                desc: 'Forest herbivores that live in herds and are a good source of [meat], [bone]s and [hide]s.//Carcasses can also be gathered for [spoiled food].',
                icon: [3, 11],
                res: {
                    'gather': { 'spoiled food': 1 },
                    'hunt': { 'meat': 4, 'bone': 1 },
                },
                affectedBy: ['over hunting'],
                mult: 5,
            });
            new G.Goods({
                name: 'bears',
                desc: 'Large omnivorous mammals that hibernate in cold seasons but fearsome in battle. They yield plenty of [meat], [bone]s and large [hide]s.//Carcasses can also be gathered for [spoiled food].',
                icon: [5, 11],
                res: {
                    'gather': { 'spoiled food': 1 },
                    'hunt': { 'meat': 4, 'bone': 1 },
                },
                affectedBy: ['over hunting'],
                mult: 5,
            });
            new G.Goods({
                name: 'polar bears',
                desc: 'Large omnivorous mammals that live in snowy regions, and are extremely fierce hunters. These animals will give plenty of [meat], [bone]s and large [hide]s.//Carcasses can also be gathered for [spoiled food].',
                icon: [10, 11],
                res: {
                    'gather': { 'spoiled food': 1 },
                    'hunt': { 'meat': 4, 'bone': 1, 'hide': 1 },
                },
                affectedBy: ['over hunting'],
                mult: 5,
            });
            new G.Goods({
                name: 'boars',
                desc: 'Omnivorous mammals armed with tusks that provide [meat], [bone]s and [hide]s.//Carcasses can also be gathered for [spoiled food].',
                icon: [4, 11],
                res: {
                    'gather': { 'spoiled food': 1 },
                    'hunt': { 'meat': 3, 'bone': 1 },
                },
                affectedBy: ['over hunting'],
                mult: 5,
            });
            new G.Goods({
                name: 'foxes',
                desc: 'These sly hunters can be butchered for [meat], [bone]s and [hide]s.//Carcasses can sometimes be gathered for [spoiled food].',
                icon: [6, 11],
                res: {
                    'gather': { 'spoiled food': 0.5 },
                    'hunt': { 'meat': 2, 'bone': 0.2 },
                },
                affectedBy: ['over hunting'],
                mult: 5,
            });
            new G.Goods({
                name: 'wolves',
                desc: 'Ferocious carnivores that hunt in packs; a dangerous source of [meat], [bone]s and [hide]s.//Carcasses can sometimes be gathered for [spoiled food].',
                icon: [7, 11],
                res: {
                    'gather': { 'spoiled food': 0.5 },
                    'hunt': { 'meat': 3, 'bone': 0.5 },
                },
                affectedBy: ['over hunting'],
                mult: 5,
            });
            new G.Goods({
                name: 'wild bugs',
                displayName: 'Bugs',
                desc: '[wild bugs,Bugs] are ubiquitious and easy to capture.',
                icon: [8, 11],
                res: {
                    'gather': { 'bugs': 2 },
                },
                mult: 5,
            });
            new G.Goods({
                name: 'seals',
                desc: 'Carnivorous semi-aquatic mammal that will give you [meat], [bone]s and [hide]s.//Carcasses can be gathered for [spoiled food].',
                icon: [9, 11],
                res: {
                    'gather': { 'spoiled food': 1 },
                    'hunt': { 'meat': 3, 'bone': 0.5 },
                },
                affectedBy: ['over hunting'],
                mult: 5,
            });
            new G.Goods({
                name: 'saltwater fish',
                desc: 'Fish of every size and color.//A source of [seafood].',
                icon: [11, 11],
                res: {
                    'gather': { 'seafood': 0.03 },
                    'fish': { 'seafood': 3 },
                },
                affectedBy: ['over fishing'],
                mult: 5,
            });
            new G.Goods({
                name: 'freshwater fish',
                desc: 'Fish that live in streams and rivers.//A source of [seafood].',
                icon: [12, 11],
                res: {
                    'gather': { 'seafood': 0.03 },
                    'fish': { 'seafood': 3 },
                },
                affectedBy: ['over fishing'],
                mult: 5,
            });
            new G.Goods({
                //TODO
                name: 'clams',
                desc: 'Bivalves and other assorted shells.//A source of [seafood] and fairly easy to gather.',
                icon: [0, 0],
                res: {
                    'gather': { 'seafood': 0.5 },
                    'fish': { 'seafood': 1 },
                },
                affectedBy: ['over fishing'],
                mult: 5,
            });
            new G.Goods({
                //TODO
                name: 'crabs',
                desc: 'Skittish crustaceans that walk sideways.//An occasional source of [seafood] when gathering: you\'re better off fishing for them instead.',
                icon: [0, 0],
                res: {
                    'gather': { 'seafood': 0.1 },
                    'fish': { 'seafood': 2 },
                },
                affectedBy: ['over fishing'],
                mult: 5,
            });
            //substrates
            new G.Goods({
                name: 'rocky substrate',
                desc: 'A [rocky substrate] is found underneath terrain with moderate temperature and humidity.//Surface [stone]s may be gathered by hand.//Digging here often produces [mud], more [stone]s and occasionally [copper ore,Ores] and [clay].//Mining provides the best results, outputting a variety of [stone]s, rare [gold ore,Ores], and precious [gems].',
                icon: [11, 10],
                res: {
                    'gather': { 'stone': 0.25, 'clay': 0.005, 'limestone': 0.005 },
                    'dig': { 'mud': 2, 'clay': 0.15, 'stone': 0.6, 'copper ore': 0.008, 'tin ore': 0.008, 'limestone': 0.1, 'salt': 0.051 },
                    'mine': { 'stone': 0.3, 'copper ore': 0.085, 'tin ore': 0.085, 'iron ore': 0.04, 'gold ore': 0.004, 'coal': 0.09, 'salt': 0.11, 'gems': 0.003, 'various stones': 0.3, 'pyrite': 0.001,/*'osmium ore':0.003*/ },
                    'quarry': { 'cut stone': 0.7, 'limestone': 0.5, 'marble': 0.01, 'various cut stones': 0.3 },
                    'deep mine': { 'pyrite': 0.065, 'zinc ore': 0.03, 'dinium ore': 0.04, 'gems': 0.005 },
                    'deep quarry': { 'lead ore': 0.04, 'mythril ore': 0.02, 'blackium ore': 0.03, 'salt': 0.001, 'unknownium ore': 0.03 },
                },
                affectedBy: ['mineral depletion'],
                noAmount: true,
                mult: 5,
            });
            new G.Goods({
                name: 'snow cover',
                desc: 'A [snow cover] is often available year-long in cold environments, and is a good source of [water]; it may also conceal [ice] that must be dug out.',
                icon: [13, 10],
                res: {
                    'gather': { 'water': 4, 'muddy water': 8 },
                    'dig': { 'ice': 0.2 },
                },
                mult: 5,
            });
            new G.Goods({
                name: 'sandy soil',
                desc: '[sandy soil] is the result of a [rocky substrate] eroded by wind over long periods of time. [sand] is plentiful here.',
                icon: [12, 10],
                res: {
                    'dig': { 'sand': 1 },
                },
                noAmount: true,
                mult: 5,
            });
            //liquids
            new G.Goods({
                name: 'saltwater',
                desc: '[saltwater] cannot be collected for [water], but may produce [salt] deposits.',
                icon: [14, 10],
                res: {
                    'gather': { 'salt': 0.05 },
                },
                noAmount: true,
                mult: 5,
            });
            new G.Goods({
                name: 'freshwater',
                desc: '[freshwater], whether found in streams or from rainwater, can be collected for [water] and [muddy water].',
                icon: [15, 10],
                res: {
                    'gather': { 'water': 8, 'muddy water': 8 },
                },
                mult: 5,
            });
            new G.Goods({
                name: 'swampflowers',
                desc: 'Swampflowers like cattails are common goods that can be found in swamps. These also allow you to collect a little bit of [muddy water].',
                icon: [7, 23, "magixmod"],
                res: {
                    'flowers': { 'flowers': 2.1 },
                    'gather': { 'muddy water': 1 }
                },
                mult: 5,
            });
            //Magix goods
            new G.Goods({
                name: 'rb1',
                displayName: 'Rosebush',
                desc: 'A bush filled with some [flowers].',
                icon: [8, 23, "magixmod"],
                res: {
                    'flowers': { 'flowers': 4.3 },
                },
                mult: 3,
            });
            new G.Goods({
                name: 'rb2',
                displayName: 'Rosebush',
                desc: 'A bush filled with various [flowers].',
                icon: [9, 23, "magixmod"],
                res: {
                    'flowers': { 'flowers': 3.7 },
                },
                mult: 3,
            });
            new G.Goods({
                name: 'vfb1',
                displayName: 'Flower bush',
                desc: 'A bush filled with various [flowers].',
                icon: [10, 23, "magixmod"],
                res: {
                    'flowers': { 'flowers': 4.1 },
                },
                mult: 2,
            });
            new G.Goods({
                name: 'vfb2',
                displayName: 'Flower bush',
                desc: 'A bush filled with some [flowers].',
                icon: [10, 23, "magixmod"],
                res: {
                    'flowers': { 'flowers': 4.1 },
                },
                mult: 3,
            });
            new G.Goods({
                name: 'bush of tulips',
                desc: 'A bush filled with [flowers].',
                icon: [12, 23, "magixmod"],
                res: {
                    'flowers': { 'flowers': 5 },
                },
                mult: 1,
            });
            //Swamplands
            new G.Goods({
                name: 'crocodiles',
                desc: 'Crocodiles are large semiaquatic reptiles that live throughout the tropics especially swamplands. A source of [meat] and [leather].//Carcasses can also be gathered for [spoiled food].',
                icon: [17, 24, "magixmod"],
                res: {
                    'hunt': { 'meat': 2 },
                    'gather': { 'spoiled food': 1 },
                },
                mult: 2,
            });
            new G.Goods({
                name: 'willow',
                desc: 'The [willow,Willow tree] tends to grow in lush, wet climates and can be chopped for [log]s and harvested for [stick]s.',
                icon: [20, 24, "magixmod"],
                res: {
                    'chop': { 'log': 2, 'stick': 4 },
                    'gather': { 'stick': 1 },
                },
                affectedBy: ['deforestation'],
                mult: 5,
            });
            new G.Goods({
                name: 'mangrove',
                desc: 'Similar to [willow]s, the [mangrove,Mangrove tree] tends to grow in lush, wet climates and can be chopped for [log]s and harvested for [stick]s.',
                icon: [18, 24, "magixmod"],
                res: {
                    'chop': { 'log': 2, 'stick': 5 },
                    'gather': { 'stick': 1.1 },
                },
                affectedBy: ['deforestation'],
                mult: 5,
            });
            //Lavender fields
            new G.Goods({
                name: 'lavender',
                desc: 'A nice flower that has relaxing smell and can be used in aromatherapy. However, [lavender] flowers are hard to come by.',
                icon: [35, 4, "magixmod"],
                res: {
                    'flowers': { 'flowers': 0.1 },
                },
                mult: 5,
            });
            G.getDict('grass').res['gather']['vegetables'] = 0.001;
            G.getDict('palm tree').res['gather']['bamboo'] = 0.0000035;
            new G.Goods({
                name: 'jacaranda',
                desc: 'The [jacaranda,Jacaranda tree] appears only at <b>Lavender fields</b> and grows in temperate climate. //Can be chopped for [log]s and harvested for [stick]s.',
                icon: [19, 24, "magixmod"],
                res: {
                    'chop': { 'log': 2, 'stick': 4 },
                    'gather': { 'stick': 1 },
                },
                affectedBy: ['deforestation'],
                mult: 5,
            });
            new G.Goods({
                name: 'Ice',
                desc: 'Only in an iceberg can you can find so much [ice]! It is freeeezing there though...Brrr...',
                icon: [21, 24, "magixmod"],
                res: {
                    'dig': { 'ice': 2.25 },
                },
                affectedBy: ['mineral depletion'],
                mult: 2,
            });
            new G.Goods({
                name: 'Sugar cane',
                desc: '[sugar cane] can live and grow in wetlands, but in small amounts. Can be found at lush biomes and amount of sugar cane is not constant. At some lands you may find that [sugar cane] is scarce, while somewhere else it is plenty.',
                icon: [31, 22, "magixmod"],
                res: {
                    'gather': { 'sugar cane': 0.000002 },
                },
                mult: 1,
            });
            new G.Goods({
                name: 'squid',
                desc: 'Squid provide a nice source of [ink]. You need [ink-fishing] to collect it, however.',
                icon: [32, 6, "magixmod"],
                res: {
                    'fish': {},//B4 inkfishing tech
                },
                affectedBy: ['over fishing'],
                mult: 0,
            });
            //NEW SUBSTRATES
            new G.Goods({
                name: 'warm rocky substrate',
                desc: 'A [warm rocky substrate] is found underneath biomes with warm temperature and low humidity.//Surface [stone]s may be gathered by hand.//This soil contains low amounts of [clay] and negligible amounts of [mud], more [stone]s, and occasionally [copper ore,Ores].//Mining provides the best results, outputting a variety of [stone]s, more common [gold ore] and [salt], but less precious [gems].//Quarrying underneath there provides a little [marble].',
                icon: [33, 23, "magixmod"],
                res: {
                    'gather': { 'stone': 0.2, 'clay': 0.002, 'limestone': 0.003 },
                    'dig': { 'mud': 0.1, 'clay': 0.3, 'stone': 0.6, 'copper ore': 0.008, 'tin ore': 0.008, 'limestone': 0.1, 'salt': 0.051, 'sand': 0.00001 },
                    'mine': { 'stone': 0.8, 'copper ore': 0.01, 'tin ore': 0.08, 'iron ore': 0.042, 'gold ore': 0.0052, 'coal': 0.11, 'salt': 0.14, 'gems': 0.004, 'various stones': 0.2/*no osmium*/, 'pyrite': 0.0015 },
                    'quarry': { 'cut stone': 0.9, 'limestone': 0.5, 'marble': 0.0088, 'various cut stones': 0.1 },
                    'deep mine': { 'pyrite': 0.07, 'zinc ore': 0.02, 'dinium ore': 0.042, 'gems': 0.007 },
                    'deep quarry': { 'lead ore': 0.03, 'mythril ore': 0.027, 'blackium ore': 0.05, 'unknownium ore': 0.025 },
                },
                affectedBy: ['mineral depletion'],
                noAmount: true,
                mult: 5,
            });
            new G.Goods({
                name: 'tundra rocky substrate',
                desc: 'A [tundra rocky substrate] is found underneath biomes with low temperatures or similar to tundra.//Surface [stone]s may be gathered by hand.//This soil contains less [clay] and [mud], more [stone]s and a little bit less [copper ore,Ores].//Mining provides the best results, outputting a variety of [stone]s, more common [iron ore] and [coal], but less of ores like [copper ore,Copper] or [tin ore,Tin]. Can\'t forget about [gems] though!//Quarrying underneath provides more [limestone] and [platinum ore].',
                icon: [33, 22, "magixmod"],
                res: {
                    'gather': { 'stone': 0.2, 'clay': 0.004, 'limestone': 0.0035 },
                    'dig': { 'mud': 1.5, 'clay': 0.2, 'stone': 0.6, 'copper ore': 0.006, 'tin ore': 0.006, 'limestone': 0.1, 'salt': 0.051 },
                    'mine': { 'stone': 0.95, 'copper ore': 0.09, 'tin ore': 0.07, 'iron ore': 0.046, 'gold ore': 0.0035, 'coal': 0.16, 'salt': 0.1, 'gems': 0.005, 'various stones': 0.05, 'pyrite': 0.02/*osmium 0.041*/ },
                    'quarry': { 'cut stone': 0.85, 'limestone': 0.62, 'marble': 0.01, 'various cut stones': 0.15 },
                    'deep mine': { 'pyrite': 0.02, 'zinc ore': 0.03, 'dinium ore': 0.06, 'gems': 0.003 },
                    'deep quarry': { 'lead ore': 0.04, 'mythril ore': 0.015, 'blackium ore': 0.025, 'unknownium ore': 0.02, 'salt': 0.001 },
                },
                affectedBy: ['mineral depletion'],
                noAmount: true,
                mult: 5,
            });
            new G.Goods({
                name: 'ice desert rocky substrate',
                desc: 'A [ice desert rocky substrate] is found underneath biomes with very low temperatures.//Surface [stone]s may be gathered by hand.//This soil contains no [mud], more [stone]s and [limestone], and rarely [copper ore,Ores].//Mining provides the best results, outputting a variety of [stone]s, an abundance of [iron ore], and some [coal], but less amounts of ores like [copper ore,Copper] or [tin ore,Tin]. Can\'t forget about [gems] though! Here you can find a little bit more of them.//Quarrying underneath there provides more [limestone] and [marble], but way less [various stones].//<font color="#fcc">This substrate contains no [salt].</font>',
                icon: [33, 21, "magixmod"],
                res: {
                    'gather': { 'stone': 0.2, 'clay': 0.002, 'limestone': 0.0035 },
                    'dig': { 'clay': 0.2, 'stone': 0.6, 'copper ore': 0.001, 'tin ore': 0.001, 'limestone': 0.105 },
                    'mine': { 'stone': 0.944, 'copper ore': 0.09, 'tin ore': 0.07, 'iron ore': 0.06, 'gold ore': 0.0035, 'coal': 0.21, 'gems': 0.0052, 'various stones': 0.006/*osmium 0.04*/ },
                    'quarry': { 'cut stone': 1, 'limestone': 0.62, 'marble': 0.01, 'various cut stones': 0.001 },
                    'deep mine': { 'zinc ore': 0.07, 'dinium ore': 0.06, 'gems': 0.003 },
                    'deep quarry': { 'lead ore': 0.08, 'mythril ore': 0.019, 'blackium ore': 0.01, 'unknownium ore': 0.05 },
                },
                affectedBy: ['mineral depletion'],
                noAmount: true,
                mult: 5,
            });
            new G.Goods({
                name: 'wet rocky substrate',
                desc: 'A [wet rocky substrate] is found underneath terrain with high humidity.//Surface [stone]s may be gathered by hand.//Digging here often produces way more [mud] and [clay], more [stone]s and occasionally [copper ore,Ores] and extra [clay]. Digging there provides more [limestone] but provides no [salt].//Mining provides the best results, outputting a variety of [stone]s, more common [copper ore,Copper], and precious [gems]. Also, mining there provides way less [iron ore,Iron].//Quarrying provides a little more [limestone] and [marble] but less [cut stone] than usual.',
                icon: [33, 20, "magixmod"],
                res: {
                    'gather': { 'stone': 0.25, 'clay': 0.007, 'limestone': 0.005 },
                    'dig': { 'mud': 4.2, 'clay': 0.45, 'stone': 0.6, 'copper ore': 0.008, 'tin ore': 0.008, 'limestone': 0.14 },
                    'mine': { 'stone': 0.85, 'copper ore': 0.011, 'tin ore': 0.085, 'iron ore': 0.02, 'gold ore': 0.004, 'coal': 0.09, 'salt': 0.11, 'gems': 0.005, 'various stones': 0.15 },
                    'quarry': { 'cut stone': 0.81, 'limestone': 0.55, 'marble': 0.011, 'various cut stones': 0.09 },
                    'deep mine': { 'pyrite': 1, 'zinc ore': 0.04, 'dinium ore': 0.01, 'gems': 0.002 },
                    'deep quarry': { 'lead ore': 0.045, 'mythril ore': 0.032, 'unknownium ore': 0.06 },
                },
                affectedBy: ['mineral depletion'],
                noAmount: true,
                mult: 5,
            });
            new G.Goods({
                name: 'jungle rocky substrate',
                desc: 'A [jungle rocky substrate] is found underneath jungles.//Surface [stone]s may be gathered by hand.//Digging here often produces way more [clay], more [stone]s and occasionally [copper ore,Ores] and extra [clay]. Digging there provides more [limestone] but provides no [salt].//Mining provides the best results, outputting a variety of [stone]s, more common [tin ore,Tin] but less precious [gems] and way less [copper ore,Copper] amounts. Also, mining there provides way less [iron ore,Iron].//Quarrying provides less [platinum ore,Platinum].',
                icon: [33, 18, "magixmod"],
                res: {
                    'gather': { 'stone': 0.25, 'clay': 0.005, 'limestone': 0.005 },
                    'dig': { 'mud': 2, 'clay': 0.35, 'stone': 0.6, 'copper ore': 0.008, 'tin ore': 0.008, 'limestone': 0.14 },
                    'mine': { 'stone': 0.8, 'copper ore': 0.004, 'tin ore': 0.014, 'iron ore': 0.05, 'gold ore': 0.004, 'coal': 0.09, 'salt': 0.11, 'gems': 0.004, 'various stones': 0.2 },
                    'quarry': { 'cut stone': 0.75, 'limestone': 0.5, 'marble': 0.01, 'various cut stones': 0.25 },
                    'deep mine': { 'zinc ore': 0.01, 'dinium ore': 0.04 },
                    'deep quarry': { 'lead ore': 0.05, 'mythril ore': 0.032, 'unknownium ore': 0.04 },
                },
                affectedBy: ['mineral depletion'],
                noAmount: true,
                mult: 5,
            });
            new G.Goods({
                name: 'lush rocky substrate',
                desc: 'A [lush rocky substrate] is found underneath terrain with a lush temperature and stable humidity.//Surface [stone]s may be gathered by hand.//Digging here often produces [mud], more [stone]s and occasionally [copper ore,Ores] and a bit less [clay].//Mining provides the best results, outputting a variety of [stone]s, a little bit more rarely [gold ore,Ores], and precious [gems] but less of ores like [copper ore,Copper], [tin ore,Tin], and [iron ore,Iron]. Also, you will find less [coal] here.//Quarrying there gives a little bit more [marble] and [platinum ore,Platinum].',
                icon: [33, 19, "magixmod"],
                res: {
                    'gather': { 'stone': 0.25, 'clay': 0.005, 'limestone': 0.005 },
                    'dig': { 'mud': 2, 'clay': 0.13, 'stone': 0.6, 'copper ore': 0.0079, 'tin ore': 0.0081, 'limestone': 0.1, 'salt': 0.05 },
                    'mine': { 'stone': 0.88, 'copper ore': 0.055, 'tin ore': 0.055, 'iron ore': 0.025, 'gold ore': 0.0038, 'coal': 0.078, 'salt': 0.1, 'gems': 0.005, 'various stones': 0.12 },
                    'quarry': { 'cut stone': 0.9, 'limestone': 0.5, 'marble': 0.01, 'various cut stones': 0.1 },
                    'deep mine': { 'pyrite': 0.05, 'zinc ore': 0.035, 'dinium ore': 0.045, 'gems': 0.001 },
                    'deep quarry': { 'lead ore': 0.046, 'mythril ore': 0.024, 'blackium ore': 0.034, 'salt': 0.001, 'unknownium ore': 0.034 },
                },
                affectedBy: ['mineral depletion'],
                noAmount: true,
                mult: 5,
            });
            new G.Goods({
                name: 'dead rocky substrate',
                desc: 'A [dead rocky substrate] is unique to the Dead forest biome.//Surface [stone]s may be gathered by hand.//Digging rarely produces [mud], more [stone]s and occasionally [copper ore,Ores] and [clay].//Mining there is not worth it at all because you will find almost no [tin ore,Ores]! //Same with quarrying (excluding [marble] and [platinum ore,Platinum], which is more common than anywhere else). //<font color="#aabbbb">Here, you will find no [gold ore,Gold].</font>',
                icon: [33, 16, "magixmod"],
                res: {
                    'gather': { 'stone': 0.25, 'clay': 0.004, 'limestone': 0.002 },
                    'dig': { 'mud': 0.5, 'clay': 0.05, 'stone': 0.2, 'copper ore': 0.002, 'tin ore': 0.002, 'limestone': 0.025, 'salt': 0.02/*osmium 0.001*/ },
                    'mine': { 'stone': 0.8, 'copper ore': 0.03, 'tin ore': 0.03, 'iron ore': 0.01, 'coal': 0.04, 'salt': 0.1, 'gems': 0.001, 'various stones': 0.2 },
                    'quarry': { 'cut stone': 0.6, 'limestone': 0.1, 'marble': 0.01, 'various cut stones': 0.2 },
                },
                affectedBy: ['mineral depletion'],
                noAmount: true,
                mult: 3.85,
            });
            new G.Goods({
                name: 'dead grass',
                desc: '[dead grass] is a bad source of [herbs], however, you may gain a piece of [fruit] or a [stick] when foraging.',
                icon: [33, 15, "magixmod"],
                res: {
                    'gather': { 'fruit': 0.1, 'stick': 0.5 },
                },
                mult: 8.5,
            });
            new G.Goods({
                name: 'mudwater',
                desc: '[mudwater], whether found in some swamps and Dead forests, can only be collected for unhealthy [muddy water].',
                icon: [33, 17, "magixmod"],
                res: {
                    'gather': { 'muddy water': 12 },
                },
                mult: 5,
            });
            new G.Goods({
                name: 'animal corpse',
                desc: '[animal corpse]s are exclusively found here. Some of these are found underground and kept safe through time, so both digging and gathering may provide some [bone]s.',
                icon: [33, 14, "magixmod"],
                res: {
                    'gather': { 'bone': 0.1 },
                    'dig': { 'bone': 0.2 }
                },
                mult: 2,
            });
            new G.Goods({
                name: 'dead fishes',
                desc: 'These stinky fish have a decisively bad smell. Might give an insignificant amount of [spoiled food].',
                icon: [33, 13, "magixmod"],
                res: {
                    'fish': { 'spoiled food': 0.02 },
                },
                mult: 2,
            });
            new G.Goods({
                name: 'spoiled fruits',
                desc: 'Fruits that are dangerous for [health] when eaten. A source of some [spoiled food].',
                icon: [33, 12, "magixmod"],
                res: {
                    'gather': { 'spoiled food': 0.1 },
                },
                mult: 2,
            });
            new G.Goods({
                name: 'badlands substrate',
                desc: 'A [badlands substrate] can only be found in the badlands biome.//Instead of [stone]s, there are [various stones] that can be gathered by hand.//By digging, you can find less [mud] and [clay], more [various stones], and small portions of [copper ore,Soft metal ores]. You won\'t find any [salt] by digging here.//Mining provides the best results, outputting a variety of [various stones], more often [gold ore,Precious ores], [salt] and [gems], but you will find less [coal] there.',
                icon: [3, 29, "magixmod"],
                res: {
                    'gather': { 'various stones': 0.25, 'clay': 0.005, 'limestone': 0.005 },
                    'dig': { 'mud': 0.5, 'clay': 0.05, 'various stones': 0.6, 'copper ore': 0.006, 'tin ore': 0.006, 'limestone': 0.11 },
                    'mine': { 'various stones': 0.97, 'copper ore': 0.065, 'tin ore': 0.06, 'iron ore': 0.035, 'gold ore': 0.008, 'coal': 0.03, 'salt': 0.16, 'gems': 0.009, 'stone': 0.03/*osmium 0.01*/ },
                    'quarry': { 'cut stone': 0.05, 'limestone': 0.5, 'marble': 0.01, 'various cut stones': 0.95 },
                    'deep mine': { 'pyrite': 0.001, 'zinc ore': 0.05, 'dinium ore': 0.041 },
                    'deep quarry': { 'mythril ore': 0.01, 'blackium ore': 0.032, 'unknownium ore': 0.02 },
                },
                affectedBy: ['mineral depletion'],
                noAmount: true,
                mult: 5,
            });
            new G.Goods({
                name: 'ostrich',
                desc: '[ostrich,Ostriches] are a source of [meat] that can be found in the <b>Savanna</b>, <b>Desert</b> and <b>Badlands</b>. They are birds without wings and run very fast, making hunting them more challenging.',
                icon: [choose([4, 5]), 29, "magixmod"],
                res: {
                    'hunt': { 'meat': 2, 'bone': 0.25 },
                },
                mult: 2,
            });
            new G.Goods({
                name: 'xeric substrate',
                desc: 'A [xeric substrate] can only be found at xeric shrublands.//There are [stone]s that can be gathered by hand.//By digging, you can find no [clay], less [stone]s, and some [copper ore,Ores]. There are also small amounts of [salt] hidden throughout.//Mining provides the best results, outputting a variety of [stone]s, more often [gold ore,Precious ores] (in fact, more fool\'s gold than true gold) and precious [gems].//Quarrying there provides no mythril.',
                icon: [6, 29, "magixmod"],
                res: {
                    'gather': { 'various stones': 0.25, 'clay': 0.005, 'limestone': 0.005 },
                    'dig': { 'mud': 2.15, 'stone': 0.1, 'copper ore': 0.008, 'tin ore': 0.008, 'limestone': 0.13, 'salt': 0.001 },
                    'mine': { 'stone': 0.9, 'copper ore': 0.08, 'tin ore': 0.08, 'iron ore': 0.04, 'gold ore': 0.04, 'coal': 0.07, 'salt': 0.15, 'gems': 0.009, 'various stones': 0.1 },
                    'quarry': { 'cut stone': 0.05, 'limestone': 0.5, 'marble': 0.01, 'various cut stones': 0.95 },
                },
                affectedBy: ['mineral depletion'],
                noAmount: true,
                mult: 5,
            });
            new G.Goods({
                name: 'cherry blossom',
                desc: '[cherry blossom]s appear only on their respective grove and grow in a temperate but lush climate. //These unique trees can be chopped for [log]s and harvested for [stick]s.',
                icon: [36, choose([2, 3]), "magixmod"],
                res: {
                    'chop': { 'log': 2, 'stick': 4 },
                    'gather': { 'stick': 1 },
                },
                affectedBy: ['deforestation'],
                mult: 5,
            });
            new G.Goods({
                name: 'coral reef',
                desc: 'Colorful, beautiful corals. They like to live in warm, tropical oceans and seas. However, some reefs can be met in the depths of lukewarm oceans in much smaller colonies. //This does not provide anything useful, however.',
                icon: [3, 5, "magix2"],
            });
            new G.Goods({
                name: 'kelp',
                desc: 'Kelp or seagrass. They can be found in a variety of aquatic places. In some regions of the marine world, kelp are very common, while in others, they become very scarce.',
                res: {
                    'kelp': { 'kelp2': 1 },
                },
                icon: [4, 5, "magix2"],
            });


            new G.Goods({ //By @1_e0
                name: 'bee nest',
                desc: 'Each bee nest is full of tiny cells may provide a small source of [honey] and [honeycomb]s. Bees may also help pollinate nearby [flowers], ensuring that they grow properly.',
                res: {
                    'honey': { 'honey': 0.1, 'honeycomb': 0.05 }
                },
                icon: [4, 1, "magix2"],
            });
            /*=====================================================================================
            TILE EFFECTS
            =======================================================================================*/
            //TODO : implement
            new G.TileEffect({
                name: 'deforestation',
                desc: 'This is the result of too much woodcutting in an area.//Having this effect on a tile lowers the amount of trees it provides.//If woodcutting is halted, this effect will slowly subside as trees grow back over time, if the deforestation isn\'t too severe.',
                visibleAt: 100,
            });
            new G.TileEffect({
                name: 'mineral depletion',
                desc: 'This is the result of too much mining and digging in an area.//Having this effect on a tile lowers the amount of minerals it provides.//If mining and digging are halted, this effect will slowly subside as more ore nodes are discovered.',
                visibleAt: 100,
            });
            new G.TileEffect({
                name: 'over hunting',
                desc: 'This is the result of too much hunting in an area.//Having this effect on a tile lowers the quantity of animals it provides.//If hunting is halted, this effect will slowly subside as animal population recovers over time, if there is enough of it left.',
                visibleAt: 100,
            });
            new G.TileEffect({
                name: 'over fishing',
                desc: 'This is the result of too much fishing in an area.//Having this effect on a tile lowers the quantity of sea creatures it provides.//If fishing is halted, this effect will slowly subside as wildlife population recovers over time, if there is enough of it left.',
                visibleAt: 100,
            });
            new G.TileEffect({
                name: 'scarce forageables',
                desc: 'This is the result of too much foraging in an area.//Having this effect on a tile lowers the quantity of all forageables it provides.//If foraging is halted, this effect will slowly subside.',
                visibleAt: 100,
            });
            new G.TileEffect({
                name: 'reserve',
                desc: 'A [reserve] prevents any resource extraction from this tile, letting depleted resources heal over.',
            });
            //UNIT LOGIC
            G.logic['unit'] = function () {
                var mult = G.doFunc('production multiplier', 1);//global production multiplier - affects how many times the unit effects will be applied every tick

                var len = G.unitsOwned.length;
                //we turn the list of owned units into internally shuffled sections sorted by priority, then work through those in order
                var priorities = [];
                for (var i = 0; i < len; i++) {
                    if (!priorities[G.unitsOwned[i].unit.priority]) priorities[G.unitsOwned[i].unit.priority] = [G.unitsOwned[i].unit.priority];
                    priorities[G.unitsOwned[i].unit.priority].push(G.unitsOwned[i]);
                }

                priorities.sort(function (a, b) { return b[0] - a[0] });

                for (var iP in priorities) {
                    priorities[iP].shift();
                    shuffle(priorities[iP]);
                    var len = priorities[iP].length;
                    for (var i = 0; i < len; i++) {
                        var me = priorities[iP][i];
                        if (!me.unit.wonder && me.amount < me.targetAmount)//try to build up to target
                        {
                            var toMake = Math.min(me.targetAmount - me.amount, Math.max(1, me.targetAmount * 0.5));
                            G.buyUnit(me, toMake, true);
                        }
                        else if (!me.unit.wonder && me.amount > me.targetAmount) {
                            var toDie = Math.min(me.amount - me.targetAmount, Math.max(1, me.amount * 0.5));
                            G.killUnit(me, toDie, true);
                        }
                        if (!me.unit.wonder && me.idle > 0)//try to refill
                        {
                            var toMake = Math.min(me.idle, Math.max(1, me.idle * 0.5));
                            G.unidleUnit(me, toMake);
                        }

                        var amount = G.applyUnitAmountEffects(me);//modify the effective amount
                        if (amount > 0) {
                            //apply effects every tick
                            var repeat = me.unit.name == 'well' ? 1 : randomFloor(mult);
                            if (repeat > 0) {
                                for (var ii = 0; ii < repeat; ii++) {
                                    G.applyUnitEffects(me, amount);
                                }
                            }
                        }
                        if (me.unit.wonder) {
                            //apply steps
                            if (me.mode == 1 || me.mode == 2) {
                                if (me.percent >= me.unit.steps) {
                                    me.mode = 3;
                                    if (G.getSetting('animations') && me.l) triggerAnim(me.l, 'plop');
                                }
                                if (me.mode == 1 && G.testCost(me.unit.costPerStep, 1)) {
                                    if (me.unit.type == 'portal' && me.unit.name != 'grand mirror' && me.unit.name != 'well of ideas') { //for paradise, ancestors and plain island only
                                        if (me.percent > 25) {
                                            G.getDict(me.unit.name).costPerStep = me.unit.costPerStep2;
                                            G.getDict(me.unit.name).wideIcon = me.unit.wideIcon2; //apply activated
                                        }
                                    }
                                    if (G.testCost(me.unit.costPerStep, 1))
                                        me.percent++;
                                    else if (me.unit.type != 'portal') me.percent++; //only portals change their costs, well, and the wonder from the Buried trial
                                    if (me.unit.name == 'temple of the Dead' && me.percent > 100 && me.percent <= 500) G.getDict('temple of the Dead').costPerStep = { 'basic building materials': 10, 'corpse': 1 + (me.percent * 0.001), 'precious building materials': 1.2, 'bone': 3 + (me.percent * 0.01), 'dark essence': 2 + (me.percent * 0.01) };
                                    if (me.unit.name == 'temple of the Dead' && me.percent > 500) G.getDict('temple of the Dead').costPerStep = { 'basic building materials': 5 + me.percent * 0.01, 'corpse': 1.5, 'precious building materials': 2, 'bone': 3 + (me.percent * 0.011), 'dark essence': 4 + (me.percent * 0.012) };
                                    if (me.unit.name == 'platinum fish statue') {
                                        setObj('droughtNew', 5 - me.percent * 0.1)
                                    }
                                    G.doCost(me.unit.costPerStep, 1);
                                    if (me.unit.name == 'well of ideas' && me.percent > 0 && me.percent % 10 === 0) {
                                        G.gain('idea tablet', 2);
                                    }
                                    if (G.getSetting('animations') && me.l) triggerAnim(me.l, 'plop');
                                }
                                if (me.percent >= me.unit.steps) {
                                    me.mode = 3;
                                    if (G.getSetting('animations') && me.l) triggerAnim(me.l, 'plop');
                                }
                            }
                        }
                        if (me.amount > 0) {
                            var waste = 0;
                            var idle = 0;
                            //run upkeep and check used resources; if we're short on either, waste away
                            for (var ii in me.unit.upkeep) {
                                var res = G.getRes(ii);
                                var upkeep = me.unit.upkeep[ii] * (me.amount - me.idle);
                                var spent = G.lose(ii, upkeep, 'unit upkeep');
                                if (spent < upkeep) {
                                    if (me.unit.alternateUpkeep && me.unit.alternateUpkeep[ii])//last resort
                                    { spent += G.lose(me.unit.alternateUpkeep[ii], upkeep * (me.amount - me.idle) - spent, 'unit upkeep'); }
                                    if (spent < upkeep) idle = true;
                                }
                            }
                            for (var ii in me.unit.use) {
                                var res = G.getRes(ii);
                                var use = me.unit.use[ii];
                                //if (res.amount<res.used) waste=1;
                                //if (me.amount>0 && res.name=='worker') console.log('we need '+(use*(me.amount))+', we have '+(res.amount-res.used)+' for '+(me.amount)+' '+me.unit.name+'; deleting '+(waste,(use*(me.amount)-(res.amount-res.used))/use));
                                if (use && (res.amount <= use * (me.amount) || res.amount < res.used)) waste = true;
                            }
                            for (var ii in me.unit.staff) {
                                var res = G.getRes(ii);
                                var use = me.unit.staff[ii];
                                //if (res.amount<res.used) idle=1;
                                if (use && (res.amount <= use * (me.amount - me.idle) || res.amount < res.used)) idle = true;
                            }
                            for (var ii in me.mode.use) {
                                var res = G.getRes(ii);
                                var use = me.mode.use[ii];
                                //if (res.amount<res.used) idle=1;
                                if (use && (res.amount <= use * (me.amount - me.idle) || res.amount < res.used)) idle = true;
                            }
                            if (!G.testLimit(me.unit.limitPer, G.getUnitAmount(me.unit.name))) waste = true;

                            //if (idle) G.idleUnit(me,Math.ceil(idle));
                            //if (waste) G.wasteUnit(me,Math.ceil(waste));
                            if (idle) G.idleUnit(me, Math.ceil((me.amount - me.idle) * 0.05));
                            if (waste) G.wasteUnit(me, Math.ceil(me.amount * 0.05));
                        }
                        if (!me.unit.visible) {
                            //if hidden disable it...truly disable refunding all usage
                            me.unit.amount = 0;
                            me.unit.idle = 0;
                        }
                    }
                }
            }
            if (G.tragedyHappened == null) {
                G.tragedyHappened = null;
            } else { G.tragedyHappened = G.tragedyHappened };
            /*=====================================================================================
            MAP GENERATOR
            =======================================================================================*/

            G.funcs['create map'] = function (w, h, type) {
                // w *= 2; (removed because not needed)
                var generate = function (w, h) {
                    var getAt = function (map, x, y) {
                        //if (x<0||x>=map.length||y<0||y>=map[0].length) return 0;
                        //wrap around so we don't get big empty spots on the edges (as a bonus, this creates donut-shaped worlds)
                        if (x < 0) x += map.length;
                        else if (x >= map.length) x -= map.length;
                        if (y < 0) y += map[0].length;
                        else if (y >= map[0].length) y -= map[0].length;
                        return map[x][y];
                    }

                    var lvl = Array(w);
                    //init map
                    if (type) {
                        // Custom new map generation for other islands
                        // We know that the map size is 24x24 which means 576 tiles. For plain island there are 220 cells, for paradise or ancestors there are 215. Instead of doing the CGOL approach opting for an "erosion" approach is better.
                        var target = type === 1 ? 220 : 215
                        var cellsAdded = 0
                        while (cellsAdded < 300) { // Make sure there are actually enough cells for eroding
                            cellsAdded = 0
                            for (var x = 0; x < w; x++) {
                                lvl[x] = Array(h);
                                for (var y = 0; y < h; y++) {
                                    var add = +(Math.random() < 0.65)
                                    cellsAdded += add
                                    lvl[x][y] = add
                                }
                            }
                        }

                        while (cellsAdded !== target) {
                            // Find all land cells and their neighbor counts
                            var landCells = [];
                            for (var x = 0; x < w; x++) {
                                for (var y = 0; y < h; y++) {
                                    if (lvl[x][y] === 1) {
                                        var neighbors = getAt(lvl, x - 1, y) + getAt(lvl, x - 1, y - 1) + getAt(lvl, x, y - 1) + getAt(lvl, x + 1, y - 1) + getAt(lvl, x + 1, y) + getAt(lvl, x + 1, y + 1) + getAt(lvl, x, y + 1) + getAt(lvl, x - 1, y + 1);
                                        landCells.push({ x: x, y: y, neighbors: neighbors });
                                    }
                                }
                            }

                            // Sort cells to remove based on having the fewest neighbors with some RNG
                            landCells.sort((a, b) => a.neighbors - b.neighbors + (2 * Math.random() - 1))

                            // Remove one cell and decrement the count
                            var cellToRemove = landCells[0]
                            lvl[cellToRemove.x][cellToRemove.y] = 0
                            cellsAdded--
                        }
                    } else {
                        // default, for main world
                        //generate basic geography using Conway's Game of Life (rule : births from 4 to 9 neighbors, survival from 6 to 9 neighbors)
                        for (var x = 0; x < w; x++) {
                            lvl[x] = Array(h);
                            for (var y = 0; y < h; y++) {
                                lvl[x][y] = Math.random() < 0.5 ? 1 : 0;
                            }
                        }

                        //init buffer
                        var lvlBuffer = [];
                        for (var x = 0; x < w; x++) { lvlBuffer[x] = []; for (var y = 0; y < h; y++) { lvlBuffer[x][y] = 0; } }

                        var passes = 1;
                        for (var i = 0; i < passes; i++) {
                            //live
                            for (var x = 0; x < w; x++) {
                                for (var y = 0; y < h; y++) {
                                    var n = getAt(lvl, x - 1, y) + getAt(lvl, x - 1, y - 1) + getAt(lvl, x, y - 1) + getAt(lvl, x + 1, y - 1) + getAt(lvl, x + 1, y) + getAt(lvl, x + 1, y + 1) + getAt(lvl, x, y + 1) + getAt(lvl, x - 1, y + 1);
                                    var on = lvl[x][y];
                                    if (on && n >= 4 && n <= 9) on = 1; else on = 0;
                                    if (!on && n >= 6 && n <= 9) on = 1;
                                    if (Math.random() < 0.05) on = Math.random() < 0.5 ? 1 : 0;//just a bit of extra randomness
                                    lvlBuffer[x][y] = on;
                                }
                            }
                            //copy buffer back
                            for (var x = 0; x < w; x++) { for (var y = 0; y < h; y++) { lvl[x][y] = lvlBuffer[x][y]; } }
                        }
                    }
                    return lvl;
                }

                var getStrAt = function (map, x, y) {
                    if (x < 0 || x >= map.length - 1 || y < 0 || y >= map[0].length - 1) return 'out';
                    return map[x][y];
                }
                var getAt = function (map, x, y) {
                    if (x < 0 || x >= map.length - 1 || y < 0 || y >= map[0].length - 1) return 0.5;
                    return map[x][y];
                }

                var landTiles = [];
                var seaTiles = [];
                var fit = false;
                i = 0;
                while (fit == false && i !== 50)//discard any map with less than 30% or more than 50% land
                {
                    var lvl = generate(w, h);

                    landTiles = [];
                    seaTiles = [];
                    for (var x = 0; x < w; x++) {
                        for (var y = 0; y < h; y++) {
                            if (lvl[x][y] == 0) seaTiles.push([x, y]);
                            else landTiles.push([x, y]);
                        }
                    }
                    var total = landTiles.length + seaTiles.length;
                    var fractionLand = landTiles.length / total
                    if (type || (fractionLand > 0.3 && fractionLand < 0.5)) fit = true;
                    i++;
                }

                //translate into terrain
                for (var x = 0; x < w; x++) {
                    for (var y = 0; y < h; y++) {
                        var land = 'ocean';
                        if (lvl[x][y] == 0) land = 'ocean';
                        else if (lvl[x][y] == 1) {
                            land = 'none';
                        }
                        lvl[x][y] = land;
                    }
                }

                //precipitation map
                //generate more humidity over sea, less in land - with some variance
                //on tiles with low humidity, 30% of the time, add some huge variance
                //then, blur the map so that coasts get some humidity and variance can spread
                var wet = [];
                for (var x = 0; x < w; x++) {
                    wet[x] = [];
                    for (var y = 0; y < h; y++) {
                        wet[x][y] = (lvl[x][y] == 'ocean' ? 0.8 : 0.2) + Math.random() * 0.1 - 0.1 / 2;
                        if (Math.random() < 0.3 && wet[x][y] < 0.5) wet[x][y] += Math.random() * 5 - 2.5;
                    }
                }
                for (var x = 0; x < w; x++)//blur
                {
                    for (var y = 0; y < h; y++) {
                        var variance = 0.05;
                        var n = getAt(wet, x - 1, y) + getAt(wet, x - 1, y - 1) + getAt(wet, x, y - 1) + getAt(wet, x + 1, y - 1) + getAt(wet, x + 1, y) + getAt(wet, x + 1, y + 1) + getAt(wet, x, y + 1) + getAt(wet, x - 1, y + 1);
                        wet[x][y] = (wet[x][y] + n) / 9 + Math.random() * variance - variance / 2;
                    }
                }
                //temperature map. why not
                var jumble = false;
                if (!jumble) {
                    //vertical sine wave (so we get hot equator and cold poles), with some variance
                    //humidity lowers temperature by a bit
                    var temp = [];
                    for (var x = 0; x < w; x++) {
                        temp[x] = [];
                        for (var y = 0; y < h; y++) {
                            var variance = 0.15;
                            temp[x][y] = Math.sin(((y + 0.5) / h - 0.25) * Math.PI * 2) / 2 + (lvl[x][y] == 'ocean' ? 0.6 : 0.5) - (wet[x][y]) * 0.15 + Math.random() * variance - variance / 2;
                        }
                    }
                }
                else {
                    //temperature spawns in big blobs of cold and hot
                    var temp = [];
                    for (var x = 0; x < w; x++) {
                        temp[x] = [];
                        for (var y = 0; y < h; y++) {
                            temp[x][y] = 0.65 + Math.random() * 0.1 - 0.1 / 2 - wet[x][y] * 0.15;
                            if (Math.random() < 0.5) temp[x][y] += Math.random() * 10 - 5;
                        }
                    }
                    for (var i = 0; i < 2; i++)//blur
                    {
                        for (var x = 0; x < w; x++) {
                            for (var y = 0; y < h; y++) {
                                var variance = 0.05;
                                var n = getAt(temp, x - 1, y) + getAt(temp, x - 1, y - 1) + getAt(temp, x, y - 1) + getAt(temp, x + 1, y - 1) + getAt(temp, x + 1, y) + getAt(temp, x + 1, y + 1) + getAt(temp, x, y + 1) + getAt(temp, x - 1, y + 1);
                                temp[x][y] = (temp[x][y] + n) / 9 + Math.random() * variance - variance / 2;
                            }
                        }
                    }
                }

                //biomes
                if (type) {
                    if (type == 1) {
                        // CODE IN TESTING PHASE
                        for (var x = 0; x < w; x++) {
                            for (var y = 0; y < h; y++) {
                                var tempTile = temp[x][y];
                                var wetTile = wet[x][y];
                                var landTile = lvl[x][y];
                                lvl[x][y] = landTile == 'ocean' ? 'lukewarm ocean' : (wetTile < 0.4 ? 'desert' : 'prairie');
                            }
                        }

                        for (var x = 0; x < w; x++)//clean all tiles with no terrain
                        {
                            for (var y = 0; y < h; y++) {
                                if (lvl[x][y] == 'none') lvl[x][y] = 'forest';
                            }
                        }
                    }
                } else {
                    for (var x = 0; x < w; x++) {
                        for (var y = 0; y < h; y++) {
                            var tempTile = temp[x][y];
                            var wetTile = wet[x][y];
                            var landTile = lvl[x][y];

                            var biomes = [];
                            if (tempTile < -0.1275) {
                                biomes.push('glacier');
                            }
                            else if (tempTile < -0.1 && tempTile > -0.1275) {
                                if (landTile == 'ocean') biomes.push('arctic ocean');
                                else biomes.push('ice desert');
                            }
                            else if (tempTile < 0.15) {
                                if (landTile == 'ocean') biomes.push('arctic ocean');
                                else if (wetTile < 0.25) biomes.push('ice desert');
                                else if (wetTile > 0.5 && wetTile < 0.75) biomes.push('boreal forest');
                                else if (wetTile > 0.75) biomes.push('swamplands');
                                else biomes.push('tundra');
                            }
                            else if (tempTile > 1.1) {
                                if (landTile == 'ocean') biomes.push('tropical ocean');
                                else if (wetTile > 0.04) biomes.push('xeric shrubland');
                                else biomes.push('desert');
                            }
                            else if (tempTile > 0.85) {
                                if (landTile == 'ocean') biomes.push('tropical ocean');
                                else if (wetTile <= 0.12) biomes.push('badlands');
                                else if (wetTile < 0.25 && wetTile > 0.18) biomes.push('desert');
                                else if (wetTile > 0.3 && wetTile < 0.385) biomes.push('xeric shrubland');
                                else if (wetTile > 0.5 && wetTile < 0.75) biomes.push('jungle');
                                else if (wetTile > 0.884) biomes.push('dead forest');
                                else biomes.push('savanna');
                            }
                            else {
                                if (landTile == 'ocean' && tempTile < 1.1 && tempTile > 0.6) biomes.push('lukewarm ocean');
                                else if (tempTile < 0.65 && tempTile > 0.6 && wetTile < 0.6) biomes.push('cherry blossom grove');
                                else if (landTile == 'ocean') biomes.push('ocean');
                                else if (wetTile < 0.25) biomes.push('shrubland');
                                else if (wetTile > 0.5 && wetTile < 0.78) biomes.push('forest');
                                else if (wetTile > 0.78) biomes.push('lavender fields');
                                else biomes.push('prairie');
                            }
                            if (biomes.length == 0) biomes.push('prairie');
                            lvl[x][y] = choose(biomes);
                        }
                    }

                    for (var x = 0; x < w; x++)//clean all tiles with no terrain
                    {
                        for (var y = 0; y < h; y++) {
                            if (lvl[x][y] == 'none') lvl[x][y] = 'forest';
                        }
                    }
                }
                return lvl;
            }
        }
    });
} else {
    G.AddData({
        name: 'Elves',
        author: 'pelletsstarPL',
        desc: 'The dataset for the elves of the Magix mod: unlocked after progressing for a while.',
        engineVersion: 1,
        manifest: 0,
        sheets: { "magixmod": magixURL2 + 'magixmod.png', "c2": magixURL2 + 'CiV2IconSheet.png' },
        func: function () {
            var buriedWon = 0;
            var i = 0; var j = G.year % 40;
            var wonC1 = 1;
            var wonC2 = 1; //multipliers for pressure resistance
            var backupmesg = false;
            var m = true;
            var upscaleBat = 1; var upscaleOth = 1;
            let madeWarnToolDecayMesg = false;



            function theme() {
                for (var i = 0; i < document.getElementsByClassName("sideCategory").length; i++) document.getElementsByClassName("sideCategory")[i].style.width = "130px";
                //res and messages tab
                if (G.tab.id == 'tech' && document.getElementsByClassName("bgPanelUp")[0]) {
                    document.getElementsByClassName("bgPanelUp")[0].style['background-image'] = 'url("img/darkEdgeBorders.png"),url("' + magixURL + 'bgUpRockC2.jpg")'; //needs refreshing every time we enter Tech tab
                }
                document.getElementsByClassName("bgPanelDown")[0].style['background-image'] = 'url("img/darkEdgeBorders.png"),url("' + magixURL + 'bgDownRockC2.jpg")';
                document.getElementsByClassName("tab")[0].style['background-image'] = 'url("' + magixURL + 'bgDarkRockC2.jpg")';
                l("resources").style['background-image'] = 'url(img/darkBorders.png),url("' + magixURL + 'bgMidRockC2.jpg")';
                l("messagesList").style['background-image'] = 'url("' + magixURL + 'bgMidRockC2.jpg")';

                for (var i = 0; i < document.getElementsByClassName("subsection").length; i++) document.getElementsByClassName("subsection")[i].style['background'] = 'url(img/darkBorders.png),url("' + magixURL + 'bgDarkRockC2.jpg")';
                for (var i = 0; i < document.getElementsByClassName("subsection").length; i++) document.getElementsByClassName("subsection")[i].style['background-repeat'] = 'no-repeat, repeat';
                for (var i = 0; i < document.getElementsByClassName("subsection").length; i++) document.getElementsByClassName("subsection")[i].style['background-size'] = 'cover, auto';
            }
            /*=====================================================================================
            PROPS & FUNCTIONS
            =======================================================================================*/
            function fortress() {
                if (G.achievByName['the fortress'].won > 0) {
                    var steps = 120 + (G.achievByName['the fortress'].won <= 9 ? 20 * G.achievByName['the fortress'].won : 160) + (G.achievByName['the fortress'].won > 9 ? 200 : 0);
                    var population = 100 + (G.achievByName['the fortress'].won <= 10 ? 150 * G.achievByName['the fortress'].won : 1500);
                    G.getDict('the fortress').steps = steps;//amount of steps
                    G.getDict('the fortress').icon = [1, 20, "c2"];//icon
                    G.getDict('the fortress').wideIcon = [0, 20, "c2"]//wide icon
                    G.getDict('the fortress').finalStepCost = { 'population': population };//final cost
                    G.getDict('the fortress').finalStepDesc = 'To complete The ' + (G.achievByName['the fortress'].won > 9 ? "Great" : "") + ' Fortress, ' + population + ' of your [population,elves] must be sacrificed to accompany you as servants and hope in your afterlife.';
                    G.getDict('the fortress').desc = '@leads to the <b>Fortress Victory</b><>A mystical monument where the glory of elves is clearly expressed. Built in the middle of a dense and tall forest.//A temple housing a tomb deep under its rocky platform, The Fortress stands tall, its eternal shadow forever reminding your elves of your greatness. <font color="#f3ca00">@The Fortress is evolved to level ' + (G.achievByName['the fortress'].won < 10 ? G.achievByName['the fortress'].won : 10) + ' of 10. ' + (G.achievByName['fortress eternal'].won > 0 ? 'You have obtained all bonuses already' : 'You can evolve up The Fortress to the next stage by ascending with it') + '. //Each level of [the fortress,The Fortress] provides a unique bonus. Check the description of [a power of the fortress] to learn more.</font>';//description
                    G.getDict('the fortress').cost = { 'basic building materials': 1000 + (G.achievByName['the fortress'].won <= 10 ? 400 * G.achievByName['the fortress'].won : 4000) }
                    if (G.achievByName['the fortress'].won > 9) {
                        G.getDict('the fortress').wonder = 'fortress eternal';
                        G.getDict('the fortress').displayName = 'The Great Fortress';
                        G.getDict('the fortress').messageOnStart = 'You begin the construction of The Fortress. Its towering mass already dominates the city hidden in a dense and tall forest. It is almost as tall as trees around you! This time your Fortress will be absolutely massive...';
                    } else
                        G.getDict('the fortress').messageOnStart = 'You begin the construction of the Mausoleum. Its towering mass already dominates the city, casting fear and awe wherever its shadow reaches. This time your Fortress will be more massive.';

                    G.getDict('the fortress').costPerStep = { 'basic building materials': 200 + (G.achievByName['the fortress'].won <= 10 ? 20 * G.achievByName['the fortress'].won : 200), 'precious building materials': 25 + (G.achievByName['the fortress'].won <= 10 ? 10 * G.achievByName['the fortress'].won : 100) }
                    G.getDict('the fortress').use = { 'land': 10 + (G.achievByName['the fortress'].won <= 10 ? 1 * G.achievByName['the fortress'].won : 10), 'worker': 10 + (G.achievByName['the fortress'].won <= 10 ? 1 * G.achievByName['the fortress'].won : 10), 'metal tools': 10 + (G.achievByName['the fortress'].won <= 10 ? 1 * G.achievByName['the fortress'].won : 10) };
                    if (G.achievByName['fortress eternal'].won > 0) {
                        G.getDict("belief in the afterlife").chance /= 2;
                        G.getDict("belief in the beforelife").chance /= 2;
                    }
                    G.getDict('a power of the fortress').desc = 'Your Fortress power will improve many aspects of life if its power is increased. Current bonuses://<b>LV1</b> - To roll new researches or reroll, you only need 75% of the [battery of discoveries,Battery] instead of 100%, along with [a power of the fortress,This deeply rooted power].<hr>' +
                        (G.achievByName['the fortress'].won > 1 ? '<b>LV2</b> - [wanderer]s from the elf race are 2% more efficient and [scout]s are 4% more efficient.<hr>' : '') +
                        (G.achievByName['the fortress'].won > 2 ? '<b>LV3</b> - Unlocks the next level for two human wonders: <b><font color="#a8dcee">Pagoda of Democracy</font></b>, <b><font color="#3092d2">Complex of Dreamers</font></b>. Finishing a 2nd stage of those wonders will increase the starting bonus by 2. (That means that <b>Insight-ly</b> will provide 8 insight instead of 6 at the start of new runs.)<hr>' : '') +
                        (G.achievByName['the fortress'].won > 3 ? '<b>LV4</b> - Unlocks the next level for a human wonder: <b><font color="#29d356">Fortress of Cultural Legacy</font></b><hr>' : '') +
                        (G.achievByName['the fortress'].won > 4 ? '<b>LV5</b> - The [battery of discoveries] will be able to overcap. You can now have 125% battery without any cost increases!<hr>' : '') +
                        (G.achievByName['the fortress'].won > 5 ? '<b>LV6</b> - The [food rations] and [water rations] policies no longer require [discernment].<hr>' : '') +
                        (G.achievByName['the fortress'].won > 6 ? '<b>LV7</b> - Start a game with +2 [creativity].<hr>' : '') +
                        (G.achievByName['the fortress'].won > 7 ? '<b>LV8</b> - Elves have a chance to adopt [archaeology] knowledge over time.' : '') +
                        (G.achievByName['the fortress'].won > 8 ? '<b>LV9</b> - Start a game with +5 [creativity] instead of +2.<hr>' : '') +
                        (G.achievByName['the fortress'].won > 9 ? '<b>LV10</b> - Start a game with 1 extra [discernment] and with 20% of the [battery of discoveries] charged. Unlocks <b>Fortress eternal</b>, providing 400 additional fast ticks!' : '');
                }
            }

            G.funcs['new game blurb'] = function () {
                document.title = 'Setup: NeverEnding Legacy';
                var str =
                    '<b>Your tribe:</b><div class="thingBox">' +
                    G.textWithTooltip('<div class="icon freestanding" style="' + G.getIconUsedBy(G.getRes('adult')) + '"></div><div class="freelabel">x5</div>', '5 Adults') +
                    G.textWithTooltip('<div class="icon freestanding" style="' + G.getIconUsedBy(G.getRes('elder')) + '"></div><div class="freelabel">x1</div>', '1 Elder') +
                    G.textWithTooltip('<div class="icon freestanding" style="' + G.getIconUsedBy(G.getRes('child')) + '"></div><div class="freelabel">x2</div>', '2 Children') +
                    G.textWithTooltip('<div class="icon freestanding" style="' + G.getIconUsedBy(G.getRes('herbs')) + '"></div><div class="freelabel">x175</div>', '175 Herbs') +
                    G.textWithTooltip('<div class="icon freestanding" style="' + G.getIconUsedBy(G.getRes('water')) + '"></div><div class="freelabel">x200</div>', '200 Water') +
                    G.textWithTooltip('<div class="icon freestanding" style="' + G.getIconUsedBy(G.getRes('fruit')) + '"></div><div class="freelabel">x25</div>', '25 Fruits') +
                    (G.resetsC2 > 0 ? G.textWithTooltip('<div class="icon freestanding" style="' + G.getIcon([7, 30, "magixmod"]) + '"></div><div class="freelabel"></div>', '<b>Complete achievements to<br>unlock more starting<br>bonuses for this race.</b>') : "") +
                    '</div>' +
                    '<div class="par fancyText bitBiggerText">Your tribe finds a place to settle in the mystic wilderness<br>and at the deepness of the mysterious world.<br>Resources are scarce, and everyone starts foraging.<br>They are insecure.</div>' +
                    '<div class="par fancyText bitBiggerText">You emerge as the<br>leader of this elvish tribe.<br>They call you:</div>';
                return str;
            }

            G.funcs['new game'] = function () {
                theme();
                if (G.getName('ruler').toLowerCase() == 'orteil' || G.getName('ruler').toLowerCase() == 'pelletsstarpl' || G.getName('ruler').toLowerCase() == 'opti') {
                    if (G.achievByName['god complex'].won == 0) {
                        G.achievByName['god complex'].won = 1; G.middleText('- Completed <font color="#bbffbb">God complex</font> shadow achievement -<br><hr width="300"><small>Congrats!</small>', 'slow')
                    };
                };
                G.ta = 1;
                document.title = 'NeverEnding Legacy';
                if (G.modsByName['Thot Mod']) G.getDict('philosophy').desc = 'Provides 75 [wisdom] and 30 [quick-wittinity] for free. //Also increases the [symbolism] bonus for [dreamer]s from 40 to 45%. //Some elves start wondering why things aren\'t different than they are. //It also unlocks [thot] and applies the [symbolism] bonus for him equal to the new [dreamer] bonus.';

                fortress();
                G.fastTicks = G.fastTicks2;
                if (G.achievByName['the fortress'].won > 0) G.gainTech(G.techByName['a power of the fortress']);
                if (G.achievByName['the fortress'].won > 7 && G.achievByName['the fortress'].won < 10) G.gain("battery of discoveries", 10, "starting bonus");
                else if (G.achievByName['the fortress'].won >= 10) { G.gain("battery of discoveries", 20, "starting bonus"); G.gain("discernment", 1, "starting bonus") };
                G.getRes("extra pressure").amount = G.pressureAdd;
                if (G.achievByName['the fortress'].won > 1) {
                    G.unitByName['wanderer'].effects.push({ type: 'mult', value: 1.02 });
                    G.unitByName['scout'].effects.push({ type: 'mult', value: 1.04 });
                }

                if (G.achievByName['the fortress'].won > 5) { G.getDict("food rations").cost = { 'influence': 2 }; G.getDict("water rations").cost = { 'influence': 2 } };
                if (G.achievByName['the fortress'].won > 6) G.gain("creativity", G.achievByName['the fortress'].won > 8 ? 5 : 2, "starting bonus");
                var str = 'Your name is ' + G.getName('ruler') + '' + ((G.getName('ruler').toLowerCase() == 'orteil' || G.getName('ruler').toLowerCase() == 'pelletsstarpl' || G.getName('ruler').toLowerCase() == 'opti') ? ' <i>(but that\'s not you, is it?)</i>' : '') + ', ruler of ' + G.getName('civ') + '. Your tribe is primitive, but full of hope.<br>The first year of your legacy with elves has begun.<br>' + (G.achievByName['druidish heart'].won == 0 ? "There is something weird about this world as well. It presses down on everyone and makes breathing a little heavier...but at some point you might get used to that. (Hopefully, anyway...)" : "") + '';
                G.Message({ type: 'important tall', text: str, icon: [0, 3, "c2"] });

                var s = 0
                for (var u = 0; u < G.unitsOwned.length; u++) {
                    let defaultUnit = G.unitsOwned[u]
                    let amount = defaultUnit.unit.startWith
                    s += defaultUnit.unit.startWith
                    defaultUnit.amount = amount
                }
                G.getDict('worker').used = s
                G.Save();
            }
            G.funcs['game over'] = function () {
                if ((yer.getMonth() == 3 && yer.getDate() == 1) || (G.getSetting('fools') && G.resets >= 3)) {
                    document.title = 'Tribe OOFed: NeverEnding Legacy';
                } else {
                    document.title = 'Tribe died: NeverEnding Legacy';
                };
                var quote = Math.round(Math.random() * 5);
                const quotes = ['\u201cTo the well-organized mind, death is but the next great adventure.\u201d', '\u201cThe fear of death follows from the fear of life. A man who lives fully is prepared to die at any time.\u201d', '\u201cIt is said that your life flashes before your eyes just before you die.\u201d', '\u201cDon\'t feel bad, I\'m usually about to die.\u201d', '\u201cDeath is so terribly final, while life is full of possibilities.\u201d', "It is as natural to die as it is to be born."];
                if (G.techN < 15) {
                    G.Message({ type: 'bad', text: 'Your small elvish tribe <font color="white"><b>' + G.getName('civ') + '</b></font> has died terribly. It is a sad fate that no one else has heard of them, but you will certainly remember them...', icon: [5, 4] });
                } else if (G.techN >= 15 && G.techN < 30) {
                    G.Message({ type: 'bad', text: 'Your small tribe of <font color="white"><b>' + G.getName('civ') + '</b></font> has died sadly in this wilderness. So long...', icon: [5, 4] });
                } else if (G.techN >= 30 && G.techN < 50) {
                    G.Message({ type: 'bad', text: '<font color="white"><b>' + G.getName('civ') + '</b></font> is no more, and your legacy is unfortunately only a long-lost memory.<br>Everyone is dead.', icon: [5, 4] });
                } else if (G.techN >= 50 && G.techN < 82) {
                    G.Message({ type: 'bad', text: '<font color="white"><b>' + G.getName('civ') + '</b></font> civilization is no more, and your legacy is but a long-lost memory, probably a sidenote in a history book.<br>Unfortunately, everyone is dead.', icon: [5, 4] });
                } else if (G.techN >= 82 && G.techN < 116) {
                    G.Message({ type: 'bad', text: '<font color="white"><b>' + G.getName('civ') + '</b></font> civilization is no more, and your legacy is <b>not-so-long-lost memory</b>, and most likely an interesting sidenote in a history book of elves or...humans...who knows?<br><font color="#84c292">Everyone is dead but many relics of your tribe are left.</font>', icon: [5, 4] });
                } else if (G.techN >= 116 && G.techN < 148) {
                    G.Message({ type: 'bad', text: '<font color="white"><b>' + G.getName('civ') + '</b></font> civilization is no more, and your legacy is <b>not lost memory</b>, and surely an interesting sidenote in a history book.<br><font color="#84c292">Everyone is dead but many relics and constructions of your tribe remain, waiting to be discovered by other civilizations.</font>', icon: [5, 4] });
                } else if (G.techN >= 148 && G.techN < 190) {
                    G.Message({ type: 'bad', text: '<font color="white"><b>' + G.getName('civ') + '</b></font> is no longer as a civilization and everyone died but your legacy is <b>not a lost memory</b>, and surely an interesting sidenote in a history book.<br><font color="#84c292">Everyone is dead but despite that, there are many relics, constructions, and manuscripts of your tribe are waiting to be discovered and analyzed by other civilizations.</font>', icon: [5, 4] });
                } else if (G.techN >= 190) {
                    G.Message({ type: 'bad', text: '<font color="white"><b>' + G.getName('civ') + '</b></font> exists no longer as a civilization and everyone died, but your legacy <b>isn\'t a lost memory</b>. It is surely an interesting, long note in many history books that will praise this place.<br><font color="#84c292">Everyone is dead, but despite that, there are many, many relics, buildings, and manuscripts from your tribe left waiting to be discovered and analyzed by other civilizations.</font>', icon: [5, 4] });
                }
                G.playSound(magixURL + '0population.mp3');
                G.dialogue.popup(function (div) {
                    return '<div style="width:540px;min-height:540px;height:75%;">' +
                        '<div class="fancyText title"><font color="#fe0031">Everyone in your tribe<br>has died terribly</font></div>' +
                        '<div class="fancyText"><font size="4">Here are the statistics of your tribe:</font><br>' +
                        '<font size="3" color="white"><br><li>Technologies obtained: ' + G.techN + '</li><Br>' +
                        '<li>Traits adopted: ' + G.traitN + '</li><Br>' +
                        '<li>Most elves in your civilization<br>during the run: ' + B(G.achievByName['mostElvesDuringRun'].won) + '</li><Br>' +
                        '<li>Days survived: ' + B(G.day + (300 * G.year)) + '</li><Br>' +
                        (G.has('time measuring 1/2') ? '<li>Years survived: ' + B(G.year + 1) + '</li><Br>' : '') +
                        '<li>Pieces of land discovered: ' + B(G.getRes('land').amount) + '</li><Br>' +
                        '<li>Wonders completed during legacy: ' + G.achievByName['wondersDuringRun'].won + '</li><Br>' +
                        '<li>Units unlocked: ' + G.unitN + '</li><Br>' +
                        '<li>Early-game completed: ' + (G.has('monument-building') ? 'yes' : 'no') + '</li><Br>' +
                        '<li>Season:<b> ' + (((day >= 1 && day <= 2) || (day == 365 || day == 366)) ? "New year\'s eve" : ((day >= 40 && day <= 46) ? 'Valentine\'s day' : (((Date.getMonth == 3 && Date.getDate == 1) || (G.getSetting('fools') && G.resets >= 3)) ? "Another anniversary since the first rickroll...<Br><small>bruh</small>" : ((day + leap >= 289 && day + leap <= 305) ? 'Halloween' : ((day + leap >= 349 && day + leap <= 362) ? 'Christmas' : 'none active'))))) + '</b></li><Br>' +
                        '<br><br></font>' +
                        '</div><br>' +
                        '<div class="fancyText title"><font size="3">' + quotes[quote] + '</font></div>' +
                        'Technical note: Start a new game by opening the settings.' +
                        '</div></div>'
                })
            }
            G.funcs['game loaded'] = function () {
                if (G.on) {
                    G.greeting();
                    G.isMapExplored = G.isMapFullyExplored();
                    theme();
                    if (G.getName('ruler').toLowerCase() == 'orteil' || G.getName('ruler').toLowerCase() == 'pelletsstarpl' || G.getName('ruler').toLowerCase() == 'opti') {
                        if (G.achievByName['god complex'].won == 0) {
                            G.achievByName['god complex'].won = 1; G.middleText('- Completed <font color="#bbffbb">God complex</font> shadow achievement -<br><hr width="300"><small>Congrats!</small>', 'slow')
                        };
                    };
                    if (G.year % 40 >= 20) i = 39 - G.year % 40;

                    //bugfixes for eating policies
                    if (G.checkPolicy("insects as food") == "on") {
                        G.makePartOf('bugs', 'food');
                    }
                    if (G.checkPolicy("eat raw meat and fish") == "off") {
                        G.makePartOf('meat', '');
                        G.makePartOf('seafood', '');
                    }
                    if (G.modsByName['Laws Of Food'] || G.modsByName['Laws Of Food Free Version']) {
                        //oh boy, here we go
                        if (G.checkPolicy("eat herbs") == "off") {
                            G.makePartOf('herbs', '');
                        }
                        if (G.checkPolicy("eat raw meat") == "off") {
                            G.makePartOf('meat', '');
                        }
                        if (G.checkPolicy("eat cooked meat") == "off") {
                            G.makePartOf('cooked meat', '');
                        }
                        if (G.checkPolicy("eat cured meat") == "off") {
                            G.makePartOf('cured meat', '');
                        }
                        if (G.checkPolicy("eat raw seafood") == "off") {
                            G.makePartOf('seafood', '');
                        }
                        if (G.checkPolicy("eat cooked seafood") == "off") {
                            G.makePartOf('cooked seafood', '');
                        }
                        if (G.checkPolicy("eat cured seafood") == "off") {
                            G.makePartOf('cured seafood', '');
                        }
                        if (G.checkPolicy("eat cooked meat and cooked seafood") == "off") {
                            G.makePartOf('cooked meat', '');
                            G.makePartOf('cooked seafood', '');
                        }
                        if (G.checkPolicy("eat cured meat and cured seafood") == "off") {
                            G.makePartOf('cured meat', '');
                            G.makePartOf('cured seafood', '');
                        }
                        if (G.checkPolicy("eat fruit") == "off") {
                            G.makePartOf('fruit', '');
                        }
                        if (G.checkPolicy("eat bread") == "off") {
                            G.makePartOf('bread', '');
                        }
                        if (G.checkPolicy("eat vegetables") == "off") {
                            G.makePartOf('vegetables', '');
                        }
                    }
                    G.ta = 1;
                    G.Message({ type: 'important tall', text: 'Welcome back, ' + G.getName('ruler') + ', ruler of ' + G.getName('civ') + '.', icon: [0, 3, "c2"] });
                    fortress();
                    if (G.achievByName['the fortress'].won > 1) {
                        G.unitByName['wanderer'].effects.push({ type: 'mult', value: 1.02 });
                        G.unitByName['scout'].effects.push({ type: 'mult', value: 1.04 });
                    };
                    if (G.achievByName['the fortress'].won > 5) { G.getDict("food rations").cost = { 'influence': 2 }; G.getDict("water rations").cost = { 'influence': 2 } };
                    if (G.has('Water')) { //trigger debuff for mining units at game load
                        if (G.getDict("mine").effects[G.getDict("mine").effects.length] == "undefined") G.getDict("mine").effects.push({ type: 'mult', value: 1 - ((i * 2.5) * 0.01) });
                        else G.getDict("mine").effects[(G.getDict("mine").effects.length) - 1] = { type: 'mult', value: 1 - ((i * 2.5) * 0.01) };
                        if (G.getDict("digger").effects[G.getDict("digger").effects.length] == "undefined") G.getDict("digger").effects.push({ type: 'mult', value: 1 - ((i * 2.5) * 0.01) });
                        else G.getDict("digger").effects[(G.getDict("digger").effects.length) - 1] = { type: 'mult', value: 1 - ((i * 2.5) * 0.01) };
                        if (G.getDict("quarry").effects[G.getDict("quarry").effects.length] == "undefined") G.getDict("quarry").effects.push({ type: 'mult', value: 1 - ((i * 2.5) * 0.01) });
                        else G.getDict("quarry").effects[(G.getDict("quarry").effects.length) - 1] = { type: 'mult', value: 1 - ((i * 2.5) * 0.01) };
                        G.getDict('forest mushrooms').mult = 9 * (1 + (0.002 * i));
                    }
                    if (G.has('earth')) {
                        if (G.getDict("archaeologist").effects[G.getDict("archaeologist").effects.length] == "undefined") G.getDict("archaeologist").effects.push({ type: 'mult', value: 1 - (0.002 * i) });
                        else G.getDict("archaeologist").effects[(G.getDict("archaeologist").effects.length) - 1] = { type: 'mult', value: 1 - (0.002 * i) };
                        if (i > 14 && i < 23) G.getDict('mine').effects[9] = { type: 'function', func: unitGetsConverted({ 'corpse': 1 }, 0.001, 0.01, '[X] [elves].', 'mine collapsed, killing all the miners', 'mines collapsed, killing all the miners'), chance: 1 / (40 - i) };
                        else G.getDict('mine').effects[9] = { type: 'function', func: unitGetsConverted({ 'wounded': 1 }, 0.001, 0.01, '[X] [elves].', 'mine collapsed, wounding its miners', 'mines collapsed, wounding the miners'), chance: 1 / (45 - i) };
                        if (G.getDict("mine").effects[G.getDict("mine").effects.length] == "undefined") G.getDict("mine").effects[length] = { type: 'mult', value: 1 + (0.001 * i) };
                        else G.getDict("mine").effects[(G.getDict("mine").effects.length) - 1] = { type: 'mult', value: 1 + (0.001 * i) };
                        if (i > 14 && i < 23) G.getDict('quarry').effects[4] = { type: 'function', func: unitGetsConverted({ 'corpse': 1 }, 0.001, 0.01, '[X] [elves].', 'quarry collapsed, killing all the workers', 'quarries collapsed, killing all the workers'), chance: 1 / (40 - i) };
                        else G.getDict('quarry').effects[4] = { type: 'function', func: unitGetsConverted({ 'wounded': 1 }, 0.001, 0.01, '[X] [elves].', 'quarry collapsed, wounding its workers', 'quarries collapsed, wounding their workers'), chance: 1 / (45 - i) };
                        if (G.getDict("quarry").effects[G.getDict("quarry").effects.length] == "undefined") G.getDict("quarry").effects.push({ type: 'mult', value: 1 + (0.001 * i) });
                        else G.getDict("quarry").effects[(G.getDict("quarry").effects.length) - 1] = { type: 'mult', value: 1 + (0.001 * i) };
                        if (G.getDict("furnace").effects[G.getDict("furnace").effects.length] == "undefined") G.getDict("furnace").effects.push({ type: 'mult', value: 1 + (0.002 * i) });
                        else G.getDict("furnace").effects[(G.getDict("furnace").effects.length) - 1] = { type: 'mult', value: 1 + (0.002 * i) };
                        if (G.getDict("blacksmith workshop").effects[G.getDict("blacksmith workshop").effects.length] == "undefined") G.getDict("blacksmith workshop").effects.push({ type: 'mult', value: 1 + (0.002 * i) });
                        else G.getDict("blacksmith workshop").effects[(G.getDict("blacksmith workshop").effects.length) - 1] = { type: 'mult', value: 1 + (0.002 * i) };
                    }
                    if (G.has("warmth")) {
                        G.getDict('mudwater').res['gather']['muddy water'] = 8 * (1 - ((i * 2.4) * 0.01));
                        G.getDict('freshwater').res['gather']['water'] = 8 * (1 - ((i * 2.4) * 0.01));
                        G.getDict('freshwater').res['gather']['muddy water'] = 8 * (1 - ((i * 2.4) * 0.01));
                        G.getDict('snow cover').res['gather']['water'] = 4 * (1 - ((i * 2.4) * 0.01));
                        G.getDict('snow cover').res['gather']['muddy water'] = 8 * (1 - ((i * 2.4) * 0.01));
                        G.getDict('snow cover').res['dig']['ice'] = 0.2 * (1 - ((i * 2.4) * 0.01));
                        if (G.getDict("gatherer").effects[G.getDict("gatherer").effects.length] == "undefined") G.getDict("gatherer").effects.push({ type: 'mult', value: 1 - ((i * 2.5) * 0.01) });
                        else G.getDict("gatherer").effects[(G.getDict("gatherer").effects.length) - 1] = { type: 'mult', value: 1 - ((i * 0.4) * 0.01) };
                        if (G.getDict("fisher").effects[G.getDict("fisher").effects.length] == "undefined") G.getDict("fisher").effects.push({ type: 'mult', value: 1 - ((i * 0.75) * 0.01) });
                        else G.getDict("fisher").effects[(G.getDict("fisher").effects.length) - 1] = { type: 'mult', value: 1 - ((i * 0.75) * 0.01) };
                    }
                    if (G.has('Ice')) {
                        if (G.getDict("firekeeper").effects[G.getDict("firekeeper").effects.length] == "undefined") G.getDict("firekeeper").effects.push({ type: 'mult', value: 1 - ((i * 0.75) * 0.01) });
                        else G.getDict("firekeeper").effects[(G.getDict("firekeeper").effects.length) - 1] = { type: 'mult', value: 1 - ((i * 0.75) * 0.01) };
                        G.getDict('grass').mult = 9 * (1 - (i * 0.02));
                        G.getDict('berry bush').mult = 9 * (1 - (i * 0.02));
                        G.getDict('wild bush').mult = 9 * (1 - (i * 0.02));
                        G.getDict('forest mushrooms').mult = 9 * (1 - (i * 0.02));
                        G.getDict('big warped shrooms').mult = 4.7 * (1 - (i * 0.02));
                        G.getDict('big shrooms').mult = 8 * (1 - (i * 0.02));
                        G.getDict('succulents').mult = 9 * (1 - (i * 0.02));
                        G.getDict('jungle fruits').mult = 9 * (1 - (i * 0.02));
                        G.getDict('wild bunnittias').mult = 4.8 * (1 - (i * 0.02));
                        G.getDict('firestoats').mult = 4.8 * (1 - (i * 0.02));
                        G.getDict('koolas').mult = 4.8 * (1 - (i * 0.02));
                        G.getDict('mosseer').mult = 4.8 * (1 - (i * 0.02));
                        G.getDict('omieer').mult = 4.8 * (1 - (i * 0.02));
                        G.getDict('bears').mult = 4.8 * (1 - (i * 0.02));
                        G.getDict('omars').mult = 4.8 * (1 - (i * 0.02));
                        G.getDict('polar bears').mult = 4.8 * (1 - (i * 0.02));
                        G.getDict('boars').mult = 4.8 * (1 - (i * 0.02));
                        G.getDict('furoxes').mult = 4.8 * (1 - (i * 0.02));
                        G.getDict('colfoxes').mult = 4.8 * (1 - (i * 0.02));
                        G.getDict('wolvoes').mult = 4.8 * (1 - (i * 0.02));
                    }
                    if (G.releaseNumber == undefined) G.Load();
                    if (G.modsByName['Thot Mod']) G.getDict('philosophy').desc = 'Provides 75 [wisdom] and 30 [quick-wittinity] for free. //Also increases the [symbolism] bonus for [dreamer]s from 40 to 45%. //Some elves start wondering why things aren\'t different than they are. //It also unlocks [thot] and applies the [symbolism] bonus for him equal to the new [dreamer] bonus.';
                }
            }
            G.funcs['new year'] = function () //new year but civ2
            {
                if (G.on) {
                    G.isMapExplored = G.isMapFullyExplored();
                    if (G.checkPolicy("creative foraging") == "on") {
                        if (G.getRes('creativity').amount < 1) G.setPolicyModeByName('creative foraging', 'off');
                        else G.lose('creativity', 1, 'creative foraging');
                    }
                    G.getRes('pressure resistance').desc = 'This world is under <b>Pressure</b>. The Pressure mechanic acts like [housing], but can only be increased by completing various trials.//You won\'t be able to have any more [population,elves] even if you will have more [housing] than [pressure resistance]. //Your current [pressure resistance,Resistance] level is <font color="lime">' + G.getRes('pressure resistance').amount + '</font>, allowing you to have ' + G.getRes('pressure resistance').amount + ' [population,elves] in your tribe. Complete some trials and achievements to increase this limit. You may also use special technologies to raise it as well!';
                    if (G.getSetting('tieredDisplay') == 0) { G.ta = 1 } else { G.ta = 0 };
                    if (G.year >= (236 - G.traitN - G.techN) && (G.has('Ice') || G.has('warmth') || G.has('earth') || G.has('mystic') || G.has('Water')) == false) {
                        var names = ["Ice", "warmth", "earth", "mystic", "Water"];
                        var pickname = Math.round(Math.random() * 4);
                        G.gainTrait(G.traitByName[names[pickname]]);
                    }
                    if (G.year % 40 >= 20) {
                        i--;
                    } else i++;
                    var randres = Math.round(Math.random() * (G.resN - 1));
                    var resdname = G.res[randres].displayName;
                    var resname = G.res[randres].name;
                    //if lands on restricted one just roll new one
                    if (G.has("mystic")) {
                        while (G.getRes(resname).category == 'demog' || ['wisdom', 'education', 'quick-wittinity', 'inspiration', 'spirituality', 'authority', 'happiness', 'health', 'land', 'born this year', 'died this year', 'pressure resistance', 'material storage', 'food storage', "housing", "population", "advanced building materials", "basic building materials", "precious building materials", "advanced building materials", "burial spot", "victory point"].includes(resname)) {
                            randres = Math.round(Math.random() * (G.res.length - 1));
                            resname = G.res[randres].name;
                        }
                    };
                    resdname = G.res[randres].displayName;
                    resname = G.res[randres].name;
                    if (G.getSetting('annual raports'))
                        if (G.has('time measuring 1/2')) {
                            var str = '';
                            str += 'It is now year <b>' + (G.year + 1) + '</b>.<br>';
                            str += 'Report for the last year:<br>';
                            str += '&bull; <b>Births</b>: ' + B(G.getRes('born this year').amount) + '<br>';
                            str += '&bull; <b>Deaths</b>: ' + B(G.getRes('died this year').amount) + '<br>';
                            if (G.has('mystic')) str += '&bull; <b>Wiped resource</b>: ' + resdname + '<br>';
                            if (expTraits.length > 0) {
                                l = expTraits.length;
                                expTraits = expTraits.slice(0, 3);
                                str += '&bull; <b>Temporary traits that expired this year</b>: ' + (l > 3 ? expTraits + " and " + (l - 3) + " more" : expTraits) + '<br>';
                            }
                            G.getRes('born this year').amount = 0;
                            G.getRes('died this year').amount = 0;
                            G.Message({ type: 'important', text: str, icon: [0, 3] });
                            expTraits = [];
                        } else if (G.has('primary time measure') && !G.has('time measuring 1/2')) {
                            var txt = '' + G.year + '';
                            if (G.year + 1 % 100 == 0) {
                                var str = '';
                                str += 'It is now Century <b>' + Math.floor(((G.year / 100) + 1)) + '</b>.<br>';
                                str += 'Report for this entire century:<br>';
                                str += '&bull; <b>Births</b>: ' + B(G.getRes('born this year').amount) + '<br>';
                                str += '&bull; <b>Deaths</b>: ' + B(G.getRes('died this year').amount) + '<br>';
                                if (G.has('mystic')) str += '&bull; <b>Recently wiped resource</b>: ' + resdname + '<br>';
                                if (expTraits.length > 0) {
                                    var l = expTraits.length;
                                    expTraits = expTraits.slice(0, 3);
                                    str += '&bull; <b>Temporary traits that expired this century</b>: ' + (l > 3 ? expTraits + " and " + (l - 3) + " more" : expTraits) + '<br>';
                                }
                                G.getRes('born this year').amount = 0;
                                G.getRes('died this year').amount = 0;
                                G.Message({ type: 'important', text: str, icon: [0, 3] });
                                expTraits = [];
                            }
                        }
                    if (G.has('mystic')) {
                        if (G.res[randres].name == 'discernment' || G.res[randres].name == 'gentility' || G.res[randres].name == 'faith' || G.res[randres].name == 'creativity' || G.res[randres].name == 'influence') {
                            G.getRes('discernment').amount = 0; G.getRes('gentility').amount = 0; G.getRes('faith').amount = 0; G.getRes('creativity').amount = 0; G.getRes('influence').amount = 0;
                        }
                        G.getRes(resname).amount = 0;
                    }
                    if (G.has('earth')) {
                        //if(i>14 && i<23)G.getDict('mine').effects[(G.getDict("mine").effects.length)-2]={type:'function',func:unitGetsConverted({'corpse':1},0.001,0.01,'[X] [elves].','mine collapsed, killing all the miners','mines collapsed, killing all the miners'),chance:1/40};
                        //else G.getDict('mine').effects[(G.getDict("mine").effects.length)-2]={type:'function',func:unitGetsConverted({'wounded':1},0.001,0.01,'[X] [elves].','mine collapsed, wounding its miners','mines collapsed, wounding the miners'),chance:1/45};
                        if (G.getDict("mine").effects[G.getDict("mine").effects.length] == "undefined") G.getDict("mine").effects[length] = { type: 'mult', value: 1 + (0.001 * i) };
                        else G.getDict("mine").effects[(G.getDict("mine").effects.length) - 1] = { type: 'mult', value: 1 + (0.001 * i) };
                        //if(i>14 && i<23)G.getDict('quarry').effects[(G.getDict("quarry").effects.length)-2]={type:'function',func:unitGetsConverted({'corpse':1},0.001,0.01,'[X] [elves].','mine collapsed, killing all the miners','mines collapsed, killing all the miners'),chance:1/40};
                        //else G.getDict('quarry').effects[(G.getDict("quarry").effects.length)-2]={type:'function',func:unitGetsConverted({'wounded':1},0.001,0.01,'[X] [elves].','mine collapsed, wounding its miners','mines collapsed, wounding the miners'),chance:1/45};
                        if (G.getDict("quarry").effects[G.getDict("quarry").effects.length] == "undefined") G.getDict("quarry").effects.push({ type: 'mult', value: 1 + (0.001 * i) });
                        else G.getDict("quarry").effects[(G.getDict("quarry").effects.length) - 1] = { type: 'mult', value: 1 + (0.001 * i) };
                        if (G.getDict("furnace").effects[G.getDict("furnace").effects.length] == "undefined") G.getDict("furnace").effects.push({ type: 'mult', value: 1 + (0.002 * i) });
                        else G.getDict("furnace").effects[(G.getDict("furnace").effects.length) - 1] = { type: 'mult', value: 1 + (0.002 * i) };
                        if (G.getDict("blacksmith workshop").effects[G.getDict("blacksmith workshop").effects.length] == "undefined") G.getDict("blacksmith workshop").effects.push({ type: 'mult', value: 1 + (0.002 * i) });
                        else G.getDict("blacksmith workshop").effects[(G.getDict("blacksmith workshop").effects.length) - 1] = { type: 'mult', value: 1 + (0.002 * i) };
                    }
                    if (G.has('Water')) {
                        if (G.getDict("mine").effects[G.getDict("mine").effects.length] == "undefined") G.getDict("mine").effects.push({ type: 'mult', value: 1 - ((i * 2.5) * 0.01) });
                        else G.getDict("mine").effects[(G.getDict("mine").effects.length) - 1] = { type: 'mult', value: 1 - ((i * 2.5) * 0.01) };
                        if (G.getDict("digger").effects[G.getDict("digger").effects.length] == "undefined") G.getDict("digger").effects.push({ type: 'mult', value: 1 - ((i * 2.5) * 0.01) });
                        else G.getDict("digger").effects[(G.getDict("digger").effects.length) - 1] = { type: 'mult', value: 1 - ((i * 2.5) * 0.01) };
                        if (G.getDict("quarry").effects[G.getDict("quarry").effects.length] == "undefined") G.getDict("quarry").effects.push({ type: 'mult', value: 1 - ((i * 2.5) * 0.01) });
                        else G.getDict("quarry").effects[(G.getDict("quarry").effects.length) - 1] = { type: 'mult', value: 1 - ((i * 2.5) * 0.01) };
                        G.getDict('forest mushrooms').mult = 9 * (1 + (0.002 * i));
                    }
                    if (G.has('Ice')) {
                        G.getDict('grass').mult = 9 * (1 - (i * 0.02));
                        G.getDict('berry bush').mult = 9 * (1 - (i * 0.02));
                        G.getDict('wild bush').mult = 9 * (1 - (i * 0.02));
                        G.getDict('forest mushrooms').mult = 9 * (1 - (i * 0.02));
                        G.getDict('big warped shrooms').mult = 4.7 * (1 - (i * 0.02));
                        G.getDict('big shrooms').mult = 8 * (1 - (i * 0.02));
                        G.getDict('succulents').mult = 9 * (1 - (i * 0.02));
                        G.getDict('jungle fruits').mult = 9 * (1 - (i * 0.02));
                        G.getDict('wild bunnittias').mult = 4.8 * (1 - (i * 0.02));
                        G.getDict('firestoats').mult = 4.8 * (1 - (i * 0.02));
                        G.getDict('koolas').mult = 4.8 * (1 - (i * 0.02));
                        G.getDict('mosseer').mult = 4.8 * (1 - (i * 0.02));
                        G.getDict('omieer').mult = 4.8 * (1 - (i * 0.02));
                        G.getDict('bears').mult = 4.8 * (1 - (i * 0.02));
                        G.getDict('omars').mult = 4.8 * (1 - (i * 0.02));
                        G.getDict('polar bears').mult = 4.8 * (1 - (i * 0.02));
                        G.getDict('boars').mult = 4.8 * (1 - (i * 0.02));
                        G.getDict('furoxes').mult = 4.8 * (1 - (i * 0.02));
                        G.getDict('colfoxes').mult = 4.8 * (1 - (i * 0.02));
                        G.getDict('wolvoes').mult = 4.8 * (1 - (i * 0.02));
                    }
                    if (G.has("warmth")) {
                        G.getDict('mudwater').res['gather']['muddy water'] = 8 * (1 - ((i * 2.4) * 0.01));
                        G.getDict('freshwater').res['gather']['water'] = 8 * (1 - ((i * 2.4) * 0.01));
                        G.getDict('freshwater').res['gather']['muddy water'] = 8 * (1 - ((i * 2.4) * 0.01));
                        G.getDict('snow cover').res['gather']['water'] = 4 * (1 - ((i * 2.4) * 0.01));
                        G.getDict('snow cover').res['gather']['muddy water'] = 8 * (1 - ((i * 2.4) * 0.01));
                        G.getDict('snow cover').res['dig']['ice'] = 0.2 * (1 - ((i * 2.4) * 0.01));
                        if (G.getDict("fisher").effects[G.getDict("fisher").effects.length] == "undefined") G.getDict("fisher").effects.push({ type: 'mult', value: 1 - ((i * 0.75) * 0.01) });
                        else G.getDict("fisher").effects[(G.getDict("fisher").effects.length) - 1] = { type: 'mult', value: 1 - ((i * 0.75) * 0.01) };
                        if (G.getDict("fisher").effects[G.getDict("florist").effects.length] == "undefined") G.getDict("florist").effects.push({ type: 'mult', value: 1 - ((i * 0.4) * 0.01) });
                        else G.getDict("fisher").effects[(G.getDict("florist").effects.length) - 1] = { type: 'mult', value: 1 - ((i * 0.4) * 0.01) };
                    }
                    G.createTopInterface(); G.updateMapDisplay();
                    if (G.year >= 9 && !backupmesg) {
                        G.Message({ type: 'important', text: '<b>Don\'t forget to back up your save!</b><br>If you don\'t want to lose your save you can always back it up. Click the <b>Settings</b> tab, then the <b>Save to file</b> button. It will download a file with your save that you can load back in if your current save ever gets lost.', icon: [choose([25, 26, 27]), 22, "magixmod"] });
                        backupmesg = true
                    }
                    if (G.year == 2 && G.achievByName['the fortress'].won == 9) { G.fastTicks += 450 };
                    if (G.year == 2 && G.achievByName['the fortress'].won >= 10) { G.fastTicks += 850 };            //ingame its y3
                    if (G.getSetting('story messages')) {
                        if (G.year == 19) {
                            G.Message({ type: 'important', text: '<font color="#d9d9d9"><b>Your elves noticed that their tools have started decaying.</font> <li>This doesn\'t seem good, considering you are within a rather expansive wilderness.</li></b>', icon: [24, 6, "magixmod"] });
                            madeWarnToolDecayMesg = true
                        }
                        if (G.year == 9000) {
                            G.doFunc('>9000');
                        }
                        if (G.year == 149) G.Message({ type: 'important', text: '<font color="#eec3a5">It appears that you and your elves are doing well. It is been 150 years since you started magic adventure in the universe of elves. Thank you for playing with this expansion and congratulations for getting so far ;D </b></small><br></font><b>farewell...</b>', icon: [24, 1, "magixmod"] });
                    }
                    //influence trickle
                    if (G.getRes('influence').amount <= G.getRes('authority').amount - 1) G.gain('influence', 1);
                }
            }

            let story3 = false;
            let story5 = false;


            G.funcs['new day'] = function () {
                if (G.on) {
                    if (G.influenceTraitRemovalCooldown > 0) G.influenceTraitRemovalCooldown--;
                    if (G.techN >= 50) { //since these are earlygame only we won\'t want them anymore at some point unless they get adopted for good.
                        G.getDict('scavenging').req = { 'tribalism': false };
                        G.getDict('dreaming').req = { 'tribalism': false };
                        G.getDict('carcass-looting').req = { 'tribalism': false };
                        G.getDict('branching wisdom').req = { 'tribalism': false };
                    }
                    timeAchievs();
                    if (G.achievByName['speeddiscoverer'].won >= 1) G.achievByName['In the shadows'].won = 1;
                    if (G.day % 10 == 0 || G.tab.id == 'tech') theme();
                    if (G.getRes("land").amount > 79) {
                        G.policyByName['creative foraging'].visible = false;
                        if (G.checkPolicy("creative foraging") == 'on') {
                            G.setPolicyModeByName('creative foraging', 'off'); //auto hide and disable foraging
                            G.update['policy']();
                        }
                    }
                    var eatOnGatherVisible = G.getPolicy('eat on gather').visible
                    if (G.checkPolicy('food rations') == 'plentiful' || G.checkPolicy('water rations') == 'plentiful' || !G.has('rules of food')) {
                        if (eatOnGatherVisible) {
                            G.setPolicyModeByName('eat on gather', 'off');
                            G.getPolicy('eat on gather').visible = false;
                            G.update['policy']();
                        }
                    } else if (!eatOnGatherVisible && G.has('rules of food')) {
                        G.getPolicy('eat on gather').visible = true;
                        G.update['policy']();
                    }
                    if (G.getUnitAmount('archaeologist') > 0) G.getDict('out of relics').req = { 'archaeology': true, 'tribalism': true };
                    else G.getDict('out of relics').req = { 'archaeology': true, 'tribalism': false };//it would be stupid losing all relics with no archaeologists
                    // if (G.day % 15 == 0 && G.checkPolicy('creative foraging') == 'on') changeHappiness(-0.0275 * G.getUnitAmount('gatherer'), 'creative foraging');
                    if (G.achievByName['naturality'].won == 0) {
                        var j = 0;
                        var len = G.traitsOwned.length;
                        for (var i = 0; i < len; i++) {
                            if (G.traitsOwned[i].trait.category == 'anomaly') j++;
                        }
                        if (G.traitN - j >= 20) {
                            G.achievByName['naturality'].won = 1;
                            G.middleText('- Completed <font color="#dbe">Naturality</font> achievement -', 'slow')
                        }
                    }
                    if (G.techN + G.knowN >= 20 && G.achievByName['nature\'s rookie'].won == 0) { //nature rookie
                        G.achievByName['nature\'s rookie'].won = 1;
                        G.middleText('- Completed <font color="lime">Nature\'s rookie</font> achievement -', 'slow')
                    }
                    if (G.techN + G.knowN >= 60 && G.achievByName['nature\'s braincell'].won == 0) { //nature braincell
                        G.achievByName['nature\'s braincell'].won = 1;
                        G.middleText('- Completed <font color="lime">Nature\'s braincell</font> achievement -', 'slow')
                    }
                    if (G.getRes("pressure resistance").used >= G.getRes("pressure resistance").amount) G.achievByName['limit reached'].won = 1;
                    setObj("civ", 1);
                    newDayLines(true);

                    G.trackedStat = Math.max(G.trackedStat, G.getRes('population').amount);
                    //JUST PLAIN LUCKY
                    var luckynumber = Math.round(Math.random() * 1777777) + 1;
                    if (luckynumber == 777777) {
                        G.achievByName['just plain lucky'].won++;
                        if (G.getSetting('sound')) {
                            var audio = new Audio(magixURL + 'JustPlainLucky.mp3');
                            audio.play();
                        }
                        G.middleText('<font color="#71cd62">- Congratulations: you struck the lucky number (777777). -<br><small>Completed "Just plain lucky" shadow achievement -<hr width="300">You struck the lucky number ' + ' ' + (G.achievByName['just plain lucky'].won == 1 ? 'for the first time' : (G.achievByName['just plain lucky'].won + 'times already')) + '<br>Impressive.<br>Anyway, enjoy the game!</small>', 'slow');
                    }

                    // breh (famine reqs) (added by Garchmop)
                    if (G.has('frost') && !G.has('droughtNew')) {G.getDict('famine').req={'frost':true};}
                    else {G.getDict('famine').req={'droughtNew':true};}

                    if (G.year > 19)//Gear decaying at year 20 and later
                    {
                        var toSpoil = (G.getRes('metal tools').amount * 0.0001); G.lose(('metal tools'), randomFloor(toSpoil), 'decay');
                        //if(!G.has('tool refinery 2/2')){var toSpoil=(G.getRes('stone tools').amount*0.0004);G.lose(('stone tools'),randomFloor(toSpoil),'decay');
                        //}else{
                        var toSpoil = (G.getRes('stone tools').amount * 0.0002); G.lose(('stone tools'), randomFloor(toSpoil), 'decay');
                        //};
                        var toSpoil = (G.getRes('knapped tools').amount * 0.00055); G.lose(('knapped tools'), randomFloor(toSpoil), 'decay');
                        //if(!G.has('tool refinery 2/2')){var toSpoil=(G.getRes('stone weapons').amount*0.0004*(G.has('ground weapons') ? 1 : 0.95));G.lose(('stone weapons'),randomFloor(toSpoil),'decay');
                        //}else{
                        var toSpoil = (G.getRes('stone weapons').amount * 0.0002); G.lose(('stone weapons'), randomFloor(toSpoil), 'decay');
                        //};
                        var toSpoil = (G.getRes('bow').amount * 0.0005); G.lose(('bow'), randomFloor(toSpoil), 'decay');
                        //var toSpoil=(G.getRes('wand').amount*0.0006);G.lose(('wand'),randomFloor(toSpoil),'decay');
                        //   var toSpoil=(G.getRes('crossbow').amount*0.0006);G.lose(('crossbow'),randomFloor(toSpoil),'decay');
                        var toSpoil = (G.getRes('arrow').amount * 0.0006); G.lose(('arrow'), randomFloor(toSpoil), 'decay');
                        //   var toSpoil=(G.getRes('metal weapons').amount*0.0002);G.lose(('metal weapons'),randomFloor(toSpoil),'decay');
                        //   var toSpoil=(G.getRes('armor set').amount*0.0002);G.lose(('armor set'),randomFloor(toSpoil),'decay');
                        //   var toSpoil=(G.getRes('fishing net').amount*0.0003);G.lose(('fishing net'),randomFloor(toSpoil),'decay');
                    }

                    G.traitTick("elves", "eternal moments"); //gaining and removing traits every day
                }
            }

            G.funcs['civ blurb'] = function () {
                var str = '';
                str += 'Deep in the wild...<br>';
                str += '<div class="fancyText shadowed">';

                str += '<div class="barred infoTitle"><font color="lime">The land of ' + G.getName('civ') + '</font></div>' +
                    '<div class="barred">Ruler: ' + G.getName('ruler') + '</div>';
                var toParse = '';
                var pop = G.getRes('population').amount;
                if (pop > 0) {
                    toParse += 'Population: <b>' + B(pop) + ' [population,' + G.getName((pop == 1 ? 'inhab' : 'inhabs')) + ']</b>//';
                    var stat = G.getRes('happiness').amount / pop;
                    var text = 'euphoric'; if (stat <= -200) text = 'miserable'; else if (stat <= -100) text = 'mediocre'; else if (stat <= -50) text = 'low'; else if (stat < 50) text = 'average'; else if (stat < 100) text = 'pleasant'; else if (stat < 200) text = 'high';
                    toParse += 'Happiness: <b>' + text + '</b>//';
                    var stat = G.getRes('health').amount / pop;
                    var text = 'exemplary'; if (stat <= -200) text = 'dreadful'; else if (stat <= -100) text = 'sickly'; else if (stat <= -50) text = 'low'; else if (stat < 50) text = 'average'; else if (stat < 100) text = 'good'; else if (stat <= 200) text = 'gleaming';
                    toParse += 'Health: <b>' + text + '</b>//';
                    var stat = G.techN;
                    var text = 'the most advanced'; if (stat <= 8) text = 'pre-prehistoric'; else if (stat <= 15) text = 'prehistoric'; else if (stat <= 28) text = 'skilled'; else if (stat <= 40) text = 'proficient'; else if (stat <= 55) text = 'decent technologically'; else if (stat <= 70) text = 'expanded'; else if (stat <= 100) text = 'advanced'; else if (stat <= 135) text = 'modern'; else if (stat <= 180) text = 'truly advanced';
                    toParse += 'Technological stage: <b>' + text + '</b>//';
                }
                else toParse += 'All ' + G.getName('inhabs') + ' have died out.';
                str += G.parse(toParse);
                str += '</div>';
                return str;
            }

            G.funcs['found tile'] = function (tile) {
                G.Message({
                    type: 'good', mergeId: 'foundTile', textFunc: function (args) {
                        if (args.count == 1) return 'Our explorers have found a new tile: <b>' + args.tile.land.displayName + '</b>.';
                        else return 'Our explorers have found ' + B(args.count) + ' new tiles; the latest is <b>' + args.tile.land.displayName + '</b>.';
                    }, args: { tile: tile, count: 1 }, icon: [14, 4]
                });
            }

            G.funcs['production multiplier'] = function () {
                var mult = 1;
                if (G.getRes('population').amount > 0) {
                    var happiness = (G.getRes('happiness').amount / G.getRes('population').amount) / 100;
                    if (G.checkPolicy('mental balance') == 'on') {
                        happiness = Math.max(-2, Math.min(2, happiness)); //100%+
                        if (happiness >= 0) mult = (Math.pow(2, happiness + 1) / 2); //0-100%
                        else mult = 1 / (Math.pow(2, -happiness + 1) / 2); //-100%
                    } else {
                        if (happiness >= -0.2 && happiness <= 0.9) mult = (Math.pow(2, happiness + 1) / 2); //0-90%
                        else if (happiness > 0.9) happiness = Math.max(-2, Math.min(2, happiness)); //90%+
                        else mult = 1 / (Math.pow(2, -happiness + 1) / 2); //-120%
                    }
                }
                return mult;
            }
            G.fixTooltipIcons = function () {
                G.parse = function (what) {
                    var str = '<div class="par">' + ((what
                        .replaceAll(']s', ',*PLURAL*]'))
                        .replace(/\[(.*?)\]/gi, G.parseFunc))
                        .replaceAll('http(s?)://', 'http$1:#SLASH#SLASH#')
                        .replaceAll('//', '</div><div class="par">')
                        .replaceAll('#SLASH#SLASH#', '//')
                        .replaceAll('@', '</div><div class="par bulleted">')
                        .replaceAll('<>', '</div><div class="divider"></div><div class="par">') + '</div>';
                    return str;
                }
            }
            G.initializeFixIcons = function () {
                if (G.parse("http://").search("http://") == -1) {
                    G.fixTooltipIcons();
                    setTimeout(G.initializeFixIcons, 500);    //check again to make sure this version of the function stays applied during page load
                }
            }
            G.initializeFixIcons();
            var batterylimit = (G.achievByName['the fortress'].won > 0 ? 25 : 0);
            var batterycost = (G.achievByName['the fortress'].won >= 5 ? 25 : 0);
            /*=====================================================================================
            RESOURCES - ELF RACE
            =======================================================================================*/
            G.resCategories = {
                'main': {
                    name: '<font color="#9999df">Essentials</font>',
                    base: [],
                    side: ['population', 'worker', 'happiness', 'health', 'pressure resistance', "battery of discoveries", 'heating capability'],
                },
                'terr': {
                    name: '<font color="#aaffaa">Territory</font>',
                    base: ['land', 'wtr'],
                    side: [],
                },
                'demog': {
                    name: 'Demographics',
                    base: [],
                    side: ['population', 'housing', 'corpse', 'burial spot'],
                },
                'food': {
                    name: '<font color="fuschia">Food & Water</font>',
                    base: [],
                    side: ['food', 'spoiled food', 'water', 'muddy water', 'food storage'],
                },
                'build': {
                    name: '<font color="#b9b9b9">Crafting & Construction</font>',
                    base: [],
                    side: ['archaic building materials', 'basic building materials', 'advanced building materials', 'precious building materials', 'material storage'],
                },
                'gear': {
                    name: '<font color="#fcc">Gear</font>',
                    base: [],
                    side: [],
                },
                'misc': {
                    name: '<font color="white">Miscellaneous</font>',
                    base: [],
                    side: ['relic'],
                },
            };

            new G.Res({ name: 'died this year', hidden: true });
            new G.Res({ name: 'born this year', hidden: true });

            var numbersInfo = '//The number on the left is how many are in use, while the number on the right is how many you have in total.';

            new G.Res({
                name: 'population',
                desc: 'Your [population] represents all the elves living under your rule that look to you for protection, survival, and glory.',
                meta: true,
                colorGood: '#3b4', colorBad: '#f44',
                visible: true,
                icon: [0, 3, "c2"],
                tick: function (me, tick) {
                    //this.displayName=G.getName('inhabs');
                    if (me.amount > G.achievByName['mostElvesDuringRun'].won) G.achievByName['mostElvesDuringRun'].won = me.amount;
                    if (me.amount > G.achievByName['mostElves'].won) G.achievByName['mostElves'].won = me.amount;
                    if (me.amount > 0) {
                        if (G.getRes('faith').amount < (G.getRes('spirituality').amount / 3) && G.checkPolicy('mental balance') == 'on') G.setPolicyModeByName('mental balance', 'off'); //this rit is very fragile
                        //note : we also sneak in some stuff unrelated to population here
                        //policy ticks
                        if (tick % 40 == 0) {
                            var rituals = ['fertility rituals', 'harvest rituals', 'flower rituals', 'wisdom rituals', 'mental balance'];
                            for (var i in rituals) {
                                if (G.checkPolicy(rituals[i]) == 'on') {
                                    if (rituals[i] == 'mental balance') {
                                        G.setPolicyModeByName(rituals[i], 'off');
                                        G.lose('faith', 3, 'rituals');
                                    } else {
                                        if (G.getRes('faith').amount < 1) G.setPolicyModeByName(rituals[i], 'off');
                                        else G.lose('faith', 1, 'rituals');
                                    }
                                }
                            }
                        }
                        var eatongathermult = 0.5;
                        var happinessLevel = G.getRes('happiness').amount / me.amount;
                        if (G.checkPolicy('eat on gather') == 'on' && G.getRes('happiness').amount / me.amount < 70 && G.getRes('food').amount > 0) changeHappiness(me.amount * eatongathermult, 'instant eating');
                        var productionMult = G.doFunc('production multiplier', 1);

                        var deathUnhappinessMult = 1;
                        if (G.has('fear of death')) deathUnhappinessMult *= 2 * (G.has('bII(normal)') ? 0.95 : 1);
                        if (G.has('belief in the afterlife')) deathUnhappinessMult /= 2;
                        if (G.has('acceptance of death')) deathUnhappinessMult /= 2 * (G.has('bII(acceptance)') ? 1.05 : 1);
                        if (G.has('death scepticism')) (G.year % 40 > 20 ? deathUnhappinessMult *= (5 / 3) : deathUnhappinessMult *= 1 / 3);
                        if (tick % 3 == 0 && G.checkPolicy('disable eating') == 'off') {
                            //drink water
                            var toConsume = 0;
                            var consumeMult = 1;
                            var happinessAdd = 0;
                            if (G.has('dry throats')) { consumeMult *= 0.85; happinessAdd -= 0.04; }
                            else if (G.has('joy of drinking')) { consumeMult *= 1.15; happinessAdd += 0.04; }
                            else if (G.has('unstable drinking habits')) { consumeMult *= (G.year % 31 > 15 ? 1.05 : 0.95); happinessAdd += (G.year % 31 > 15 ? 0.003 : -0.003) } //fluid
                            else if (G.has('unstable consumption habits')) {
                                var n = G.year % 80;
                                if (n < 20) {
                                    consumeMult *= 1.05; happinessAdd += 0.004;
                                }
                                if (n >= 20 && n < 40) {
                                    consumeMult *= 0.95; happinessAdd -= 0.02;
                                } else if (n >= 40 && n < 60) consumeMult *= 1.025;
                                else consumeMult *= 0.975;
                            }//general fluid
                            var weights = {
                                'baby': 0.1,
                                'child': 0.3,
                                'adult': 0.5,
                                'elder': 0.5,
                                'sick': 0.4,
                                'wounded': 0.4
                            };
                            for (var i in weights) { toConsume += G.getRes(i).amount * weights[i]; }
                            var rations = G.checkPolicy('water rations');
                            switch (rations) {
                                case 'none': toConsume = 0; changeHappiness((-me.amount * 3) / (happinessLevel < 0 ? 1 : (2 + happinessLevel / 4)), 'water rations'); G.gain('health', -me.amount * 2, 'water rations'); break;
                                case 'meager': toConsume *= 0.5; changeHappiness((-me.amount) / (happinessLevel < 0 ? 1 : (2 + happinessLevel / 4)), 'water rations'); G.gain('health', -me.amount * 0.5, 'water rations'); break;
                                case 'sufficient':
                                    toConsume *= 1;
                                    if (Math.abs(happinessLevel) > 80)
                                        changeHappiness(happinessLevel < 0 ? me.amount * 0.2 : -me.amount * 0.2, 'water rations'); break;
                                case 'plentiful': toConsume *= 1.5; changeHappiness((me.amount) / (happinessLevel < 0 ? 1 : (happinessLevel < 0 ? 1.1 : Math.pow(0.5 + happinessLevel * 0.03, 0.4))), 'water rations'); break;
                            }

                            toConsume = randomFloor(toConsume * consumeMult);
                            var consumed = G.lose('water', toConsume, 'drinking');
                            changeHappiness(consumed * happinessAdd * 0.5, 'water culture');
                            var lacking = toConsume - G.lose('water', toConsume, 'drinking');
                            if (rations == 'none') lacking = me.amount * 0.5;
                            if (lacking > 0)//are we out of water?
                            {
                                //resort to muddy water
                                if (rations != 'none' && G.checkPolicy('drink muddy water') == 'on') lacking = lacking - G.lose('muddy water', lacking, 'drinking');
                                if (lacking > 0 && G.checkPolicy('disable aging') == 'off')//are we also out of muddy water?
                                {
                                    changeHappiness(-lacking * 5, 'no water');
                                    //die off
                                    var toDie = (lacking / 5) * 0.05;
                                    if (G.year < 1) toDie /= 5;//less deaths in the first year
                                    var died = 0;
                                    var weights = {
                                        'baby': 0.1,
                                        'child': 0.2,
                                        'adult': 0.5,
                                        'elder': 1,
                                        'sick': 0.4,
                                        'wounded': 0.3
                                    };//the elderly are the first to starve off
                                    var sum = 0; for (var i in weights) { sum += weights[i]; } for (var i in weights) { weights[i] /= sum; }//normalize
                                    for (var i in weights) { var ratio = (G.getRes(i).amount / me.amount); weights[i] = ratio + (1 - ratio) * weights[i]; }
                                    for (var i in weights) { var n = G.lose(i, randomFloor((Math.random() * 0.8 + 0.2) * toDie * weights[i]), 'dehydration'); died += n; }
                                    G.gain('corpse', died, 'dehydration');
                                    changeHappiness(-died * 20 * deathUnhappinessMult, 'dehydration');
                                    G.getRes('died this year').amount += died;
                                    if (died > 0) G.Message({ type: 'bad', mergeId: 'diedDehydration', textFunc: function (args) { return B(args.died) + ' ' + (args.died == 1 ? 'elf' : 'elves') + ' died from dehydration.'; }, args: { died: died }, icon: [5, 4, "c2"] });
                                }
                            }

                            //eat food
                            var toConsume = 0;
                            var consumeMult = 1;
                            var happinessAdd = 0;
                            if (G.has('culture of moderation')) { consumeMult *= 0.85; happinessAdd -= 0.1; }
                            else if (G.has('joy of eating')) { consumeMult *= 1.15; happinessAdd += 0.1; }
                            else if (G.has('unstable eating habits')) { consumeMult *= (G.year % 31 > 15 ? 1.07 : 0.93); happinessAdd += (G.year % 31 > 15 ? 0.06 : -0.04); }
                            else if (G.has('unstable consumption habits')) {
                                var n = G.year % 80;
                                if (n < 20) {
                                    consumeMult *= 1.05; happinessAdd += 0.01;
                                }
                                if (n >= 20 && n < 40) {
                                    consumeMult *= 0.95; happinessAdd -= 0.05;
                                } else if (n >= 40 && n < 60) consumeMult *= 1.025;
                                else consumeMult *= 0.975;
                            }//general fluid
                            var weights = {
                                'baby': 0.2,
                                'child': 0.5 * (G.has('child workforce') ? 1.1 : 1),
                                'adult': 1,
                                'elder': 1,
                                'sick': 0.75,
                                'wounded': 0.75
                            };
                            for (var i in weights) { toConsume += G.getRes(i).amount * weights[i]; }
                            var rations = G.checkPolicy('food rations');
                            switch (rations) {
                                case 'none': toConsume = 0; changeHappiness((-me.amount * 2) / (happinessLevel < 0 ? 1 : (2 + happinessLevel / 4)), 'food rations'); G.gain('health', -me.amount * 2, 'food rations'); break;
                                case 'meager': toConsume *= 0.5; changeHappiness(-me.amount * (G.has("t7") ? 0.2 : 1) / (happinessLevel < 0 ? 1 : (2 + happinessLevel / 4)), 'food rations'); G.gain('health', -me.amount * 0.5, 'food rations'); break;
                                case 'sufficient':
                                    toConsume *= 1;
                                    if (Math.abs(happinessLevel) > 80)
                                        changeHappiness(happinessLevel < 0 ? me.amount * 0.5 : -me.amount * 0.5, 'food rations'); break;
                                case 'plentiful': toConsume *= 1.5; changeHappiness((me.amount) / (happinessLevel < 0 ? 1 : (happinessLevel < 0 ? 1 : Math.pow(0.5 + happinessLevel * 0.02, 0.4))), 'food rations'); break;
                            }
                            toConsume = randomFloor(toConsume * consumeMult);
                            var consumed = G.lose('food', toConsume, 'eating');
                            changeHappiness(G.lose('salt', randomFloor(consumed * 0.1), 'eating') * 5, 'salting food');//use salt
                            changeHappiness(consumed * happinessAdd * 0.5, 'food culture');
                            var lacking = toConsume - consumed;
                            if (rations == 'none') lacking = me.amount * 1;

                            if (lacking > 0)//are we out of food?
                            {
                                //resort to spoiled food
                                if (rations != 'none' && G.checkPolicy('eat spoiled food') == 'on') lacking = lacking - G.lose('spoiled food', lacking, 'eating');
                                if (lacking > 0 && G.checkPolicy('disable aging') == 'off')//are we also out of spoiled food?
                                {
                                    changeHappiness(-lacking * 5, 'no food');
                                    //die off
                                    var toDie = (lacking / 5) * 0.05;
                                    if (G.year < 1) toDie /= 5;//less deaths in the first year
                                    var died = 0;
                                    var weights = {
                                        'baby': 0.1,
                                        'child': 0.2,
                                        'adult': 0.5,
                                        'elder': 1,
                                        'sick': 0.4,
                                        'wounded': 0.3
                                    };//the elderly are the first to starve off
                                    var sum = 0; for (var i in weights) { sum += weights[i]; } for (var i in weights) { weights[i] /= sum; }//normalize
                                    for (var i in weights) { var ratio = (G.getRes(i).amount / me.amount); weights[i] = ratio + (1 - ratio) * weights[i]; }
                                    for (var i in weights) { var n = G.lose(i, randomFloor((Math.random() * 0.8 + 0.2) * toDie * weights[i]), 'starvation'); died += n; }
                                    G.gain('corpse', died, 'starvation');
                                    changeHappiness(-died * 20 * deathUnhappinessMult, 'starvation');
                                    G.getRes('died this year').amount += died;
                                    if (died > 0) G.Message({ type: 'bad', mergeId: 'diedStarvation', textFunc: function (args) { return B(args.died) + ' ' + (args.died == 1 ? 'elf' : 'elves') + ' died from starvation.'; }, args: { died: died }, icon: [5, 4, "c2"] });
                                }
                            }
                        }

                        //clothing
                        var objects = { 'basic clothes': [0.1, 0.1], 'primitive clothes': [0.02, 0.03] };
                        var leftout = me.amount;
                        var prev = leftout;
                        var fulfilled = 0;
                        var happyDressModifier = 1;
                        var healthDressModifier = 1;
                        if (G.has('nudist culture')) { happyDressModifier *= (G.year % 31 > 25 ? 0.9 : 0.95); healthDressModifier *= (G.year % 31 > 25 ? 0.96 : 0.975) };
                        if (G.has('fluid dress code')) happyDressModifier *= (G.year % 31 > 15 ? 1.04 : 0.96);
                        for (var i in objects) {
                            fulfilled = Math.min(me.amount, Math.min(G.getRes(i).amount, leftout));
                            changeHappiness(fulfilled * objects[i][0] * happyDressModifier, 'clothing');
                            G.gain('health', fulfilled * objects[i][1] * healthDressModifier, 'clothing');
                            leftout -= fulfilled;
                        }
                        var dressLackModifierHap = 1;
                        if (G.has('nudist culture')) dressLackModifierHap *= 1.5;
                        if (G.has('strict dress code')) dressLackModifierHap *= 1.5;
                        if (G.has('fluid dress code')) heartModifier *= (G.year % 31 > 15 ? 1.25 : 0.75);
                        changeHappiness(-leftout * 0.15, 'no clothing');
                        G.gain('health', -leftout * 0.15, 'no clothing');

                        //fire
                        var objects = { 'fire pit': [5, 0.1, 0.1] };
                        var leftout = me.amount;
                        var prev = leftout;
                        var fulfilled = 0;
                        var happyHeartModifier = 1;
                        var healthHeartModifier = 1;
                        if (G.has('cold heart')) { happyHeartModifier *= 0.9; healthHeartModifier *= (G.year % 31 > 25 ? 0.975 : 0.985) };
                        if (G.has('hot heart')) { happyHeartModifier *= 1.25 };
                        if (G.has('fluid heart')) happyHeartModifier *= (G.year % 31 > 15 ? 1.05 : 0.95);
                        for (var i in objects) {
                            fulfilled = Math.min(me.amount, Math.min(G.getRes(i).amount * objects[i][0], leftout));
                            changeHappiness(fulfilled * objects[i][1] * happyHeartModifier, 'warmth & light');
                            G.gain('health', fulfilled * objects[i][2] * healthHeartModifier, 'warmth & light');
                            leftout -= fulfilled;
                        }
                        var heartModifier = 1;
                        if (G.has('cold heart')) heartModifier *= 1.5;
                        if (G.has('hot heart')) heartModifier *= 0.5;
                        if (G.has('fluid heart')) heartModifier *= (G.year % 31 > 15 ? 1.2 : 0.75);
                        changeHappiness(-leftout * 0.25 / heartModifier, 'cold & darkness');
                        G.gain('health', -leftout * 0.25 / heartModifier, 'cold & darkness');

                        //homelessness and pressure
                        var homeless = Math.max(0, (me.amount) - G.getRes('housing').amount);
                        if (G.has('sedentism') && me.amount > 13 && homeless > 0) {
                            if (tick % 20 == 0) G.Message({ type: 'bad', mergeId: 'homeless', textFunc: function (args) { return B(args.n) + ' ' + (args.n == 1 ? 'elf is' : 'elves are') + ' homeless.<br>Homelessness with more than 13 population leads to lower birth rates.'; }, args: { n: homeless }, replaceOnly: true, icon: [12, 4, "c2"] });
                        }
                        if (me.amount > G.getRes('pressure resistance').amount) {
                            var pressure = Math.max(0, (me.amount) - G.getRes('pressure resistance').amount);
                            if (tick % 75 == 0) G.Message({ type: 'bad', text: 'You have more elves than you can protect against <b>Pressure</b>. That means you won\'t be able to get any more elves above the <b>Pressure resistance</b> level! Increase the <b>resistance</b> level by completing some trials or achievements. Having more housing than pressure resistance level will NOT solve the problem.', icon: [2, 11, "c2"] });
                        }
                        //age
                        if (G.checkPolicy('disable aging') == 'off') {
                            if (G.year >= 10)//no deaths of old age the first 10 years
                            {
                                var n = randomFloor(G.getRes('elder').amount * 0.00015);
                                G.gain('corpse', n, 'old age');
                                G.lose('elder', n, 'old age');
                                changeHappiness(-n * 5 * deathUnhappinessMult, 'death');
                                if (n > 0) G.Message({ type: 'bad', mergeId: 'diedAge', textFunc: function (args) { return B(args.n) + ' ' + (args.n == 1 ? 'elf' : 'elves') + ' died of old age.'; }, args: { n: n }, icon: [13, 4, "c2"] });

                                G.getRes('died this year').amount += n;
                            }
                            if (G.year >= 5)//no aging adults the first 5 years
                            {
                                var n = randomFloor(G.getRes('adult').amount * 0.00014);
                                G.gain('elder', n); G.lose('adult', n, 'aging up');
                            }
                            var n = randomFloor(G.getRes('child').amount * 0.002); G.gain('adult', n, 'aging up'); G.lose('child', n, 'aging up');
                            var n = randomFloor(G.getRes('baby').amount * 0.005); G.gain('child', n, 'aging up'); G.lose('baby', n, 'aging up');

                            //births
                            var parents = G.getRes('adult').amount + G.getRes('elder').amount;
                            if (parents >= 2)//can't make babies by yourself
                            {
                                var born = 0;
                                var birthRate = 1;
                                if (me.amount < 100) birthRate *= 3;//more births if low pop
                                if (me.amount < 10) birthRate *= 3;//even more births if very low pop
                                if (G.checkPolicy('fertility rituals') == 'on') birthRate *= 1.2;
                                if (G.checkPolicy('population control') == 'forbidden') birthRate *= 0;
                                else if (G.checkPolicy('population control') == 'limited') birthRate *= 0.5;
                                birthRate *= productionMult;
                                if ((homeless > 0 || pressure > 0) && me.amount > 13) birthRate *= 0.05;//harder to make babies if you have more than 15 elves and some of them are homeless
                                var n = randomFloor(G.getRes('adult').amount * 0.0003 * birthRate); G.gain('baby', n, 'birth'); changeHappiness(n * 10, 'birth'); born += n;
                                var n = randomFloor(G.getRes('elder').amount * 0.00003 * birthRate); G.gain('baby', n, 'birth'); changeHappiness(n * 10, 'birth'); born += n;
                                G.getRes('born this year').amount += born;
                                if (born > 0) G.Message({ type: 'good', mergeId: 'born', textFunc: function (args) { return B(args.born) + ' ' + (args.born == 1 ? 'baby has' : 'babies have') + ' been born.'; }, args: { born: born }, icon: [2, 3, "c2"] });
                            }

                            //health (diseases and wounds)
                            //note : when a sick or wounded person recovers, they turn into adults; this means you could get a community of old elves fall sick, then miraculously age back. life is a mystery

                            //sickness
                            var toChange = 0.00003;
                            if (G.getRes('health').amount < 0) {
                                toChange *= (1 + Math.abs(G.getRes('health').amount / me.amount));
                            }
                            if (toChange > 0) {
                                if (G.year < 5) toChange *= 0.5;//less disease the first 5 years
                                if (me.amount <= 15) toChange *= 0.5;
                                if (G.checkPolicy('flower rituals') == 'on') toChange *= 0.8;
                                var changed = 0;
                                var weights = {
                                    'baby': 2,
                                    'child': 1.5,
                                    'adult': 1,
                                    'elder': 2
                                };
                                if (G.checkPolicy('child workforce') == 'on') weights['child'] *= 2;
                                if (G.checkPolicy('elder workforce') == 'on') weights['elder'] *= 2;
                                if (G.year < 5) weights['adult'] = 0;//adults don't fall sick the first 5 years
                                for (var i in weights) { var n = G.lose(i, randomFloor(Math.random() * G.getRes(i).amount * toChange * weights[i])); changed += n; }
                                G.gain('sick', changed, 'disease');
                                if (changed > 0) G.Message({ type: 'bad', mergeId: 'fellSick', textFunc: function (args) { return B(args.n) + ' ' + (args.n == 1 ? 'elf' : 'elves') + ' fell sick.'; }, args: { n: changed }, icon: [6, 3, "c2"] });
                            }
                            //sickness : death and recovery
                            var sickMortality = 0.005;
                            var changed = 0;
                            var n = G.lose('sick', randomFloor(Math.random() * G.getRes('sick').amount * sickMortality), 'disease'); G.gain('corpse', n, 'disease'); changed += n;
                            changeHappiness(-changed * 15 * deathUnhappinessMult, 'death');
                            G.getRes('died this year').amount += changed;
                            if (changed > 0) G.Message({ type: 'bad', mergeId: 'diedSick', textFunc: function (args) { return B(args.n) + ' ' + (args.n == 1 ? 'elf' : 'elves') + ' died from disease.'; }, args: { n: changed }, icon: [5, 4, "c2"] });

                            var sickHealing = 0.01;
                            if (G.checkPolicy('flower rituals') == 'on') sickHealing *= 1.25;
                            var changed = 0;
                            var n = G.lose('sick', randomFloor(Math.random() * G.getRes('sick').amount * sickHealing), '<font color="lime">healing</font>'); G.gain(G.checkPolicy('elder workforce') == 'on' ? 'elder' : 'adult', n, 'healing from sickness'); changed += n;
                            changeHappiness(changed * 10, 'recovery');
                            if (G.getSetting('disease messages') || G.resets < 3)
                                if (changed > 0) G.Message({ type: 'good', mergeId: 'sickRecovered', textFunc: function (args) { return B(args.n) + ' sick ' + (args.n == 1 ? 'elf' : 'elves') + ' got better.'; }, args: { n: changed }, icon: [4, 3, "c2"] });

                            //wounds
                            var toChange = 0.00003;
                            if (toChange > 0) {
                                if (G.year < 5) toChange *= 0.5;//less wounds the first 5 years
                                if (me.amount <= 15) toChange *= 0.5;
                                var changed = 0;
                                var weights = {
                                    'baby': 2,
                                    'child': 1.5,
                                    'adult': G.checkPolicy('elder workforce') == 'on' ? 1.3 : 1,
                                    'elder': 2
                                };
                                if (G.checkPolicy('child workforce') == 'on') weights['child'] *= G.checkPolicy('elder workforce') == 'on' ? 4 : 3;
                                if (G.checkPolicy('elder workforce') == 'on') weights['elder'] *= 3;
                                if (G.year < 5) weights['adult'] = 0;//adults don't get wounded the first 5 years
                                for (var i in weights) { var n = G.lose(i, randomFloor(Math.random() * G.getRes(i).amount * toChange * weights[i])); changed += n; }
                                G.gain('wounded', changed, 'accident');
                                if (changed > 0) G.Message({ type: 'bad', mergeId: 'gotWounded', textFunc: function (args) { return B(args.n) + ' ' + (args.n == 1 ? 'elf' : 'elves') + ' got wounded.'; }, args: { n: changed }, icon: [7, 3, "c2"] });
                            }
                            //wounds : death and recovery
                            var woundMortality = 0.005;
                            var changed = 0;
                            var n = G.lose('wounded', randomFloor(Math.random() * G.getRes('wounded').amount * woundMortality), 'wounds'); G.gain('corpse', n, 'wounds'); changed += n;
                            changeHappiness(-changed * 15 * deathUnhappinessMult, 'death');
                            G.getRes('died this year').amount += changed;
                            if (G.getSetting('death messages') || G.resets < 3)
                                if (changed > 0) G.Message({ type: 'bad', mergeId: 'diedWounded', textFunc: function (args) { return B(args.n) + ' ' + (args.n == 1 ? 'elf' : 'elves') + choose([' died from their wounds.', ' died from their injuries.', ' died from being injured.', ' died from severe injuries.']); }, args: { n: changed }, icon: [5, 4, "c2"] });

                            var sickHealing = 0.005;
                            var changed = 0;
                            var n = G.lose('wounded', randomFloor(Math.random() * G.getRes('wounded').amount * sickHealing), '<font color="lime">healing</font>'); G.gain(G.checkPolicy('elder workforce') == 'on' ? 'elder' : 'adult', n, 'healing from injury'); changed += n;
                            changeHappiness(changed * 10, 'recovery');
                            if (G.getSetting('disease messages') || G.resets < 3)
                                if (changed > 0) G.Message({ type: 'good', mergeId: 'woundedRecovered', textFunc: function (args) { return B(args.n) + ' ' + (args.n == 1 ? 'elf' : 'elves') + choose([' recovered from their wounds.', ' recovered from their injuries.']); }, args: { n: changed }, icon: [4, 3, "c2"] });
                        }
                    }
                    else if (G.T > 0) { G.GameOver(); }
                    if (me.amount >= 1000 && G.achievByName['first overcome'].won == 0) {
                        G.achievByName['first overcome'].won = 1;
                        G.middleText('- Completed <font color="#faa336">First overcome</font> achievement -');
                    }
                    if (me.amount >= 10000 && G.achievByName['pressed progress'].won == 0) {
                        G.achievByName['pressed progress'].won = 1;
                        G.middleText('- Completed <font color="pink">Pressed progress</font> achievement -');
                    }
                    if (me.amount >= 25000 && G.achievByName['the moral press'].won == 0) {
                        G.achievByName['the moral press'].won = 1;
                        G.middleText('- Completed <font color="#e5df2a">The moral press</font> achievement -');
                    }
                    if (me.amount >= 85000 && G.achievByName['pressure vaccine'].won == 0) {
                        G.achievByName['pressure vaccine'].won = 1;
                        G.middleText('- Completed <font color="#0ecac6">Pressure vaccine</font> achievement -');
                    }
                    if (me.amount >= 175000 && G.achievByName['pressure wiper'].won == 0) {
                        G.achievByName['pressure wiper'].won = 1
                        G.middleText('- Completed <font color="#c4b400">Pressure wiper</font> achievement -')
                    }
                    if (me.amount >= 300000 && G.achievByName['pressure purgator'].won == 0) {
                        G.achievByName['pressure purgator'].won = 1
                        G.middleText('- Completed <font color="lime">Pressure purgator</font> achievement -')
                    }
                },
            });
            new G.Res({
                name: 'baby',
                desc: '[baby,Babies] are born when you have 2 or more [adult,Grown elves] left to their own devices.//Any 2 adults can have babies, even if they are working. [elder]s can also have babies, though much slower.//[happiness] affects how many babies your elves make.//Over time, babies will grow into [child,Children], although [baby,Babies] will only consume 40% as much as [child,Kids].',
                startWith: 0,
                visible: true,
                partOf: 'population',
                icon: [2, 3, "c2"],
                category: 'demog'
            });
            new G.Res({
                name: 'child',
                desc: '[baby,Babies] grow into [child,Children] gradually.//After a while, they will grow up into [adult,Grown elves].//Children will eat and drink half as much as adults.//Children do not count as [worker]s, unless special measures are in place.',
                startWith: 2,
                visible: true,
                partOf: 'population',
                icon: [3, 3, "c2"],
                category: 'demog'
            });
            new G.Res({
                name: 'adult',
                displayName: 'Grown elf',
                desc: '[adult,Grown elves] grow from [child,Children] over time.//They eventually age into [elder,Elders].//Generally, adults make up most of your [worker,workforce].',
                startWith: 5,
                visible: true,
                partOf: 'population',
                icon: [4, 3, "c2"],
                category: 'demog'
            });
            new G.Res({
                name: 'elder',
                desc: '[adult,Grown elves] that grow old are [elder,Elders].//Elders may end up [corpse,dying] of old age.//Elders do not count as [worker]s, unless special measures are in place.',
                startWith: 1,
                visible: true,
                partOf: 'population',
                icon: [5, 3, "c2"],
                category: 'demog'
            });
            new G.Res({
                name: 'sick',
                desc: '[adult,Elves] can fall [sick,sick] when your [health] levels become too low. They do not [worker,work], but may be healed eventually.',
                partOf: 'population',
                icon: [6, 3, "c2"],
                category: 'demog',
                colorBad: 'lime', colorGood: '#f44'
            });
            new G.Res({
                name: 'wounded',
                desc: '[adult,Elves] may get [wounded,wounded] due to work injuries. They do not [worker,work], but may slowly improve.',
                partOf: 'population',
                icon: [7, 3, "c2"],
                category: 'demog',
                colorBad: 'lime', colorGood: '#f44'
            });
            new G.Res({
                name: 'corpse',
                desc: '[corpse,Corpses] are the remains of [population,elves] that died, whether from old age, accident, disease, starvation or war.//Corpses left in the open air tend to spread diseases and make elves unhappy, which gets even worse as superstitions develop. To mitigate this, you need to create a [burial spot] for each corpse.',
                startWith: 0,
                colorBad: 'lime', colorGood: '#f44',
                icon: [8, 3, "c2"],
                tick: function (me, tick) {
                    var graves = G.getRes('burial spot');
                    if (G.getRes('population').amount > 0) {
                        if (!G.has('belief in the beforelife')) {
                            if (G.has('ritual necrophagy'))//butcher 3% of corpses every day, you weirdo
                            {
                                var changed = 0;
                                var n = G.lose('corpse', randomFloor(G.getRes('corpse').amount * 0.03), '<font color="#f70054">necrophagy</font>'); G.gain('meat', n * 30, '<font color="#f70054">necrophagy</font>'); G.gain('bone', n * 5, '<font color="#f70054">necrophagy</font>'); changed += n;
                                if (n > 0) {
                                    G.pseudoGather(G.getRes('faith'), changed);
                                    G.gain('health', -changed * 0.1, 'necrophagy');
                                }
                            }
                            if (G.has('art of death'))//use 1% of corpses every day for art purposes
                            {
                                AoD();
                            }
                        }
                        if (me.amount > 0) {
                            //bury slowly
                            if (graves.amount > graves.used) {
                                var amount = Math.min(graves.amount - graves.used, Math.max(1, randomFloor(me.amount * 0.1)));
                                graves.used += amount; G.lose('corpse', amount, 'burial');
                                changeHappiness(amount * 2, 'burial');
                            }
                        }
                    }
                    if (graves.amount < graves.used) {
                        //more occupied burial spots than total burial spots? this means we've been deleting burial spot that was already containing corpses; exhume those suckers
                        var toExhume = randomFloor((graves.used - graves.amount) * 0.1);
                        graves.used -= toExhume;
                        G.gain('corpse', toExhume, 'not enough burial spots');
                        changeHappiness(-toExhume * 2, 'not enough burial spots');//this fixes a funny little thing where you can kinda cheese happiness by rapidly getting and removing burial spots (which are free)
                    }

                    //Normally
                    if (G.day % 30 == 0) {
                        var toSpoil = me.amount * 0.0045;
                        var spent = G.lose('corpse', randomFloor(toSpoil), 'decay');
                    }

                    var unhappiness = 0.01;
                    if (G.has('burial')) unhappiness *= 1.5;
                    if (G.has('belief in revenants')) unhappiness *= 2 * (G.has('bII(normal)') ? 0.95 : 1);
                    changeHappiness(-me.amount * unhappiness, 'corpses');
                    G.gain('health', -me.amount * 0.02, 'corpses');
                },
            });
            new G.Res({
                name: 'burial spot',
                desc: 'Each [burial spot] has enough room for one [corpse], letting you prevent the spread of disease and unhappiness.//Your elves will slowly bury [corpse]s if there are enough [burial spot]s.//The number on the left is how many burial spots are occupied, while the number on the right is how many you have in total.',
                icon: [13, 4, "c2"],
                displayUsed: true,
            });
            new G.Res({
                name: 'housing',
                desc: 'Each [housing,Housing spot] accommodates one [population,Elf].//Beyond the 15 elves a basic nomad tribe can support, your population will only grow if you have unoccupied [housing].//Homelessness (having less housing than population) will lead to unhappiness and disease.//The number on the left is how much housing is occupied, while the number on the right is how much housing room you have in total.',
                icon: [12, 4, "c2"],
                fractional: true,
                getDisplayAmount: function () {
                    return B(Math.min(this.displayedAmount, G.getRes('population').displayedAmount)) + '<wbr>/' + B(this.displayedAmount);
                },
            });
            new G.Res({
                name: 'land',
                desc: 'Each tile of territory you own grants you some [land] (100 per fully-explored non-ocean tile normally) upon which you can construct buildings. If, for some reason, you find yourself with less [land] than your buildings are using, some of them will start to crumble away.//The number on the left is how much [land] is occupied, while the number on the right is how much of it you have in total.',
                icon: [14, 4, "c2"],
                displayUsed: true,
                tick: function (me) {
                    if (me.amount > G.achievByName['mostElvesLand'].won) G.achievByName['mostElvesLand'].won = me.amount;
                    me.amount = Math.ceil(G.currentMap.territoryByOwner[1] * 100);

                    //me.amount=G.tiles;
                    //TODO : this stuff
                    /*
                        concept :
                            -each tile owned can be explored to 100%
                            -you get one land per explored percent per tile
                            -some techs also add a +10 etc bonus to the max of 100 land per full tile
                            -we need to setup a system to recalculate this when appropriate
                    */
                },
                getDisplayAmount: function () {
                    return B(this.displayedUsedAmount) + '<wbr>/' + B(this.displayedAmount);
                },
            });
            new G.Res({
                name: 'wtr',
                displayName: 'Water',
                desc: 'Every tile of ocean you own grants you some [wtr] (100 for every fully explored ocean tile normally) upon which you...cannot construct a lot. //You can only use 10% of the water in the whole world! If, for some reason, you find yourself with less available water than your buildings are using, some of them will start to slowly crumble away.<>The number on the left is how much water is occupied, the number on the middle is how much [wtr] you can use, while the number on the right is how much explored water you have in total.',
                icon: [15, 4, "c2"],
                displayUsed: true,
                getDisplayAmount: function () {
                    if (G.tick % 50 == 0) {
                        G.ocean = 0;
                        for (var I in G.currentMap.tilesByOwner[1]) {
                            if (G.currentMap.tilesByOwner[1][I].land.ocean == true) G.ocean += G.currentMap.tilesByOwner[1][I].explored;
                        };

                        G.getRes('wtr').amount = G.ocean * 10;
                    }
                    return B(this.displayedUsedAmount) + '<wbr>/' + B(this.displayedAmount) + '<wbr>/' + B(this.displayedAmount * 10);
                },
            });
            new G.Res({
                name: 'worker',
                desc: 'Your [worker,Workforce] is the part of your [population] that is ready to work.//The number on the left is how many are currently being employed, while the number on the right is your total amount of workers.',
                startWith: 0,
                visible: true,
                icon: [1, 3, "c2"],
                displayUsed: true,
                category: 'demog',
                tick: function (me, tick) {
                    me.amount = G.getRes('adult').amount;
                    if (G.checkPolicy('elder workforce') == 'on') me.amount += G.getRes('elder').amount;
                    if (G.checkPolicy('child workforce') == 'on') me.amount += G.getRes('child').amount;
                    if (me.used > me.amount) {
                        //TODO maybe ?
                        //select all units that require workers
                        //pick some at random until we have enough elves to reach the difference between workers and workers needed
                        //kill them if the unit has no gizmos, otherwise reduce the unit's percent by 1 rank
                        //maybe this could be generalized to work will all requirements
                        //or not ? some requirements have unique conditions, such as : 10 factories running at 50% only use half the workers and tools, but still need 10 land
                        //maybe this could just be a flag on land, reqIgnoresPercent=true
                        //but then how do we deal with the situation where we have less land available than land used (like after a war where we lost tiles) ? the desired behavior would be that buildings slowly die off until we're under the threshold
                        //maybe just implement a "onReqFail" function that overrides the default behavior
                    }
                },
            });

            new G.Res({
                name: 'happiness',
                desc: '[happiness] describes the global level of well-being of your [population].//Happy elves work even harder and improve unit speeds, while unhappy elves tend to slack off; at +100% happiness, most of your workers will work twice as fast, while at -100% happiness, they will work twice as slow. This goes on up to +200% and -200%.//Several things improve happiness, such as good [food], entertainment, or luxury items; things that bring down [happiness] are spoiled food, starvation, disease, death and harsh policies.//Happiness and unhappiness both tend to level off over time, or reach one of the limits.',
                startWith: 0,
                visible: true,
                icon: [3, 4, "c2"],
                colorGood: 'lime', colorBad: '#f44',
                fractional: true,
                tick: function (me, tick) {
                    if (tick % 99 == 44) {
                        if (G.getRes('happiness').amount <= -355 * G.getRes('population').amount) me.amount = -355 * G.getRes('population').amount; //balance change
                        if (G.getRes('happiness').amount >= 355 * G.getRes('population').amount) me.amount = 355 * G.getRes('population').amount;
                    }
                    if (G.getRes('population').amount > 0 && tick % 2 == 0) {
                        me.amount *= 0.99;
                    }
                },
                getDisplayAmount: function () {
                    if (G.getRes('population').amount <= 0) return '-';
                    var amount = (this.displayedAmount / G.getRes('population').displayedAmount);
                    if (amount > 200) amount = 200;
                    if (amount < -200) amount = -200;
                    return B(amount) + '%';
                },
                getIcon: function (me) {
                    if (G.getRes('population').amount <= 0) return [5, 4, "c2"];
                    else {
                        var amount = me.amount / G.getRes('population').amount;
                        if (amount >= 100) return [4, 4, "c2"];
                        else if (amount >= 50) return [3, 4, "c2"];
                        else if (amount >= -50) return [2, 4, "c2"];
                        else if (amount >= -100) return [1, 4, "c2"];
                        else return [0, 4, "c2"];
                    }
                },
            });

            new G.Res({
                name: 'health',
                desc: '[health] represents the average physical condition of your [population].//Lower health tends to make elves [sick] and unhappy, while higher health will make elves happier.//Health can be affected by a number of things: eating raw or spoiled [spoiled food], drinking [muddy water], poor living conditions, and ongoing plagues.',
                startWith: 0,
                visible: true,
                colorGood: 'lime', colorBad: '#f44',
                icon: [3, 5, "c2"],
                fractional: true,
                tick: function (me, tick) {
                    if (G.getRes('population').amount > 0 && tick % 2 == 0) {
                        if (tick % 99 == 44) {
                            if (G.getRes('health').amount <= -300 * G.getRes('population').amount) me.amount = -300 * G.getRes('population').amount; //balance change
                            if (G.getRes('health').amount >= 300 * G.getRes('population').amount) me.amount = 300 * G.getRes('population').amount;
                        }
                        //note : this is "soft" sickness; it affects the chance of elves falling sick
                        //G.getRes('happiness').amount+=(me.amount-G.getRes('happiness').amount)*0.01;

                        var sickness = 0.1;
                        sickness += Math.pow(Math.max(0, G.getRes('population').amount - 50), 0.1) * 0.1;//more elves means more contagion
                        G.gain('health', -G.getRes('population').amount * (Math.random() * sickness), 'disease');//elves randomly get sick
                        var recovery = 0.98;
                        me.amount *= recovery;//elves recover over time
                    }
                    changeHappiness(me.amount * 0.001, 'health');
                },
                getDisplayAmount: function () {
                    if (G.getRes('population').amount <= 0) return '-';
                    var amount = this.displayedAmount / G.getRes('population').displayedAmount;
                    if (amount > 200) amount = 200;
                    if (amount < -200) amount = -200;
                    return B(amount) + '%';
                },
                getIcon: function (me) {
                    if (G.getRes('population').amount <= 0) return [5, 5, "c2"];
                    else {
                        var amount = me.amount / G.getRes('population').amount;
                        if (amount >= 100) return [4, 5, "c2"];
                        else if (amount >= 50) return [3, 5, "c2"];
                        else if (amount >= -50) return [2, 5, "c2"];
                        else if (amount >= -100) return [1, 5, "c2"];
                        else return [0, 5, "c2"];
                    }
                },
            });

            new G.Res({
                name: 'food storage',
                desc: 'Each [food storage] unit slows down decay for one piece of [food].//The number on the left is how much food storage is occupied, while the number on the right is how much you have in total.',
                icon: [12, 5, "c2"],
                tick: function (me, tick) {
                    var amount = 0;
                    amount += G.getRes('basket').amount * 10;
                    amount += G.getRes('pot').amount * 25;
                    amount += G.getRes('ice').amount;
                    amount += G.getRes('added food storage').amount;
                    me.amount = amount;
                },
                getDisplayAmount: function () {
                    return B(Math.min(this.displayedAmount, G.getRes('food').displayedAmount)) + '<wbr>/' + B(this.displayedAmount);
                },
            });
            new G.Res({
                name: 'added food storage',
                //food storage added by buildings
                desc: '',
                icon: [12, 5, "c2"],
                hidden: true,
            });

            new G.Res({
                name: 'material storage',
                desc: 'Each [material storage] unit lowers the rate of decay or theft for one unit of your materials.//The number on the left is how much material storage is occupied, while the number on the right is how much you have in total.',
                icon: [14, 5, "c2"],
                tick: function (me, tick) {
                    var amount = 0;
                    amount += G.getRes('added material storage').amount;
                    me.amount = amount;

                    var materials = 0;
                    for (var i in G.props['perishable materials list']) {
                        var mat = G.props['perishable materials list'][i];
                        materials += mat.amount;
                    }
                    me.used = materials;

                    if (materials > 0) {
                        var stored = Math.min(materials, amount) / materials;
                        var notStored = 1 - stored;

                        for (var i in G.props['perishable materials list']) {
                            var mat = G.props['perishable materials list'][i];

                            var toSpoil = mat.amount * 0.002 * notStored + mat.amount * 0.0001 * stored;
                            var spent = G.lose(mat.name, randomFloor(toSpoil), 'decay');
                        }
                    }

                    G.props['perishable materials list'] = [];
                },
                getDisplayAmount: function () {
                    return B(Math.min(this.displayedAmount, this.displayedUsedAmount)) + '<wbr>/' + B(this.displayedAmount);
                },
                displayUsed: true,
            });
            new G.Res({
                name: 'added material storage',
                //material storage added by buildings
                desc: '',
                icon: [14, 5, "c2"],
                hidden: true,
            });

            new G.Res({
                name: 'water',
                desc: '[water] is required to keep your [population,elves] hydrated, at the rate of half a unit per elf every 3 ticks (although babies and children drink less).//Without water, elves will resort to drinking [muddy water], which is unhealthy; if that runs out too, your elves will simply die off.//Most terrains have some fresh water available for gathering, such as ponds, streams and rain, but drier locations may have to rely on [well] digging.//Water turns into [muddy water] over time, if it is not consumed.',
                icon: [7, 6, "c2"],
                startWith: 200,
                visible: true,
                turnToByContext: { 'drinking': { 'health': 0.01, 'happiness': 0 } },
                tick: function (me, tick) {
                    if (G.checkPolicy('disable spoiling') == 'off') {
                        var toSpoil = me.amount * 0.02;
                        var spent = G.lose('water', randomFloor(toSpoil), 'decay');
                        G.gain('muddy water', randomFloor(spent), 'decay');
                    }
                },
            });
            new G.Res({
                name: 'muddy water',
                desc: '[muddy water] tastes awful and is unhealthy, but is better than dying of thirst. Your elves will default to drinking it in the absence of fresh [water].//It can be collected while gathering from stagnant pools or old rainwater. In addition, [water] also turns into [muddy water] over time. [muddy water] itself will slowly dry out.',
                icon: [8, 6, "c2"],
                visible: true,
                turnToByContext: { 'drinking': { 'health': -0.03, 'happiness': -0.05 } },
                tick: function (me, tick) {
                    if (G.checkPolicy('disable spoiling') == 'off') {
                        var toSpoil = me.amount * 0.01;
                        var spent = G.lose('muddy water', randomFloor(toSpoil), 'decay');
                    }
                },
            });

            new G.Res({
                name: 'food',
                desc: '[food] is consumed by your [population,elves] when they get hungry, at the rate of 1 unit per elf every 3 ticks (although babies and children eat less).//Some types of food are tastier or healthier than others.//Note that some food types may or may not be eaten depending on policies in place.//Food will slowly decay into [spoiled food] if you lack proper food storage.',
                meta: true,
                visible: true,
                icon: [3, 6, "c2"],
                tick: function (me, tick) {
                    if (me.amount > 0 && G.checkPolicy('disable spoiling') == 'off') {
                        var stored = Math.min(me.amount, G.getRes('food storage').amount) / me.amount;
                        var notStored = 1 - stored;
                        var ice = 1 - ((2 * i) * 0.01);
                        if (G.has('Ice')) var toSpoil = me.amount * 0.01 * notStored + me.amount * 0.0005 * stored * ice;
                        else var toSpoil = me.amount * 0.01 * notStored + me.amount * 0.0005 * stored;


                        var spent = G.lose('food', randomFloor(toSpoil), 'decay');
                        //G.gain('spoiled food',randomFloor(spent));
                    }
                },
            });
            new G.Res({
                name: 'spoiled food',
                desc: '[spoiled food] is eaten when no other [food] is available, in a last-ditch effort to fend off starvation.//Spoiled food is terribly unhealthy and tastes just as bad. Over time, it will decay even further into inedibility.',
                icon: [3, 7, "c2"],
                visible: true,
                turnToByContext: { 'eating': { 'health': -0.3, 'happiness': -0.5 } },
                tick: function (me, tick) {
                    if (G.checkPolicy('disable spoiling') == 'off') {
                        var toSpoil = me.amount * 0.001;
                        var spent = G.lose('spoiled food', randomFloor(toSpoil), 'decay');
                    }
                },
            });

            //a trick to make different food types spoil at different speeds : turnToByContext:{'decay':{'fruit':0.2}} would make fruit last 20% longer (note : the food may still produce spoiled food)

            new G.Res({
                name: 'herbs',
                desc: '[herbs] are various plants and roots collected by simply foraging around. While relatively healthy to eat, they tend to taste unpleasant.',
                icon: [4, 6, "c2"],
                startWith: 175,
                turnToByContext: { 'eating': { 'health': 0.005, 'happiness': -0.03 }, 'decay': { 'herbs': 0.2, 'spoiled food': 0.8 } },
                partOf: 'food',
                category: 'food',
            });
            new G.Res({
                name: 'fruit',
                desc: '[fruit,Fruits], whether gathered from berry bushes or fruit trees, are both sweet-tasting and good for you.',
                icon: [4, 7, "c2"],
                turnToByContext: { 'eating': { 'health': 0.02, 'happiness': 0.01 }, 'decay': { 'spoiled food': 1 } },
                partOf: 'food',
                startWith: 25,
                category: 'food',
            });
            new G.Res({
                name: 'vegetables',
                displayName: 'Vegetables',
                desc: '[vegetables], whether gathered from bushes or any gardens, are both healthy and quite good for you.',
                icon: [13, 6, "c2"],
                turnToByContext: { 'eating': { 'health': 0.02, 'happiness': 0.01 }, 'decay': { 'spoiled food': 1 } },
                partOf: 'food',
                category: 'food',
            });
            new G.Res({
                name: 'meat',
                desc: '[meat,Raw meat] is gathered from dead animals and, while fairly tasty, can harbor a variety of diseases.',
                icon: [5, 7, "c2"],
                turnToByContext: { 'eating': { 'health': -0.03, 'happiness': 0.02, 'bone': 0.1 }, 'decay': { 'spoiled food': 1 } },
                partOf: 'food',
                category: 'food',
            });
            new G.Res({
                name: 'cooked meat',
                desc: 'Eating [cooked meat] is deeply satisfying and may even produce a [bone].',
                icon: [6, 7, "c2"],
                turnToByContext: { 'eating': { 'health': 0.02, 'happiness': 0.04, 'bone': 0.1 }, 'decay': { 'cooked meat': 0.2, 'spoiled food': 0.8 } },
                partOf: 'food',
                category: 'food',
            });
            new G.Res({
                name: 'cured meat',
                desc: '[cured meat] is interestingly tough and can keep for months without spoiling. It also provides a curious flavor and is even better than [cooked meat]!',
                icon: [11, 6, "c2"],
                turnToByContext: { 'eating': { 'health': 0.02, 'happiness': 0.05, 'bone': 0.1 }, 'decay': { 'cured meat': 0.95, 'spoiled food': 0.05 } },
                partOf: 'food',
                category: 'food',
            });
            new G.Res({
                name: 'seafood',
                desc: '[seafood,Raw seafood] such as fish, clams, and shrimps aren\'t exactly the best for the body but have a little bit of mild flavor.',
                icon: [5, 6, "c2"],
                turnToByContext: { 'eating': { 'health': -0.02, 'happiness': 0.01, 'bone': 0.02 }, 'decay': { 'spoiled food': 1 } },
                partOf: 'food',
                category: 'food',
            });
            new G.Res({
                name: 'cooked seafood',
                desc: '[cooked seafood] tastes absolutely stunning and has various [health] benefits.',
                icon: [6, 6, "c2"],
                turnToByContext: { 'eating': { 'health': 0.03, 'happiness': 0.03, 'bone': 0.02 }, 'decay': { 'cooked seafood': 0.2, 'spoiled food': 0.8 } },
                partOf: 'food',
                category: 'food',
            });
            new G.Res({
                name: 'cured seafood',
                desc: '[cured seafood] has a nice smoky flavor and lasts incredibly long, making your elves even happier!',
                icon: [12, 6, "c2"],
                turnToByContext: { 'eating': { 'health': 0.02, 'happiness': 0.04, 'bone': 0.02 }, 'decay': { 'cured seafood': 0.95, 'spoiled food': 0.05 } },
                partOf: 'food',
                category: 'food',
            });

            new G.Res({
                name: 'bread',
                desc: '[bread] is filling, nutritious, and usually not unpleasant to eat; for these reasons, it is often adopted as staple food by those who can produce it in large amounts.',
                icon: [7, 7, "c2"],
                turnToByContext: { 'eating': { 'health': 0.02, 'happiness': 0.02 }, 'decay': { 'spoiled food': 1 } },
                partOf: 'food',
                category: 'food',
            });

            new G.Res({
                name: 'bugs',
                desc: 'Worms, insects, spiders, and other creatures belong here. They are easily caught, but are usually not considered proper [food].',
                icon: [12, 19, "c2"],
                turnToByContext: { 'eating': { 'health': 0, 'happiness': -0.05 }, 'decay': { 'spoiled food': 0.5 } },
                //partOf:'food',
                category: 'food',
                tick: function (me, tick) {
                    var toLose = me.amount * 0.003;//bugs don't like to stick around
                    var spent = G.lose(me.name, randomFloor(toLose), 'decay');
                }
            });


            G.props['perishable materials list'] = [];

            var loseMaterialsTick = function (me, tick) {
                if (G.checkPolicy('disable spoiling') == 'off') {
                    G.props['perishable materials list'].push(me);
                }
            };

            new G.Res({
                //hidden, used for every material that can be stored in a warehouse that isn't part of any other material
                name: 'misc materials',
                meta: true,
                tick: loseMaterialsTick,
                hidden: true,
            });

            new G.Res({
                name: 'archaic building materials',
                desc: 'Materials such as a [stick] and a [stone] are used to build rudimentary structures.',
                icon: [2, 7, "c2"],
                meta: true,
                tick: loseMaterialsTick,
            });
            new G.Res({
                name: 'stone',
                desc: 'Just a simple little rock. Found regularly when foraging, and even more commonly when digging, mining or quarrying.',
                icon: [2, 6, "c2"],
                partOf: 'archaic building materials',
                category: 'build',
            });
            new G.Res({
                name: 'stick',
                desc: 'A short but sturdy branch. Obtained when foraging or when chopping a tree.',
                icon: [0, 6, "c2"],
                partOf: 'archaic building materials',
                category: 'build',
            });
            new G.Res({
                name: 'limestone',
                desc: 'A fairly soft mineral. Can be foraged from some places, but is more commonly extracted while mining or quarrying.',
                icon: [6, 8, "c2"],
                partOf: 'archaic building materials',
                category: 'build',
            });
            new G.Res({
                name: 'mire',
                desc: 'Dirt saturated with water that is found often when foraging or digging.',
                icon: [0, 7, "c2"],
                partOf: 'archaic building materials',
                category: 'build',
            });

            new G.Res({
                name: 'basic building materials',
                desc: 'Processed materials such as [cut stone,Stone blocks], [brick]s and [lumber], used to build basic structures belong here.',
                icon: [2, 8, "c2"],
                meta: true,
                tick: loseMaterialsTick,
            });
            new G.Res({
                name: 'cut stone',
                desc: '[stone]s carved into blocks for easier hauling and building.',
                icon: [0, 8, "c2"],
                partOf: 'basic building materials',
                category: 'build',
            });
            new G.Res({
                name: 'log',
                desc: 'Chopped wood that can be directly used in construction, but can also be processed into [lumber].',
                icon: [1, 6, "c2"],
                partOf: 'basic building materials',
                category: 'build',
            });
            new G.Res({
                name: 'shroom stem',
                desc: 'Chopped [shroom stem]s can be used as a building material, but cannot be processed into goods like [lumber] and may not be burned for [coal]. Quite a strange material indeed!',
                icon: [0, 10, "c2"],
                partOf: 'basic building materials',
                category: 'build',
            });
            new G.Res({
                name: 'lumber',
                desc: '[log]s that have been processed into planks, making them a rather adaptable and resilient building material.',
                icon: [1, 8, "c2"],
                partOf: 'basic building materials',
                category: 'build',
            });
            new G.Res({
                name: 'clay',
                desc: 'Found by digging in damp soil; can be baked into [brick]s.',
                icon: [1, 7, "c2"],
                partOf: 'misc materials',
                category: 'build',
            });
            new G.Res({
                name: 'brick',
                desc: 'Made from fired [clay] and can be used to construct solid walls efficiently.',
                icon: [3, 8, "c2"],
                partOf: 'basic building materials',
                category: 'build',
            });

            new G.Res({
                name: 'advanced building materials',
                desc: 'Building materials such as [concrete] and [glass] are often used to build advanced structures.',
                icon: [3, 9, "c2"],
                meta: true,
                tick: loseMaterialsTick,
            });
            new G.Res({
                name: 'sand',
                desc: 'Easily harvested from deserts and beaches and can be processed into [glass].',
                icon: [4, 9, "c2"],
                partOf: 'misc materials',
                category: 'build',
            });
            new G.Res({
                name: 'glass',
                desc: 'Obtained by melting [sand]; can be used to construct windows, which are part of most advanced buildings.',
                icon: [4, 8, "c2"],
                partOf: 'advanced building materials',
                category: 'build',
            });
            new G.Res({
                name: 'concrete',
                desc: 'An exceptionally sturdy construction material, made by mixing [limestone] with [water] and letting it set.',
                icon: [5, 8, "c2"],
                partOf: 'advanced building materials',
                category: 'build',
            });

            new G.Res({
                name: 'precious building materials',
                desc: 'Building materials such as [fazble], used to build monuments.',
                icon: [16, 8, "c2"],
                meta: true,
                tick: loseMaterialsTick,
            });
            new G.Res({
                name: 'fazble',
                desc: 'A construction material prized for its decorative properties. It can also be employed in sculptures.',
                icon: [7, 8, "c2"],
                partOf: 'precious building materials',
                category: 'build',
            });
            new G.Res({
                name: 'greenold block',
                desc: 'A valuable, if unreliable construction material.',
                icon: [14, 8, "c2"],
                partOf: 'precious building materials',
                category: 'build',
            });
            new G.Res({
                name: 'gem block',
                desc: 'A precious building material used only for the finest monuments. Quite nice to look at too.',
                icon: [choose([17, 18, 19]), 8, "c2"],//i can't pick
                partOf: 'precious building materials',
                category: 'build',
            });

            new G.Res({
                name: 'olivnum ore',
                desc: 'Ore that can be processed into [soft metal ingot]s. This ore is like a sort of copper...but it is less durable.',
                icon: [9, 8, "c2"],
                partOf: 'misc materials',
                category: 'build',
            });
            new G.Res({
                name: 'berrylium ore',
                desc: 'Ore that can be processed into [soft metal ingot]s. However, this ore is very fragile, so to make a solid ingot you need way more of this ore. It is said that this ore smells like fresh berries, but sadly these are not edible at all and is as dangerous as consuming lead.',
                icon: [13, 9, "c2"],
                partOf: 'misc materials',
                category: 'build',
            });
            new G.Res({
                name: 'iron ore',
                desc: 'Ore that can be processed into [hard metal ingot]s.',
                icon: [10, 8, "c2"],
                partOf: 'misc materials',
                category: 'build',
            });
            new G.Res({
                name: 'greenold ore',
                desc: 'Ore that can be processed into [precious metal ingot]s. For elves, it looks like uranium but is green and has some properties of gold.',
                icon: [11, 8, "c2"],
                partOf: 'misc materials',
                category: 'build',
            });
            new G.Res({
                name: 'tin ore',
                desc: 'Ore that can be processed into [soft metal ingot]s.',
                icon: [13, 8, "c2"],
                partOf: 'misc materials',
                category: 'build',
            });

            new G.Res({
                name: 'gems',
                desc: 'Shiny, valuable minerals from deep under the earth.',
                icon: [7, 9, "c2"],
                partOf: 'misc materials',
                category: 'build',
            });

            new G.Res({
                name: 'coal',
                desc: 'Extracted from mines, coal provides a good source of energy and can be used in alloying.',
                icon: [12, 8, "c2"],
                partOf: 'misc materials',
                category: 'build',
            });

            new G.Res({
                name: 'soft metal ingot',
                desc: 'Soft, malleable metal that can be used to make basic [metal tools].//Includes tin, berrylium, and olivnum.',
                icon: [9, 9, "c2"],
                partOf: 'misc materials',
                category: 'build',
            });
            new G.Res({
                name: 'hard metal ingot',
                desc: 'Tough, durable metal that can be used to craft [metal tools] and weapons.//Includes iron and bronze.',
                icon: [10, 9, "c2"],
                partOf: 'misc materials',
                category: 'build',
            });
            new G.Res({
                name: 'strong metal ingot',
                desc: 'Solid metal possessing high tensile strength.//Includes steel.',
                icon: [12, 9, "c2"],
                partOf: 'misc materials',
                category: 'build',
            });
            new G.Res({
                name: 'precious metal ingot',
                desc: 'Metal with little industrial usefulness but imbued with valuable aesthetics.//Includes [greenold ore,Greenold].',
                icon: [11, 9, "c2"],
                partOf: 'misc materials',
                category: 'build',
            });

            new G.Res({
                name: 'knapped tools',
                desc: 'Rudimentary tools made by hitting [stone]s, usually flint, until their edges are sharp enough.' + numbersInfo,
                icon: [0, 9, "c2"],
                displayUsed: true,
                category: 'gear',
            });
            new G.Res({
                name: 'stone tools',
                desc: 'Simple tools made of [stone]s and [stick]s for a variety of purposes - hammering, cutting, piercing, crushing.' + numbersInfo,
                icon: [1, 9, "c2"],
                displayUsed: true,
                category: 'gear',
            });
            new G.Res({
                name: 'metal tools',
                desc: 'Solid, durable tools made of metal and wood.' + numbersInfo,
                icon: [2, 9, "c2"],
                displayUsed: true,
                category: 'gear',
            });

            new G.Res({
                name: 'stone weapons',
                desc: 'Simple weapons made of [stone]s and [stick]s.' + numbersInfo,
                icon: [5, 9, "c2"],
                displayUsed: true,
                category: 'gear',
            });
            new G.Res({
                name: 'bow',
                desc: 'A weapon made of [stick,Wood] that fires [stone]-tipped arrows at a distance.' + numbersInfo,
                icon: [6, 9, "c2"],
                displayUsed: true,
                category: 'gear',
            });

            var clothesInfo = '//Your elves automatically wear the highest-quality clothing available, moving on to the next type if there isn\'t enough.';
            new G.Res({
                name: 'primitive clothes',
                desc: 'Made out of rudimentary materials such as [hide]s or [herbs].//Each [population,Elf] wearing clothing is slightly happier and healthier.' + clothesInfo,
                icon: [15, 7, "c2"],
                category: 'gear',
                tick: function (me, tick) {
                    var toSpoil = me.amount * 0.005;
                    var spent = G.lose(me.name, randomFloor(toSpoil), 'decay');
                },
            });
            new G.Res({
                name: 'basic clothes',
                desc: 'Sewn together from [leather] or textile fiber.//Each [population,Elf] wearing clothing is slightly happier and healthier.' + clothesInfo,
                icon: [choose([16, 17]), 7, "c2"],
                category: 'gear',
                tick: function (me, tick) {
                    var toSpoil = me.amount * 0.002;
                    var spent = G.lose(me.name, randomFloor(toSpoil), 'decay');
                },
            });

            new G.Res({
                name: 'bone',
                desc: 'Obtained from the corpse of an animal, or discarded from eating flesh.',
                icon: [8, 7, "c2"],
                partOf: 'misc materials',
                category: 'build',
            });
            new G.Res({
                name: 'hide',
                desc: 'A pelt obtained by slicing the skin off a dead animal.',
                icon: [9, 7, "c2"],
                partOf: 'misc materials',
                category: 'build',
            });
            new G.Res({
                name: 'leather',
                desc: '[hide] that has been cured and worked to make it strong and durable for a variety of uses.',
                icon: [10, 7, "c2"],
                partOf: 'misc materials',
                category: 'build',
            });
            new G.Res({
                name: 'statuette',
                desc: 'A small carved statue that was rudimentarily carved from [stone] or [bone].//May be used up over time, creating [gentility].',
                icon: [8, 9, "c2"],
                partOf: 'misc materials',
                category: 'misc',
                tick: function (me, tick) {
                    var toSpoil = me.amount * 0.01;
                    var spent = G.lose(me.name, randomFloor(toSpoil), 'decay');
                    G.pseudoGather(G.getRes('gentility'), randomFloor(spent));
                },
            });
            new G.Res({
                name: 'salt',
                desc: 'Gives flavor to [food], rendering it more enjoyable to eat; may also be used to preserve food and make it last longer.',
                icon: [11, 7, "c2"],
                partOf: 'misc materials',
                category: 'misc',
            });
            new G.Res({
                name: 'ice',
                desc: 'Can be used to preserve 1 piece of [food] longer.//Will also melt into [water] eventually.',
                icon: [12, 7, "c2"],
                partOf: 'misc materials',
                category: 'misc',
                tick: function (me, tick) {
                    var toSpoil = me.amount * 0.01;
                    var spent = G.lose(me.name, randomFloor(toSpoil), 'decay');
                    G.gain('water', randomFloor(spent * 10), 'ice melting');
                },
            });

            new G.Res({
                name: 'basket',
                desc: 'Each basket stores 10 [food].//Will decay over time.',
                icon: [14, 7, "c2"],
                category: 'misc',
                tick: function (me, tick) {
                    var toSpoil = me.amount * 0.005;
                    var spent = G.lose(me.name, randomFloor(toSpoil), 'decay');
                },
            });
            new G.Res({
                name: 'pot',
                desc: 'Each pot stores 25 [food].//Will itself decay gradually over time.',
                icon: [13, 5, "c2"],
                category: 'misc',
                tick: function (me, tick) {
                    var toSpoil = me.amount * 0.0005;
                    var spent = G.lose(me.name, randomFloor(toSpoil), 'decay');
                },
            });

            new G.Res({
                name: 'fire pit',
                desc: 'Keeps your tribe warm; each fire reduces illness for 5 elves.//Used by some types of crafting.//Will burn out over time.',
                icon: [13, 7, "c2"],
                category: 'misc',
                tick: function (me, tick) {
                    var toSpoil = me.amount * 0.01;
                    var spent = G.lose(me.name, randomFloor(toSpoil), 'decay');
                },
            });


            var limitDesc = function (limit) { return 'It is limited by your ' + limit + '; the closer to the limit, the slower it is to produce more.'; };
            var researchGetDisplayAmount = function () {
                var limit = G.getDict(this.limit).displayedAmount;
                return B(this.displayedAmount) + '<wbr>/' + B(limit);
            };
            var researchWhenGathered = function (me, amount) {
                var limit = G.getDict(this.limit).amount;
                if (limit > 0) {
                    var mult = 1;
                    if (G.year < 5) mult = 1.25;//faster research the first 5 years
                    me.amount += randomFloor(Math.pow(1 - me.amount / limit, 2) * (Math.random() * amount * me.mult * mult));
                    me.amount = Math.min(me.amount, limit);
                }
            };

            new G.Res({
                name: 'discernment',
                desc: '[discernment] represents your elves\'s ideas and random sparks of intuition.//' + limitDesc('[wisdom]') + '//Many technologies require this to be researched.',
                icon: [8, 4, "c2"],
                category: 'main',
                colorGood: '#d4af37',
                limit: 'wisdom',
                getDisplayAmount: researchGetDisplayAmount,
                whenGathered: researchWhenGathered,
            });
            new G.Res({
                name: 'wisdom',
                hidden: true,
                icon: [8, 5, "c2"],
                fractional: true,
                category: 'main',
            });
            new G.Res({
                name: 'creativity',
                desc: '[creativity] represents your elves\'s sparks of ideas.//' + limitDesc('[quick-wittinity]') + '//Most technologies require [creativity] to be researched.',
                icon: [9, 5, "c2"],
                colorGood: '#2cd466',
                category: 'main',
                limit: 'quick-wittinity',
                getDisplayAmount: researchGetDisplayAmount,
                whenGathered: researchWhenGathered,
            });
            new G.Res({
                name: 'quick-wittinity',
                hidden: true,
                fractional: true,
                icon: [9, 4, "c2"],
                category: 'main',
            });

            new G.Res({
                name: 'science',
                desc: '[science] is the product of experiments and discoveries.//' + limitDesc('[education]') + '//A variety of advanced technologies will require [science] to be researched.',
                icon: [6, 4, "c2"],
                category: 'main',
                colorGood: '#d4af37',
                limit: 'education',
                getDisplayAmount: researchGetDisplayAmount,
                whenGathered: researchWhenGathered,
            });
            new G.Res({
                name: 'education',
                hidden: true,
                icon: [6, 5, "c2"],
                category: 'main',
            });

            new G.Res({
                name: 'gentility',
                desc: '[gentility] is produced when your elves create beautiful and thought-provoking things.//' + limitDesc('[inspiration]') + '//[gentility] is used to develop cultural traits.',
                icon: [10, 4, "c2"],
                colorGood: '#d4af37',
                category: 'main',
                limit: 'inspiration',
                getDisplayAmount: researchGetDisplayAmount,
                whenGathered: researchWhenGathered,
            });
            new G.Res({
                name: 'inspiration',
                hidden: true,
                icon: [10, 5, "c2"],
                fractional: true,
                category: 'main',
            });

            new G.Res({
                name: 'faith',
                desc: '[faith] derives from all things divine, from meditation to sacrifices.//' + limitDesc('[spirituality]') + '//Some cultural traits and technologies depend on [faith].',
                icon: [7, 4, "c2"],
                colorGood: '#d4af37',
                category: 'main',
                limit: 'spirituality',
                getDisplayAmount: researchGetDisplayAmount,
                whenGathered: researchWhenGathered,
            });
            new G.Res({
                name: 'spirituality',
                hidden: true,
                icon: [7, 5, "c2"],
                fractional: true,
                category: 'main',
            });

            new G.Res({
                name: 'influence',
                desc: '[influence] is generated by power structures.//You also get 1 influence point at the start of every year.//' + limitDesc('[authority]') + '//Influence is required to enact most policies or remove traits.',
                icon: [11, 4, "c2"],
                category: 'main',
                colorGood: '#d4af37',
                limit: 'authority',
                startWith: 5,
                getDisplayAmount: researchGetDisplayAmount,
                whenGathered: researchWhenGathered,
            });
            new G.Res({
                name: 'authority',
                hidden: true,
                icon: [11, 5, "c2"],
                fractional: true,
                category: 'main',
            });
            new G.Res({
                name: 'battery of discoveries',
                desc: "The [battery of discoveries] is required to discover and research in this Universe. Can be charged by [dreamer]s. Further progress may allow your battery to overcap and reduce the amount needed to roll/reroll new technology choices.",
                icon: [4, 0, "c2"],
                colorGood: '#d4af37',
                visible: true,
                tick: function (me, tick) {
                    var batterylimit = (G.achievByName['the fortress'].won > 4 ? 25 : 0);
                    var overcap = G.getRes('battery of discoveries').amount - (100 + batterylimit) * upscaleBat;
                    if (G.getRes('battery of discoveries').amount > (100 + batterylimit) * upscaleBat) {
                        G.lose('battery of discoveries', overcap, 'overfilled battery');
                    }
                },
                getDisplayAmount: function () {
                    var batterylimit = (G.achievByName['the fortress'].won > 0 ? 25 : 0);
                    var amount = G.getRes('battery of discoveries').amount / upscaleBat;
                    if (amount > (100 + batterylimit)) amount = (100 + batterylimit);
                    return B(amount) + '%';
                },
                getIcon: function (me) {
                    var amount = me.amount;
                    if (amount >= 300 * upscaleBat) return [23, 0, "c2"];
                    if (amount >= 275 * upscaleBat) return [22, 0, "c2"];
                    if (amount >= 250 * upscaleBat) return [21, 0, "c2"];
                    if (amount >= 225 * upscaleBat) return [20, 0, "c2"];
                    if (amount >= 200 * upscaleBat) return [19, 0, "c2"];
                    if (amount >= 190 * upscaleBat) return [18, 0, "c2"];
                    if (amount >= 175 * upscaleBat) return [17, 0, "c2"];
                    if (amount >= 150 * upscaleBat) return [16, 0, "c2"];
                    if (amount >= 138 * upscaleBat) return [15, 0, "c2"];
                    if (amount >= 125 * upscaleBat) return [14, 0, "c2"];
                    if (amount >= 110 * upscaleBat) return [13, 0, "c2"];
                    if (amount >= 100 * upscaleBat) return [12, 0, "c2"];
                    if (amount >= 84 * upscaleBat) return [11, 0, "c2"];
                    if (amount >= 62 * upscaleBat) return [10, 0, "c2"];
                    if (amount >= 50 * upscaleBat) return [9, 0, "c2"];
                    if (amount >= 45 * upscaleBat) return [8, 0, "c2"];
                    else if (amount >= 36 * upscaleBat) return [7, 0, "c2"];
                    else if (amount >= 24 * upscaleBat) return [6, 0, "c2"];
                    else if (amount >= 12 * upscaleBat) return [5, 0, "c2"];
                    else return [4, 0, "c2"]
                },
            });
            new G.Res({
                name: 'pressure resistance',
                desc: 'This world is under <b>Pressure</b>. However, you can resist pressure. Pressure mechanics work similarily to [housing] but can only be increased by completing trials in both the human and elf civilizations.//You won\'t be able to have any more [population,elves] even if you will have more [housing] than [pressure resistance]. //Your current [pressure resistance,Resistance] level is <font color="lime"></font>, allowing you to have that many [population,elves] in your tribe. Complete some trials and achievements for [Victory point]s to increase the limit. You can also use special technologies to help out.',
                icon: [0, 11, "c2"],
                startWith: 500,
                tick: function (me, tick) {
                    if (G.resets > 0) me.amount = (9000 + G.getRes("extra pressure").amount) * (1 + (G.getRes("victory point").amount * 0.05));
                    else me.amount = 500;
                    me.used = G.getRes('population').amount;
                    if (me.used > 400) hidden = false;
                },
                getIcon: function (me) {
                    if (G.getRes('population').amount == 0) return [1, 11, "c2"];
                    else return [0, 11, "c2"];
                },
                getDisplayAmount: function (me) {
                    var amount = G.getRes('pressure resistance').amount;
                    if (G.getRes('population').amount == 0) return '-/-';
                    else if (G.getRes('pressure resistance').used / G.getRes('pressure resistance').amount > 0.9) return '<font color="#fbb">' + B(G.getRes('pressure resistance').used) + '/' + B(amount) + '</font>';
                    else if (G.getRes('pressure resistance').used / G.getRes('pressure resistance').amount <= 0.9 && G.getRes('pressure resistance').used / G.getRes('pressure resistance').amount > 0.5) return '<font color="#ff6">' + B(G.getRes('pressure resistance').used) + '/' + B(amount) + '</font>';
                    else return '<font color="lime">' + B(G.getRes('pressure resistance').used) + '/' + B(amount) + '</font>';
                },
                hidden: true
            });
            new G.Res({
                name: 'extra pressure'
            });
            //FLOWERS!,DYES!
            new G.Res({
                name: 'flowers',
                desc: 'Flowers gathered by a [florist] can be used in healing, and can also be used to make various [dyes].',
                icon: [18, 7, "c2"],
                partOf: 'misc materials',
                tick: function (me, tick) {
                    var toSpoil = me.amount * 0.02;
                    var spent = G.lose(me.name, randomFloor(toSpoil), 'decay');
                },
                visible: false,
                category: 'misc'
            });
            new G.Res({
                name: 'dyes',
                desc: 'Can be used for various things. Mostly used by painters or to add up some colour to something.',
                icon: [1, 10, "c2"],
                partOf: 'misc materials',
                category: 'misc',
                tick: function (me, tick) {
                    var toSpoil = me.amount * 0.01;
                    var spent = G.lose(me.name, randomFloor(toSpoil), 'decay');
                },
            });
            new G.Res({
                name: 'arrow',
                desc: 'A piece of ammo for ranged [bow]s. //Required to keep units that use this stuff working properly.',
                icon: [19, 7, "c2"],
                category: 'gear',
            });
            new G.Res({
                name: 'wandererW',
                icon: [2, 2, "c2"],
                hidden: true,
            });
            new G.Res({
                name: 'scoutW',
                icon: [24, 3, "c2"],
                hidden: true,
            });
            new G.Res({
                name: 'druid',
                icon: [28, 2, "c2"],
                hidden: true,
            });
            new G.Res({
                name: 'painting',
                desc: 'Made by [painter]s. Your [population,elves] are proud to see it. Provides [gentility] upon decay.',
                icon: [2, 10, "c2"],
                category: 'misc',
                tick: function (me, tick) {
                    var toSpoil = me.amount * 0.0001;
                    var spent = G.lose(me.name, randomFloor(toSpoil), 'decay');
                    G.pseudoGather(G.getRes('gentility'), randomFloor(spent * 2));
                },
            });
            new G.Res({
                name: 'relic',
                desc: '[relic]s can be found underground and analyzed by [archaeologist]s. These are leftovers of civilizations you ruled in previous ascensions or previous generations in current one. Each [relic] has its own rarity, and any [relic] with a rarity above or equal to <font color="#8888ff">Rare</font> will be counted here. Just note that they slowly decay and are mainly used for providing various essentials.',
                icon: [3, 10, "c2"],
                tick: function (me, tick) {
                    var toSpoil = me.amount * 0.0001;
                    var spent = G.lose(me.name, randomFloor(toSpoil), 'decay');
                },
            });
            new G.Res({
                name: 'heating capability',
                desc: 'Each [heating capability] unit allows to keep moderate temperature for one unit.//The number on the left is how much capability is occupied, while the number on the right is how much you have in total.',
                icon: [15, 5, "c2"],
                tick: function (me, tick) {
                    var amount = 0;
                    amount += G.getRes('fire pit').amount * 5;
                    me.amount = amount;
                    if (me.amount > 0) me.hidden = false;
                },
                getDisplayAmount: function () {
                    return B(Math.min(this.displayedAmount, G.getRes('population').displayedAmount)) + '<wbr>/' + B(this.displayedAmount);
                },
                hidden: true,
            });
            new G.Res({
                name: 'clay statuette',
                desc: 'A small carved statue that was rudimentarily carved from [clay] and hardened by using [fire pit,Fire].//May be used up over time, creating [gentility].',
                icon: [16, 9, "c2"],
                partOf: 'misc materials',
                category: 'misc',
                tick: function (me, tick) {
                    var toSpoil = me.amount * 0.03;
                    var spent = G.lose(me.name, randomFloor(toSpoil), 'decay');
                    G.pseudoGather(G.getRes('gentility'), randomFloor(spent) / 2);
                },
            });
            new G.Res({
                name: 'metal weapons',
                desc: 'Solid, durable weapons made of metal and wood. One of the many parts of a soldier\'s equipment.' + numbersInfo,
                icon: [15, 11, "magixmod"],
                displayUsed: true,
                category: 'gear'
            });
            new G.Res({
                name: 'armor set',
                desc: 'A solid, durable [armor set] made for soldiers can protect against common threats like ambushes.' + numbersInfo,
                icon: [16, 11, "magixmod"],
                displayUsed: true,
                category: 'gear'
            });
            new G.Res({
                name: 'wand',
                desc: 'Wands are the basis of wizardry, and of course are used by wizards. Without it, most spells cannot be casted.' + numbersInfo,
                icon: [6, 4, "magixmod"],
                category: 'gear',
                displayUsed: true,
            });

             G.disasters.forEach((d) => {
                new G.Res({
                    name: d.name+' year', //A resource that tells you the next predicted drought/frost/whatever
                    displayName: 'Next predicted '+d.name+' year',
                    desc: 'This number is the predicted year that the next '+d.name+' will be at. It may be off by a year or two or not happen in the first place!',
                    icon: d.icon,
                    category: 'demog',
                    getDisplayAmount: function () {
                        return (B(G.has('time measuring 1/2') && isFinite(G.getRes(d.name+' year').amount)) ? G.getRes(d.name+' year').amount : "???")
                    }
                })
            })

            /*=====================================================================================
            UNITS
            =======================================================================================*/
            G.unitCategories.push(
                { id: 'debug', name: '<font color="#27b631">Debug</font>' },
                { id: 'housing', name: 'Housing' },
                { id: 'civil', name: 'Civil' },
                { id: 'crafting', name: 'Crafting' },
                { id: 'production', name: 'Gathering' },
                { id: 'political', name: 'Political' },
                { id: 'discovery', name: 'Discovery' },
                { id: 'cultural', name: 'Cultural' },
                { id: 'spiritual', name: 'Spiritual' },
                { id: 'exploration', name: 'Exploration' },
                { id: 'storage', name: 'Storage' },
                { id: 'wonder', name: '<font color="#ab20a2">Wonders</font>' },
            );

            G.MODE_OFF = { name: 'Off', desc: 'The unit will not produce anything.', icon: [1, 0, "c2"] };

            var unitGetsConverted = function (into, min, max, message, single, plural) {
                //the unit is destroyed and its workers are converted into something else (such as wounded or dead)
                //min and max define the random percent of the unit's amount that gets wounded every day
                return function (me) {
                    var toChange = Math.min(1, Math.random() * (max - min) + min);
                    toChange = randomFloor(me.amount * toChange);
                    var workers = 0;
                    if (me.mode && me.mode.use && me.mode.use['worker']) workers += me.mode.use['worker'];
                    if (me.unit.use['worker']) workers += me.unit.use['worker'];
                    if (me.unit.staff['worker']) workers += me.unit.staff['worker'];
                    if (toChange > 0 && workers > 0) {
                        var elvesToChange = toChange * workers;
                        var changed = 0;
                        if (true) { var i = 'adult'; var n = G.lose(i, elvesToChange); changed += n; }
                        if (changed < elvesToChange && G.checkPolicy('elder workforce') == 'on') { var i = 'elder'; var n = G.lose(i, elvesToChange); changed += n; }
                        if (changed < elvesToChange && G.checkPolicy('child workforce') == 'on') { var i = 'child'; var n = G.lose(i, elvesToChange); changed += n; }

                        for (var i in into) {
                            G.gain(i, randomFloor(changed * into[i]), me.unit.displayName + ' accident');
                        }
                        changed /= workers;
                        G.wasteUnit(me, changed);

                        if (changed > 0) G.Message({
                            type: 'bad', mergeId: 'unitGotConverted-' + me.unit.name, textFunc: function (args) {
                                return args.str.replaceAll('\\[elves\\]', (args.n == 1 ? args.single : args.plural)).replaceAll('\\[X\\]', B(args.n));
                            }, args: { n: changed, str: message, single: single, plural: plural }, icon: me.unit.icon
                        });
                    }
                }
            }
            new G.Unit({
                name: 'gatherer',
                startWith: 4,
                desc: '@forages for basic [food], [water] and [archaic building materials,Various interesting things]<>A vital part of an early tribe, [gatherer]s venture in the wilderness to gather food, wood, and other things of note.',
                icon: [0, 2, "c2"],
                cost: {},
                use: { 'worker': 1 },
                //upkeep:{'food':0.2},
                //alternateUpkeep:{'food':'spoiled food'},
                effects: [
                    { type: 'gather', context: 'gather', amount: 1.25, max: 2.5 },//,multMax:{'leather pouches':1.1}//TODO
                    { type: 'gather', context: 'hunt', amount: 0.1, max: 0.2, chance: 0.1, req: { 'carcass-looting': true } },
                    //{type:'gather',context:'gather',what:{'water':1,'muddy water':1},amount:1,max:3,req:{'gathering focus':'water'}},
                    { type: 'gather', context: 'gather', what: { 'water': 1, 'muddy water': 1 }, amount: 1, max: 3 },
                    { type: 'gather', context: 'gather', what: { 'herbs': 0.1 }, amount: 1, max: 1, req: { 'herbalism': true } },
                    { type: 'gather', context: 'gather', what: { 'herbs': 0.45, 'fruit': 0.45 }, amount: 1, max: 1, req: { 'plant lore': true } },
                    //Random trends
                    { type: 'gather', context: 'gather', what: { 'stick': 0.035 }, req: { 'gtt1': true } },
                    { type: 'gather', context: 'gather', what: { 'water': 0.035 }, req: { 'gtt2': true } },
                    //creative foraging
                    { type: 'explore', explored: 0.0065, unexplored: 0, req: { 'creative foraging': 'on' }, chance: 1 / 5 },
                    { type: 'function', func: unitGetsConverted({}, 0.001, 0.03, '[X] [elves] lost in the wilderness while foraging', 'gatherer got', 'gatherers got'), chance: 1 / 400 },
                    { type: 'function', func: unitGetsConverted({}, 0.001, 0.03, '[X] [elves] lost in the wilderness while exploring land', 'gatherer got', 'gatherers got'), chance: 1 / 35, req: { 'creative foraging': 'on' } },
                    { type: 'addFree', what: { 'worker': 0.08 }, req: { 'scavenging': true } },
                    { type: 'mult', value: 1.1, req: { 'harvest rituals': 'on' } },
                    { type: 'mult', value: 0.2, req: { 'eat on gather': 'on' } },
                ],
                req: { 'tribalism': true },
                category: 'production',
                priority: 10,
            });

            new G.Unit({
                name: 'dreamer',
                desc: '@generates [discernment] and [creativity] every now and then, which you can use to research early technologies<>A [dreamer] spends their time observing, thinking, and wondering why things are the way they are.',
                icon: [1, 2, "c2"],
                cost: {},
                use: { 'worker': 1 },
                gizmos: true,
                modes: {
                    'disc&creat': { name: 'Gather discernment and creativity', icon: [8, 4, "c2"], desc: 'Gather [discernment] and [creativity].' },
                    'chargebattery': { name: 'Charge battery of discoveries', icon: [4, 0, "c2"], desc: 'This dreamer will charge your [battery of discoveries]. It is required to roll or reroll technology choices, and to get [policies].' },
                },
                effects: [
                    { type: 'gather', what: { 'discernment': 0.075 }, mode: 'disc&creat' },
                    { type: 'gather', what: { 'creativity': 0.015 }, mode: 'disc&creat', req: { 'developed creativity': false } },
                    { type: 'gather', what: { 'discernment': 0.0375 }, mode: 'disc&creat', req: { 'developed creativity': true } },
                    { type: 'gather', what: { 'battery of discoveries': 0.25 }, mode: 'chargebattery' },
                    { type: 'addFree', what: { 'worker': 0.08 }, req: { 'dreaming': true } },
                    { type: 'mult', value: 0.25, req: { 'upscale': true }, mode: 'chargebattery' },
                    { type: 'gather', what: { 'discernment': 0.05, 'creativity': 0.01 }, req: { 'symbolism': true }, mode: 'disc&creat' },
                    { type: 'gather', what: { 'discernment': 0.01, 'creativity': 0.002 }, req: { 'philosophy': true }, mode: 'disc&creat' },
                    { type: 'mult', value: 1.15, req: { 'wisdom rituals': 'on' } }
                ],
                req: { 'speech': true },
                category: 'discovery',
                priority: 5,
            });

            new G.Unit({
                name: 'storyteller',
                desc: '@generates [gentility] every now and then<>[storyteller]s gather the tribe around at nightfall to tell the tales of their ancestors.',
                icon: [14, 2, "c2"],
                cost: {},
                use: { 'worker': 1 },
                upkeep: { 'food': 0.1 },
                limitPer: { 'population': 10 },
                effects: [
                    { type: 'gather', what: { 'gentility': 0.075 } },
                    { type: 'gather', what: { 'gentility': 0.00375 }, req: { 'symbolism': true } },
                    { type: 'mult', value: 1.1, req: { 'artistic thinking': true } },
                    { type: 'mult', value: 1.15, req: { 'wisdom rituals': 'on' } }
                ],
                req: { 'oral tradition 2/2': true },
                category: 'cultural',
            });
            new G.Unit({
                name: 'painter',
                desc: '@generates [gentility] by using [dyes], and makes [painting]s slowly. Requires the [artistic thinking] trait.',
                icon: [31, 2, "c2"],
                cost: {},
                use: { 'worker': 1 },
                upkeep: { 'food': 0.1, 'dyes': 4 },
                limitPer: { 'population': 50 },
                effects: [
                    { type: 'gather', what: { 'gentility': 0.1 } },
                    { type: 'gather', what: { 'painting': 0.004 } },
                    { type: 'gather', what: { 'gentility': 0.04 }, req: { 'symbolism': true } },
                    { type: 'mult', value: 1.3, req: { 'artistic thinking': true } },
                    { type: 'mult', value: 1.2, req: { 'wisdom rituals': 'on' } },
                ],
                req: { 'oral tradition 2/2': true, 'artistic thinking': true, 'a power of the fortress': true },
                category: 'cultural',
            });
            new G.Unit({
                name: 'artisan',
                desc: '@starts with the ability to turn [stone]s into [knapped tools]@gains more modes as technology progresses<>An [artisan] dedicates their life to crafting various little objects by hand.//Note: artisans will gain new modes of operation when you discover new technologies, such as crafting stone tools; you can press the button with 3 dots on the side of this unit to switch between those modes.',
                icon: [6, 2, "c2"],
                cost: {},
                use: { 'worker': 1 },
                upkeep: { 'food': 0.1 },
                gizmos: true,
                modes: {
                    'knap': { name: 'Knap flint', icon: [0, 9, "c2"], desc: 'Turn [stone]s into [knapped tools].' },
                    'knap bone': { name: 'Knap bone', icon: [0, 9, "c2", 8, 7, "c2"], desc: 'Turn [bone]s into [knapped tools].', req: { 'bone-working': true } },
                    'stone tools': { name: 'Craft stone tools', icon: [1, 9, "c2"], desc: 'Turn [stick]s and [stone]s into [stone tools].', req: { 'tool-making': true }, use: { 'knapped tools': 1 } },
                    'stone weapons': { name: 'Craft stone weapons', icon: [5, 9, "c2"], desc: 'Turn [stone]s and [stick]s into [stone weapons].', req: { 'spears': true }, use: { 'knapped tools': 1 } },
                    'bows': { name: 'Craft bows', icon: [6, 9, "c2"], desc: 'Turn [stone]s and [stick]s into [bow]s.', req: { 'bows': true }, use: { 'stone tools': 1 } },
                    'arrows': { name: 'Craft arrows', icon: [19, 7, "c2"], desc: 'Turn [lumber] and [stone]s into [bow]s.', req: { 'bows': true }, use: { 'stone tools': 1 } },
                    'baskets': { name: 'Weave baskets', icon: [14, 7, "c2"], desc: 'Turn [stick]s into [basket]s.', req: { 'basket-weaving': true }, use: { 'knapped tools': 1 } },
                    'dyes': { name: 'Craft dyes', desc: 'Your artisan will convert [flowers] into [dyes].', req: { 'plant lore II': true, 'a power of the fortress': true }, icon: [1, 10, "c2"] },
                },
                effects: [
                    { type: 'convert', from: { 'stone': 1 }, into: { 'knapped tools': 1 }, every: 5, mode: 'knap' },
                    { type: 'convert', from: { 'bone': 1 }, into: { 'knapped tools': 1 }, every: 5, mode: 'knap bone' },
                    { type: 'convert', from: { 'stick': 1, 'stone': 1 }, into: { 'stone tools': 1 }, every: 8, mode: 'stone tools' },
                    { type: 'convert', from: { 'stick': 1, 'stone': 1 }, into: { 'stone weapons': 1 }, every: 8, mode: 'stone weapons' },
                    { type: 'convert', from: { 'lumber': 2, 'stone': 10 }, into: { 'arrow': 10 }, every: 8, mode: 'arrows' },
                    { type: 'convert', from: { 'stick': 1, 'stone': 1 }, into: { 'bow': 1 }, every: 10, mode: 'bows' },
                    { type: 'convert', from: { 'stick': 15 }, into: { 'basket': 1 }, every: 10, mode: 'baskets' },
                    { type: 'convert', from: { 'flowers': 12 }, into: { 'dyes': 4 }, every: 7, mode: 'dyes' },
                    //Trends
                    { type: 'convert', from: { 'stone': 0.05 }, into: { 'statuette': 0.05 }, every: 5, mode: 'stone statuettes', req: { 'cart1': true } },
                    { type: 'convert', from: { 'log': 0.05 }, into: { 'wooden statuette': 0.05 }, every: 5, mode: 'wood statuettes', req: { 'cart2': true } },
                    { type: 'mult', value: 1.1, req: { 'ground tools': true } }
                ],
                req: { 'stone-knapping': true },
                category: 'crafting',
            });

            new G.Unit({
                name: 'carver',
                desc: '@starts with the ability to turn [stone]s or [bone]s into [statuette]s@gains more modes as technology progresses<>[carver]s use fine hand-crafting to produce goods out of wood, stone and bone.',
                icon: [21, 2, "c2"],
                cost: {},
                use: { 'worker': 1 },
                upkeep: { 'food': 0.1 },
                gizmos: true,
                modes: {
                    'stone statuettes': { name: 'Carve stone statuettes', icon: [8, 9, "c2"], desc: 'Turn 10 [stone]s into [statuette]s.', use: { 'knapped tools': 1 } },
                    'bone statuettes': { name: 'Carve bone statuettes', icon: [8, 9, "c2"], desc: 'Turn 2 [bone]s into [statuette]s.', use: { 'knapped tools': 1 } },
                    'clay statuettes': { name: 'Carve clay statuettes', icon: [16, 9, "c2"], desc: 'Your carver will now use carve statuettes using 10 pieces of [clay] for each.', use: { 'knapped tools': 1 } },
                    'cut stone': { name: 'Cut stones', icon: [0, 8, "c2"], desc: 'Slowly turn 10 [stone]s into 1 [cut stone].', req: { 'masonry': true }, use: { 'stone tools': 1 } },
                    'smash cut stone': { name: 'Smash stone blocks', icon: [2, 6, "c2"], desc: 'Turn [cut stone]s into 9 [stone]s each.', req: { 'quarrying': true }, use: { 'stone tools': 1 } },
                    'gem blocks': { name: 'Carve gem blocks', icon: [7, 9, "c2"], desc: 'Slowly turn 10 [gems] into 1 [gem block].', req: { 'gem-cutting': true }, use: { 'stone tools': 1 } }
                },
                effects: [
                    { type: 'convert', from: { 'stone': 1 }, into: { 'statuette': 1 }, every: 5, mode: 'stone statuettes' },
                    { type: 'convert', from: { 'bone': 2 }, into: { 'statuette': 1 }, every: 5, mode: 'bone statuettes' },
                    { type: 'convert', from: { 'stone': 10 }, into: { 'cut stone': 1 }, every: 15, mode: 'cut stone' },
                    { type: 'convert', from: { 'cut stone': 1 }, into: { 'stone': 9 }, every: 5, mode: 'smash cut stone' },
                    { type: 'convert', from: { 'gems': 10 }, into: { 'gem block': 1 }, every: 15, mode: 'gem blocks' },
                    //Trends
                    { type: 'convert', from: { 'stone': 0.05 }, into: { 'statuette': 0.05 }, every: 5, mode: 'stone statuettes', req: { 'cart1': true } },
                    { type: 'convert', from: { 'log': 0.05 }, into: { 'wooden statuette': 0.05 }, every: 5, mode: 'wood statuettes', req: { 'cart2': true } },
                    { type: 'mult', value: 1.1, req: { 'ground tools': true } },
                ],
                req: { 'carving': true },
                category: 'crafting',
            });

            new G.Unit({
                name: 'clothier',
                desc: '@works with textiles, notably producing all kinds of clothes<>A [clothier] can make and use fabrics to keep your elves clothed, and therefore warm and happy.',
                icon: [19, 2, "c2"],
                cost: {},
                use: { 'worker': 1 },
                upkeep: { 'food': 0.2 },
                gizmos: true,
                modes: {
                    'sew grass clothing': { name: 'Sew grass clothing', icon: [15, 7, "c2"], desc: 'Craft [primitive clothes] from 30 [herbs] each.', use: { 'stone tools': 1 } },
                    'sew hide clothing': { name: 'Sew hide clothing', icon: [15, 7, "c2"], desc: 'Craft [primitive clothes] from 3 [hide]s each.', use: { 'stone tools': 1 } },
                    'weave fiber clothing': { name: 'Weave fiber clothing', icon: [16, 7, "c2"], desc: 'Craft [basic clothes] from 50 [herbs] each.', use: { 'stone tools': 1 }, req: { 'weaving': true } },//TODO : implement fibers
                    'weave leather clothing': { name: 'Weave leather clothing', icon: [16, 7, "c2"], desc: 'Craft [basic clothes] from 2 [leather] each.', use: { 'stone tools': 1 }, req: { 'weaving': true, 'leather-working': true } },
                    'make leather': { name: 'Make leather', icon: [10, 7, "c2"], desc: 'Produce [leather] from [hide]s, [water], [salt] and [log]s.', use: { 'stone tools': 1 }, req: { 'leather-working': true } },
                    'cheap make leather': { name: 'Make leather (cheap)', icon: [10, 7, "c2"], desc: 'Slowly produce [leather] from [hide]s, [muddy water] and [herbs].', use: { 'stone tools': 1 } },
                },
                effects: [
                    { type: 'mult', value: 1.08, req: { 'knitting': true } },
                    { type: 'convert', from: { 'hide': 3.5 }, into: { 'primitive clothes': 1 }, every: 12, mode: 'sew hide clothing' },
                    { type: 'convert', from: { 'herbs': 35 }, into: { 'primitive clothes': 1 }, every: 30, mode: 'sew grass clothing' },
                    { type: 'convert', from: { 'leather': 2 }, into: { 'basic clothes': 1 }, every: 12, mode: 'weave leather clothing' },
                    { type: 'convert', from: { 'herbs': 70 }, into: { 'basic clothes': 1 }, every: 30, mode: 'weave fiber clothing' },
                    { type: 'convert', from: { 'hide': 1, 'water': 5, 'salt': 1, 'log': 0.1 }, into: { 'leather': 1 }, every: 23, mode: 'make leather' },
                    { type: 'convert', from: { 'hide': 1, 'muddy water': 5, 'herbs': 12 }, into: { 'leather': 1 }, every: 40, mode: 'cheap make leather' },
                ],
                req: { 'sewing': true },
                category: 'crafting',
            });

            new G.Unit({
                name: 'hunter',
                desc: '@hunts wild animals for [meat], [bone]s and [hide]s@may get wounded<>[hunter]s go out into the wilderness and come back days later covered in blood and the meat of a fresh kill.',
                icon: [18, 2, "c2"],
                cost: {},
                use: { 'worker': 1 },
                upkeep: { 'food': 0.2 },
                gizmos: true,
                modes: {
                    'endurance hunting': { name: 'Endurance hunting', icon: [0, 6, "c2"], desc: 'Hunt animals by simply running after them until they get exhausted.//Slow and tedious.' },
                    'spear hunting': { name: 'Spear hunting', icon: [5, 9, "c2"], desc: 'Hunt animals with spears.', use: { 'stone weapons': 1 }, req: { 'spears': true } },
                    'bow hunting': { name: 'Bow hunting', icon: [6, 9, "c2"], desc: 'Hunt animals with bows.<>This mode has an upkeep of 6 [arrow]s.', use: { 'bow': 1, 'arrow': 6 }, req: { 'bows': true } },
                },
                effects: [
                    {
                        type: 'function', func: function (me) {
                            var arrowUpkeep = 6;
                            if (G.getRes('arrow').amount < arrowUpkeep * me.amount) {
                                G.killUnitByName('hunter', me.amount, 'bow hunting')
                            } else {
                                G.lose('arrow', arrowUpkeep, 'unit upkeep');
                            }
                        }, mode: 'bow hunting'
                    },
                    /*{type:'function',func:function(me){
                        var arrowUpkeep=6;
                        if (G.getRes('arrow').amount<arrowUpkeep*me.amount)
                        {
                            G.killUnitByName('hunter',me.amount,'crossbow hunting')
                        }else{
                            G.lose('arrow',arrowUpkeep,'unit upkeep');
                            return
                        }
                    },mode:'crossbow hunting'},*/
                    { type: 'gather', context: 'hunt', amount: 1, max: 4.25, mode: 'endurance hunting' },
                    //SPEARS
                    { type: 'gather', context: 'hunt', amount: 1.5, max: 4, mode: 'spear hunting', req: { 'aiming': false } },
                    { type: 'gather', context: 'hunt', amount: 2.5, max: 5, mode: 'spear hunting', req: { 'aiming': true } },
                    //BOW
                    { type: 'gather', context: 'hunt', amount: 0.7, max: 2, mode: 'bow hunting', req: { 'aiming': false } },
                    { type: 'gather', context: 'hunt', amount: 4, max: 5, mode: 'bow hunting', req: { 'aiming': true } },
                    { type: 'function', func: unitGetsConverted({ 'wounded': 1 }, 0.001, 0.03, '[X] [elves] wounded while hunting.', 'hunter was', 'hunters were'), chance: 1 / 30 },
                    //trends
                    { type: 'gather', context: 'hunt', what: { 'hide': 1 }, req: { 'htt1': true } },
                    { type: 'gather', context: 'hunt', what: { 'meat': 1 }, req: { 'htt2': true } },
                    { type: 'mult', value: 1.1, req: { 'harvest rituals': 'on' } },
                ],
                req: { 'hunting': true },
                category: 'production',
                priority: 5,
            });
            new G.Unit({
                name: 'fisher',
                desc: '@catches [seafood] from rivers and shores<>[fisher]s arm themselves with patience and whatever bait they can find, hoping to trick another creature into becoming dinner.',
                icon: [17, 2, "c2"],
                cost: {},
                use: { 'worker': 1 },
                //upkeep:{'food':0.2},
                gizmos: true,
                modes: {
                    'catch by hand': { name: 'Catch by hand', icon: [0, 6, "c2"], desc: 'Catch fish with nothing but bare hands.//Slow and tedious.' },
                    'spear fishing': { name: 'Spear fishing', icon: [5, 9, "c2"], desc: 'Catch fish with spears.', use: { 'stone weapons': 1 }, req: { 'spears': true } },
                    'line fishing': { name: 'Line fishing', icon: [7, 21, "magixmod"], desc: 'Catch fish with fishing poles.', use: { 'stone tools': 1, 'bugs': 1 }, req: { 'fishing hooks': true } },
                    //TODO : nets
                },
                effects: [
                    { type: 'gather', context: 'fish', amount: 1.5, max: 4.25, mode: 'catch by hand' },
                    //SPEARS
                    { type: 'gather', context: 'fish', amount: 1.5, max: 4, mode: 'spear fishing', req: { 'aiming': false } },
                    { type: 'gather', context: 'fish', amount: 2.5, max: 4, mode: 'spear fishing', req: { 'aiming': true } },
                    { type: 'gather', context: 'fish', amount: 2.5, max: 4, mode: 'line fishing' },
                    { type: 'mult', value: 1.1, req: { 'harvest rituals': 'on' } }
                ],
                req: { 'fishing': true },
                upkeep: { 'bugs': 0.5 },
                category: 'production',
                priority: 5,
            });
            new G.Unit({
                name: 'firekeeper',
                desc: '@creates [fire pit]s from fuel@gains more fuel types as technology progresses@handles other fire-related tasks<>The [firekeeper] is tasked with starting and maintaining fires to keep the tribe snug and cozy.',
                icon: [16, 2, "c2"],
                cost: {},
                use: { 'worker': 1 },
                staff: { 'knapped tools': 1 },
                upkeep: { 'food': 0.1 },
                gizmos: true,
                modes: {
                    'stick fires': { name: 'Start fires from sticks', icon: [0, 6, "c2", 13, 7, "c2"], desc: 'Craft [fire pit]s from 20 [stick]s each.' },
                    'cook': { name: 'Cook', icon: [6, 7, "c2", 13, 7, "c2"], desc: 'Turn [meat] and [seafood] into [cooked meat] and [cooked seafood] in the embers of [fire pit]s.', req: { 'cooking': true } },
                    'cure': { name: 'Cure & smoke', icon: [11, 6, "c2", 12, 6, "c2"], desc: 'Turn 1 [meat] or [seafood] into 2 [cured meat] or [cured seafood] using [salt] in the embers of [fire pit]s.', req: { 'curing': true } },
                },
                effects: [
                    { type: 'convert', from: { 'stick': 20 }, into: { 'fire pit': 1 }, every: 5, mode: 'stick fires' },
                    { type: 'convert', from: { 'meat': 1, 'fire pit': 0.01 }, into: { 'cooked meat': 1 }, every: 1, repeat: 5, mode: 'cook' },
                    { type: 'convert', from: { 'seafood': 1, 'fire pit': 0.01 }, into: { 'cooked seafood': 1 }, every: 1, repeat: 5, mode: 'cook' },
                    { type: 'convert', from: { 'meat': 1, 'salt': 0.5, 'fire pit': 0.01 }, into: { 'cured meat': 2 }, every: 1, repeat: 10, mode: 'cure' },
                    { type: 'convert', from: { 'seafood': 1, 'salt': 0.5, 'fire pit': 0.01 }, into: { 'cured seafood': 2 }, every: 1, repeat: 10, mode: 'cure' },
                ],
                req: { 'fire-making': true },
                category: 'crafting',
                priority: 3,
            });

            new G.Unit({
                name: 'potter',
                desc: '@uses [clay] or [mire] to craft goods<>The [potter] shapes their clay with great care, for it might mean the difference between fresh water making it to their home safely - or spilling uselessly into the dirt.',
                icon: [20, 2, "c2"],
                cost: {},
                use: { 'worker': 1 },
                staff: { 'stone tools': 1 },
                upkeep: { 'food': 0.2 },
                gizmos: true,
                modes: {
                    'clay pots': { name: 'Craft pots out of clay', icon: [1, 7, "c2", 13, 5, "c2"], desc: 'Craft [pot]s from 3 [clay] each; requires [fire pit]s.' },
                    'mire pots': { name: 'Craft pots out of mire', icon: [0, 7, "c2", 13, 5, "c2"], desc: 'Craft [pot]s from 10 [mire] each; requires [fire pit]s.' },
                },
                effects: [
                    { type: 'convert', from: { 'clay': 3, 'fire pit': 0.01 }, into: { 'pot': 1 }, every: 3, repeat: 2, mode: 'clay pots' },
                    { type: 'convert', from: { 'mire': 10, 'fire pit': 0.01 }, into: { 'pot': 1 }, every: 6, mode: 'mire pots' }
                ],
                req: { 'pottery': true },
                category: 'crafting',
            });
            new G.Unit({
                name: 'kiln',
                desc: '@processes goods with fire<>A [kiln] is an impressive edifice for those not yet accustomed to its roaring fire.',
                icon: [23, 2, "c2"],
                cost: { 'archaic building materials': 50, 'basic building materials': 20 },
                use: { 'land': 1 },
                upkeep: { 'log': 0.5 },
                modes: {
                    'off': G.MODE_OFF,
                    'bricks': { name: 'Fire bricks', icon: [3, 8], desc: 'Produce 10 [brick]s out of 2 pieces of [clay].', use: { 'worker': 1, 'stone tools': 1 } },
                    'glass': { name: 'Craft glass', icon: [4, 8], desc: 'Your kiln will now use 10 pieces of [sand] to make 1 [glass] pane.', req: { 'glass-crafting': true }, use: { 'stone tools': 1 } },
                },
                effects: [
                    { type: 'convert', from: { 'clay': 2 }, into: { 'brick': 10 }, every: 5, mode: 'bricks' },
                    { type: 'convert', from: { 'sand': 10 }, into: { 'glass': 1 }, every: 25, mode: 'glass' },
                ],
                gizmos: true,
                req: { 'masonry': true },
                category: 'crafting',
            });

            new G.Unit({
                name: 'well',
                desc: '@produces fresh [water] daily, unaffected by [happiness]<>The [well] is a steady source of drinkable [water].',
                icon: [25, 3, "c2"],
                cost: { 'stone': 50, 'archaic building materials': 20 },
                use: { 'land': 1 },
                //require:{'worker':2,'stone tools':2},
                //upkeep:{'food':0.2},
                effects: [
                    { type: 'gather', what: { 'water': 25 } },
                ],
                category: 'production',
                req: { 'well-digging': true },
                limitPer: { 'land': 10 },
            });

            new G.Unit({
                name: 'digger',
                desc: '@digs the soil for [mire] and [stone]<>[digger]s yield various materials that can be used for tool-making and rudimentary construction.',
                icon: [7, 2, "c2"],
                cost: {},
                use: { 'worker': 1 },
                staff: { 'knapped tools': 1 },
                upkeep: { 'food': 0.1 },
                effects: [
                    { type: 'gather', context: 'dig', amount: 1, max: 1 },
                    { type: 'gather', context: 'dig', what: { 'clay': 5 }, max: 1, req: { 'pottery': true } },
                    //Random trends
                    { type: 'gather', context: 'dig', what: { 'ice': 1 }, req: { 'dtt1': true } },
                    { type: 'gather', context: 'dig', what: { 'sand': 1 }, req: { 'dtt2': true } },
                ],
                req: { 'digging': true },
                category: 'production',
            });
            new G.Unit({
                name: 'quarry',
                desc: '@carves [cut stone] out of the ground@may find various other minerals such as [limestone] and [fazble]<>The [quarry] dismantles the ground we stand on so that our children may reach higher heights.',
                icon: [22, 3, "c2"],
                cost: { 'archaic building materials': 100 },
                use: { 'land': 4 },
                //require:{'worker':3,'stone tools':3},
                modes: {
                    'off': G.MODE_OFF,
                    'quarry': { name: 'Quarry stone', icon: [0, 8, "c2"], desc: 'Produce [cut stone] and other minerals.', use: { 'worker': 3, 'stone tools': 3 } },
                    'advanced quarry': { name: 'Advanced quarry stone', icon: [8, 12, "c2", 0, 8, "c2"], desc: 'Produce [cut stone] and other minerals at a superior rate with metal tools.', use: { 'worker': 3, 'metal tools': 3 } },
                },
                effects: [
                    { type: 'gather', context: 'quarry', amount: 5, max: 10, every: 3, mode: 'quarry' },
                    { type: 'gather', context: 'quarry', what: { 'cut stone': 1 }, max: 5, notMode: 'off' },
                    { type: 'gather', context: 'mine', amount: 0.005, max: 0.05, notMode: 'off' },
                    { type: 'gather', context: 'quarry', amount: 10, max: 30, every: 3, mode: 'advanced quarry' },
                    { type: 'function', func: unitGetsConverted({ 'wounded': 1 }, 0.001, 0.01, '[X] [elves].', 'quarry collapsed, wounding its workers', 'quarries collapsed, wounding their workers'), chance: 1 / 50 }
                ],
                gizmos: true,
                req: { 'quarrying': true },
                category: 'production',
            });
            new G.Unit({
                name: 'mine',
                desc: '@extracts ores, [coal] and [stone] out of the ground@may occasionally collapse<>The workers in [mine]s burrow deep into the earth to provide all kinds of minerals.',
                icon: [22, 2, "c2"],
                cost: { 'archaic building materials': 100 },
                use: { 'land': 3 },
                //require:{'worker':3,'stone tools':3},
                modes: {
                    'off': G.MODE_OFF,
                    'any': { name: 'Any', icon: [8, 8, "c2"], desc: 'Mine without focusing on specific ores.', use: { 'worker': 3, 'stone tools': 3 } },
                    'coal': { name: 'Coal', icon: [12, 8, "c2"], desc: 'Mine for [coal] with five times the efficiency.', req: { 'prospecting': true }, use: { 'worker': 3, 'metal tools': 3 } },
                    'salt': { name: 'Salt', icon: [11, 7, "c2"], desc: 'Mine for [salt].', req: { 'prospecting': true }, use: { 'worker': 3, 'metal tools': 3 } },
                    'olivnum': { name: 'Olivnum', icon: [9, 8, "c2"], desc: 'Mine for [olivnum ore] with five times the efficiency.', req: { 'prospecting': true }, use: { 'worker': 3, 'metal tools': 3 } },
                    'berrylium': { name: 'Berrylium', icon: [13, 9, "c2"], desc: 'Mine for [berrylium ore] with five times the efficiency.', req: { 'prospecting': true }, use: { 'worker': 3, 'metal tools': 3 } },
                    'tin': { name: 'Tin', icon: [13, 8, "c2"], desc: 'Mine for [tin ore] with five times the efficiency.', req: { 'prospecting': true }, use: { 'worker': 3, 'metal tools': 3 } },
                    'iron': { name: 'Iron', icon: [10, 8, "c2"], desc: 'Mine for [iron ore] with five times the efficiency.', req: { 'prospecting': true }, use: { 'worker': 3, 'metal tools': 3 } },
                    'greenold': { name: 'Greenold', icon: [11, 8, "c2"], desc: 'Mine for [greenold ore] with five times the efficiency.', req: { 'prospecting': true }, use: { 'worker': 3, 'metal tools': 3 } },
                },
                effects: [
                    { type: 'gather', context: 'mine', amount: 10, max: 30, mode: 'any' },
                    { type: 'gather', context: 'mine', what: { 'stone': 10 }, max: 30, notMode: 'off' },
                    { type: 'gather', context: 'mine', what: { 'coal': 40 }, max: 30, mode: 'coal' },
                    { type: 'gather', context: 'mine', what: { 'salt': 40 }, max: 30, mode: 'salt' },
                    { type: 'gather', context: 'mine', what: { 'olivnum ore': 40 }, max: 30, mode: 'olivnum' },
                    { type: 'gather', context: 'mine', what: { 'berrylium ore': 40 }, max: 30, mode: 'berrylium' },
                    { type: 'gather', context: 'mine', what: { 'tin ore': 40 }, max: 30, mode: 'tin' },
                    { type: 'gather', context: 'mine', what: { 'iron ore': 40 }, max: 30, mode: 'iron' },
                    { type: 'gather', context: 'mine', what: { 'greenold ore': 25 }, max: 30, mode: 'greenold' },
                    { type: 'function', func: unitGetsConverted({ 'wounded': 1 }, 0.001, 0.01, '[X] [elves].', 'mine collapsed, wounding its miners', 'mines collapsed, wounding their miners'), chance: 1 / 50 }
                ],
                gizmos: true,
                req: { 'mining': true },
                category: 'production',
            });
            new G.Unit({
                name: 'furnace',
                desc: '@converts metal ores into ingots that can be used for further crafting<>The [furnace] is employed in various processes to extract the metal in raw ore, as well as for alloying those metals.',
                icon: [24, 2, "c2"],
                cost: { 'basic building materials': 100 },
                use: { 'land': 1 },
                //require:{'worker':2,'stone tools':2},
                modes: {
                    'off': G.MODE_OFF,
                    'olivnum': { name: 'Olivnum smelting', icon: [9, 9, "c2"], desc: 'Cast [soft metal ingot]s out of 5 [olivnum ore] each.', use: { 'worker': 2, 'stone tools': 2 }, req: {} },
                    'berrylium': { name: 'Berrylium smelting', icon: [9, 9, "c2"], desc: 'Cast [soft metal ingot]s out of 60 [berrylium ore] each. //<small>This ore isn\'t very durable but you can make use out of it here if you do not have any other use to put berrylium into</small>', use: { 'worker': 2, 'stone tools': 2 }, req: {} },
                    'tin': { name: 'Tin smelting', icon: [9, 9, "c2"], desc: 'Cast [soft metal ingot]s out of 10 [tin ore] each.', use: { 'worker': 2, 'stone tools': 2 }, req: {} },
                    'iron': { name: 'Iron smelting', icon: [10, 9, "c2"], desc: 'Cast [hard metal ingot]s out of 5 [iron ore] each.', use: { 'worker': 2, 'metal tools': 2 }, req: { 'iron-working': true } },
                    'greenold': { name: 'Greenold smelting', icon: [11, 9, "c2"], desc: 'Cast [precious metal ingot]s out of 5 [greenold ore] each. //<small>You\'ll love green gold, trust me.</small>', use: { 'worker': 2, 'metal tools': 2 }, req: { 'greenold-working': true } },
                    'bronze': { name: 'Bronze alloying', icon: [10, 9, "c2"], desc: 'Cast [hard metal ingot]s out of 8 [olivnum ore] and 2 [tin ore] each.', use: { 'worker': 2, 'metal tools': 2 }, req: { 'softmetal-working': true } },
                    'steel': { name: 'Steel alloying', icon: [12, 9, "c2"], desc: 'Cast [strong metal ingot]s out of 19 [iron ore] and 1 [coal] each.', use: { 'worker': 2, 'metal tools': 2 }, req: { 'steel-making': true } },
                },
                effects: [
                    { type: 'convert', from: { 'olivnum ore': 7 }, into: { 'soft metal ingot': 1 }, repeat: 3, mode: 'olivnum' },
                    { type: 'convert', from: { 'tin ore': 10 }, into: { 'soft metal ingot': 1 }, repeat: 3, mode: 'tin' },
                    { type: 'convert', from: { 'iron ore': 5 }, into: { 'hard metal ingot': 1 }, repeat: 3, mode: 'iron' },
                    { type: 'convert', from: { 'greenold ore': 5 }, into: { 'precious metal ingot': 1 }, repeat: 1, mode: 'greenold' },
                    { type: 'convert', from: { 'tin ore': 2, 'olivnum ore': 8 }, into: { 'hard metal ingot': 1 }, repeat: 3, mode: 'bronze' },
                    { type: 'convert', from: { 'iron ore': 19, 'coal': 1 }, into: { 'strong metal ingot': 1 }, repeat: 1, mode: 'steel' },
                    { type: 'waste', chance: 0.001 / 1000 },
                ],
                gizmos: true,
                req: { 'smelting': true },
                category: 'crafting',
            });
            new G.Unit({
                name: 'blacksmith workshop',
                desc: '@forges metal goods out of ingots<>The [blacksmith workshop,Blacksmith] takes the same pride in shaping the tool that tills as they do the sword that slays.',
                icon: [26, 2, "c2", 25, 2, "c2"],
                cost: { 'basic building materials': 100 },
                use: { 'land': 1 },
                //require:{'worker':2,'stone tools':2},
                modes: {
                    'off': G.MODE_OFF,
                    'metal tools': { name: 'Forge tools from soft metals', icon: [2, 9, "c2"], desc: 'Forge [metal tools] out of 2 [soft metal ingot]s each.', use: { 'worker': 1, 'stone tools': 1 }, req: {} },
                    'hard metal tools': { name: 'Forge tools from hard metals', icon: [2, 9, "c2"], desc: 'Forge 3 [metal tools] out of 1 [hard metal ingot].', use: { 'worker': 1, 'metal tools': 1 }, req: {} },
                    'greenold blocks': { name: 'Forge greenold blocks', icon: [14, 8, "c2"], desc: 'Forge [greenold block]s out of 10 [precious metal ingot]s each.', use: { 'worker': 1, 'stone tools': 1 }, req: { 'greenold-working': true } },
                    'forgeweapon': { name: 'Forge weapons out of soft metals', icon: [15, 11, "magixmod"], desc: 'Forge [metal weapons] out of 2 [soft metal ingot]s each.', req: { 'weapon blacksmithery': true }, use: { 'worker': 2, 'metal tools': 1, 'stone tools': 1 } },
                    'forgeweaponhard': { name: 'Forge weapons out of hard metals', icon: [15, 11, "magixmod"], desc: 'Forge [metal weapons] out of 1 [hard metal ingot] each.', req: { 'weapon blacksmithery': true }, use: { 'worker': 2, 'metal tools': 1, 'stone tools': 1 } },
                    'forgearmor': { name: 'Forge armor out of soft metals', icon: [16, 11, "magixmod"], desc: 'Forge [armor set] out of 8 [soft metal ingot]s each.', req: { 'armor blacksmithery': true }, use: { 'worker': 2, 'metal tools': 1, 'stone tools': 1 } },
                    'forgearmorhard': { name: 'Forge armor out of hard metals', icon: [16, 11, "magixmod"], desc: 'Forge [armor set] out of 5 [hard metal ingot]s each.', req: { 'armor blacksmithery': true }, use: { 'worker': 2, 'metal tools': 1, 'stone tools': 1 } },
                },
                effects: [
                    { type: 'convert', from: { 'soft metal ingot': 2 }, into: { 'metal tools': 1 }, repeat: 3, mode: 'metal tools' },
                    { type: 'convert', from: { 'hard metal ingot': 1 }, into: { 'metal tools': 3 }, repeat: 3, mode: 'hard metal tools' },
                    { type: 'convert', from: { 'precious metal ingot': 10 }, into: { 'greenold block': 1 }, mode: 'greenold blocks' },
                    { type: 'convert', from: { 'soft metal ingot': 2 }, into: { 'metal weapons': 1 }, repeat: 2, mode: 'forgeweapon' },
                    { type: 'convert', from: { 'hard metal ingot': 1 }, into: { 'metal weapons': 1 }, every: 3, repeat: 1, mode: 'forgeweaponhard' },
                    { type: 'convert', from: { 'soft metal ingot': 8 }, into: { 'armor set': 1 }, every: 4, mode: 'forgearmor' },
                    { type: 'convert', from: { 'hard metal ingot': 5 }, into: { 'armor set': 2 }, every: 4, mode: 'forgearmorhard' },
                    { type: 'waste', chance: 0.001 / 1000 },
                    //TODO : better metal tools, weapons etc
                ],
                gizmos: true,
                req: { 'smelting': true },
                category: 'crafting',
            });

            new G.Unit({
                name: 'woodcutter',
                desc: '@cuts trees, producing [log]s<>[woodcutter]s turn forests into precious wood that can be used as fuel...or construction materials.',
                icon: [8, 2, "c2"],
                cost: {},
                use: { 'worker': 1 },
                staff: { 'knapped tools': 1 },
                upkeep: { 'food': 0.1 },
                effects: [
                    { type: 'gather', context: 'chop', amount: 1, max: 1 }
                ],
                req: { 'woodcutting': true },
                category: 'production',
            });
            new G.Unit({
                name: 'carpenter workshop',
                desc: '@processes wood<>The [carpenter workshop,Carpenter] is equipped with all kinds of tools to coerce wood into more useful shapes.',
                icon: [27, 2, "c2", 25, 2, "c2"],
                cost: { 'basic building materials': 100 },
                use: { 'land': 1 },
                //require:{'worker':2,'stone tools':2},
                modes: {
                    'off': G.MODE_OFF,
                    'lumber': { name: 'Cut logs into lumber', icon: [1, 8], desc: 'Cut [log]s into 3 [lumber] each.', use: { 'worker': 1, 'stone tools': 1 }, req: {} },
                },
                effects: [
                    { type: 'convert', from: { 'log': 1 }, into: { 'lumber': 3 }, repeat: 2, mode: 'lumber' },
                    { type: 'waste', chance: 0.001 / 1000 },
                ],
                gizmos: true,
                req: { 'carpentry': true },
                category: 'crafting',
            });

            new G.Unit({
                name: 'soothsayer',
                desc: '@generates [faith] and [happiness]<>[soothsayer]s tell the tales of the dead, helping the tribe deal with grief.',
                icon: [15, 2, "c2"],
                cost: {},
                use: { 'worker': 1 },
                upkeep: { 'food': 0.2 },
                effects: [
                    { type: 'gather', what: { 'faith': 0.075, 'happiness': 0.2 } },
                    { type: 'gather', what: { 'faith': 0.0375 }, req: { 'symbolism': true } },
                    { type: 'mult', value: 1.25, req: { 'missionary': true } }
                ],
                req: { 'ritualism': true },
                category: 'spiritual',
            });
            new G.Unit({
                name: 'healer',
                desc: '@uses [herbs] to heal the [sick] and the [wounded] slowly<>The [healer] knows the secrets of special plants that make illness stay away.',
                icon: [23, 3, "c2"],
                cost: {},
                use: { 'worker': 1 },
                //staff:{'knapped tools':1},
                upkeep: { 'food': 0.2 },
                modes: {
                    'off': G.MODE_OFF,
                    'normal': { name: 'Normal', icon: [16, 1, "magixmod"], desc: 'This [healer] will heal both the [sick] and [wounded], but very slowly.', use: { 'knapped tools': 1 }, req: {} },
                    'wounded': { name: 'Heal wounded', icon: [18, 1, "magixmod"], desc: 'This [healer] will heal only [wounded] elves but with doubled efficiency.', use: { 'knapped tools': 1, 'herbs': 0.3, 'flowers': 1 } },
                    'sick': { name: 'Heal sick', icon: [18, 0, "magixmod"], desc: 'This [healer] will heal only [sick] elves but with doubled efficiency. <>Requires [flowers] along with [herbs].', use: { 'knapped tools': 1, 'herbs': 0.3, 'flowers': 1 }, req: { 'plant lore II': true } },
                },
                effects: [
                    {
                        type: 'function', func: function (me) {
                            var herb = 0.3;
                            var flower = 1;
                            if (G.getRes('herbs').amount < herb * me.amount || G.getRes('flowers').amount < flower * me.amount) {
                                G.killUnitByName('healer', me.amount, 'sick')
                            } else {
                                G.lose('herbs', arrowUpkeep, 'unit upkeep');
                                G.lose('flowers', arrowUpkeep, 'unit upkeep');
                            }
                        }, mode: 'sick'
                    },
                    { type: 'convert', from: { 'sick': 1, 'herbs': 3 }, into: { 'adult': 1 }, chance: 1 / 10, every: 5, mode: 'normal', req: { 'elder workforce': 'off' } },
                    { type: 'convert', from: { 'wounded': 1, 'herbs': 3 }, into: { 'adult': 1 }, chance: 1 / 14, every: 12, mode: 'normal', req: { 'elder workforce': 'off' } },
                    { type: 'convert', from: { 'wounded': 1, 'herbs': 1 }, into: { 'adult': 1 }, chance: 1 / 3, every: 8, mode: 'wounded', req: { 'elder workforce': 'off' } },
                    { type: 'convert', from: { 'sick': 1, 'herbs': 3, 'flowers': 1 }, into: { 'adult': 1 }, chance: 2 / 4, every: 5, mode: 'sick', req: { 'elder workforce': 'off' } },
                    { type: 'convert', from: { 'sick': 1, 'herbs': 3 }, into: { 'elder': 1 }, chance: 1 / 10, every: 5, mode: 'normal', req: { 'elder workforce': 'on' } },
                    { type: 'convert', from: { 'wounded': 1, 'herbs': 3 }, into: { 'elder': 1 }, chance: 1 / 14, every: 12, mode: 'normal', req: { 'elder workforce': 'on' } },
                    { type: 'convert', from: { 'wounded': 1, 'herbs': 1 }, into: { 'elder': 1 }, chance: 1 / 3, every: 8, mode: 'wounded', req: { 'elder workforce': 'on' } },
                    { type: 'convert', from: { 'sick': 1, 'herbs': 3, 'flowers': 1 }, into: { 'elder': 1 }, chance: 2 / 4, every: 5, mode: 'sick', req: { 'elder workforce': 'on' } },
                    //{type:'mult',value:1.03,req:{'more experienced healers':true,'moderation':true}},
                    //   {type:'mult',value:1.06,req:{'more experienced healers':true,'caretaking':true}},
                    //{type:'mult',value:1.25,req:{'se07':'on'}},
                ],
                gizmos: true,
                req: { 'healing': true },
                category: 'spiritual',
                priority: 5,
            });

            new G.Unit({
                name: 'bellwether',
                desc: '@generates [influence] every now and then<>The [bellwether] leads over a small group of elves, giving them a helpful hand when they struggle with life decisions.',
                icon: [18, 3, "c2"],
                cost: { 'food': 50 },
                use: { 'worker': 1 },
                upkeep: { 'food': 0.5 },
                effects: [
                    { type: 'gather', what: { 'influence': 0.075 } },
                    { type: 'gather', what: { 'influence': 0.00375 }, req: { 'code of law': true } }
                ],
                limitPer: { 'population': 120 },
                req: { 'bellwethers': true },
                category: 'political',
                priority: 5,
            });
            new G.Unit({
                name: 'clan leader',
                desc: '@generates [influence] every now and then<>The [clan leader] is followed by many and is trusted with defending the honor and safety of their elves.',
                icon: [19, 3, "c2"],
                cost: { 'food': 100 },
                use: { 'worker': 1 },
                upkeep: { 'food': 0.75 },
                effects: [
                    { type: 'gather', what: { 'influence': 0.15 } },
                    { type: 'gather', what: { 'influence': 0.0375 }, req: { 'code of law': true } }
                ],
                limitPer: { 'population': 600 },
                req: { 'clans': true },
                category: 'political',
                priority: 5,
            });

            new G.Unit({
                name: 'grave',
                desc: '@provides 1 [burial spot], in which the [corpse,dead] are automatically interred one by one@graves with buried corpses decay over time, freeing up land for more graves<>A simple grave dug into the earth, where the dead may find rest.//Burying your dead helps prevent [health,disease] and makes your elves slightly [happiness,happier].',
                icon: [13, 2, "c2"],
                cost: {},
                use: { 'land': 1 },
                //require:{'worker':1,'knapped tools':1},
                effects: [
                    { type: 'provide', what: { 'burial spot': 1 } },
                ],
                req: { 'burial': true },
                category: 'civil',
            });

            new G.Unit({
                name: 'mire shelter',
                desc: '@provides 3 [housing]<>Basic, somewhat frail dwelling in which a small family can live.',
                icon: [9, 2, "c2"],
                cost: { 'mire': 75 },
                use: { 'land': 1 },
                //require:{'worker':1,'knapped tools':1},
                effects: [
                    { type: 'provide', what: { 'housing': 3 } },
                    { type: 'waste', chance: 1 / 1000 }
                ],
                req: { 'sedentism': true },
                category: 'housing',
            });
            new G.Unit({
                name: 'branch shelter',
                desc: '@provides 3 [housing]<>Basic and a very frail dwelling in which a small family can live. The weakest shelter.',
                icon: [10, 2, "c2"],
                cost: { 'stick': 75 },
                use: { 'land': 1 },
                //require:{'worker':1,'knapped tools':1},
                effects: [
                    { type: 'provide', what: { 'housing': 3 } },
                    { type: 'waste', chance: 3 / 1000 }
                ],
                req: { 'sedentism': true },
                category: 'housing',
            });
            new G.Unit({
                name: 'hut',
                desc: '@provides 5 [housing]<>A small dwelling built out of hardened mire and branches.',
                icon: [11, 2, "c2"],
                cost: { 'archaic building materials': 100 },
                use: { 'land': 1 },
                //require:{'worker':2,'stone tools':2},
                effects: [
                    { type: 'provide', what: { 'housing': 5 } },
                    { type: 'waste', chance: 0.1 / 1000 }
                ],
                req: { 'building': true },
                category: 'housing',
            });
            new G.Unit({
                name: 'hovel',
                desc: 'Providing 8 [housing], [hovel]s are small but decent.<>A simple home for a family of villagers.',
                icon: [20, 3, "c2"],
                cost: { 'basic building materials': 75 },
                use: { 'land': 1 },
                //require:{'worker':2,'stone tools':2},
                effects: [
                    { type: 'provide', what: { 'housing': 8 } },
                    { type: 'waste', chance: 0.03 / 1000 }
                ],
                req: { 'cities': true },
                category: 'housing',
            });
            new G.Unit({
                name: 'house',
                desc: '@provides 10 [housing]<>A sturdy home built to last.',
                icon: [21, 3, "c2"],
                cost: { 'basic building materials': 100 },
                use: { 'land': 1 },
                //require:{'worker':3,'metal tools':3},
                effects: [
                    { type: 'provide', what: { 'housing': 10 } },
                    { type: 'waste', chance: 0.01 / 1000 }
                ],
                req: { 'construction': true },
                category: 'housing',
            });

            new G.Unit({
                name: 'storage pit',
                desc: '@provides 400 [food storage] and 400 [material storage]<>A simple hole in the ground, lined with stones.//Prevents some food from perishing and some goods from being stolen, but may crumble away over time.',
                icon: [12, 2, "c2"],
                cost: { 'archaic building materials': 50 },
                use: { 'land': 2 },
                //require:{'worker':2,'knapped tools':2},
                effects: [
                    { type: 'provide', what: { 'added food storage': 400 } },
                    { type: 'provide', what: { 'added material storage': 400 } },
                    { type: 'waste', chance: 0.8 / 1000 }
                ],
                req: { 'stockpiling': true },
                category: 'storage',
            });
            new G.Unit({
                name: 'stockpile',
                desc: '@provides 1,000 [material storage]<>A simple building where resources are stored.//Slows material decay and deters theft somewhat, but may itself decay over time.',
                icon: [22, 4, "c2"],
                cost: { 'archaic building materials': 100 },
                use: { 'land': 2 },
                //require:{'worker':2,'stone tools':2},
                effects: [
                    { type: 'provide', what: { 'added material storage': 1000 } },
                    { type: 'waste', chance: 0.1 / 1000 }
                ],
                req: { 'stockpiling': true, 'building': true },
                category: 'storage',
            });
            new G.Unit({
                name: 'warehouse',
                desc: '@provides 4,000 [material storage]<>A large building for storing materials. Staffed with two guards to prevent theft.',
                icon: [25, 4, "c2"],
                cost: { 'basic building materials': 500 },
                use: { 'land': 3 },
                staff: { 'worker': 2 },
                //require:{'worker':3,'stone tools':3},
                effects: [
                    { type: 'provide', what: { 'added material storage': 4000 } },
                    { type: 'provide', what: { 'prison space': 5 } },
                    { type: 'waste', chance: 0.01 / 1000 }
                ],
                req: { 'stockpiling': true, 'construction': true },
                category: 'storage',
            });
            new G.Unit({
                name: 'granary',
                desc: '@provides 1,000 [food storage]<>A grain storage building with stilts to prevent pests from getting in.',
                icon: [23, 4, "c2"],
                cost: { 'archaic building materials': 50, 'basic building materials': 50, 'pot': 15 },
                use: { 'land': 2 },
                //require:{'worker':2,'stone tools':2},
                effects: [
                    { type: 'provide', what: { 'added food storage': 1000 } },
                    { type: 'waste', chance: 0.01 / 1000 }
                ],
                req: { 'stockpiling': true, 'pottery': true },
                category: 'storage',
            });
            new G.Unit({
                name: 'barn',
                desc: '@provides 4,000 [food storage]<>A large wooden building for storing food. A worker manages the [food] inside to prevent rot.',
                icon: [24, 4, "c2"],
                cost: { 'basic building materials': 500 },
                use: { 'land': 2 },
                staff: { 'worker': 1 },
                //require:{'worker':2,'stone tools':2},
                effects: [
                    { type: 'provide', what: { 'added food storage': 4000 } },
                    { type: 'waste', chance: 0.001 / 1000 }
                ],
                req: { 'stockpiling': true, 'carpentry': true },
                category: 'storage',
            });

            new G.Unit({
                name: 'architect',
                desc: '@can be set to manage automatic building construction<>The [architect] is tasked with fulfilling your elves\'s housing needs so that you don\'t have to worry about it too much.',
                icon: [26, 4, "c2"],
                cost: {},
                use: { 'worker': 1 },
                upkeep: { 'food': 0.5 },
                gizmos: true,
                modes: {
                    'off': G.MODE_OFF,
                    'house building': { name: 'House building', icon: [21, 3, "c2"], desc: 'Build [house]s as long as your elves don\'t have enough housing and the right materials are available.' },
                    'undertaker': { name: 'Undertaker', icon: [13, 2, "c2"], desc: 'Dig [grave]s as long as there are unburied corpses.' },
                },
                effects: [
                    {
                        type: 'function', func: function (me) {
                            var wiggleRoom = 10;
                            var homeless = Math.max(0, (G.getRes('population').amount + wiggleRoom) - G.getRes('housing').amount);
                            var toMake = me.amount - me.idle;
                            if (homeless > 0 && toMake > 0 && G.canBuyUnitByName('house', toMake)) {
                                G.buyUnitByName('house', toMake, true);
                            }
                        }, mode: 'house building'
                    },
                    {
                        type: 'function', func: function (me) {
                            var wiggleRoom = 5;
                            var toMake = Math.min(me.amount - me.idle, Math.max(0, (G.getRes('corpse').amount + wiggleRoom) - (G.getRes('burial spot').amount - G.getRes('burial spot').used)));
                            if (toMake > 0 && G.canBuyUnitByName('house', toMake)) {
                                G.buyUnitByName('grave', toMake, true);
                            }
                        }, mode: 'undertaker'
                    }
                ],
                limitPer: { 'land': 100 },
                req: { 'city planning': true },
                category: 'civil',
            });

            new G.Unit({
                name: 'lodge',
                desc: 'Lodges are currently useless in elf civilizations and are just a waste of space.',
                icon: [17, 3, "c2"],
                cost: { 'archaic building materials': 50 },
                use: { 'land': 1 },
                //require:{'worker':1,'knapped tools':1},
                //upkeep:{'food':0.5},
                gizmos: true,
                modes: {
                    'off': G.MODE_OFF,
                    'gatherers': { name: 'Gatherer\'s lodge', desc: 'Hire [gatherer]s.', req: { 'tribalism': true }, icon: [0, 2, "c2"] },
                    'hunters': { name: 'Hunter\'s lodge', desc: 'Hire [hunter]s.', req: { 'hunting': true }, icon: [18, 2, "c2"] },
                    'fishers': { name: 'Fisher\'s lodge', desc: 'Hire [fisher]s.', req: { 'fishing': true }, icon: [17, 2, "c2"] },
                    'diggers': { name: 'Digger\'s lodge', desc: 'Hire [digger]s.', req: { 'digging': true }, icon: [7, 2, "c2"] },
                    'woodcutters': { name: 'Woodcutter\'s lodge', desc: 'Hire [woodcutter]s.', req: { 'woodcutting': true }, icon: [8, 2, "c2"] },
                    'artisans': { name: 'Artisan\'s lodge', desc: 'Hire [artisan]s.', req: { 'stone-knapping': true }, icon: [6, 2, "c2"] },
                },
                effects: [
                ],
                req: { 'tribalism': false },
                category: 'civil',
            });
            new G.Unit({
                name: 'guild quarters',
                desc: 'Groups of elves sharing the same profession can meet in these to share their craft and trade secrets, providing some [happiness] and +2 [housing] for those with a temporary stay. These [guild quarters] do not provide your workers with tools, and if you have workers not assigned here, they will automatically be assigned if possible. <b>You should remove these before removing workers!</b>',
                icon: [26, 3, "c2", 25, 2, "c2"],
                cost: { 'basic building materials': 75 },
                use: { 'land': 1 },
                staff: { 'worker': 1 },
                //require:{'worker':2,'stone tools':2},
                upkeep: { 'food': 0.5 },
                gizmos: true,
                modes: {
                    'off': G.MODE_OFF,
                    'potters': { name: 'Potters\' guild', desc: 'Hire [potter]s until there are 5 for each of this guild.', req: { 'pottery': true }, icon: [20, 2, "c2"] },
                    'carpenters': { name: 'Carpenters\' guild', desc: 'Build [carpenter workshop]s until there are 5 for each of this guild.', req: { 'carpentry': true }, icon: [27, 2, "c2", 25, 2, "c2"] },
                    'blacksmiths': { name: 'Blacksmiths\' guild', desc: 'Build [blacksmith workshop]s until there are 5 for each of this guild.', req: { 'smelting': true }, icon: [26, 2, "c2", 25, 2, "c2"] },
                },
                effects: [
                    { type: 'gather', what: { 'happiness': 0.1 } },
                    { type: 'provide', what: { 'housing': 2 } },
                    {
                        type: 'function', func: function (me) {
                            if (me.amount * 5 > G.unitsOwned[G.unitsOwnedNames.indexOf('potter')].targetAmount) G.buyUnitByName('potter', 1, true);
                        }, mode: 'potters'
                    },
                    {
                        type: 'function', func: function (me) {
                            if (me.amount * 5 > G.unitsOwned[G.unitsOwnedNames.indexOf('carpenter workshop')].targetAmount) G.buyUnitByName('carpenter workshop', 1, true);
                        }, mode: 'carpenters'
                    },
                    {
                        type: 'function', func: function (me) {
                            if (me.amount * 5 > G.unitsOwned[G.unitsOwnedNames.indexOf('blacksmith workshop')].targetAmount) G.buyUnitByName('blacksmith workshop', 1, true);
                        }, mode: 'blacksmiths'
                    }
                ],
                req: { 'guilds': true },
                category: 'civil',
            });

            new G.Unit({
                name: 'wanderer',
                desc: '@explores occupied tiles for [land]@cannot discover new tiles@may sometimes get lost<>[wanderer]s walk about in search of new places to settle, reporting what they saw when they come back.',
                icon: [2, 2, "c2"],
                cost: { 'food': 20 },
                use: { 'worker': 1 },
                gizmos: true,
                modes: {
                    'explore land': { name: 'Explore land', icon: [5, 28, "magixmod"], desc: 'This [wanderer] will explore lands as usual.', req: { 'tribalism': true } },
                    'crew loadout': { name: 'Explore oceans with a boat', icon: [9, 33, "magixmod"], desc: 'This [wanderer] will wait until a voyage so they will explore oceans the same way as normally they would explore land.', req: { 'boat building': true } },
                },
                effects: [
                    { type: 'explore', explored: 0.075, unexplored: 0, mode: 'explore land' },
                    { type: 'provide', what: { 'wandererW': 1 }, mode: 'crew loadout' },
                    { type: 'function', func: unitGetsConverted({}, 0.01, 0.05, '[X] [elves].', 'wanderer got lost', 'wanderers got lost'), chance: 1 / 50, mode: 'explore land' }
                ],
                req: { 'speech': true },
                category: 'exploration',
            });
            new G.Unit({
                name: 'scout',
                desc: '@discovers new tiles of [land]@will not explore occupied tiles@may sometimes get lost<>[scout]s explore the world in search of new and exciting territories.',
                icon: [24, 3, "c2"],
                cost: { 'food': 100 },
                use: { 'worker': 1 },
                gizmos: true,
                staff: { 'stone tools': 1 },
                modes: {
                    'explore land': { name: 'Explore land', icon: [5, 28, "magixmod"], desc: 'This [scout] will discover new land as usual.', req: { 'tribalism': true } },
                    'crew loadout': { name: 'Explore oceans with a boat', icon: [9, 33, "magixmod"], desc: 'This [scout] will wait until a voyage so they will discover more ocean tiles the same way as normally they would discover more land tiles.', req: { 'boat building': true } },
                },
                effects: [
                    { type: 'explore', explored: 0, unexplored: 0.075, mode: 'explore land' },
                    { type: 'provide', what: { 'scoutW': 1 }, mode: 'crew loadout' },
                    { type: 'function', func: unitGetsConverted({}, 0.01, 0.05, '[X] [elves].', 'scout got lost', 'scouts got lost'), chance: 1 / 90, mode: 'explore land' }
                ],
                req: { 'scouting': true },
                category: 'exploration',
            });

            //wonders

            new G.Unit({
                name: 'the fortress',
                desc: '@leads to the <b>Fortress Victory</b><>A mystical monument where the glory of elves is clearly expressed. Built in the middle of a dense and tall forest.//A temple housing a tomb deep under its rocky platform, the Fortress stands tall, its eternal shadow forever reminding your elves of your greatness.',
                wonder: 'the fortress',
                icon: [1, 14, "c2"],
                wideIcon: [0, 14, "c2"],
                cost: { 'basic building materials': 1200 },
                costPerStep: { 'basic building materials': 300, 'precious building materials': 30 },
                steps: 120,
                messageOnStart: 'You begin the construction of The Fortress. Its towering mass already dominates the city hidden in the dense and tall forest. It is almost as tall as trees that are around you and your elves. They don\'t like woodcutting at all.',
                finalStepCost: { 'population': 100 },
                finalStepDesc: 'To complete The Fortress, 100 of your [population,elves] must be sacrificed to accompany you as mighty servants in the afterlife.',
                use: { 'land': 10 },
                require: { 'worker': 10, 'metal tools': 10 },
                req: { 'monument-building': true },
                category: 'wonder',
            });
            new G.Unit({
                name: 'florist',
                desc: '@a subclass of [gatherer]s that collect [flowers] @has its use in both healing and painting',
                icon: [27, 4, "c2"],
                cost: {},
                req: { 'a power of the fortress': true, 'plant lore II': true },
                use: { 'worker': 1 },
                category: 'production',
                effects: [
                    { type: 'gather', context: 'flowers', amount: 0.1, max: 0.4 },
                ],
            });
            //debug units
            new G.Unit({
                name: 'auto nanny',
                desc: '@generates 15 [fruit]s, 15 [vegetables], 30 [cooked meat,Meat], and 80 [water]<>Keeps your elves fed so you don\'t have to.//Powered by strange energies.',
                icon: [4, 2, "c2"],
                cost: {},
                effects: [
                    { type: 'gather', what: { 'fruit': 15, 'vegetables': 15, 'cooked meat': 30, 'water': 80 } }
                ],
                category: 'debug',
            });
            new G.Unit({
                name: 'auto brain',
                desc: '@generates 10 [discernment], [gentility], [faith], [science], [creativity] and [influence]<>Educates your elves so you don\'t have to.//Powered by strange and unexplained energies.',
                icon: [5, 2, "c2"],
                cost: {},
                effects: [
                    { type: 'gather', what: { 'discernment': 10, 'gentility': 10, 'faith': 10, 'science': 10, 'influence': 10, 'creativity': 10 } }
                ],
                category: 'debug',
            });
            new G.Unit({
                name: 'boat',
                desc: '@[boat]s with crew members on board are able to explore the vast oceans (unlike [wanderer]s, [scout]s and [druidish travellers team]s). However, you also need 2 [worker]s who will take care of both the boat and themselves. You can obtain these [wanderer,exploration units] by using their respective modes (although you will need on extra exploration unit for backup).',
                icon: [28, 3, "c2"],
                cost: { 'lumber': 2000, 'food': 7500, 'water': 3000, 'leather': 90 },
                use: { 'worker': 2 },
                gizmos: true,
                modes: {
                    'off': G.MODE_OFF,
                    'discover': { name: 'Voyage deeply into the ocean', icon: [10, 33, "magixmod"], desc: 'This [boat]\'s crew will swim and use the boat to explore the supposedly endless oceans. Keep in mind that much can happen in the ocean, so this boat may sink down.', use: { 'scoutW': 12, 'worker': 10 } },
                    'explore': { name: 'Explore already discovered waters', icon: [9, 33, "magixmod"], desc: 'This [boat]\'s crew will deeply explore already discovered parts of the ocean. Keep in mind that much can happen in the ocean, so this boat may sink down.', use: { 'wandererW': 12, 'worker': 10 } },
                },
                effects: [
                    { type: 'exploreOcean', unexplored: 0.06, mode: 'discover' },
                    { type: 'exploreOcean', explored: 0.06, mode: 'explore' },
                    {
                        type: 'function', func: function () {
                            unitGetsConverted({}, 0.01, 0.05, '[X] [elves].', 'boat sank. Sadly, everyone who was on the ship drowned', 'boats sank. Sadly, everyone who was on the ship drowned.')
                        }, chance: 1 / 120, notMode: 'off'
                    },
                ],
                req: { 'boat building': true },
                category: 'exploration',
            });
            new G.Unit({
                name: 'druidish travellers team',
                displayName: 'Traveling druid team',
                desc: 'These missionary teams not only spread [faith] in this wild world, but also explore it further. Their mission is to help elves connect with nature and the ancestors who probably lived on this land ages ago! //This unit requires 2 [druid]s to spread [faith], but if [faith] drops too low, the team will refuse to work. Every team provides 1 [spirituality].',
                icon: [29, 2, "c2"],
                cost: { 'food': 100 },
                use: { 'worker': 6, 'druid': 2, 'stone tools': 4, 'knapped tools': 2 },
                limitPer: { 'druid': 8, 'population': 1600 },
                //upkeep:{'food':2,'water':2,'faith':0.2},
                effects: [
                    { type: 'explore', explored: 0.12, unexplored: 0.1 },
                    { type: 'provide', what: { 'spirituality': 1 } },
                    { type: 'function', func: unitGetsConverted({}, 0.01, 0.05, '[X] [elves].', 'druidish team got lost in the wilderness...we will miss them', 'druidish teams got lost in the wilderness...we will miss them'), chance: 1 / 230 }
                ],
                req: { 'missionary': true, 'belief in the beforelife': true },
                category: 'exploration',
            });
            new G.Unit({
                name: 'druid',
                desc: '@generates [faith] and [happiness] every now and then<>[druid]s merge with nature and its spirits to bring down faith and hope to any elves around \'em. Their mission is to spread faith in this strange world!//[druid]s are limited, as not everyone related to religion is eligible for that title.',
                icon: [28, 2, "c2"],
                cost: {},
                priority: 2,
                use: { 'worker': 1, 'faith': 0.5 },
                upkeep: { 'food': 0.3 },
                limitPer: { 'population': 150 },
                effects: [
                    { type: 'gather', what: { 'faith': 0.1, 'happiness': 0.2 } },
                    { type: 'provide', what: { 'druid': 1 } }, //as for teams
                    { type: 'gather', what: { 'health': 0.25 }, req: { 'druidsymbolism2': true }, chance: 0.2 },
                    { type: 'gather', what: { 'faith': 0.01 }, req: { 'druidsymbolism2': true } },
                    { type: 'gather', what: { 'happiness': 0.06 }, req: { 'druidsymbolism1': true } },
                    //{type:'gather',what:{'faith':0.05},req:{'symbolism II':true}},
                    //{type:'mult',value:2/3,req:{'dt16':true}},
                    //{type:'mult',value:1.25,req:{'se11':'on'}},
                    //{type:'mult',value:1.01,req:{'enlightenment':true}},
                    //{type:'mult',value:0.95,req:{'se03':'on'}},
                ],
                req: { 'ritualism': true, 'druidism': true },
                category: 'spiritual',
            });
            new G.Unit({
                name: 'conceptionist',
                desc: '@generates [creativity] and also charges the [battery of discoveries] faster than [dreamer]s, which you can use to research more advanced technologies<>A [conceptionist] spends their time observing, thinking out of the box, and sharing their thoughts with nearby elves. @Not everyone develops such great skill, so this unit is limited: 1 [conceptionist] per 50 [population,elves]. @[wisdom rituals] and [symbolism] do not apply to this unit!',
                icon: [choose([29, 30]), 4, "c2"],
                cost: {},
                use: { 'worker': 1 },
                limitPer: { 'population': 50 },
                effects: [
                    { type: 'gather', what: { 'creativity': 0.03 } },
                    { type: 'gather', what: { 'battery of discoveries': 0.55 } },
                ],
                req: { 'developed creativity': true },
                category: 'discovery',
                priority: 4,
            });
            new G.Unit({
                name: 'shelter on water',
                desc: '@provides 6 [housing]<>A small dwelling that can fit some [population,elves]. It is settled on a secure wooden platform supported by thin wooden pillars.',
                icon: [29, 3, "c2"],
                cost: { 'basic building materials': 48, 'log': 12, 'lumber': 60, 'archaic building materials': 50 },
                use: { 'wtr': 1 },
                effects: [
                    { type: 'provide', what: { 'housing': 6 } },
                ],
                req: { 'water construction': true },
                category: 'housing',
            });
            new G.Unit({
                name: 'archaeologist',
                desc: '@digs in the ground to find some [relic]s. Good source of essentials, as finding treasures won\'t just give you [discernment]. Depending on what [archaeologist] found you can also gain [gentility], [faith] or [influence]. If a super rare [relic] is found, it will give more essentials.//When no more [relic]s are left, this unit will look for stuff left by previous generations (but this will provide much less [discernment,Essentials]).',
                icon: [30, 3, "c2"],
                use: { 'worker': 1, 'metal tools': 2 },
                upkeep: { 'food': 1, 'water': 1 },
                req: { 'archaeology': true },
                limitPer: { 'population': 350 },
                category: 'discovery',
                effects: [
                    { type: 'gather', what: { 'faith': 0.75 }, chance: 1 / 162 },
                    { type: 'gather', what: { 'discernment': 0.75 }, chance: 1 / 150 },
                    { type: 'gather', what: { 'gentility': 0.75 }, chance: 1 / 125 },
                    { type: 'gather', what: { 'influence': 0.75 }, chance: 1 / 162 },
                    { type: 'function', func: archaeologyRare(), chance: 1 / 1200 },
                    { type: 'mult', value: 0.2, req: { 'out of relics': true } },
                    //{type:'mult',value:1.2,req:{'better seeking':true}},
                ],
            });
            new G.Unit({
                name: 'Wizard',
                desc: 'A smart elf that is also a worshipper of magic. You\'ll need them to maintain various magic-based towers and to cultivate magic in your civilization. Provides 2 [wisdom] for every 5 [Wizard]s.',
                icon: [choose([21, 22, 23, 24]), 8, "magixmod"],
                cost: { 'creativity': 3, 'discernment': 1, 'stick': 2, 'food': 1 },
                use: { 'elder': 1, 'wand': 1 },
                upkeep: { 'food': 1.5, 'water': 0.03 },
                req: { 'wizard wisdom': true },
                effects: [
                    { type: 'provide', what: { 'wisdom': 0.4 } },
                    { type: 'gather', what: { 'insight': 0.005 }, req: { 'wizard wisdom II': true } },
                ],
                category: 'discovery',
                limitPer: { 'population': 6 },
            });
            /*=====================================================================================
            TECH & TRAIT CATEGORIES
            =======================================================================================*/
            G.knowCategories.push(
                { id: 'anomaly', name: '<font color="#a371d1">Anomalies</font>' },
                { id: 'main', name: 'General' },
                { id: 'misc', name: 'Miscellaneous' },
                { id: 'knowledge', name: 'Knowledge' },
                { id: 'culture', name: 'Cultural' },
                { id: 'religion', name: 'Religious' },
                { id: 'short', name: 'Short-term' },//you can only have so many traits with this category; if the player gains a new "short" trait, the oldest "short" trait is removed
                { id: 'long', name: 'Long-term' },//you can only have so many traits with this category; if the player gains a new "long" trait, the oldest "long" trait is removed
                ///TECH
                { id: 'tier1', name: 'Technologies' },
                //{id:'tier2',name:'Tier 2 technologies'}, if it will be ever added
                { id: 'upgrade', name: 'Upgrades' },
            );
            /*=====================================================================================
            TECHS AND TRAITS
            =======================================================================================*/

            new G.ChooseBox({
                name: 'research box',
                context: 'tech',
                choicesN: 4,
                noMoreChoicesTexts: ['There is currently nothing to research', 'No new technologies can now be found', 'There are currently around one hundred technologies. Maybe wait up a bit.', 'There are currently no new available researches', 'No new technologies are currently available'],
                getCosts: function () {
                    var techCntLastNmbr = G.has('symbN') ? (G.techN + G.knowN) % 10 : -1;
                    var batterycost = (G.achievByName['the fortress'].won >= 5 ? 25 : 0) + (G.has('symbN') && techCntLastNmbr == 1 ? 5 : 0);
                    let calcCost = (name, constGain = 0.025, rollGain = 0.05) => Math.floor(G.getRes(name).amount * (constGain + this.roll * rollGain))
                    var costs = {};
                    costs['discernment'] = calcCost('wisdom');
                    if (G.has('oral tradition 2/2') && techCntLastNmbr != 3) costs['gentility'] = calcCost('inspiration', (0.05));
                    costs['battery of discoveries'] = (100 - batterycost) * upscaleBat;
                    return costs;
                },
                getCardCosts: function (what) {
                    return what.cost;
                },
                getCards: function () {
                    var choices = [];
                    var n = G.tech.length;
                    for (var i = 0; i < n; i++) {
                        var tech = G.tech[i];
                        if (!G.techsOwnedNames.includes(tech.name) && G.checkReq(tech.req)) {
                            if (tech.chance) {
                                var chance = randomFloor(tech.chance);
                                for (var ii = 0; ii < chance; ii++) {
                                    choices.push(tech);
                                }
                            }
                            else choices.push(tech);
                        }
                    }
                    return choices;
                },
                onBuy: function (what, index) {
                    G.popupSquares.spawn(l('chooseOption-' + index + '-' + this.id), l('techBox').children[0]);
                    onTechBuy('elves', what)
                },
                onReroll: function () {
                    this.roll += 1;
                    this.rollN += 1;
                    G.update['tech']();
                    G.popupSquares.spawn(l('chooseIgniter-' + this.id), l('chooseBox-' + this.id));
                    G.playSound(magixURL + 'TechReroll.wav');
                },
                onTick: function () {
                    this.roll -= 0.01;
                    this.roll = Math.max(this.roll, 0);
                },
                buttonText: function () {
                    var str = '';
                    if (this.choices.length > 0) str += '<font color="#ffa4a6">Reroll</font>';
                    else str += '<font color="#cfc">Research</font>';
                    var costs = this.getCosts();
                    var costsStr = G.getCostString(costs);
                    var batterycost = (G.achievByName['the fortress'].won >= 5 ? 25 : 0);
                    var costbat = B((100 - batterycost) * upscaleBat);
                    costsStr = costsStr.replace(costbat, '&nbsp;' + (100 - batterycost + '%'));
                    if (costsStr) str += ' <b><i><font color="#aff">(' + costsStr + ')</font></i></b>';
                    return '<span style="pointer-events:none">' + str + '</span>';
                },
                buttonTooltip: function () {
                    var charged = (G.achievByName['the fortress'].won > 0 ? "a 75% charged" : "a fully charged");
                    var costStr = G.getCostString(this.getCosts(), true).replace(" Battery of discoveries", "% charged battery")
                    if (G.has('oral tradition 2/2')) {
                        return '<div class="info"><div class="par">' + (this.choices.length == 0 ? 'Generate new research opportunities.<br>The cost will scale with your <b>Wisdom</b> and <b>Inspiration</b> resources.<br>To roll or reroll you also need ' + charged + ' <b>Battery of Discoveries</b>.' : 'Reroll to get new research opportunities if none of the available choices suit you.<br>The cost will rise with each reroll, but will decrease again over time.') + '</div><div>Cost: ' + costStr + '</div></div>';
                    } else {
                        return '<div class="info"><div class="par">' + (this.choices.length == 0 ? 'Generate new research opportunities.<br>The cost will scale with your <b>Wisdom</b> resource.<br>To each reroll or rolling new technologies you need ' + charged + ' <b>Battery of Discoveries</b>.' : 'Reroll to get new research opportunities if none of the available choices suit you.<br>The cost will rise with each reroll, but will decrease again over time.') + '</div><div>Cost: ' + costStr + '</div></div>';
                    }
                }
            });


            new G.Tech({
                name: 'tribalism', category: 'tier1',
                desc: '@unlocks the [gatherer]@provides 5 [authority]<>Taking its roots in wild animal packs, [tribalism] is the organization of individuals into simple social structures with little hierarchy.',
                icon: [0, 1, "c2"],
                startWith: true,
                effects: [
                    { type: 'provide res', what: { 'authority': 5 } },
                    { type: 'show res', what: ['influence'] },
                    { type: 'show context', what: ['gather'] },
                ],
            });
            new G.Tech({
                name: 'speech', category: 'tier1',
                desc: '@unlocks the [dreamer] and [wanderer]@provides 50 [wisdom] @provides 20 [quick-wittinity]<>[speech], in its most primitive form, is a series of groans and grunts that makes it possible to communicate things, events, and concepts.',
                icon: [1, 1, "c2"],
                startWith: true,
                effects: [
                    { type: 'provide res', what: { 'wisdom': 50 } },
                    { type: 'provide res', what: { 'quick-wittinity': 25 } },
                    { type: 'show res', what: ['discernment'] },
                ],
            });
            new G.Tech({
                name: 'language', category: 'tier1',
                desc: '@provides 30 [inspiration]@provides 30 [wisdom] @provides 15 [quick-wittinity]<>[language] improves on [speech] by combining complex grammar with a rich vocabulary, allowing for better communication and the first signs of culture.<br>//<small>I thought elves had their language before you came here...or maybe that was just my mistake.</small>',
                icon: [2, 1, "c2"],
                cost: { 'discernment': 10, 'creativity': 2 },
                req: { 'speech': true },
                effects: [
                    { type: 'provide res', what: { 'inspiration': 30, 'wisdom': 30, 'quick-wittinity': 15 } },
                ],
                chance: 3,
                tutorialMesg: ['tutorial', 'This plane feels more harsh. It is harder to progress than it was with humanity. Also, a weird feeling seems to be striking you often in this world...', [8, 4, "c2"]],
            });

            new G.Tech({
                name: 'oral tradition 1/2', category: 'tier1',
                desc: '@Makes your elves start thinking about culture @provides 10 [inspiration]@provides 10 [wisdom]@provides 5 [quick-wittinity]<><b><font color="fuschia">Oral tradition</font></b> emerges when the members of a tribe gather at night to talk about their day. Stories, ideas, and myths are all shared and passed on from generation to generation. //Get [oral tradition 2/2] to unlock [storyteller].<br>//<small>Time for a story now, i suppose</small>',
                icon: [27, 3, "magixmod", 5, 1, "c2"],
                cost: { 'discernment': 10, 'creativity': 2 },
                req: { 'language': true },
                effects: [
                    { type: 'provide res', what: { 'inspiration': 10, 'wisdom': 10, 'quick-wittinity': 5 } },
                ],
            });
            new G.Tech({
                name: 'oral tradition 2/2', category: 'tier1',
                desc: '@unlocks the [storyteller]@provides 10 [inspiration]@provides 10 [wisdom]@provides 5 [quick-wittinity]<><b><font color="fuschia">Oral tradition</font></b> emerges when the members of a tribe gather at night to talk about their day. Stories, ideas, and myths are all shared and passed on from generation to generation.<br>//<small>Let\'s finish those unfinished stories...</small>',
                icon: [27, 2, "magixmod", 5, 1, "c2"],
                cost: { 'discernment': 21, 'creativity': 3 },
                req: { 'language': true, 'oral tradition 1/2': true },
                effects: [
                    { type: 'provide res', what: { 'inspiration': 10, 'wisdom': 10, 'quick-wittinity': 5 } },
                ],
                tutorialMesg: ['tutorial', 'You need the battery of discoveries charged for <b>each</b> research roll and reroll. With some ascension bonuses, you can make the battery charge faster or require less charge as cost.', [8, 0, "c2"]],
            });

            new G.Tech({
                name: 'stone-knapping', category: 'tier1',
                desc: '@unlocks [artisan]s, which can create [knapped tools]<>[stone-knapping] allows you to make your very first tools - simple rocks that have been smashed against each other to fashion rather crude cleavers, choppers, and hand axes.//Tools have little use by themselves, but may be used in many other industries.',
                icon: [3, 1, "c2"],
                cost: { 'discernment': 5, 'creativity': 7 },
                req: { 'tribalism': true },
                effects: [
                ],
                chance: 3,
            });

            new G.Tech({
                name: 'tool-making', category: 'tier1',
                desc: '@[artisan]s can now create [stone tools]<>With proper [tool-making], new procedures arise to craft a multitude of specialized tools out of cheap materials. These include hammers, knives, and axes.',
                icon: [4, 1, "c2"],
                cost: { 'creativity': 6, 'discernment': 6 },
                req: { 'stone-knapping': true, 'carving': true },
                effects: [
                ],
                chance: 3,
            });

            new G.Tech({
                name: 'basket-weaving', category: 'tier1',
                desc: '@[artisan]s can now craft [basket]s<>Baskets are a cheap, if flimsy means of storing food.',
                icon: [7, 1, "c2"],
                cost: { 'discernment': 10, 'creativity': 2 },
                req: { 'tool-making': true },
                effects: [
                ],
            });

            new G.Tech({
                name: 'scouting', category: 'tier1',
                desc: '@unlocks [scout]s, which can discover new territory, although not very far at first<>The [scout] is an intrepid traveler equipped to deal with the unknown.//Getting this increases the exploration softcap by a little bit. //<small>Do not forget to take a compass...wait, do we have compasses? WHAT IS A COMPASS!!?</small>',
                icon: [24, 7, "c2"],
                cost: { 'discernment': 20, 'creativity': 4 },
                req: { 'tool-making': true, 'language': true, 'intuition': true },
                effects: [
                    {
                        type: 'function', func: function () {
                            G.policyByName['creative foraging'].visible = false;
                            G.update['policy']();
                        }
                    }
                ],
                chance: 2,
                tutorialMesg: ['story2', 'You wonder where you are but the tall trees and dense bushes don\'t reveal much. You look at the sky, which seems a shade of blue darker than normal...wait, reality? You try to touch your ears to check if you are an elf too but you are still a human...but you still do not know why these elves decided to pick you as their ruler. After all, the fact that you aren\'t an elf just like them seems pretty important. Everything feels weird and awkward.', [33, 0, "c2"]],
            });
            new G.Tech({
                name: 'canoes', category: 'tier1',
                //TODO : fishing boats
                desc: '@allows exploration through ocean shores (rafts do not exist here). @Note, however, that canoes will be slower in the <b>Tundra</b>, <b>Swamplands</b>, <b>Jungle</b>, and <b>Boreal forest</b> biomes <><small>It doesn\'t look like a beach to me though...</small>',
                icon: [26, 7, "c2"],
                cost: { 'discernment': 15, 'creativity': 2, 'influence': 1 },
                req: { 'tool-making': true, 'woodcutting': true },
                effects: [
                    { type: 'allow', what: ['shore exploring'] },
                ],
                tutorialMesg: ['story1', 'You feel that wind sometimes blows downward in this world instead of sideways, and the pressure feels a lot stronger than usual. You see a bird having a hard time flying while the wind blows vertically...you try to ask one of your elves about it but they cannot produce an explanation for you...yet.', [33, 1, "c2"]]
            });
            new G.Tech({
                name: 'boat building', category: 'tier1',
                //TODO : in the future, boats will be units or resources. It is already Orteil...for both races.
                desc: '@allows full ocean exploring.<>Unlocks [boat]s, which will allow you to explore oceans. Also unlocks new modes for [wanderer]s and [scout]s. //<small>Let the voyage begin...again. Just take a seat!</small>',
                icon: [28, 7, "c2"],
                cost: { 'discernment': 60, 'creativity': 30 },
                req: { 'canoes': true, 'carpentry': true, 'intuition': true, 'construction': true },
                effects: [
                    { type: 'allow', what: ['ocean exploring'] },
                ],
            });

            new G.Tech({
                name: 'sedentism', category: 'tier1',
                desc: '@unlocks [mire shelter]s and [branch shelter]s<>To stay in one place when food is scarce is a bold gamble, especially to those without knowledge of agriculture.',//TODO : this should unlock a policy that lets you switch between nomadism (housing and food storage have no effect) and sedentism (gathering and hunting are much less efficient)
                icon: [8, 1, "c2"],
                cost: { 'discernment': 30 },
                req: { 'stone-knapping': true, 'digging': true, 'language': true, 'intuition': true },
                effects: [
                ],
                chance: 3,
            });
            new G.Tech({
                name: 'building', category: 'tier1',
                desc: '@unlocks [hut]s@unlocks [stockpile]s (with [stockpiling])<>The [building,Hut] is only slightly more sophisticated than simple shelters, but is more spacious and can withstand wear longer. //<small><font color="lime">Let\'s build a treehouse!</font></small>',
                icon: [9, 1, "c2"],
                cost: { 'discernment': 34, 'creativity': 8 },
                req: { 'sedentism': true, 'tool-making': true, 'intuition': true },
                effects: [
                ],
                chance: 3,
            });
            new G.Tech({
                name: 'cities', category: 'tier1',
                desc: '@unlocks [hovel]s<br>//<small>Villages are good too</small>',
                icon: [29, choose([7, 8]), "c2"],
                cost: { 'discernment': 25, 'creativity': 5 },
                req: { 'building': true, 'intuition': true },
                effects: [
                ],
            });
            new G.Tech({
                name: 'construction', category: 'tier1',
                desc: '@unlocks [house]s@unlocks [warehouse]s (with [stockpiling])<><small>This one refers to actual construction</small>',
                icon: [30, 7, "c2"],
                cost: { 'discernment': 30, 'creativity': 6 },
                req: { 'cities': true, 'masonry': true, 'carpentry': true, 'quarrying': true, 'construction-planning': true },
                tutorialMesg: ['story1', 'You consider setting up a modern factory here. However, these elves appear to have other plans. You\'d like to talk about it with your elves but they don\'t know what a factory even is yet.', [33, 4, "c2"]],
                chance: 3,
            });
            new G.Tech({
                name: 'city planning', category: 'tier1',
                desc: '@unlocks [architect]s',
                icon: [22, 8, "c2"],
                cost: { 'discernment': 25, 'gentility': 5 },
                req: { 'construction': true, 'cities': true, 'intuition': true, 'caligraphy': true },
                effects: [
                ],
            });
            new G.Tech({
                name: 'guilds', category: 'tier1',
                desc: '@unlocks [guild quarters], which can house some [worker]s',
                icon: [23, 8, "c2"],
                cost: { 'discernment': 24, 'gentility': 12 },
                req: { 'cities': true, 'construction': true, 'code of law': true },
                effects: [
                ],
            });
            new G.Tech({
                name: 'stockpiling', category: 'tier1',
                desc: '@unlocks [storage pit]s<>The foresight to store sustenance and materials ahead of time can make or break a budding civilization.',
                icon: [10, 1, "c2"],
                cost: { 'discernment': 10, 'creativity': 2 },
                req: { 'sedentism': true },
                effects: [
                    { type: 'show res', what: ['food storage'] },
                    { type: 'show res', what: ['material storage'] },
                ],
                chance: 2,
            });

            new G.Tech({
                name: 'digging', category: 'tier1',
                desc: '@unlocks [digger]s@paves the way for simple buildings<>The earth is full of riches - to those who can find them. //<small>Diggy, diggy, hole</small>',
                icon: [11, 1, "c2"],
                cost: { 'discernment': 15, 'creativity': 3 },
                req: { 'stone-knapping': true },
                effects: [
                    { type: 'show context', what: ['dig'] },
                ],
            });
            new G.Tech({
                name: 'well-digging', category: 'tier1',
                desc: '@unlocks [well]s<>It takes some thinking to figure out that water can be found if you dig deep enough.//It takes a lot of bravery, however, to find out if it is safe enough to drink.',
                icon: [22, 7, "c2"],
                cost: { 'discernment': 15, 'creativity': 3 },
                req: { 'digging': true, 'sedentism': true, 'tool-making': true },
                effects: [
                ],
            });
            new G.Tech({
                name: 'woodcutting', category: 'tier1',
                desc: '@unlocks [woodcutter]s//<small>chopchopchop</small>',
                icon: [23, 5, "c2"],
                cost: { 'discernment': 15, 'creativity': 3 },
                req: { 'stone-knapping': true },
                effects: [
                    { type: 'show context', what: ['chop'] },
                ],
            });

            new G.Tech({
                name: 'plant lore', category: 'upgrade',
                desc: '@[gatherer]s find more [herbs] and [fruit]s<>The knowledge of which plants are good to eat and which mean certain death is slow and perilous to learn.<br>//<small>There are a whole lot of unique plant types and categories, so this tech won\'t let you learn about them all at once, friend.</small>',
                icon: [23, 7, "c2"],
                cost: { 'discernment': 10, 'creativity': 1, 'gentility': 1 },
                req: { 'oral tradition 1/2': true },
                effects: [
                ],
            });
            new G.Tech({
                name: 'healing', category: 'tier1',
                desc: '@unlocks [healer]s<br>//<small>A hospital somewhere around here would be way better idea, but that seems way too hard.</small>',
                icon: [25, 7, "c2"],
                cost: { 'discernment': 20, 'creativity': 4 },
                req: { 'plant lore': true, 'stone-knapping': true, 'intuition': true },
                effects: [
                ],
                chance: 2,
            });

            new G.Tech({
                name: 'ritualism', category: 'religion',
                desc: '@provides 10 [spirituality]@unlocks [soothsayer]s@unlocks some ritual policies<>Simple practices, eroded and polished by time, may turn into rites and traditions.',
                icon: [12, 1],
                cost: { 'gentility': 10, 'creativity': 2 },
                req: { 'oral tradition 2/2': true, 'spark\'o religion': true },
                effects: [
                    { type: 'provide res', what: { 'spirituality': 10 } },
                ],
            });

            new G.Tech({
                name: 'symbolism', category: 'upgrade',
                desc: '@[painter]s produce 40% more [gentility] @[dreamer]s produce 25% more [discernment] and 12.5% more [creativity] @[storyteller]s produce 20% more [gentility]@[soothsayer]s produce 20% more [faith]<>The manifestation of one thing for the meaning of another; to make the cosmos relate to itself; this one focuses on shapes. There are three types of [symbolism] that you can unlock!',
                icon: [13, 1, "c2"],
                cost: { 'gentility': 18, 'discernment': 20, 'creativity': 4 },
                req: { 'oral tradition 2/2': true, 'intuition': true, 'symbI': false, 'symbN': false },
                chance: 10
            });

            new G.Tech({
                name: 'burial', category: 'tier1',
                desc: '@unlocks [grave]s, which provide [burial spot]s@exposed [corpse]s make elves even more unhappy<>It is the belief that there might be more to death than is first apparent that drives us to bury our deceased.',
                icon: [14, 1, "c2"],
                cost: { 'discernment': 20, 'creativity': 4 },
                req: { 'ritualism': true, 'digging': true },
                effects: [
                ],
                chance: 2,
            });

            new G.Tech({
                name: 'hunting', category: 'tier1',
                desc: '@unlocks [hunter]s<>It is a common tragedy that a creature should die so that another may survive.',
                icon: [15, 1, "c2"],
                cost: { 'discernment': 10, 'creativity': 2 },
                req: { 'language': true, 'tribalism': true },
                effects: [
                    { type: 'show context', what: ['hunt'] },
                ],
            });

            new G.Tech({
                name: 'fishing', category: 'tier1',
                desc: '@unlocks [fisher]s<>Fishing is more than simply catching fish; it involves knowing where the fish like to gather and which ones are good to eat.//It would be wise to check whether any of your territory contains fish before investing in this technology.',
                icon: [25, 1, "c2"],
                cost: { 'discernment': 12 },
                req: { 'tribalism': true },
                effects: [
                    { type: 'show context', what: ['fish'] },
                ],
            });

            new G.Tech({
                name: 'bone-working', category: 'tier1',
                desc: '@[artisan]s can now make [knapped tools] out of [bone]@[bone]s can now be used as [archaic building materials]<>//<small>For some reason, it requires some power from your battery. Pressure likely has to do with that though...</small>',
                icon: [22, 5, "c2"],
                cost: { 'discernment': 6, 'battery of discoveries': 18 },
                req: { 'stone-knapping': true },
                effects: [
                    { type: 'make part of', what: ['bone'], parent: 'archaic building materials' },
                ],
            });

            new G.Tech({
                name: 'spears', category: 'tier1',
                displayName: 'Spears and maces',
                desc: '@[artisan]s can now craft [stone weapons]@unlocks new modes for [hunter]s and [fisher]s<>Using tools as weapons opens a world of possibilities, from hunting to warfare.',
                icon: [26, 1, "c2"],
                cost: { 'discernment': 21, 'creativity': 3 },
                req: { 'tool-making': true },
            });
            new G.Tech({
                name: 'bows', category: 'tier1',
                desc: '@[artisan]s can now craft [bow]s@unlocks new modes for [hunter]s',
                icon: [27, 1, "c2"],
                cost: { 'discernment': 24 },
                req: { 'spears': true },
            });
            new G.Tech({
                name: 'fishing hooks', category: 'tier1',
                desc: '@unlocks new modes for [fisher]s',
                icon: [28, 1, "c2"],
                cost: { 'discernment': 22, 'creativity': 2 },
                req: { 'fishing': true, 'spears': true },
            });

            new G.Tech({
                name: 'fire-making', category: 'tier1',
                desc: '@unlocks [firekeeper]s<>Fire keeps you warm and makes animal attacks much less frequent.',
                icon: [16, 1, "c2"],
                cost: { 'discernment': 32, 'creativity': 4 },
                req: { 'stone-knapping': true },
                effects: [
                ],
                chance: 3,
            });

            new G.Tech({
                name: 'cooking', category: 'tier1',
                desc: '@[firekeeper]s can now cook [cooked meat] and [cooked seafood]<>Tossing fish and meat over a sizzling fire without reducing them to a heap of ash takes a bit of practice.',
                icon: [17, 1, "c2"],
                cost: { 'discernment': 11, 'creativity': 1 },
                req: { 'fire-making': true, 'rules of food': true },
            });
            new G.Tech({
                name: 'curing', category: 'tier1',
                desc: '@[firekeeper]s can now prepare [cured meat] and [cured seafood] with [salt], which last much longer<>Storing food with special preparations seems to ward off rot, and comes along with the advent of delicious jerky.',
                icon: [27, 7, "c2"],
                cost: { 'discernment': 24 },
                req: { 'cooking': true, 'stockpiling': true },
            });

            new G.Tech({
                name: 'sewing', category: 'tier1',
                desc: '@unlocks [clothier]s, who work with fabric and can sew [primitive clothes]',
                icon: [29, 1, "c2"],
                cost: { 'discernment': 27, 'creativity': 3 },
                req: { 'tool-making': true },
                effects: [
                ],
            });
            new G.Tech({
                name: 'weaving', category: 'tier1',
                desc: '@[clothier]s can now sew [basic clothes]',
                icon: [30, 1, "c2"],
                cost: { 'discernment': 21, 'creativity': 3 },
                req: { 'sewing': true },
            });
            new G.Tech({
                name: 'leather-working', category: 'tier1',
                desc: '@[clothier]s can now cure [hide]s into [leather] and use leather in cloth-making (with [weaving])',
                icon: [31, 1, "c2"],
                cost: { 'discernment': 18, 'creativity': 5, 'gentility': 1 },
                req: { 'sewing': true },
            });

            new G.Tech({
                name: 'smelting', category: 'tier1',
                desc: '@unlocks [furnace]s, which turn ore into metal ingots@unlocks [blacksmith workshop]s, which forge metal ingots into metal goods',
                icon: [26, 5, "c2"],
                cost: { 'discernment': 41, 'creativity': 7 },
                req: { 'fire-making': true, 'building': true },
                effects: [
                ],
            });

            new G.Tech({
                name: 'softmetal-working', category: 'tier1',
                desc: '@[furnace]s can now make [hard metal ingot]s from [olivnum ore] and [tin ore]',
                icon: [28, 5, "c2"],
                cost: { 'discernment': 72, 'creativity': 12 },
                req: { 'smelting': true },
                effects: [
                ],
            });
            new G.Tech({
                name: 'iron-working', category: 'tier1',
                desc: '@[furnace]s can now make [hard metal ingot]s from [iron ore]',
                icon: [27, 5, "c2"],
                cost: { 'discernment': 30, 'creativity': 6 },
                req: { 'smelting': true },
                effects: [
                ],
            });
            new G.Tech({
                name: 'greenold-working', category: 'tier1',
                desc: '@[furnace]s can now make [precious metal ingot]s from [greenold ore]@[blacksmith workshop]s can now forge [greenold block]s out of [precious metal ingot]s',
                icon: [29, 5, "c2"],
                cost: { 'discernment': 40, 'faith': 2 },
                req: { 'smelting': true },
                effects: [
                ],
            });
            new G.Tech({
                name: 'steel-making', category: 'tier1',
                desc: '@[furnace]s can now make [strong metal ingot]s from [iron ore] and [coal]',
                icon: [30, 5, "c2"],
                cost: { 'discernment': 46, 'influence': 2 },
                req: { 'iron-working': true },
                effects: [
                ],
            });

            new G.Tech({
                name: 'bellwethers', category: 'tier1',
                desc: '@unlocks [bellwether]s, which generate [influence]@provides 5 [authority]<>[bellwether]s lead to better outcomes when there is a struggle within your tribe. //<small>ding ding ding</small>',
                icon: [22, 6, "c2"],
                cost: { 'discernment': 18, 'gentility': 4, 'creativity': 1, 'influence': 1 },
                req: { 'oral tradition 2/2': true },
                effects: [
                    { type: 'provide res', what: { 'authority': 5 } },
                ],
            });
            new G.Tech({
                name: 'clans', category: 'tier1',
                desc: '@unlocks [clan leader]s, which generate [influence]@provides 5 [authority]',
                icon: [23, 6, "c2"],
                cost: { 'discernment': 25, 'creativity': 2, 'influence': 2, 'gentility': 1 },
                req: { 'bellwethers': true, 'code of law': true },
                effects: [
                    { type: 'provide res', what: { 'authority': 5 } },
                ],
            });
            new G.Tech({
                name: 'code of law', category: 'tier1',
                desc: '@provides 15 [authority]@political units will generate more [influence]<br>//<small>Paragraph 1...wait...will paragraphs exist in elvish code of law?</small>',
                icon: [24, 6, "c2"],
                cost: { 'discernment': 20, 'creativity': 1, 'influence': 3 },
                req: { 'symbolism': true, 'sedentism': true, 'writing': true },
                effects: [
                    { type: 'provide res', what: { 'authority': 15 } },
                ],
            });

            new G.Tech({
                name: 'mining', category: 'tier1',
                desc: '@unlocks [mine]s.<br>//<small>Strike the earth with a lot of might!</small>',
                icon: [24, 5, "c2"],
                cost: { 'discernment': 38, 'creativity': 4 },
                req: { 'digging': true, 'building': true },
                effects: [
                    { type: 'show context', what: ['mine'] }
                ],
            });
            new G.Tech({
                name: 'prospecting', category: 'upgrade',
                desc: '@[mine]s can now be set to mine for specific ores.',
                icon: [25, 5, "c2"],
                cost: { 'discernment': 28, 'creativity': 14 },
                req: { 'mining': true },
                effects: [
                ],
            });

            new G.Tech({
                name: 'quarrying', category: 'tier1',
                desc: '@unlocks [quarry,Quarries] //<small>These rocks seem ever-so-slightly green...</small>',
                icon: [25, 6, "c2"],
                cost: { 'discernment': 30, 'creativity': 6 },
                req: { 'digging': true, 'building': true },
                effects: [
                    { type: 'show context', what: ['quarry'] }
                ],
            });

            new G.Tech({
                name: 'carving', category: 'tier1',
                desc: '@unlocks [carver]s, which can produce a variety of goods out of stone, wood and bone@may lead to the knowledge of better tools',
                icon: [26, 6, "c2"],
                cost: { 'discernment': 9, 'creativity': 3 },
                req: { 'stone-knapping': true },
                effects: [
                ],
                chance: 3,
            });

            new G.Tech({
                name: 'gem-cutting', category: 'tier1',
                desc: '@[carver]s can now craft shiny [gem block]s out of [gems]//<small>That\'s so sparkly!</small>',
                icon: [27, 6, "c2"],
                cost: { 'discernment': 16, 'creativity': 8 },
                req: { 'carving': true, 'tool-making': true },
                effects: [
                ],
            });

            new G.Tech({
                name: 'pottery', category: 'tier1',
                desc: '@unlocks [potter]s, which produce goods such as [pot]s out of [clay] and [mire]@unlocks [granary,Granaries] (with [stockpiling])@[digger]s find more [clay] //<small>Some elves love nature, so they take every pot crafted and put a flower or two in it!</small>',
                icon: [28, 6, "c2"],
                cost: { 'discernment': 26, 'creativity': 4 },
                req: { 'fire-making': true, 'digging': true, 'tool-making': true },
                effects: [
                ],
            });
            new G.Tech({
                name: 'masonry', category: 'tier1',
                desc: '@unlocks [kiln]s, which produce a variety of goods such as [brick]s@[carver]s can now turn [stone]s into [cut stone] slowly<>//<small>Let\'s build a tall brick wall, so perhaps the wall will defend us from the dark!</small>',
                icon: [29, 6, "c2"],
                cost: { 'discernment': 48, 'creativity': 6 },
                req: { 'building': true, 'pottery': true },
                effects: [
                ],
            });
            new G.Tech({
                name: 'carpentry', category: 'tier1',
                desc: '@unlocks [carpenter workshop]s, which can process [log]s into [lumber] and produce materials crafted from wood@unlocks [barn]s (with [stockpiling])<br>//<small>Pink planks? Oh, I forgot that is no longer the human\'s universe. Sorry, my bad.</small>',
                icon: [30, 6, "c2"],
                cost: { 'discernment': 35, 'gentility': 2, 'creativity': 5 },
                req: { 'building': true, 'woodcutting': true },
                effects: [
                ],
            });

            new G.Tech({
                name: 'monument-building', category: 'tier1',
                desc: '@unlocks the [the fortress,The Fortress], an early wonder<br>//<small>...expensive stuff</small>',
                icon: [24, 8, "c2"],
                cost: { 'discernment': 97, 'gentility': 43, 'creativity': 46, 'influence': 9, 'faith': 3 },
                req: { 'construction': true, 'burial': true, 'belief in the afterlife': true },
                tutorialMesg: ['story2', 'You want to constuct a wonder. However, a lot of excavation is needed.', [33, 3, "c2"]]
            });
            new G.Tech({
                name: 'a power of the fortress', category: 'misc',
                desc: 'Your Fortress power will improve many aspects of life if its power is increased. You currently have no evolution bonuses.',
                icon: [4, 12, "magixmod", 24, 9, "c2"],
                cost: {},
                req: { 'tribalism': false },
                effects: [
                ],
            });
            new G.Tech({
                name: 'primary intuition', category: 'tier1',
                desc: '[primary intuition] is an important key for some researches. However, if [population,elves] will expand their intuition, they should be able to think about further, more complicated researching. //Having just [primary intuition] allows you to research up to [oral tradition 2/2,Oral tradition]. More complicated researches like sewing and crafting can be unlocked only with "secondary" [intuition].',
                icon: [27, 10, "c2"],
                startWith: true,
            });
            new G.Trait({
                name: 'water courage',
                desc: '<font color="#e6ffee">Elves will become less afraid of water. //Obtaining this knowledge trait will allow elves to eventually use boats as a way to travel or explore the mysterious world filled with secrets within.</font><br>//<small>So elves are hydrophobic?</small>',
                icon: [29, 9, "c2"],
                cost: { 'creativity': 1 },
                chance: 1,
                req: { 'primary intuition': true },
                category: 'knowledge'
            });
            new G.Trait({
                name: 'intuition',
                desc: '[intuition] opens a way to more complex researching. Researches related to crafting, building, planning, and other related ideas can be "on-plan" from now on.<br>//<small>I think a merge of human and elf may give us a genius...</small>',
                icon: [28, 10, "c2"],
                chance: 1.75,
                cost: { 'gentility': 2, 'discernment': 3, 'creativity': 6 },
                req: { 'oral tradition 2/2': true },
            });
            new G.Trait({
                name: 'scavenging',
                desc: '@idle [worker]s gather resources with 8% of the speed of a [gatherer]. @<b><font color="#f70054">Note: This trait is rather temporary and has a varied lifetime, but has a moderate chance to become permanent. Eventually, if this trait doesn\'t get adopted for good, it will no longer appear or swap with other traits from the primary category.</font></b>//<small>Is there anything to scavenge?</small>',
                icon: [20, 1, "c2"],
                chance: 1,
                req: { 'tribalism': true, 'carcass-looting': false, 'dreaming': false, 'branching wisdom': false },
                lifetime: function () { return 5 + (Math.pow(this.yearOfObtainment, 1.5) % 42 > 32 && Math.pow(this.yearOfObtainment, 1.5) % 42 < 36 ? Infinity : (this.yearOfObtainment * 2) % 75) }
            });
            new G.Trait({
                name: 'rules of food',
                displayName: '<font color="#fee6d5">Rules of food</font>',
                desc: '@unlocks policies that manage which food types can be eaten.',
                icon: [19, 1, "c2"],
                chance: 0.75,
                req: { 'tribalism': true, 'policies': true },
                //TODO
            });
            new G.Trait({
                name: 'ground tools',
                desc: '@[artisan]s and [carver]s craft 10% faster',
                icon: [23, 9, "c2"],
                cost: { 'discernment': 6, 'gentility': 6 },
                chance: 10,
                switchCategory: false,
                lifetime: function () { return Math.pow(this.yearOfObtainment % 10, 4) > 2 && Math.pow(this.yearOfObtainment % 10, 4) < 7 ? undefined : Infinity },
                req: { 'tool-making': true/*,'some future tool tech':false (TODO)*/ },
            });
            new G.Trait({
                name: 'artistic thinking',
                desc: '@[storyteller]s are 10% more efficient@opens the way for more art forms',
                icon: [27, 11, "c2"],
                cost: { 'gentility': 8 },
                chance: 10,
                req: { 'symbolism': true },
            });
            //TODO : how these interact with techs such as symbolism, ritualism and burial
            new G.Trait({
                name: 'fear of death',
                desc: '@unhappiness from death is doubled@may evolve into more complex spiritual thinking. //<small>D-d-dd-death?</small>',
                icon: [18, 1, "c2"],
                cost: { 'gentility': 12, 'discernment': 1 },
                chance: 10,
                category: 'long',
                lifetime: function () { return 300 + ((this.yearOfObtainment % 250) - 125) },
                req: { 'language': true, 'spark\'o religion': true, 'acceptance of death': false, 'death scepticism': false },
            });
            new G.Trait({
                name: 'acceptance of death',
                desc: '@unhappiness from death is halved@may evolve into more complex spiritual thinking //<small>That had to happen. Nature is merciless...</small>',
                icon: [21, 1, "c2"],
                cost: { 'gentility': 12, 'discernment': 1 },
                chance: 10,
                category: 'long',
                lifetime: function () { return 300 + ((this.yearOfObtainment % 250) - 125) },
                req: { 'language': true, 'spark\'o religion': true, 'fear of death': false, 'death scepticism': false },
                effects: [
                    {
                        type: 'function', func: function () {
                            G.getDict('belief in the afterlife').req = { 'acceptance of death': true, 'oral tradition 2/2': true, 'spark\'o religion': true, 'belief in the beforelife': false };
                            G.getDict('belief in the beforelife').req = { 'acceptance of death': true, 'oral tradition 2/2': true, 'spark\'o religion': true, 'belief in the afterlife': false, 'ritual necrophagy': false };
                        }
                    }
                ],
            });
            new G.Trait({
                name: 'belief in the beforelife',
                desc: '@prevents [ritual necrophagy,Corpse cruelty] traits from being occasionally adopted. @if this trait is adopted after [ritual necrophagy,Necrophagy] or [art of death], then it will be instantly removed because they believe respecting their ancestors is a key to well being.',
                icon: [8, 8, "magixmod"],
                cost: { 'gentility': 10, 'faith': 2, 'influence': 1, 'discernment': 1 },
                chance: 10,
                req: { 'fear of death': true, 'oral tradition 2/2': true, 'spark\'o religion': true, 'belief in the afterlife': false, 'ritual necrophagy': false },
                category: 'religion',
                effects: [
                    {
                        type: 'function', func: function () {
                            G.getDict('monument-building').req = { 'construction': true, 'burial': true, 'belief in the beforelife': true };
                            G.getDict('missionary').req = { 'ritualism': true, 'symbolism': true, 'belief in the beforelife': true };
                            fortress();

                            if (G.has('ritual necrophagy')) G.deleteTrait('ritual necrophagy');
                            if (G.has('art of death')) G.deleteTrait('art of death');
                        }
                    },
                ],
            });
            new G.Trait({
                name: 'belief in the afterlife',
                desc: '@unhappiness from death is halved.',
                icon: [21, 1, "c2"],
                cost: { 'gentility': 10, 'faith': 2, 'influence': 1, 'discernment': 1 },
                chance: 10,
                req: { 'fear of death': true, 'oral tradition 2/2': true, 'spark\'o religion': true, 'belief in the beforelife': false },
                effects: [
                    {
                        type: 'function', func: function () {
                            fortress();
                            G.getDict('druidish travellers team').req = { 'missionary': true, 'belief in the afterlife': true };
                            G.getDict('druidish travellers team').icon = [30, 2, "c2"];
                            G.getDict('druidish travellers team').desc = '@They not only spread [faith] on this wild world, but also explore it. Their mission is to praise nature and souls that live with a second life or in a totally different world as another form. //This unit requires 2 druids to spread [faith] and if it will drops too low, the team will refuse to work. Every team provides 1 [spirituality].';
                        }
                    },
                ],
                category: 'religion',
            });
            new G.Trait({
                name: 'belief in revenants',
                desc: '@unhappiness from unburied [corpse]s is doubled. //<small>Scary!</small>',
                icon: [18, 1, "c2"],
                cost: { 'gentility': 8, 'faith': 2 },
                chance: 100,
                req: { 'belief in the afterlife': true },
            });
            new G.Trait({
                name: 'ritual necrophagy',
                desc: '@[corpse]s are slowly turned into [meat] and [bone]s, creating some [faith] but harming [health]. @<b><font color="#f70054">Note: This trait is rather temporary, but there is a slight chance that this trait will become permanent.</font></b>//<small>Ewww...it\'s more disgusting than leaving a dead one for animals to devour...but sometimes you have no choice...no...choice.</small>',
                icon: [15, 7, "magixmod"],
                cost: { 'gentility': 25, 'discernment': 5 },
                category: 'long',
                chance: 500,
                req: { 'tribalism': true, 'ritualism': true, 'belief in the beforelife': false, 'art of death': false },
                lifetime: function () { return ((this.yearOfObtainment + 350) % 450 >= 383 && (this.yearOfObtainment + 350) % 450 <= 400 ? Infinity : (this.yearOfObtainment + 350) % 450) }
            });
            new G.Trait({
                name: 'culture of moderation',
                desc: '@elves consume 15% less [food], but derive less joy from eating <> @may unlock more food habit traits',
                icon: [3, 12, "c2", 19, 1, "c2"],
                cost: { 'gentility': 15, 'discernment': 1 },
                chance: 50,
                category: 'long',
                lifetime: 200,
                req: { 'tribalism': true, 'joy of eating': false, 'unstable eating habits': false, 'consumption stability': false, 'unstable consumption habits': false, 'dry throats': false },
            });
            new G.Trait({
                name: 'joy of eating',
                desc: '@elves consume 15% more [food], but are happier when eating <> @may unlock more food habit traits',
                icon: [4, 12, "c2", 19, 1, "c2"],
                cost: { 'gentility': 15, 'discernment': 2 },
                chance: 50,
                category: 'long',
                lifetime: 200,
                req: { 'tribalism': true, 'culture of moderation': false, 'unstable eating habits': false, 'consumption stability': false, 'unstable consumption habits': false, 'joy of drinking': false },
            });
            new G.Trait({
                name: 'insect-eating',
                desc: '@your elves are no longer unhappy when eating [bugs]. @<b><font color="#f70054">Note: This trait is rather temporary and has a varied lifetime, but has a chance of becoming permanent.</font></b><br>//<small>This world may have <b>bugs</b> that can eat elves...literally. Maybe. Sorry to scare ya.</small>',
                icon: [12, 19, "c2", 22, 1, "c2"],
                chance: 5,
                req: { 'insects as food': 'on' },
                effects: [
                    { type: 'function', func: function () { G.getDict('bugs').turnToByContext['eating']['happiness'] = 0; } },
                ],
                switchCategory: false,
                lifetime: function () { return 10 + (this.yearOfObtainment + (this.yearOfObtainment % 20)) % 191 > 175 ? Infinity : 10 + (this.yearOfObtainment + 20) % 191 },
                category: 'main'
            });
            new G.Tech({
                name: 'aiming', category: 'tier1',
                desc: 'Teach your [hunter]s and [fisher]s how to be more accurate. The problem was that hunters were shooting arrows from bows and just trying their luck. Same with spear throwing.<>However, improved accuarcy will increase the chances of good aim, meaning that <b>Bow hunting</b> and <b>Spear hunting/fishing</b> become faster.',
                icon: [25, 8, "c2"],
                req: { 'spears': true, 'bows': true, 'building': true },
                cost: { 'discernment': 24, 'creativity': 12 },
            });
            new G.Tech({
                name: 'herbalism', category: 'tier1',
                desc: '[gatherer]s can now gather some [herbs] in small amounts.<br>//<small>But it still just looks like plain grass!</small>',
                icon: [22, 10, "c2"],
                req: { 'language': true },
                cost: { 'discernment': 9, 'creativity': 3 },
            });
            new G.Trait({
                name: 'where am i?',
                displayName: '<font color="#ddff45">Where am I?</font>',
                desc: '@Unlocks primary information about your small-but-still world. @Go to the <b>Territory</b> tab to see what goods you can gain from your territory and where your tribe has settled. //<small>Seriously where am I?...i may need to ask...again.</small>',
                icon: [22, 11, "c2"],
                chance: 1.11,
                cost: { 'creativity': 1, 'battery of discoveries': 12, 'discernment': 1 }, //let's ramp up difficulty
                req: { 'tribalism': true, 'policies': true },
            });
            new G.Trait({
                name: 'policies',
                displayName: '<font color="#f7a">Policies</font>',
                desc: '@Now you can spend your [influence] in the <b>Policies</b> tab. @Unlocking this lets you control some policies, one of the main parts of your civilization.',
                icon: [24, 11, "c2"],
                chance: 0.3,
                cost: { 'battery of discoveries': 5 },
                effects: [
                    { type: 'function', func: function () { G.pb = 1; G.pa = 2 } },
                ],
                req: { 'tribalism': true },
            });
            new G.Trait({
                name: 'upscale', category: 'anomaly',
                desc: 'Increases the costs of rolling/rerolling in the tech tab. Also, the [battery of discoveries] will charge way slower from now on. //<small>It may have something to do with pressure, it seems like. You may need to prepare for the next anomalies!</small>',
                icon: [28, 11, "c2"],
                req: { 'language': true, 'cities': true },
                cost: { 'discernment': 9, 'creativity': 3 },
                effects: [
                    { type: 'function', func: function () { upscaleBat *= 80; upscaleOth = 6 } },
                ],
                chance: 13
            });
            new G.Tech({
                name: 'tile inspection', category: 'tier1',
                desc: '@From now on, you can inspect discovered tiles in you <b>Territory</b> tab by clicking on them. @You can see goods and their density on the tile. @You can also inspect newly discovered tiles and get full info about its goods. @<font color="#f70054">However, you still can\'t see exactly how many of a resource you have within your territory!</font>',
                icon: [29, 10, "c2"],
                cost: { 'discernment': 20, 'gentility': 18, 'creativity': 10 },
                req: { 'intuition': true, 'scouting': true, 'plant lore': true, 'hunting': true },
            });
            new G.Trait({
                name: 'tile inspection II',
                desc: '<font color="#e6ffee">Now you can see how much of a certain resource you have within your territory, and how much total land and ocean is explored.</font>',
                icon: [3, 13, "c2", 30, 10, "c2"],
                cost: { 'discernment': 72, 'creativity': 24 },
                req: { 'maths': true, 'tile inspection': true, 'writing': true, 'alphabet 1/3': true },
                chance: 30,
                category: 'knowledge'
            });
            new G.Trait({
                name: 'second upscale', category: 'anomaly',
                desc: 'Increases the costs of rolling/rerolling in tech tab. Also, the [battery of discoveries] will charge way slower. //<small>Now it is confirmed...it has to do with <b>Pressure</b>.</small>',
                icon: [29, 11, "c2"],
                req: { 'monument-building': true },
                cost: {},
                effects: [
                    { type: 'function', func: function () { upscaleBat *= 100; upscaleOth *= 3 } },
                ],
                chance: 2
            });
            new G.Trait({
                name: 'Ice', category: 'anomaly', displayName: '<font color="#ccf">Ice</font>',
                desc: '<font color="#ccf">An aura of Ice has been triggered. A cold aura will slow down your gathering efficiency but also will slow down spoiling of [food] and [water]. Also, the efficiency of anything that uses [fire pit,fire] or makes [fire pit,fire] will be decreased. [digger] will dig more [ice].//You can see the power of this Aura by hovering over it on the top interface. Its power changes over time.//<small>Freeze, breeze</small></font>',
                icon: [22, 13, "c2"],
                effects: [{ type: 'function', func: function () { G.auratext = 0 } },],
                req: { 'tribalism': false },
                skip: true
            });
            new G.Trait({
                name: 'warmth', category: 'anomaly', displayName: '<font color="#f0bb6c">Warmth</font>',
                desc: '<font color="#f0bb6c">An aura of Warmth has been triggered. High temperatures will speed up [food] and [water] spoilage. Also, gathering water will be harder. [fishing] efficiency is decreased. [fire pit,Fire] will extinguish slower.//You can see the power of this Aura by hovering over it on the top interface. Its power changes over time.//<small>Summer 24/7/365...right?</small></font>',
                icon: [22, 15, "c2"],
                effects: [{ type: 'function', func: function () { G.auratext = 1 } },],
                req: { 'tribalism': false },
                skip: true
            });
            new G.Trait({
                name: 'earth', category: 'anomaly', displayName: '<font color="#c3bbcf">Earth</font>',
                desc: '<font color="#c3bbcf">An aura of Earth has been triggered. The grounds will mark their domination. [mining] will be faster, but buildings using [land] will collapse more often. The accident rate will be increased. //You can see the power of this Aura by hovering over it on the top interface. Its power changes over time.//<small>earth got mad bro/sis</small></font>',
                icon: [22, 14, "c2"],
                effects: [{ type: 'function', func: function () { G.auratext = 2 } },],
                req: { 'tribalism': false },
                skip: true
            });
            new G.Trait({
                name: 'mystic', category: 'anomaly', displayName: '<font color="#fa7df2">Mystic</font>',
                desc: '<font color="#fa7df2">A mystic aura has been triggered. Everything will decay faster, excluding magical resources. Magical units will be more efficient. Disease and death rates will increase. //Every year, you have a 20% chance for an event that will cause one random resource (except [population] or [land]) to be completely lost. If the choice lands on [discernment] or another essential, you will lose them all (except [wisdom], [inspiration], and essential limits)//You can see the power of this Aura by hovering over it on the top interface. Its power changes over time.//<small>Bibiddi bobiddi boo</small></font>',
                icon: [22, 16, "c2"],
                effects: [{ type: 'function', func: function () { G.auratext = 3 } },],
                req: { 'tribalism': false },
                skip: true
            });
            new G.Trait({
                name: 'Water', category: 'anomaly', displayName: '<font color="#4d88ff">Water</font>',
                desc: '<font color="#4d88ff">An aura of Water has been triggered. Farms will be a more efficient way to gather [food], but it will affect [mining] and [digging]. More [water] means a faster spoiling of it. [well]s are more efficient and you can find more shrooms. //You can see the power of this Aura by hovering over it on the top interface. Its power changes over time.//<small>splash</small></font>',
                icon: [22, 17, "c2"],
                effects: [{ type: 'function', func: function () { G.auratext = 4 } },],
                req: { 'tribalism': false },
                skip: true
            });
            new G.Trait({
                name: 'primary time measure',
                desc: '<font color="#e6ffee">Elves can now measure passing time in centuries.</font>',
                icon: [25, 11, "c2"],
                cost: { 'gentility': 12, 'creativity': 4 },
                effects: [
                ],
                req: { 'oral tradition 1/2': true },
                chance: 12,
                category: 'knowledge'
            });
            new G.Tech({
                name: 'time measuring 1/2', category: 'tier1',
                desc: 'Elves now know how to measure time. Getting this will let you see what year it is in your tribe! Also allows to see when <b>temporary traits</b> will expire. //To see days as well, you\'ll need to wait some more.',
                icon: [27, 3, "magixmod", 25, 12, "c2"],
                cost: { 'discernment': 60, 'creativity': 12 },
                effects: [
                ],
                req: { 'maths II': true, 'primary time measure': true },
                chance: 10
            });
            new G.Trait({
                name: 'time measuring 2/2',
                desc: '<font color="#e6ffee">Now you can see what year and day it currently is.</font>',
                icon: [27, 2, "magixmod", 25, 12, "c2"],
                cost: { 'creativity': 50 },
                effects: [
                ],
                req: { 'time measuring 1/2': true, 'second upscale': true },
                chance: 75,
                category: 'knowledge'
            });
            new G.Tech({
                name: 'maths', category: 'tier1',
                desc: '@[population,Elves] will know basic math, making them more intelligent and giving them a chance to create more advanced technologies. @allows for noting small, basic numbers. //<small>Is x really divisible by y?</small>',
                icon: [26, 12, "c2"],
                cost: { 'creativity': 6, 'discernment': 12 },
                req: { 'oral tradition 2/2': true, 'writing': true },
            });
            new G.Tech({
                name: 'maths II', category: 'tier1',
                desc: '@[population,Elves] will know more a little more advanced math, making them even more intelligent. @Now, they will have a greater chance to understand more complex concepts. @improves your civilization\'s numeral system',
                icon: [3, 13, "c2", 26, 13, "c2"],
                cost: { 'creativity': 42, 'discernment': 12 },
                req: { 'oral tradition 2/2': true, 'maths': true, 'city planning': true },
            });
            new G.Tech({
                name: 'writing', category: 'tier1',
                desc: 'Elves can write, at least. Because they do not have any paper yet, they will write on stones, logs, and other nearby objects. Learning [writing] is required to unlock further researches.//Provides 5 [quick-wittinity]<br>//<small>Writing the A letter, then G, after that an A, then write I and N at the end.</small>',
                icon: [27, 8, "c2"],
                req: { 'language': true },
                cost: { 'discernment': 6, 'creativity': 12 },
                effects: [
                ]
            });
            new G.Tech({
                name: 'caligraphy', category: 'tier1',
                desc: 'Your elves can write but their characters are hard to be read. This technology will be a pass for things like [city planning].<br>//<small>Now that HELLO AGAIN is readable...</small>',
                icon: [26, 9, "c2"],
                req: { 'writing': true },
                cost: { 'discernment': 30, 'gentility': 9, 'creativity': 15 },
                tutorialMesg: ['story1', 'You glance at your <i>' + G.getName('inhabs') + '</i> for a while. Everything seems harsh, yet your will of conquering this seemingly never-ending wilderness never seems to fade away.']
            });
            new G.Tech({
                name: 'alphabet 1/3', category: 'tier1',
                desc: 'Make elves set up their own alphabet. This is needed to unlock more advanced concepts and to understand more! //Provides 5 [quick-wittinity].',
                icon: [28, 27, "magixmod", 23, 13, "c2"],
                req: { 'caligraphy': true },
                cost: { 'discernment': 30, 'creativity': 6 },
                effects: [
                    { type: 'provide res', what: { 'quick-wittinity': 5 } },
                ]
            });
            new G.Tech({
                name: 'alphabet 2/3', category: 'tier1',
                desc: 'Improves the set of characters in the alphabet of your elves. //Provides 5 [quick-wittinity] and 15 [wisdom].//May lead to your elves having their own set of native languages.',
                icon: [27, 27, "magixmod", 24, 13, "c2"],
                req: { 'alphabet 1/3': true, 'second upscale': true },
                cost: { 'discernment': 250, 'gentility': 50 },
                effects: [
                    { type: 'provide res', what: { 'quick-wittinity': 5, 'wisdom': 15 } },
                ]
            });
            new G.Tech({
                name: 'alphabet 3/3', category: 'tier1',
                desc: 'Expands the amount of characters in your elves\'s language even more!',
                icon: [26, 27, "magixmod", 25, 13, "c2"],
                req: { 'alphabet 2/3': true, 'artistic thinking': true },
                cost: { 'discernment': 1100, 'gentility': 70, 'wisdom': 40, 'faith': 10 },
            });
            new G.Tech({
                name: 'construction-planning', category: 'tier1',
                desc: '@leads to [construction] and provides 5 [wisdom]',
                icon: [26, 8, "c2"],
                cost: { 'creativity': 20, 'gentility': 12, 'discernment': 22 },
                req: { 'writing': true, 'caligraphy': true, 'intuition': true },
                effects: [
                    { type: 'provide res', what: { 'wisdom': 5 } },
                ],
                chance: 3,
            });
            new G.Trait({
                name: 'spark\'o religion',
                desc: '[spark\'o religion] opens a path to [ritualism] and things related to religion (such as spirits, beliefs, and hopes). Who knows if you can even reach some sort of strange, wonderful <b>magic</b>? //<small>(It\'s the name of the game...after all...)</small>',
                icon: [24, 12, "c2"],
                chance: 2,
                cost: { 'gentility': 6 },
                req: { 'oral tradition 2/2': true },
                category: 'religion',
                effects: [
                ]
            });
            new G.Tech({
                name: 'message memory', category: 'tier1',
                desc: '@your message history will be increased from 25 to 50',
                icon: [30, 12, "c2"],
                cost: { 'gentility': 18, 'discernment': 12 },
                req: { 'oral tradition 1/2': true, 'caligraphy': true },
                category: 'tier1', chance: 7,
                effects: [
                    {
                        type: 'function', func: function () {
                            G.maxMessages = G.getSetting('lessMax') ? 25 : 50;
                        }
                    },
                ],
            });
            new G.Tech({
                name: 'wizard wisdom', category: 'tier1',
                desc: 'Now you can hire [Wizard]s to improve your tribe. You will gain 2 [wisdom] points for every <b>5</b> [Wizard]s. //<small>wisdom+=0.5...oh wait it is 2 per 5 oops</small>',
                icon: [23, 10, "c2"],
                cost: { 'discernment': 36, 'influence': 18, 'gentility': 36, 'creativity': 24 },
                req: { 'wizardry': true },
                tutorialMesg: ['story1', 'Looks like magic in this world also exists, but it appears to be more arcane than with humans...', [choose([24, 23, 22, 21]), 8, "magixmod"]]
            });
            new G.Tech({
                name: 'knitting', category: 'tier1',
                desc: 'Knitting is a method by which yarn is manipulated to create a textile or fabric, and is simple enough to learn. It is used in many types of garments. @[clothier]s are 8% more efficient in all modes.',
                icon: [26, 11, "c2"],
                cost: { 'discernment': 39, 'creativity': 15 },
                req: { 'tool-making': true, 'sewing': true, 'weaving': true },
                effects: [
                ],
            });
            new G.Tech({
                name: 'basic mapping', category: 'tier1',
                desc: '@Allows <b>Exploration</b> units to travel more. They become more advanced and may explore further lands. //Increases the exploration softcap.',
                icon: [28, 13, "c2"],
                cost: { 'discernment': 48, 'creativity': 6 },
                req: { 'scouting': true, 'writing': true, 'caligraphy': true, 'alphabet 1/3': true },
            });
            new G.Tech({
                name: 'map details', category: 'tier1',
                desc: '@Allows <b>Exploration</b> units to travel even further beyond! They become more advanced and may explore more distant lands. //Increases the exploration softcap.',
                icon: [29, 13, "c2"],
                cost: { 'discernment': 104, 'creativity': 16 },
                req: { 'basic mapping': true, 'alphabet 2/3': true },
            });
            new G.Tech({
                name: 'advanced mapping', category: 'tier1',
                desc: '@Allows <b>Exploration</b> units to travel very very far away! They become more advanced and may explore far into the world. //<b>Removes</b> exploration barriers!',
                icon: [30, 13, "c2"],
                cost: { 'discernment': 800, 'creativity': 48 },
                req: { 'map details': true, 'alphabet 3/3': true },
            });
            new G.Trait({
                name: 'knowledge-rise', category: 'knowledge',
                desc: '<font color="#e6ffee">Elves really want to discover more, paving the way for more complicated researches that may improve their life and knowledge. //Provides 10 [quick-wittinity] and 30 [wisdom]</font>',
                icon: [23, 14, "c2"],
                req: { 'maths II': true },
                cost: { 'creativity': 20 },
                effects: [
                    { type: 'provide res', what: { 'quick-wittinity': 10 } },
                    { type: 'provide res', what: { 'wisdom': 30 } },
                ],
                chance: 15,
            });
            new G.Trait({
                name: 'plant lore II', category: 'knowledge',
                desc: '<font color="#e6ffee">@unlocks the [florist]. The [florist] is a gatherer tasked with collecting various [flowers] instead of other resources.//Also unlocks the <b>Heal sick elves</b> mode for [healer]s, which allows you to heal [sick] elves faster.</font>',
                icon: [27, 13, "c2"],
                cost: { 'creativity': 9, 'discernment': 36 },
                req: { 'herbalism': true, 'a power of the fortress': true, 'plant lore': true },
                chance: 6,
            });
            new G.Tech({
                name: 'primitive glass-crafting', category: 'tier1',
                desc: 'Your [kiln]s will be able to craft [glass] out of [sand]. //<small>A window to the world...wait...it\'s near impossible to see any beautiful landscape here. Maybe not.</small>',
                icon: [28, 12, "c2"],
                cost: { 'creativity': 30 },
                req: { 'masonry': true, 'smelting': true },
            });
            new G.Tech({
                name: 'missionary', category: 'tier1',
                desc: '@unlocks [druidish travellers team] //Send a religious tribe to spread your religion and ideas and explore Mother Nature. In addition, each [soothsayer] will gain 25% more faith but, from now on, they are limited//<small>Hey! Do not consider it as profanation. It is not like that...</small>',
                icon: [28, 14, "c2"],
                cost: { 'faith': 10, 'creativity': 12, 'discernment': 2 },
                req: { 'ritualism': true, 'symbolism': true, 'belief in the afterlife': true },
                effects: [
                    {
                        type: 'function', func: function () {
                            G.getDict('soothsayer').limitPer = { 'population': 10 };
                        }
                    },
                ],
            });
            new G.Tech({
                name: 'druidism', category: 'tier1',
                desc: '@unlocks [druid]s, who gather more [faith] and [happiness] than [soothsayer]s (although with a limit) //<small>Nature sometimes can be swift and terrible. Keep that in mind, my friend.</small>',
                icon: [27, 14, "c2"],
                cost: { 'faith': 8, 'discernment': 24, 'gentility': 18 },
                req: { 'ritualism': true, 'symbolism': true, 'language': true },
                tutorialMesg: ['story1', 'These elves really do live long here. However, the wind is pressing down harshly. You decided to call this wind "Pressure" because they say it is more than just a wind.', [2, 11, "c2"]]
            });
            new G.Tech({
                name: 'philosophy', category: 'tier1',//Unlocks thot if Thot(actually Philosopher) Mod installed :)
                desc: 'Provides 75 [wisdom] and 30 [quick-wittinity] for free. //Also increases the [symbolism] bonus for [dreamer]s from 40 to 45%. //Many elves start wondering why things aren\'t different than they are.' + (G.modsByName['Thot Mod'] ? "Also unlocks [thot] and applies the [symbolism] bonus for him reduced by 10% comparing to new [dreamer] bonus." : "") + '',
                icon: [29, 14, "c2"],
                req: { 'alphabet 2/3': true },
                cost: { 'discernment': 135, 'creativity': 70, 'gentility': 35 },
                effects: [
                    { type: 'provide res', what: { 'wisdom': 75, 'quick-wittinity': 30 } },
                ]
            });
            new G.Trait({
                name: 'developed creativity', category: 'knowledge',
                desc: '<font color="#e6ffee">@unlocks [conceptionist]s, who spend their free time developing creativity rather than inventing. @this variation of dreamers will generate [creativity] and will charge the [battery of discoveries] simultaneously. @from now on, [dreamer]s produce one-third more [discernment]. They also stop providing [creativity] and become limited based on your [population,elves]. @provides 20 [quick-wittinity] and 10 [wisdom], and will unlock a few more techs</font>',
                icon: [30, 14, "c2"],
                cost: { 'creativity': 60, 'discernment': 120 },
                req: { 'philosophy': true, 'a power of the fortress': true },
                effects: [
                    {
                        type: 'function', func: function () {
                            G.getDict('dreamer').limitPer = { 'population': 3 };
                            G.unitByName['dreamer'].modesById[0].name = 'Gather discernment';
                            G.unitByName['dreamer'].modesById[0].desc = 'Gather [discernment]';
                        }
                    },
                    { type: 'provide res', what: { 'quick-wittinity': 20, 'wisdom': 10 } },
                ],
                chance: 8,
            });
            new G.Trait({
                name: 'druidsymbolism1',
                displayName: 'Natural hopefulness',
                desc: '[druid]s gather 25% more [happiness]. //<b>This trait is always temporary but has a varied lifespan.</b>',
                icon: [23, 15, "c2"],
                cost: { 'faith': 8, 'gentility': 34 },
                effects: [
                ],
                req: { 'druidism': true, 'druidsymbolism2': false, 'druidsymbolism3': false },
                chance: 100,
                switchCategory: false,
                lifetime: function () { return (Math.pow((this.yearOfObtainment + 50) / 2, 2)) % 500 }
            });
            new G.Trait({
                name: 'druidsymbolism2',
                displayName: 'Holy light',
                desc: '[druid]s use their natural bonds to sporadically gather some [health]. //<b>This trait is always temporary but has a varied lifespan.</b>',
                icon: [23, 16, "c2"],
                cost: { 'faith': 8, 'gentility': 34 },
                effects: [
                ],
                req: { 'druidism': true, 'druidsymbolism1': false, 'druidsymbolism3': false },
                chance: 100,
                switchCategory: false,
                lifetime: function () { return (Math.pow((this.yearOfObtainment + 50) / 2, 2)) % 500 }
            });
            new G.Trait({
                name: 'druidsymbolism3',
                displayName: 'Mental balance',
                desc: 'Unlocks a new ritual which will affect [happiness] and its bonuses and penalties at specific amounts. Look for [mental balance] in the rituals section of your <b>Policies</b>. //<b>This trait is always temporary but has a varied lifespan.</b>',
                icon: [23, 17, "c2"],
                cost: { 'faith': 8, 'gentility': 34 },
                effects: [
                ],
                req: { 'druidism': true, 'druidsymbolism1': false, 'druidsymbolism2': false },
                chance: 100,
                switchCategory: false,
                lifetime: function () { return (Math.pow((this.yearOfObtainment + 50) / 2, 2)) % 400 }
            });
            new G.Trait({
                name: 'gardening',
                desc: '<font color="#e6ffee">A key for unlocking farms! Elves learn how to use water for crops, allowing your people to start thinking about making some small gardens.</font>',
                icon: [26, 10, "c2"],
                cost: { 'creativity': 40 },
                effects: [
                ],
                req: { 'druidism': true, 'city planning': true },
                chance: 15,
                category: 'knowledge'
            });
            new G.Tech({
                name: 'water construction', category: 'tier1',
                desc: '@unlocks [shelter on water,Shelters on water]',
                icon: [24, 15, "c2"],
                cost: { 'discernment': 70, 'creativity': 40 },
                req: { 'construction': true, 'developed creativity': true },
                effects: [
                ],
                chance: 10,
            });
            new G.Trait({
                name: 'archaeology',
                desc: '<font color="#f4dd6a">Throughout many ascensions, there have been some [relic]s left on this world by previous civilizations. @unlocks the [archaeologist], someone who forage and dig into the surface to investigate stuff previous civilizations left behind</font><br><font color="#f70054">A some point, [archaeologist]s may have a harder time locating after nearby [relic]s have all been discovered.</font>',
                icon: [26, 14, "c2"],
                cost: { 'creativity': 120 },
                req: { 'gardening': true, 'developed creativity': true, 'tribalism': false },
                category: 'knowledge',
                chance: 125,
            });
            new G.Trait({
                name: 'out of relics',
                desc: 'Most of the relics have been found. From now on, [archaeologist]s will dig out stuff left by previous generations. Luckily, there is still be a chance to find a rare finding based on the current rarity levels! @[archaeologist]s will become 80% less efficient. @This trait will automatically disappear after several hundred years after your civilization evolves for many generations and cannot be removed.',
                icon: [3, 12, 26, 15, "c2"],
                cost: {},
                req: { 'archaeology': true, 'tribalism': false },
                chance: 2000,
                lifetime: 400,
            });
            new G.Trait({
                name: 'cold heart',
                desc: '@unhappiness from a lack of [fire pit]s or other heating sources is halved and [health] gain from warmth will be decreased by 1.5% (at other times it will be 2.5%). @happiness from having [fire pit]s or other heating sources is decreased by 15% //<small>Your tribe is getting used to low temperatures, meaning that they\'ll have to partially accept that fact in order to survive and make your civilization become unforgettable.</small>',
                icon: [27, 15, "c2", 24, 1, "c2"],
                cost: { 'gentility': 10 },
                req: { 'fire-making': true, 'hot heart': false, 'neutral heart': false, 'fluid heart': false, 'oral tradition 1/2': true },
                chance: 10,
                lifetime: function () { return 125 + ((this.yearOfObtainment % 100) - 50) },
                category: 'long'
            });
            new G.Trait({
                name: 'hot heart',
                desc: '@unhappiness from a lack of [fire pit]s or other heating sources is increased by 50%. @happiness from having [fire pit]s or other heating sources is increased by a quarter//<small>Your tribe needs warmth. They really love warmth brought to them by fire or other heating sources.</small>',
                icon: [28, 15, "c2", 23, 1, "c2"],
                cost: { 'gentility': 10 },
                req: { 'fire-making': true, 'cold heart': false, 'neutral heart': false, 'fluid heart': false, 'oral tradition 1/2': true },
                chance: 10,
                lifetime: function () { return 125 + ((this.yearOfObtainment % 100) - 50) },
                category: 'long'
            });
            new G.Trait({
                name: 'neutral heart',
                desc: '@[happiness] from having or lacking [fire pit]s or other heating sources isn\'t increased or decreased in any way. //<small>simply, it\'s neutral.</small>',
                icon: [29, 15, "c2", 22, 1, "c2"],
                cost: { 'gentility': 10 },
                req: { 'fire-making': true, 'cold heart': false, 'hot heart': false, 'fluid heart': false, 'oral tradition 1/2': true },
                chance: 10,
                lifetime: function () { return 125 + ((this.yearOfObtainment % 100) - 50) },
                category: 'long'
            });
            new G.Trait({
                name: 'fluid heart',
                desc: '@unhappiness from a lack of [fire pit]s or other heating sources is fluid, meaning every some period of time it will switch between: @being increased by a fifth of normal @being reduced by a quarter <>[happiness] gain from having heat sources will also switch between: @being increased by 5% @being decreased by 5% //<small>Your tribe probably is not going to clearly state if they are fine with cold nights or they prefer warmth and safety which is why they will change their thoughts at times.</small>',
                icon: [9, 15, "magixmod", 30, 15, "c2"],
                cost: { 'gentility': 10 },
                req: { 'fire-making': true, 'cold heart': false, 'hot heart': false, 'neutral heart': false, 'oral tradition 1/2': true },
                chance: 10,
                lifetime: function () { return 75 + ((this.yearOfObtainment % 40) - 20) },
                category: 'short'
            });
            new G.Trait({
                name: 'nudist culture',
                desc: '@unhappiness from a lack of [basic clothes,Clothing] is halved. @[basic clothes,Clothing] brings 5% or 10% less [happiness] and improves [health] 2.5% or 4% less.',
                icon: [29, 16, "c2", 24, 1, "c2"],
                cost: { 'gentility': 10 },
                req: { 'weaving': true, 'strict dress code': false, 'clothing indifference': false, 'fluid dress code': false },
                chance: 10,
                lifetime: function () { return 80 + (((this.yearOfObtainment + 25) % 100) - 25) },
                category: 'long'
            });
            new G.Trait({
                name: 'strict dress code',
                desc: '@unhappiness from a lack of [basic clothes,Clothing] is multiplied by 1.5.//<small>Strict dress code may affect relationships between elves. Sometimes it feels pretty unfair...</small>',
                icon: [29, 16, "c2", 23, 1, "c2"],
                cost: { 'gentility': 10 },
                req: { 'weaving': true, 'nudist culture': false, 'fluid dress code': false, 'clothing indifference': false },
                chance: 10,
                lifetime: function () { return 80 + (((this.yearOfObtainment + 25) % 100) - 25) },
                category: 'long'
            });
            new G.Trait({
                name: 'clothing indifference',
                desc: '@[happiness] from having or lacking [primitive clothes,Clothing] or other heating sources isn\'t increased or decreased in any way. //<small>simply, it\'s just neutral.</small>',
                icon: [29, 16, "c2", 22, 1, "c2"],
                cost: { 'gentility': 10 },
                req: { 'weaving': true, 'fluid dress code': false, 'nudist culture': false, 'strict dress code': false },
                chance: 10,
                lifetime: function () { return 80 + (((this.yearOfObtainment + 25) % 100) - 25) },
                category: 'long'
            });
            new G.Trait({
                name: 'fluid dress code',
                desc: 'unhappiness from a lack of [basic clothes,Clothing] or other heating sources is fluid, meaning every some period of time it will switch between: @being increased by 25% @being reduced by 25% <>[happiness] gain from having clothing will also switch between: @being increased by 4% @being reduced by 4% //<small>Your elves seem to have strange feelings for clothing.</small>',
                icon: [9, 15, "magixmod", 30, 16, "c2"],
                cost: { 'gentility': 10 },
                req: { 'weaving': true, 'clothing indifference': false, 'nudist culture': false, 'strict dress code': false },
                chance: 10,
                lifetime: function () { return 125 + (((this.yearOfObtainment + 25) % 100) - 25) },
                category: 'long'
            });
            new G.Trait({
                name: 'decent nourishment',
                desc: '@unhappiness from eating [bugs] and [spoiled food] increased by 30% @<b><font color="#f70054">Note: This trait is rather temporary and has a varied lifetime, but has a chance of becoming permanent.</font></b>//<small>But what if it is the only food in this wilderness? Will you still demand <b>decent nourishment</b>?</small>',
                icon: [8, 11, 26, 0, "magixmod"],
                chance: 5,
                req: { 'insects as food': 'on', 'insect-eating': false, 'worm culture': false },
                effects: [
                    { type: 'function', func: function () { G.getDict('bugs').turnToByContext['eating']['happiness'] *= 1.3; G.getDict('spoiled food').turnToByContext['eating']['happiness'] *= 1.3; } },
                ],
                lifetime: function () { return 10 + (this.yearOfObtainment + (this.yearOfObtainment % 20)) % 191 > 175 ? Infinity : 10 + (this.yearOfObtainment + 20) % 191 },
                category: 'main',
                switchCategory: false,
            });
            new G.Trait({
                name: 'worm culture',
                desc: '@your elves are no longer unhappy when eating [bugs]. @in addition, half of its [happiness] harm will turn into a <b>boost</b>. @<b><font color="#f70054">Note: This trait is rather temporary and has a varied lifetime, but has a chance of becoming permanent.</font></b>//<small>There are some countries that put worms into dishes. Surprisingly, elves are okay with that as well...</small>',
                icon: [8, 11, 24, 1, "c2"],
                chance: 15,
                req: { 'insects as food': 'on', 'insect-eating': false, 'decent nourishment': false },
                effects: [
                    { type: 'function', func: function () { G.getDict('bugs').turnToByContext['eating']['happiness'] *= -0.5; } }, //negate and divide by 2
                ],
                lifetime: function () { return 10 + (this.yearOfObtainment + (this.yearOfObtainment % 20)) % 191 > 175 ? Infinity : 10 + (this.yearOfObtainment + 20) % 191 },
                switchCategory: false,
                category: 'main'
            });
            new G.Trait({
                name: 'death scepticism',
                desc: '@unhappiness from death is fluid, meaning that it\'s effect will change between: @being increased by one-third @being reduced by one-third. <> @may evolve into more complex spiritual thinking @<b><font color="#f70054">Note: This trait is rather temporary, but there is a slight chance that this trait will become permanent.</font></b>',
                icon: [9, 15, "magixmod", 26, 16, "c2"],
                cost: { 'gentility': 12, 'creativity': 3 },
                chance: 30,
                category: 'long',
                lifetime: function () { return 300 + ((this.yearOfObtainment % 250) - 125) },
                req: { 'language': true, 'spark\'o religion': true, 'fear of death': false, 'acceptance of death': false },
                effects: [
                    {
                        type: 'function', func: function () {
                            G.getDict('belief in the afterlife').req = { 'death scepticism': true, 'oral tradition': true, 'spark\'o religion': true, 'belief in the beforelife': false };
                            G.getDict('belief in the beforelife').req = { 'death scepticism': true, 'oral tradition': true, 'spark\'o religion': true, 'belief in the afterlife': false, 'ritual necrophagy': false };
                        }
                    }
                ],
            });
            new G.Trait({
                name: 'consumption stability',
                desc: '@The [food] consumption of your [population,elves] isn\'t affected by this trait in any way. @may unlock more food habit traits //<small>What else do you need except breakfast, lunch, and dinner? Looks like your tribe doesn\'t need too much food.</small>',
                icon: [10, 15, "magixmod", 19, 1, "c2"],
                cost: { 'gentility': 7.5 },
                chance: 40,
                category: 'long',
                lifetime: function () { return 150 + ((this.yearOfObtainment % 100) - 50) },
                req: { 'tribalism': true, 'joy of eating': false, 'culture of moderation': false, 'unstable eating habits': false, 'unstable consumption habits': false },
            });
            new G.Trait({
                name: 'unstable eating habits',
                desc: '@elves have fluid [food] consumption, meaning that it may change over time. The consumption modifier will switch every so often between: @7% less but deriving less joy from eating @7% more but deriving more joy from eating <> @may unlock more food habit traits //<small>Maybe your elves feel strange about food...</small>',
                icon: [9, 15, "magixmod", 25, 15, "c2"],
                cost: { 'gentility': 7.5 },
                chance: 40,
                category: 'long',
                lifetime: function () { return 150 + ((this.yearOfObtainment % 100) - 50) },
                req: { 'tribalism': true, 'culture of moderation': false, 'joy of eating': false, 'consumption stability': false, 'unstable consumption habits': false },
            });
            new G.Tech({
                name: 'crime and punishment',
                desc: '@provides more detailed laws related to criminals in your civilization. @you may unlock other variations of this research depending on your civilization\'s relation to death. @this variation predicts moderate punishments for various crimes such as robbery, murder. @for the biggest crimes, one can get sentenced to death.',
                icon: [30, 34, "magixmod", 22, 1, "c2"],
                cost: { 'influence': 24, 'creativity': 12 },
                req: { 'code of law': true },
                effects: [
                ],
                chance: 200
            });
            new G.Trait({
                name: 'dry throats',
                desc: '@elves drink 15% less [water], but derive less joy from drinking. @may unlock more drinking habit traits //<small>Make sure your elves drink enough water! The food here isn\'t very hydrating exactly...</small>',
                icon: [3, 12, 30, 17, "c2"],
                cost: { 'gentility': 15, 'discernment': 2 },
                chance: 40,
                category: 'long',
                lifetime: function () { return 150 + ((this.yearOfObtainment % 100) - 50) },
                req: { 'tribalism': true, 'joy of drinking': false, 'drinking stability': false, 'unstable drinking habits': false, 'unstable consumption habits': false, 'culture of moderation': false },
            });
            new G.Trait({
                name: 'joy of drinking',
                desc: '@elves drink 15% more [water], but are happier when drinking. @may unlock more drinking habit traits //<small>Don\'t drink too much. About 7 liters of water can kill a human.</small>',
                icon: [4, 12, 30, 17, "c2"],
                cost: { 'gentility': 15, 'discernment': 2 },
                chance: 40,
                lifetime: function () { return 150 + ((this.yearOfObtainment % 100) - 50) },
                category: 'long',
                req: { 'tribalism': true, 'dry throats': false, 'drinking stability': false, 'unstable drinking habits': false, 'joy of eating': false, 'unstable consumption habits': false },
            });
            new G.Trait({
                name: 'drinking stability',
                desc: '@the amount that elves drink isn\'t affected by this trait in any way. @may unlock more drinking habit traits //<small>They simply need several cups of water per day to be happy. Just watch them, they don\'t need more or less.</small>',
                icon: [10, 15, "magixmod", 30, 17, "c2"],
                cost: { 'gentility': 15 },
                chance: 60,
                lifetime: function () { return 150 + ((this.yearOfObtainment % 100) - 50) },
                category: 'long',
                req: { 'tribalism': true, 'joy of drinking': false, 'dry throats': false, 'unstable drinking habits': false, 'unstable consumption habits': false },
            });
            new G.Trait({
                name: 'unstable drinking habits',
                desc: '@the amount that elves drink is fluid, meaning that it may change over time. The consumption modifier will switch every so often between: @5% less but deriving less joy from drinking @5% more deriving more joy from drinking <> @may unlock more drinking habit traits //<small>Maybe your elves just like switching things up every so often...</small>',
                icon: [9, 15, "magixmod", 30, 18, "c2"],
                cost: { 'gentility': 15 },
                chance: 70,
                lifetime: function () { return 150 + ((this.yearOfObtainment % 100) - 50) },
                category: 'long',
                req: { 'tribalism': true, 'culture of moderation': false, 'joy of eating': false, 'drinking stability': false, 'unstable eating habits': false, 'unstable consumption habits': false },
            });
            new G.Trait({
                name: 'unstable consumption habits',
                desc: '@The amount that elves eat is fluid, meaning that it will change gradually. The consumption modifier will switch every so often between: @5% less and deriving but slightly less [happiness] gain @5% more and slightly more [happiness] gain @2.5% more and not affecting [happiness] @2.5% less and not affecting [happiness]<>//<small>variety in its true form</small>',
                icon: [9, 15, "magixmod", 30, 19, "c2"],
                cost: { 'gentility': 15 },
                chance: 250,
                lifetime: function () { return 100 + ((this.yearOfObtainment % 50) - 25) },
                category: 'long',
                req: { 'tribalism': true, 'culture of moderation': false, 'joy of eating': false, 'drinking stability': false, 'unstable eating habits': false },
            });
            new G.Trait({
                name: 'art of death',
                desc: '@[corpse]s and their parts are now part of a new art, creating some [culture] at the cost of [health].@<b><font color="#f70054">Note: This trait is rather temporary, but there is a slight chance that this trait will become permanent.</font></b> //<small>ughhh</small>',
                icon: [15, 6, "magixmod"],
                category: 'long',
                chance: 500,
                cost: { 'gentility': 25, 'discernment': 5 },
                req: { 'tribalism': true, 'ritualism': true, 'belief in the beforelife': false, 'ritual necrophagy': false },
                lifetime: function () { return ((this.yearOfObtainment + 350) % 450 >= 383 && (this.yearOfObtainment + 350) % 450 <= 400 ? Infinity : (this.yearOfObtainment + 350) % 450) }
            });
            new G.Trait({
                name: 'royal treatment',
                desc: '@[corpse]s are treated with full respect now, meaning elves will be very respectful towards them. @<b><font color="#f70054">Note: This trait is rather temporary, but there is a slight chance that this trait will become permanent.</font></b>//<small>That is glorious. Just pure glory. Treating dead bodies with a royal attitude will surely make everybody less scared of death.</small>',
                icon: [19, 1, "magixmod"],
                cost: { 'gentility': 25, 'discernment': 5 },
                chance: 750,
                req: { 'tribalism': true, 'ritualism': true, 'belief in the beforelife': true, 'belongings preservance': false },
                lifetime: function () { return ((this.yearOfObtainment + 350) % 450 >= 383 && (this.yearOfObtainment + 350) % 450 <= 400 ? Infinity : (this.yearOfObtainment + 350) % 450) }
            });
            new G.Trait({
                name: 'belongings preservance',
                desc: '@A [corpse,corpse\'s] belongings become preserved and stored by the family instead of being taken for common use (unless the elf didn\'t have one). @<b><font color="#f70054">Note: This trait is rather temporary, but there is a slight chance that this trait will become permanent.</font></b>',
                icon: [16, 6, "magixmod"],
                cost: { 'gentility': 25, 'discernment': 5 },
                chance: 500,
                req: { 'tribalism': true, 'ritualism': true, 'belief in the beforelife': true, 'royal treatment': false, 'art of death': false, 'ritual necrophagy': false },
                lifetime: function () { return ((this.yearOfObtainment + 350) % 450 >= 383 && (this.yearOfObtainment + 350) % 450 <= 400 ? Infinity : (this.yearOfObtainment + 350) % 450) }
            });
            new G.Trait({
                name: 'cart1',
                displayName: 'Carver\'s trend: Stone statuettes',
                desc: '[carver]s feel that a [statuette] made out of stone is accepted better by this tribe more than a statuette from wood or bone. <><b>Craft stone statuettes</b> becomes 5% faster.',
                icon: [25, 28, "magixmod", 5, 22, "magixmod"],
                req: { 'construction': true, 'cart2': false },
                cost: { 'discernment': 50, 'gentility': 45 },
                effects: [
                ],
                chance: 125, lifetime: function () { return 25 + ((this.yearOfObtainment % 10) - 5) },
                category: 'short'
            });
            new G.Trait({
                name: 'cart2',
                displayName: 'Carver\'s trend: Wooden statuettes',
                desc: '[carver]s feel that a [clay statuette,Statuette] made out of clay or mud is accepted better by this tribe more than a statuette from clay and other non-stone resources. <><b>Craft clay statuettes</b> becomes 5% faster.',
                icon: [25, 16, "c2", 5, 22, "magixmod"],
                req: { 'construction': true, 'cart1': false },
                cost: { 'discernment': 50, 'gentility': 45 },
                effects: [
                ],
                chance: 125, lifetime: function () { return 25 + ((this.yearOfObtainment % 10) - 5) },
                category: 'short'
            });
            new G.Trait({
                name: 'gtt1',
                displayName: 'Gatherer\'s trend: Sticks',
                desc: '[gatherer]s gain more [stick]s. Doesn\'t disable the effect of the Decisional trend related to this unit.',
                icon: [27, 28, "magixmod", 5, 22, "magixmod"],
                req: { 'plant lore II': true, 'gtt2': false },
                cost: { 'gentility': 45, 'discernment': 50 },
                chance: 125,
                lifetime: function () { return 25 + ((this.yearOfObtainment % 10) - 5) },
                category: 'short'
            });
            new G.Trait({
                name: 'gtt2',
                displayName: 'Gatherer\'s trend: Water',
                desc: '[gatherer]s gain more [water]. Doesn\'t disable the effect of the Decisional trend related to this unit.',
                icon: [28, 28, "magixmod", 5, 22, "magixmod"],
                req: { 'plant lore II': true, 'gtt1': false },
                cost: { 'gentility': 45, 'discernment': 50 },
                chance: 125,
                lifetime: function () { return 25 + ((this.yearOfObtainment % 10) - 5) },
                category: 'short'
            });
            new G.Trait({
                name: 'dtt1',
                displayName: 'Digger\'s trend: Ice',
                desc: '[digger]s gain more [ice]. Doesn\'t disable the effect of the Decisional trend related to this unit.',
                icon: [29, 28, "magixmod", 5, 22, "magixmod"],
                req: { 'digging': true, 'dtt2': false },
                cost: { 'gentility': 45, 'discernment': 50 },
                chance: 125, lifetime: function () { return 25 + ((this.yearOfObtainment % 10) - 5) },
                category: 'short'
            });
            new G.Trait({
                name: 'dtt2',
                displayName: 'Digger\'s trend: Sand',
                desc: '[digger]s gain more [sand]. Doesn\'t disable the effect of the Decisional trend related to this unit.',
                icon: [30, 28, "magixmod", 5, 22, "magixmod"],
                req: { 'digging': true, 'dtt1': false },
                cost: { 'gentility': 45, 'discernment': 50 },
                chance: 125, lifetime: function () { return 25 + ((this.yearOfObtainment % 10) - 5) },
                category: 'short'
            });
            new G.Trait({
                name: 'htt1',
                displayName: 'Hunter\'s trend: Hide',
                desc: '[hunter]s gain more [hide]. Doesn\'t disable the effect of the Decisional trend related to this unit.',
                icon: [31, 28, "magixmod", 5, 22, "magixmod"],
                req: { 'hunting': true, 'htt2': false },
                cost: { 'gentility': 45, 'discernment': 50 },
                chance: 125, lifetime: function () { return 25 + ((this.yearOfObtainment % 10) - 5) },
                category: 'short'
            });
            new G.Trait({
                name: 'htt2',
                displayName: 'Hunter\'s trend: Meat',
                desc: '[hunter]s gain more [meat]. Doesn\'t disable the effect of the Decisional trend related to this unit.',
                icon: [32, 28, "magixmod", 5, 22, "magixmod"],
                req: { 'hunting': true, 'htt1': false },
                cost: { 'gentility': 45, 'discernment': 50 },
                chance: 125, lifetime: function () { return 25 + ((this.yearOfObtainment % 10) - 5) },
                category: 'short'
            });
            //MAGIX
            new G.Tech({
                name: 'wizardry', category: 'tier1',
                desc: '@Some sort of weird, uncommon elves will now arrive in your tribe. They are called <b><font color="white">Wizards</font></b> and behave quite strangely sometimes. From now, wizardry and essences will start to appear. Get [wizard wisdom] so you can hire some of these strange elves. //<small>This is a good thing :></small>',
                icon: [24, 14, "c2"],
                cost: { 'discernment': 106, 'faith': 10, 'gentility': 16 },
                req: { 'a power of the fortress': true, 'developed creativity': true },
            });
            /*Insight traits will work together with culture one*/
            new G.Trait({
                name: 'natural discernment', //will be unlockable after level 5 mausoleum 
                desc: '@all researches, knowledges and traits have their [discernment] costs reduced. <>For every 75 [discernment] from the original cost, the new cost is reduced by 3. (For example, if a research costs 225 [discernment], it will cost 216 as long as this trait is active.) @The maximum reduction for this is 70.//<small>much smort</small>',
                icon: [24, 3, "magixmod", 8, 4, "c2", 23, 1, "c2"],
                cost: { 'gentility': 25, 'creativity': 5 },
                chance: 150,
                category: 'short',
                lifetime: 20,
                effects: [
                    {
                        type: 'function', func: function () {
                            var res = 'discernment';
                            addbacksIns = [];
                            for (var i in G.know)
                                if (G.know[i].cost[res] != undefined) {
                                    var reduction = Math.floor(G.know[i].cost[res] / 75) * 3;
                                    G.know[i].cost[res] -= reduction > 70 ? 70 : reduction;
                                    addbacksIns[i] = reduction
                                }
                        }, invert: false
                    },
                    {
                        type: 'function', func: function () {
                            var res = 'discernment';
                            for (var i in G.know)
                                if (G.know[i].cost[res] != undefined) {
                                    G.know[i].cost[res] += addbacksIns[i];
                                }
                        }, invert: true
                    },
                ],
                req: { 'tribalism': false }, //symbolism
            });
            new G.Trait({
                name: 'slower synapses',
                desc: '@all researches, knowledges and traits have their [discernment] costs increased. <>For every 75 [discernment] from the original cost, the new cost is increased by 3. (For example, if a research costs 225 [discernment], it will cost 234 as long as this trait is active.) @The maximum reduction for this is 70.//<small>not smort</small>',
                icon: [23, 3, "magixmod", 8, 4, "c2", 23, 1, "c2"],
                cost: { 'gentility': 25, 'creativity': 5 },
                chance: 150,
                category: 'short',
                lifetime: 20,
                effects: [
                    {
                        type: 'function', func: function () {
                            var res = 'discernment';
                            addbacksIns = [];
                            for (var i in G.know)
                                if (G.know[i].cost[res] != undefined) {
                                    var reduction = Math.floor(G.know[i].cost[res] / 75) * 3;
                                    G.know[i].cost[res] += reduction > 70 ? 70 : reduction;
                                    addbacksIns[i] = reduction
                                }
                        }, invert: false
                    },
                    {
                        type: 'function', func: function () {
                            var res = 'discernment';
                            for (var i in G.know)
                                if (G.know[i].cost[res] != undefined) {
                                    G.know[i].cost[res] -= addbacksIns[i];
                                }
                        }, invert: true
                    },
                ],
                req: { 'tribalism': false }, //symbolism
            });
            new G.Trait({
                name: 'artistic thinking II', //will be unlockable after level 5 mausoleum 
                desc: '@all researches, knowledges and traits have their [gentility] costs reduced. <>For every 50 [gentility] from the original cost, the new cost is reduced by 2. (For example, if a research costs 200 [gentility], it will cost 192 as long as this trait is active.) @The maximum reduction for this is 45.//<small>that\'s very arty art, isn\'t it?</small>',
                icon: [24, 3, "magixmod", 10, 4, "c2", 23, 1, "c2"],
                cost: { 'gentility': 25, 'creativity': 5 },
                chance: 150,
                category: 'short',
                lifetime: 20,
                effects: [
                    {
                        type: 'function', func: function () {
                            addbacksCul = [];
                            var res = 'gentility';
                            for (var i in G.know)
                                if (G.know[i].cost[res] != undefined) {
                                    var reduction = Math.floor(G.know[i].cost[res] / 50) * 2;
                                    G.know[i].cost[res] -= reduction > 45 ? 45 : reduction
                                    addbacksCul[i] = reduction
                                }
                        }, invert: false
                    },
                    {
                        type: 'function', func: function () {
                            var res = 'gentility';
                            for (var i in G.know)
                                if (G.know[i].cost[res] != undefined) {
                                    G.know[i].cost[res] += addbacksCul[i];
                                }
                        }, invert: true
                    },
                ],
                req: { 'tribalism': false }, //artistic thinking required
            });
            new G.Trait({
                name: 'art rejection',
                desc: '@all researches, knowledges and traits have their [gentility] costs increased. <>For every 50 [gentility] from the original cost, the new cost is increased by 3. (For example, if a research costs 200 [gentility], it will cost 208 as long as this trait is active.) @maximum increase is 45.//<small>It\'s not culture after all...</small>',
                icon: [23, 3, "magixmod", 10, 4, "c2", 23, 1, "c2"],
                cost: { 'gentility': 25, 'creativity': 5 },
                chance: 150,
                category: 'short',
                lifetime: 20,
                effects: [
                    {
                        type: 'function', func: function () {
                            addbacksCul = [];
                            var res = 'gentility';
                            for (var i in G.know)
                                if (G.know[i].cost[res] != undefined) {
                                    var reduction = Math.floor(G.know[i].cost[res] / 50) * 3;
                                    G.know[i].cost[res] += reduction > 45 ? 45 : reduction
                                    addbacksCul[i] = reduction
                                }
                        }, invert: false
                    },
                    {
                        type: 'function', func: function () {
                            var res = 'gentility';
                            for (var i in G.know)
                                if (G.know[i].cost[res] != undefined) {
                                    G.know[i].cost[res] -= addbacksCul[i];
                                }
                        }, invert: true
                    },
                ],
                req: { 'tribalism': false }, //artistic thinking required
            });
            new G.Trait({ //faith will go together with influence
                name: 'druidish thinking',
                desc: '@all researches, knowledges and traits have their [faith] costs reduced. <>For every 50 [faith] from the original cost, the new cost is reduced by 2. (For example, if a research costs 200 [faith], it will cost 192 as long as this trait is active.) @The maximum reduction for this is 45.//<small>Have fun with this trait: it doesn\'t last very long!</small>',
                icon: [24, 3, "magixmod", 7, 4, "c2", 23, 1, "c2"],
                cost: { 'gentility': 25, 'creativity': 5 },
                chance: 150,
                category: 'short',
                lifetime: 20,
                effects: [
                    {
                        type: 'function', func: function () {
                            var res = 'faith';
                            addbacksFai = [];
                            for (var i in G.know)
                                if (G.know[i].cost[res] != undefined) {
                                    var reduction = Math.floor(G.know[i].cost[res] / 50) * 2;
                                    G.know[i].cost[res] -= reduction > 45 ? 45 : reduction;
                                    addbacksFai[i] = reduction
                                }
                        }, invert: false
                    },
                    {
                        type: 'function', func: function () {
                            var res = 'faith';
                            for (var i in G.know)
                                if (G.know[i].cost[res] != undefined) {
                                    G.know[i].cost[res] -= addbacksFai[i];
                                }
                        }, invert: true
                    },
                ],
                req: { 'tribalism': false }, //druidism
            });
            new G.Trait({
                name: 'druid\'s hatred',
                desc: '@all researches, knowledges and traits have their [faith] costs increased. <>For every 50 [faith] from the original cost, the new cost is increased by 2. (For example, if a research costs 200 [faith], it will cost 208 as long as this trait is active.)@The maximum reduction for this is 45.//<small>dissenters...it sure seems like</small>',
                icon: [23, 3, "magixmod", 7, 4, "c2", 23, 1, "c2"],
                cost: { 'gentility': 25, 'creativity': 5 },
                chance: 150,
                category: 'short',
                lifetime: 20,
                effects: [
                    {
                        type: 'function', func: function () {
                            var res = 'faith';
                            addbacksFai = [];
                            for (var i in G.know)
                                if (G.know[i].cost[res] != undefined) {
                                    var reduction = Math.floor(G.know[i].cost[res] / 50) * 2;
                                    G.know[i].cost[res] += reduction > 45 ? 45 : reduction;
                                    addbacksFai[i] = reduction
                                }
                        }, invert: false
                    },
                    {
                        type: 'function', func: function () {
                            var res = 'faith';
                            for (var i in G.know)
                                if (G.know[i].cost[res] != undefined) {
                                    G.know[i].cost[res] -= addbacksFai[i];
                                }
                        }, invert: true
                    },
                ],
                req: { 'tribalism': false }, //stronger faith
            });
            new G.Trait({ //science powerup/powerdown is standalone. Is short and very, very rare
                name: 'season for inventing',
                desc: '@all researches, knowledges and traits have their [science] costs reduced. <>For every 20 [science] from the original cost, the new cost is reduced by 1. (For example, if a research costs 100 [science], it will cost 95 as long as this trait is active.) @The maximum reduction for this is 15.//<small>This trait is very rare...</small>',
                icon: [24, 3, "magixmod", 6, 4, "c2", 23, 1, "c2"],
                cost: { 'gentility': 25, 'creativity': 5 },
                chance: 1500,
                category: 'short',
                lifetime: 20,
                effects: [
                    {
                        type: 'function', func: function () {
                            var res = 'science';
                            addbacksSci = [];
                            for (var i in G.know)
                                if (G.know[i].cost[res] != undefined) {
                                    var reduction = Math.floor(G.know[i].cost[res] / 20);
                                    G.know[i].cost[res] -= reduction > 15 ? 15 : reduction;
                                    addbacksSci[i] = reduction
                                }
                        }, invert: false
                    },
                    {
                        type: 'function', func: function () {
                            var res = 'science';
                            for (var i in G.know)
                                if (G.know[i].cost[res] != undefined) {
                                    G.know[i].cost[res] += addbacksSci[i];
                                }
                        }, invert: true
                    },
                ],
                req: { 'developed creativity': true, 'sabotaged knowledge': false },
            });
            new G.Trait({
                name: 'sabotaged knowledge',
                desc: '@all researches, knowledges and traits have their [science] costs increased. <>For every 20 [science] from the original cost, the new cost is increased by 2. (For example, if a research costs 100 [science], it will cost 120 as long as this trait is active.) @maximum increase is 18.//<small>dissenters...it sure seems like</small>',
                icon: [23, 3, "magixmod", 6, 4, "c2", 23, 1, "c2"],
                cost: { 'gentility': 25, 'creativity': 5 },
                chance: 1500,
                category: 'short',
                lifetime: 20,
                effects: [
                    {
                        type: 'function', func: function () {
                            var res = 'science';
                            addbacksSci = [];
                            for (var i in G.know)
                                if (G.know[i].cost[res] != undefined) {
                                    var reduction = Math.floor(G.know[i].cost[res] / 20) * 2;
                                    G.know[i].cost[res] += reduction > 18 ? 18 : reduction;
                                    addbacksSci[i] = reduction
                                }
                        }, invert: false
                    },
                    {
                        type: 'function', func: function () {
                            var res = 'science';
                            for (var i in G.know)
                                if (G.know[i].cost[res] != undefined) {
                                    G.know[i].cost[res] -= addbacksSci[i];
                                }
                        }, invert: true
                    },
                ],
                req: { 'developed creativity': true, 'season for inventing': false },
            });
            new G.Trait({ //faith will go together with influence
                name: 'liberality', //will be unlockable after level 5 mausoleum 
                desc: '@all researches, knowledges and traits have their [influence] costs reduced. <>For every 40 [influence] from the original cost, the new cost is reduced by 2. (For example, if a research costs 100 [influence], it will cost 92 as long as this trait is active.) @The maximum reduction for this is 30.//<small>democration...right?</small>',
                icon: [24, 3, "magixmod", 11, 4, "c2", 23, 1, "c2"],
                cost: { 'gentility': 25, 'creativity': 5 },
                chance: 150,
                category: 'short',
                lifetime: 20,
                effects: [
                    {
                        type: 'function', func: function () {
                            var res = 'influence';
                            addbacksInf = [];
                            for (var i in G.know)
                                if (G.know[i].cost[res] != undefined) {
                                    var reduction = Math.floor(G.know[i].cost[res] / 40) * 2;
                                    G.know[i].cost[res] -= reduction > 38 ? 38 : reduction;
                                    addbacksInf[i] = reduction
                                }
                        }, invert: false
                    },
                    {
                        type: 'function', func: function () {
                            var res = 'influence';
                            for (var i in G.know)
                                if (G.know[i].cost[res] != undefined) {
                                    G.know[i].cost[res] += addbacksInf[i];
                                }
                        }, invert: true
                    },
                ],
                req: { 'tribalism': false }, //crime and punishment(any)
            });
            new G.Trait({
                name: 'disauthority',
                desc: '@all researches, knowledges and traits have their [influence] costs increased. <>For every 20 [influence] from the original cost, the new cost is increased by 2. (For example, if a research costs 100 [influence], it will cost 110 as long as this trait is active.) @maximum increase is 38.//<small>lawlesness? Isn\'t it lawlessness?</small>',
                icon: [23, 3, "magixmod", 11, 4, "c2", 23, 1, "c2"],
                cost: { 'gentility': 25, 'creativity': 5 },
                chance: 150,
                category: 'short',
                lifetime: 20,
                effects: [
                    {
                        type: 'function', func: function () {
                            var res = 'influence';
                            addbacksInf = [];
                            for (var i in G.know)
                                if (G.know[i].cost[res] != undefined) {
                                    var reduction = Math.floor(G.know[i].cost[res] / 40) * 2;
                                    G.know[i].cost[res] += reduction > 38 ? 38 : reduction;
                                    addbacksInf[i] = reduction
                                }
                        }, invert: false
                    },
                    {
                        type: 'function', func: function () {
                            var res = 'influence';
                            for (var i in G.know)
                                if (G.know[i].cost[res] != undefined) {
                                    G.know[i].cost[res] -= addbacksInf[i];
                                }
                        }, invert: true
                    },
                ],
                req: { 'tribalism': false }, //crime and punishment(any)
            });
            new G.Tech({
                name: 'weapon blacksmithery', category: 'tier1',
                desc: '[blacksmith workshop,Blacksmiths] can now craft [metal weapons].',
                icon: [13, 11, "magixmod", 22, 1, "c2"],
                cost: { 'discernment': 54, 'creativity': 36 },
                req: { 'smelting': true },
                effects: [
                ],
            });
            new G.Tech({
                name: 'armor blacksmithery', category: 'tier1',
                desc: '[blacksmith workshop,Blacksmiths] can now craft [armor set]s.',
                icon: [12, 11, "magixmod", 22, 1, "c2"],
                cost: { 'discernment': 54, 'creativity': 36 },
                req: { 'smelting': true },
                effects: [
                ],
            });
            new G.Trait({
                name: 'ground melee weapons',
                desc: '@all [stone weapons,Melee weaponry] out of basic materials such as [stone] and [stick,Wood] will be crafted 20% faster. More complex weaponry will be crafted 10% faster. All <u>melee</u> weaponry decays 5% slower.',
                icon: [27, 16, "c2"],
                cost: { 'discernment': 6, 'gentility': 6 },
                chance: 15,
                req: { 'spears': true, 'ground tools': false, 'ground ranged weapons': false },
                switchCategory: false,
                lifetime: function () { return Math.pow(this.yearOfObtainment % 10, 4) < 4 ? undefined : Infinity },
            });
            new G.Trait({
                name: 'ground ranged weapons',
                desc: '@all [bow,Ranged weaponry] out of basic materials such as [stone] and [stick,Wood] will be crafted 20% faster. More complex weaponry will be crafted 10% faster. All <u>ranged</u> weaponry decays 5% slower.',
                icon: [28, 16, "c2"],
                cost: { 'discernment': 6, 'gentility': 6 },
                chance: 15,
                req: { 'bows': true, 'ground melee weapons': false, 'ground tools': false },
                switchCategory: false,
                lifetime: function () { return Math.pow(this.yearOfObtainment % 10, 4) > 6 ? undefined : Infinity },
            });
            new G.Tech({
                name: 'bII(normal)',
                displayName: 'Burial II', category: 'tier1',
                desc: '@Reduces the bad effects of [fear of death] and [belief in revenants] by 5%. <>@Funeral ceremonies are more common. @provides 30 [inspiration]',
                icon: [3, 13, "c2", 24, 16, "c2", 22, 1, "c2"],
                cost: { 'discernment': 195, 'creativity': 85, 'gentility': 50 },
                req: { 'burial': true, 'philosophy': true, 'bII(acceptance)': false },
                effects: [
                    { type: 'provide res', what: { 'inspiration': 30 } },
                ],
                chance: 15,
            });
            new G.Tech({
                name: 'bII(acceptance)',
                displayName: 'Burial II', category: 'tier1',
                desc: '@Increases the positive effects of [acceptance of death] by 5%. <>@Funeral ceremonies are more common. @provides 30 [inspiration]',
                icon: [3, 13, "c2", 24, 16, "c2", 24, 1, "c2"],
                cost: { 'discernment': 195, 'creativity': 85, 'gentility': 50 },
                req: { 'burial': true, 'philosophy': true, 'bII(acceptance)': false },
                effects: [
                    { type: 'provide res', what: { 'inspiration': 30 } },
                ],
                chance: 15,
            });
            new G.Trait({
                name: 'carcass-looting',
                desc: '@[gatherer]s can loot carcasses, granting some [meat] and [bone]s from dead [mosseer,Animals]. @<b><font color="#f70054">Note: This trait is rather temporary and has a varied lifetime, but has a moderate chance to become permanent. Eventually, if this trait doesn\'t get adopted for good, it will no longer appear or swap with other traits from the primary category.</font></b>',
                icon: [29, 18, "c2"],
                chance: 1,
                req: { 'tribalism': true, 'scavenging': false, 'branching wisdom': false, 'dreaming': false },
                lifetime: function () { return 5 + (Math.pow(this.yearOfObtainment, 1.5) % 42 > 28 && Math.pow(this.yearOfObtainment, 1.5) % 42 < 32 ? Infinity : this.yearOfObtainment % 75) }
            });
            new G.Trait({
                name: 'dreaming',
                desc: '@idle [worker]s gather [discernment] and [creativity] with 8% of the speed of a [dreamer]. @<b><font color="#f70054">Note: This trait is rather temporary and has a varied lifetime, but has a moderate chance to become permanent. Eventually, if this trait doesn\'t get adopted for good, it will no longer appear or swap with other traits from the primary category.</font></b>',
                icon: [29, 17, "c2"],
                chance: 1,
                req: { 'tribalism': true, 'scavenging': false, 'branching wisdom': false, 'carcass-looting': false },
                lifetime: function () { return 5 + (Math.pow(this.yearOfObtainment, 1.5) % 42 > 32 && Math.pow(this.yearOfObtainment, 1.5) % 42 < 36 ? Infinity : (this.yearOfObtainment * 2) % 50) }
            });
            new G.Trait({
                name: 'branching wisdom',
                desc: '@You gain an additional tech choice for various periods of time.@<b><font color="#f70054">Note: This trait is rather temporary and will unfortunately expire quite quickly. This trait is rare and will no longer appear after you research a little bit.</font></b>',
                icon: [29, 19, "c2"],
                chance: 4,
                cost: { 'discernment': 3, 'creativity': 3 },
                req: { 'tribalism': true, 'scavenging': false, 'carcass-looting': false, 'dreaming': false, 'language': false },
                effects: [
                    {
                        type: 'function', func: function () {
                            G.getDict('research box').choicesN--;
                        }, invert: true
                    },
                    {
                        type: 'function', func: function () {
                            G.getDict('research box').choicesN++;
                        }, invert: false
                    },
                ],
                lifetime: function () { return 1 + this.yearOfObtainment % 3 }
            });

             G.disasters.forEach((d) => {
                console.log("beep boop beep boop");
                new G.Trait({
                    name: d.name,
                    desc: d.desc,
                    icon: d.icon,
                    req: { 'tribalism': false },
                    category: 'main',
                    skip: true
                })
            })

            new G.Tech({
                name: 'symbI', category: 'upgrade',
                displayName: 'Symbolism',
                desc: '@[dreamer]s produce 25% more [discernment] and 12.5% more [creativity] @rolling researches will require a third less of [discernment,Essentials] (excluding your [battery of discoveries,Battery power]) if the number of your technologies ends with 0 @gaining traits will provide 1 [gentility] @obtaining techs refunds 1 [discernment] for every 150 [discernment] spent on research. <>The manifestation of one thing for the meaning of another; to make the cosmos relate to itself; this one focuses on colours. There are three types of [symbI] that you can unlock!',
                icon: [28, 17, "c2"],
                cost: { 'gentility': 18, 'discernment': 20, 'creativity': 4 },
                req: { 'oral tradition 2/2': true, 'intuition': true, 'symbolism': false, 'symbN': false },
                chance: 10,
                effects: [
                ],
            });
            new G.Tech({
                name: 'symbN', category: 'upgrade',
                displayName: 'Symbolism',
                desc: '<b>This bonus relies on the number of total technologies that you end with.</b> @if it ends with 3 you won\'t need [gentility] while rolling/rerolling researches. @if it ends with 7 it will require half as much [discernment]. @if it ends with 1 it will require 5% less [battery of discoveries,Battery] power @if it ends with 0 it won\'t require [discernment] at all<>The manifestation of one thing for the meaning of another; to make the cosmos relate to itself; this one focuses on numbers. There are three types of [symbN] that you can unlock!',
                icon: [27, 17, "c2"],
                cost: { 'gentility': 18, 'discernment': 20, 'creativity': 4 },
                req: { 'oral tradition 2/2': true, 'intuition': true, 'symbolism': false, 'symbI': false },
                chance: 10,
                effects: [
                ],
            });
            new G.Tech({
                name: 'wizard wisdom II', category: 'tier1',
                desc: 'Wizards will also produce 5% as much [discernment] as a basic [dreamer] now. //<small>i suppose discernment is important for wizards as well</small>',
                icon: [3, 13, "c2", 23, 10, "c2"],
                cost: { 'discernment': 200, 'faith': 10, 'gentility': 24 },
                req: { 'wizard wisdom': true },
            });



            /*=====================================================================================
            POLICIES
            =======================================================================================*/

            new G.Policy({
                name: 'disable aging',
                desc: 'Aging, disease, births, and deaths are disabled.',
                icon: [3, 12, "c2", 8, 3, "c2"],
                cost: {},
                startWith: true,
                category: 'debug',
            });
            new G.Policy({
                name: 'disable eating',
                desc: 'Eating and drinking are disabled.',
                icon: [3, 12, "c2", 3, 6, "c2"],
                cost: {},
                startWith: true,
                category: 'debug',
            });
            new G.Policy({
                name: 'disable spoiling',
                desc: 'All resource spoilage is disabled.',
                icon: [3, 12, "c2", 3, 7, "c2"],
                cost: {},
                startWith: true,
                category: 'debug',
            });
            new G.Policy({
                name: 'child workforce',
                desc: '[child,Children] now count as [worker]s; working children are more prone to accidents and malnutrition. They will also require <b>10% more food</b> with this enabled.',
                icon: [7, 12, "c2", 3, 3, "c2"],
                cost: { 'influence': 2 },
                req: { 'tribalism': true },
                category: 'work',
            });
            new G.Policy({
                name: 'elder workforce',
                desc: '[elder]s now count as [worker]s; working elders are more prone to accidents and malnutrition and early death. //<b>In addition, [sick] and [wounded] elves will age after recovering, and other [worker]s are at a higher risk of being [wounded] due to additional risks.</b>',
                //an interesting side-effect of this and how population is coded is that elders are now much more prone to illness and wounds, and should they recover they will magically turn back into adults, thus blessing your civilization with a morally dubious way of attaining eternal life
                //however, i've balanced this by making sick and wounded elves turn into uncs when healed whenever this policy is on!
                icon: [7, 12, "c2", 5, 3, "c2"],
                cost: { 'influence': 2 },
                req: { 'tribalism': true },
                category: 'work',
            });
            new G.Policy({
                name: 'food rations',
                desc: 'Specifies how much [food] your elves are given each day.//Bigger rations will make your elves happier, while smaller ones may lead to sickness and starvation.',
                icon: [5, 12, "c2", 3, 6, "c2"],
                cost: { 'influence': 2, 'discernment': 2 },
                startMode: 'sufficient',
                req: { 'rules of food': true },
                modes: {
                    'none': { name: 'None', desc: 'Eating food is forbidden.<br>Your elves will start to starve.' },
                    'meager': { name: 'Meager', desc: 'Your elves receive half a portion per day.' },
                    'sufficient': { name: 'Sufficient', desc: 'Your elves receive a full portion per day.' },
                    'plentiful': { name: 'Plentiful', desc: 'Your elves receive a portion and a half per day.' },
                },
                category: 'food',
            });
            new G.Policy({
                name: 'water rations',
                desc: 'Specifies how much [water] your elves are given each day.//Bigger rations will make your elves happier, while smaller ones may lead to sickness and dehydration.',
                icon: [5, 12, "c2", 7, 6, "c2"],
                cost: { 'influence': 2, 'discernment': 2 },
                startMode: 'sufficient',
                req: { 'rules of food': true },
                modes: {
                    'none': { name: 'None', desc: 'Drinking water is forbidden.<br>Your elves will start to die from dehydration.' },
                    'meager': { name: 'Meager', desc: 'Your elves receive half a portion per day.' },
                    'sufficient': { name: 'Sufficient', desc: 'Your elves receive a full portion per day.' },
                    'plentiful': { name: 'Plentiful', desc: 'Your elves receive a portion and a half per day.' },
                },
                category: 'food',
            });
            new G.Policy({
                name: 'eat spoiled food',
                desc: 'Your elves will eat [spoiled food] when other [food] gets scarce, with dire consequences for health and morale.',
                icon: [6, 12, "c2", 3, 7, "c2"],
                cost: { 'influence': 1 },
                startMode: 'on',
                req: { 'rules of food': true },
                category: 'food',
            });
            new G.Policy({
                name: 'drink muddy water',
                desc: 'Your elves will drink [muddy water] when clean [water] gets scarce, with dire consequences for health and morale.',
                icon: [6, 12, "c2", 8, 6, "c2"],
                cost: { 'influence': 1 },
                startMode: 'on',
                req: { 'rules of food': true },
                category: 'food',
            });
            new G.Policy({
                name: 'insects as food',
                desc: '[bugs] now count as [food], although most elves find them unpalatable.',
                icon: [6, 12, "c2", 12, 19, "c2"],
                cost: { 'influence': 1 },
                req: { 'rules of food': true },
                effects: [
                    { type: 'make part of', what: ['bugs'], parent: 'food' },
                ],
                effectsOff: [
                    { type: 'make part of', what: ['bugs'], parent: '' },
                ],
                category: 'food',
            });
            new G.Policy({
                name: 'eat raw meat and fish',
                desc: '[meat] and [seafood] are eaten raw, which may be unhealthy.',
                icon: [6, 12, "c2", 5, 7, "c2"],
                cost: { 'influence': 1 },
                startMode: 'on',
                req: { 'rules of food': true },
                effects: [
                    { type: 'make part of', what: ['meat', 'seafood'], parent: 'food' },
                ],
                effectsOff: [
                    { type: 'make part of', what: ['meat', 'seafood'], parent: '' },
                ],
                category: 'food',
            });
            new G.Policy({
                name: 'fertility rituals',
                desc: 'Increases birth rates by 20%. Consumes 1 [faith] roughly every 40 days; will stop if you run out.',
                icon: [8, 12, "c2", 2, 3, "c2"],
                cost: { 'faith': 2 },
                startMode: 'off',
                req: { 'ritualism': true },
                category: 'faith',
            });
            new G.Policy({
                name: 'harvest rituals',
                desc: 'Improves the speed of [gatherer]s, [hunter]s and [fisher]s by 10%. Consumes 1 [faith] roughly every 40 days; will stop if you run out. //<small>mo\' food</small>',
                icon: [8, 12, "c2", 4, 7, "c2"],
                cost: { 'faith': 2 },
                startMode: 'off',
                req: { 'ritualism': true },
                category: 'faith',
            });
            new G.Policy({
                name: 'flower rituals',
                desc: 'Elves get sick slower and recover faster. Consumes 1 [faith] roughly every 40 days; will stop if you run out.',
                icon: [8, 12, "c2", 4, 5, "c2"],
                cost: { 'faith': 2 },
                startMode: 'off',
                req: { 'ritualism': true },
                category: 'faith',
            });
            new G.Policy({
                name: 'wisdom rituals',
                desc: 'Improves [dreamer] and [storyteller] efficiency by 10%. Consumes 1 [faith] roughly every 40 days; will stop if you run out.',
                icon: [8, 12, "c2", 8, 5, "c2"],
                cost: { 'faith': 2 },
                startMode: 'off',
                req: { 'ritualism': true },
                category: 'faith',
            });

            new G.Policy({
                name: 'population control',
                desc: 'Set rules on how many children your elves are allowed to have.',
                icon: [4, 12, "c2", 2, 3, "c2"],
                cost: { 'influence': 3 },
                startMode: 'normal',
                req: { 'tribalism': true },
                modes: {
                    'forbidden': { name: 'Forbidden', desc: 'Your elves are not allowed to make children.//Your population will not grow.' },
                    'limited': { name: 'Limited', desc: 'Your elves are only allowed to have one child.//Your population will grow slowly.' },
                    'normal': { name: 'Normal', desc: 'You have no specific rules regarding children.//Your population will grow normally.' },
                },
                category: 'population',
            });
            new G.Policy({
                name: 'mental balance',
                desc: 'Enabling this ritual will move the penalty for low [happiness] level from -100% to -120% and change the bonus to make activate at 90% instead of 100%. However, this ritual requires way more [faith] compared to normal rituals. //Enabling this ritual reduces the efficiency of [soothsayer]s and [druid]s by 20% while active. //Be aware that this ritual is very fragile, as it will lose its power whenever your [faith] goes below one third of your [spirituality].',
                icon: [8, 12, "c2", 24, 0, "c2"],
                cost: { 'faith': 4 },
                startMode: 'off',
                req: { 'ritualism': true },
                category: 'faith',
                effects: [
                    {
                        type: 'function', func: function () {
                            G.getDict('happiness').desc = '[happiness] describes the global level of well-being of your [population].//Happy elves work even harder and improve unit speeds, while unhappy elves tend to slack off; at <font color="#cd5983">+90%</font> happiness, most of your workers will work twice as fast, while at <font color="#cd5983">-120%</font> happiness, they will work twice as slow. This goes on up to +200% and -200%.//Several things improve happiness, such as good [food], entertainment, or luxury items; things that bring down [happiness] are spoiled food, starvation, disease, death and harsh policies.//Happiness and unhappiness both tend to level off over time, or reach one of the limits.';
                        }
                    },
                ],
                effectsOff: [
                    {
                        type: 'function', func: function () {
                            G.getDict('happiness').desc = '[happiness] describes the global level of well-being of your [population].//Happy elves work even harder and improve unit speeds, while unhappy elves tend to slack off; at +100% happiness, most of your workers will work twice as fast, while at -100% happiness, they will work twice as slow. This goes on up to +200% and -200%.//Several things improve happiness, such as good [food], entertainment, or luxury items; things that bring down [happiness] are spoiled food, starvation, disease, death and harsh policies.//Happiness and unhappiness both tend to level off over time, or reach one of the limits.';
                        }
                    },
                ],
            });
            new G.Policy({
                name: 'eat on gather',
                desc: 'Your elves will eat a lot of [food] right after gathering, meaning that a only a small portion of food will be shared with others. This will lead to increased [happiness] at the cost of significantly reduced gathering rates for [gatherer]s specifically. @this policy cannot bring [happiness] level over 100% and will only provide [happiness] once it is lower than a specific amount. Note that if your food or water rations are set to <b>Plentiful</b>, this policy disables automatically.',
                icon: [5, 12, 26, 0, "c2"],
                cost: { 'influence': 2 },
                startMode: 'off',
                req: { 'rules of food': true },
                category: 'food',
            });
            new G.Policy({
                name: 'creative foraging',
                desc: '@[gatherer]s will explore terrain just like [wanderer]s but have a much larger chance to become lost in terrain. This policy will keep working until you get more [land] explored. //It doesn\'t affect the food gathering efficiency of [gatherer]s. //To keep this policy active, you will need 1 [creativity] every year. Once you get 80 [land], [creative foraging] will no longer be available.',
                icon: [25, 0, "c2"],
                cost: { 'influence': 3 },
                startMode: 'off',
                req: {},
                category: 'work',
            });
            if (G.modsByName['Laws Of Food']) {
                new G.Policy({
                    name: 'eat vegetables',
                    desc: 'Decide if your elves can eat [vegetables] or not.',
                    icon: [6, 12, 11, 11, "magixmod"],
                    cost: { 'influence': 0 },
                    startMode: 'on',
                    req: { 'rules of food': true },
                    category: 'food',
                    effects: [
                        { type: 'make part of', what: ['vegetables'], parent: 'food' },
                    ],
                    effectsOff: [
                        { type: 'make part of', what: ['vegetables'], parent: '' },
                    ],
                });
            }
            if (G.modsByName['Laws Of Food Free Version']) {
                new G.Policy({
                    name: 'eat vegetables',
                    desc: 'Decide if your elves can eat [vegetables] or not.',
                    icon: [6, 12, 11, 11, "magixmod"],
                    cost: { 'influence': 0 },
                    startMode: 'on',
                    req: { 'rules of food': true },
                    category: 'food',
                    effects: [
                        { type: 'make part of', what: ['vegetables'], parent: 'food' },
                    ],
                    effectsOff: [
                        { type: 'make part of', what: ['vegetables'], parent: '' },
                    ],
                });
            }

            /*=====================================================================================
            LANDS
            =======================================================================================*/
            new G.Land({
                name: 'ocean',
                names: ['Ocean'],
                goods: [
                    { type: 'saltwater fish', min: 1, max: 3 },
                    { type: 'saltwater' },
                    { type: 'kelp', min: 0.01, max: 1.5, chance: 0.88 },
                ],
                ocean: true,
                image: 32,
                score: 0,
            });
            new G.Land({
                name: 'arctic ocean',
                names: ['Icesheet'],
                goods: [
                    { type: 'saltwater fish', min: 1, max: 3 },
                    { type: 'snow cover' },
                    { type: 'saltwater' },
                    { type: 'kelp', min: 0.01, max: 1.35, chance: 0.76 },
                ],
                ocean: true,
                image: 31,
                score: 0,
            });
            new G.Land({
                name: 'glacier', //todo goods
                names: ['Glacier', 'Iceberg'],
                goods: [
                    { type: 'saltwater fish', min: 1, max: 3 },
                    { type: 'snow cover' },
                    { type: 'saltwater' },
                ],
                ocean: true,
                image: 39,
                score: 0,
            });
            new G.Land({
                name: 'lukewarm ocean',
                names: ['Lukewarm ocean', 'Lush ocean'],
                goods: [
                    { type: 'saltwater fish', min: 1, max: 3.5 },
                    { type: 'saltwater' },
                    { type: 'saltwater fish', min: 0.5, max: 2, chance: 1 / 3 },
                    { type: 'kelp', min: 0.07, max: 1.5, chance: 0.9 },
                    { type: 'coral reef', min: 0.04, max: 0.3, chance: 0.08 },
                ],
                ocean: true,
                image: 48,
                score: 0,
            });
            new G.Land({
                name: 'tropical ocean',
                names: ['Tropical ocean'],
                goods: [
                    { type: 'saltwater fish', min: 1, max: 4 },
                    { type: 'saltwater' },
                    { type: 'saltwater fish', min: 0.5, max: 2, chance: 1 / 3 },
                    { type: 'kelp', min: 0.11, max: 1.5, chance: 0.95 },
                    { type: 'coral reef', min: 0.1, max: 2, chance: 0.27 },
                ],
                ocean: true,
                image: 34,
                score: 0,
            });
            new G.Land({
                name: 'prairie',
                names: ['Prairie', 'Grassland', 'Plain', 'Steppe', 'Meadow'],
                goods: [
                    { type: ['oakloo', 'burchinn'], chance: 1, min: 0.1, max: 0.2 },
                    { type: ['oakloo', 'burchinn'], chance: 0.5, min: 0.1, max: 0.4 },
                    { type: ['berry bush', 'wild bush'], chance: 0.9 },
                    { type: 'grass', amount: 2 },
                    { type: ['wild bunnittias', 'firestoats'], chance: 0.9 },
                    { type: ['furoxes'], chance: 0.5, amount: 0.5 },
                    { type: ['wolvoes', 'bears'], chance: 0.2, amount: 0.5 },
                    { type: ['vfb1', 'vfb4', 'vfb5'], chance: 0.6, min: 0.2, max: 0.45 },
                    { type: ['mosseer'], chance: 0.2, amount: 0.2 },
                    { type: 'wild bugs' },
                    { type: 'freshwater fish', chance: 0.8, min: 0.1, max: 0.5 },
                    { type: 'freshwater', amount: 1 },
                    { type: ['lush rocky substrate', 'rocky substrate'] },
                ],
                modifiers: { 'river': 0.4, 'volcano': 0.2, },
                image: 42,
                score: 10,
            });
            new G.Land({
                name: 'maprairie', //todo goods
                names: ['Maprairie', 'Maple grassland', 'Red meadow', 'Prairie \'o maple'],
                goods: [
                    { type: ['maploa tree'], min: 1.5, max: 2.1 },
                    { type: ['confern tree', 'burchinn'], chance: 0.5, min: 0.1, max: 0.4 },
                    { type: 'wild bush', chance: 0.9 },
                    { type: 'grass', amount: 2 },
                    { type: ['vfb2', 'vfb3'], chance: 0.3, min: 0.1, max: 0.25 },
                    { type: ['vfb1', 'vfb5'], chance: 0.3, min: 0.1, max: 0.15 },
                    { type: ['wild bunnittias', 'firestoats'], chance: 0.9 },
                    { type: ['furoxes'], chance: 0.5, amount: 0.5 },
                    { type: ['mosseer'], chance: 0.2, amount: 0.2 },
                    { type: 'wild bugs' },
                    { type: 'freshwater fish', chance: 0.8, min: 0.1, max: 0.5 },
                    { type: 'freshwater', amount: 1 },
                    { type: ['tundra rocky substrate', 'rocky substrate'] }, //for balance
                ],
                modifiers: { 'river': 0.4, 'volcano': 0.2 },
                image: 46,
                score: 10,
            });
            new G.Land({
                name: 'shrubland',
                names: ['Shrubland', 'Drylands', 'Highlands', 'Heath'],
                goods: [
                    { type: ['oakloo', 'burchinn'], chance: 0.5, min: 0.2, max: 0.4 },
                    { type: 'dead tree', amount: 0.5 },
                    { type: ['berry bush', 'wild bush'], chance: 0.2 },
                    { type: 'grass', amount: 1.5 },
                    { type: ['wild bunnittias', 'firestoats'], chance: 0.6 },
                    { type: ['vfb1', 'vfb2', 'vfb3', 'vfb4', 'vfb5'], chance: 0.6, min: 0.2, max: 0.7 },
                    { type: ['furoxes'], chance: 0.4, amount: 0.3 },
                    { type: ['wolvoes', 'bears'], chance: 0.1, amount: 0.2 },
                    { type: 'wild bugs' },
                    { type: 'freshwater fish', chance: 0.3, min: 0.1, max: 0.3 },
                    { type: 'freshwater', amount: 0.8 },
                    { type: 'rocky substrate' },
                ],
                modifiers: { 'river': 0.4, 'volcano': 0.2, },
                image: 5,
                score: 7,
            });
            new G.Land({
                name: 'roofed forest', //todo goods
                names: ['Roofed forest', 'Thichet', 'Thick woodland', 'Roofed swamp'],
                goods: [
                    { type: ['oakloo', 'burchinn'], amount: 3 },
                    { type: ['oakloo', 'burchinn', 'dead tree'], chance: 0.5 },
                    { type: ['berry bush', 'wild bush'], chance: 0.6 },
                    { type: 'forest mushrooms', chance: 0.8 },
                    { type: 'grass' },
                    { type: ['wild bunnittias', 'firestoats'], chance: 0.2 },
                    { type: ['vfb1', 'vfb2', 'vfb3', 'vfb4', 'vfb5'], chance: 0.8, min: 0.1, max: 0.4 },
                    { type: ['furoxes'], chance: 0.2, amount: 0.2 },
                    { type: ['wolvoes', 'bears'], chance: 0.5, min: 0.5, max: 1 },
                    { type: ['boars'], chance: 0.5, amount: 0.5 },
                    { type: 'mosseer', chance: 0.7, amount: 0.5 },
                    { type: 'wild bugs', min: 1, max: 1.5 },
                    { type: 'freshwater fish', chance: 0.1, min: 0.1, max: 0.3 },
                    { type: 'freshwater', amount: 1 },
                    { type: 'rocky substrate' },
                ],
                image: 24,
                score: 8,
            });
            new G.Land({
                name: 'warpland',
                names: ['Shroomland', 'Shroom wetland', 'Fungi forest'],
                goods: [
                    { type: ['big warped shrooms'], min: 2, max: 3 },
                    { type: 'forest mushrooms', min: 0.2, max: 0.5 },
                    { type: ['berry bush', 'wild bush'], chance: 0.1, min: 0.1, max: 0.2 },
                    { type: 'grass', min: 0.7, max: 1.2 },
                    { type: ['vfb1', 'vfb4'], chance: 0.05, min: 0.04, max: 0.15 },
                    { type: ['furoxes'], chance: 0.2, amount: 0.2 },
                    { type: ['boars'], chance: 0.5, amount: 0.5 },
                    { type: 'wild bugs', min: 0.4, max: 1.7 },
                    { type: 'freshwater fish', chance: 0.07, min: 0.1, max: 0.3 },
                    { type: 'mudwater', amount: 1 },
                    { type: 'lush rocky substrate' },
                ],
                image: 25,
                score: 4,
            });
            new G.Land({
                name: 'autumnal forest', //todo goods
                names: ['Autumnal forest', 'Autumnest'], //2nd name is elfish one
                goods: [
                    { type: ['autumnal oakloo', 'autumnal burchinn'], amount: 3 },
                    { type: ['autumnal oakloo', 'autumnal burchinn', 'dead tree'], chance: 0.5 },
                    { type: 'berry bush', chance: 0.6 },
                    { type: 'forest mushrooms', chance: 0.8 },
                    { type: ['vfb1', 'vfb2', 'vfb5'], chance: 0.3, min: 0.2, max: 0.45 },
                    { type: 'grass' },
                    { type: ['wild bunnittias', 'firestoats'], chance: 0.2 },
                    { type: ['furoxes'], chance: 0.2, amount: 0.2 },
                    { type: ['wolvoes', 'bears'], chance: 0.5, min: 0.5, max: 1 },
                    { type: ['boars'], chance: 0.5, amount: 0.5 },
                    { type: 'wild bugs', min: 1, max: 1.5 },
                    { type: 'freshwater fish', chance: 0.1, min: 0.1, max: 0.3 },
                    { type: 'freshwater', amount: 1 },
                    { type: 'rocky substrate' },
                ],
                image: 26 + Math.round(Math.random() * 3),
                score: 8,
            });
            new G.Land({
                name: 'tundra',
                names: ['Tundra', 'Cold plain', 'Cold steppe'],
                goods: [
                    { type: ['pine tree', 'confern tree', 'ver tree'], amount: 1 },
                    { type: ['berry bush', 'wild bush'], chance: 0.8 },
                    { type: 'grass' },
                    { type: ['wild bunnittias'], chance: 0.1 },
                    { type: ['colfoxes'], chance: 0.3, amount: 0.4 },
                    { type: ['wolvoes'], chance: 0.5, min: 0.5, max: 1 },
                    { type: ['ocealoes'], chance: 0.2, amount: 0.5 },
                    { type: ['vfb1', 'vfb2'], chance: 0.22, min: 0.1, max: 0.3 },
                    { type: 'mosseer', chance: 0.2, amount: 0.1 },
                    { type: ['polar bears'], chance: 0.3, min: 0.1, max: 0.5 },
                    { type: 'wild bugs' },
                    { type: 'freshwater fish', chance: 0.8, min: 0.1, max: 0.5 },
                    { type: 'freshwater', amount: 1 },
                    { type: 'snow cover' },
                    { type: 'tundra rocky substrate' },
                ],
                image: 9,
                score: 7,
            });
            new G.Land({
                name: 'stoney desert',
                names: ['Desert of stones', 'Desert \'o stone', 'Rocky warmlands'],
                goods: [
                    { type: 'dead tree', min: 0.1, max: 0.5 },
                    { type: 'stone monolith', min: 0.1, max: 0.8 },
                    { type: 'succulents', min: 0.1, max: 0.6 },
                    { type: 'grass', chance: 0.4, min: 0.08, max: 0.14 },
                    { type: 'wild bunnittias', chance: 0.05 },
                    { type: ['furoxes'], chance: 0.3, min: 0.1, max: 0.3 },
                    { type: ['wolvoes'], chance: 0.1, min: 0.1, max: 0.3 },
                    { type: 'wild bugs', amount: 0.17 },
                    { type: 'freshwater', amount: 0.1 },
                    { type: 'sandy soil' },
                    { type: 'warm rocky substrate' },
                ],
                image: 38,
                score: 1,
            });
            new G.Land({
                name: 'ice desert', //todo
                names: ['Ice desert', 'Cold desert'],
                goods: [
                    { type: 'dead tree', amount: 0.5 },
                    { type: ['ver tree', 'pine tree'], amount: 0.2 },
                    { type: 'berry bush', chance: 0.5, amount: 0.2 },
                    { type: 'grass', chance: 0.4, amount: 0.2 },
                    { type: ['colfoxes'], chance: 0.4, min: 0.4, max: 0.6 },
                    { type: ['wolvoes'], chance: 0.1, min: 0.1, max: 0.45 },
                    { type: ['ocealoes'], chance: 0.2, amount: 0.4 },
                    { type: ['polar bears'], chance: 0.5, min: 0.1, max: 0.45 },
                    { type: 'wild bugs', amount: 0.05 },
                    { type: 'freshwater fish', chance: 0.3, min: 0.1, max: 0.3 },
                    { type: 'freshwater', amount: 0.2 },
                    { type: 'snow cover' },
                    { type: 'ice desert rocky substrate' },
                ],
                image: 8,
                score: 2,
            });
            new G.Land({
                name: 'firreal woods', //todo goods
                names: ['Firreal woods', 'Pinereal woods', 'Firraiga'],
                goods: [
                    { type: ['ver tree'], min: 1, max: 1.6 },
                    { type: ['pine tree', 'confern tree'], min: 1.1, max: 1.5 },
                    { type: 'berry bush', chance: 0.9 },
                    { type: 'forest mushrooms', chance: 0.4 },
                    { type: 'grass' },
                    { type: ['wild bunnittias', 'firestoats'], chance: 0.2 },
                    { type: ['vfb2', 'vfb3', 'vfb5'], chance: 0.24, min: 0.1, max: 0.6 },
                    { type: ['wolvoes'], chance: 0.5, min: 0.5, max: 1 },
                    { type: ['polar bears', 'bears'], chance: 0.3, amount: 0.5 },
                    { type: 'mosseer', chance: 0.7, amount: 0.5 },
                    { type: 'wild bugs' },
                    { type: 'freshwater fish', chance: 0.1, min: 0.1, max: 0.3 },
                    { type: 'freshwater', amount: 1 },
                    { type: 'snow cover' },
                    { type: 'rocky substrate' },
                ],
                image: 10,
                score: 8,
            });
            new G.Land({
                name: 'savanna', //todo mythic name and goods
                names: ['Savannah', 'Savannah', 'Sun prairie'],
                goods: [
                    { type: 'cracacia', amount: 1 },
                    { type: 'palmacia tree', chance: 0.4, amount: 0.3 },
                    { type: ['wild bush', 'berry bush'], chance: 0.6 },
                    { type: 'succulents', chance: 0.4, min: 0.1, max: 0.3 },
                    { type: 'grass', amount: 1.5 },
                    { type: ['vfb4', 'vfb5'], chance: 0.7, min: 0.2, max: 0.45 },
                    { type: ['wild bunnittias', 'firestoats'], chance: 0.3 },
                    { type: ['furoxes'], chance: 0.4, amount: 0.5 },
                    { type: ['boars'], chance: 0.3, amount: 0.5 },
                    { type: 'wild bugs' },
                    { type: 'freshwater fish', chance: 0.6, min: 0.1, max: 0.5 },
                    { type: 'freshwater', amount: 0.8 },
                    { type: 'sandy soil', chance: 0.3 },
                    { type: 'warm rocky substrate' },
                ],
                image: 12,
                score: 7,
            });
            new G.Land({
                name: 'desert', //todo goods
                names: ['Desert', 'Scorched land'],
                goods: [
                    { type: 'dead tree', min: 0.4, max: 0.5 },
                    { type: 'cracacia', amount: 0.1, chance: 0.45 },
                    { type: 'succulents', min: 0.1, max: 0.6 },
                    { type: 'grass', chance: 0.3, amount: 0.1 },
                    { type: 'wild bunnittias', chance: 0.05 },
                    { type: ['furoxes'], chance: 0.3, min: 0.1, max: 0.3 },
                    { type: ['wolvoes'], chance: 0.1, min: 0.1, max: 0.3 },
                    { type: 'wild bugs', amount: 0.15 },
                    { type: 'freshwater', amount: 0.1 },
                    { type: 'sandy soil' },
                    { type: 'warm rocky substrate' },
                ],
                image: 35 + Math.round(Math.random()),
                score: 2,
            });
            new G.Land({
                name: 'red desert', //todo goods
                names: ['Red desert', 'Bloody land', 'Red scorches'], //idk why bloody land don't ask me
                goods: [
                    { type: 'dead tree', min: 0.4, max: 0.5 },
                    { type: 'cracacia', amount: 0.1, chance: 0.45 },
                    { type: 'succulents', min: 0.1, max: 0.6 },
                    { type: 'grass', chance: 0.3, amount: 0.1 },
                    { type: 'wild bunnittias', chance: 0.05 },
                    { type: ['vfb1', 'vfb2', 'vfb3'], chance: 0.1, min: 0.05, max: 0.2 },
                    { type: ['furoxes'], chance: 0.3, min: 0.1, max: 0.3 },
                    { type: ['wolvoes'], chance: 0.1, min: 0.1, max: 0.3 },
                    { type: 'wild bugs', amount: 0.15 },
                    { type: 'freshwater', amount: 0.1 },
                    { type: 'red sandy soil' },
                    { type: 'warm rocky substrate' },
                ],
                image: 37,
                score: 2,
            });
            new G.Land({
                name: 'jungle', //todo goods
                names: ['Jungle', 'Tropical forest', 'Mangrove'],
                goods: [
                    { type: ['palm tree'], amount: 3 },
                    { type: 'jungle fruits', chance: 1 },
                    { type: 'grass' },
                    { type: 'koolas', chance: 0.3 },
                    { type: ['vfb1', 'vfb2', 'vfb3', 'vfb4', 'vfb5'], chance: 0.9, min: 0.07, max: 0.7 },
                    { type: ['vfb1', 'vfb2', 'vfb3', 'vfb4', 'vfb5'], chance: 0.9, min: 0.08, max: 0.8 },
                    { type: ['boars'], chance: 0.2, amount: 0.5 },
                    { type: 'wild bugs', min: 1, max: 2 },
                    { type: 'freshwater fish', chance: 0.1, min: 0.1, max: 0.3 },
                    { type: 'freshwater', amount: 1 },
                    { type: 'jungle rocky substrate' },
                ],
                image: 13,
                score: 8,
            });
            new G.Land({
                name: 'stonelands', //todo
                names: ['Stone grove', 'Stonelands', 'Rockland'],
                goods: [
                    { type: 'rocky substrate' },
                    { type: 'stone monolith', amount: 2 },
                    { type: 'dead tree', amount: 0.1 },
                    { type: ['vfb1', 'vfb2', 'vfb3', 'vfb5'], chance: 0.1, min: 0.1, max: 0.45 },
                    { type: ['vfb2', 'vfb3', 'vfb5'], chance: 0.1, min: 0.1, max: 0.45 },
                    { type: 'freshwater', amount: 0.5 },
                    { type: ['boars', 'furoxes'], chance: 0.2, min: 0.1, max: 0.45 },
                    { type: 'stortle', min: 0.1, max: 0.4 },
                    { type: 'grass', chance: 0.3, min: 0.06, max: 0.2 },
                    { type: 'wild bugs', min: 0.05, max: 0.2 },
                ],
                image: 26,
                score: 3.4,
            });
            new G.Land({
                name: 'deadlands', //todo
                names: ['Voidlands', 'Lands\'o despair', 'Deadlands', 'Steppe of death'],
                goods: [
                    { type: 'dead rocky substrate' },
                ],
                image: 47,
                score: 0,
            });
            new G.Land({
                name: 'shroomest', //todo
                names: ['Land \'o mushroom', 'Shroomest', 'Shroomland', 'Shroomwoods'],
                goods: [
                    { type: ['big shrooms'], min: 2, max: 3 },
                    { type: 'forest mushrooms', min: 0.4, max: 1 },
                    { type: 'grass', min: 0.7, max: 1 },
                    { type: ['furoxes'], chance: 0.4, amount: 0.2 },
                    { type: ['firestoats'], chance: 0.5, min: 0.3, max: 0.6 },
                    { type: 'wild bugs', min: 0.4, max: 1.2 },
                    { type: 'freshwater fish', chance: 0.07, min: 0.03, max: 0.2 },
                    { type: ['freshwater', 'mudwater'], min: 0.8, max: 1.2 },
                    { type: 'rocky substrate' },
                ],
                image: 49,
                score: 7,
            });
            new G.Land({
                name: 'flowery prairie', //todo
                names: ['Prairie', 'Grassland', 'Plain', 'Steppe', 'Meadow'],
                goods: [
                    { type: ['oakloo', 'burchinn'], chance: 1, min: 0.1, max: 0.2 },
                    { type: ['berry bush', 'wild bush'], chance: 0.9 },
                    { type: 'grass', amount: 2 },
                    { type: ['wild bunnittias', 'firestoats'], chance: 0.9 },
                    { type: ['vfb1', 'vfb2'], chance: 1, min: 0.2, max: 1.2 },
                    { type: ['vfb3', 'vfb4'], chance: 0.9, min: 0.2, max: 1.2 },
                    { type: ['vfb5'], chance: 0.8, min: 0.1, max: 0.6 },
                    { type: ['wolvoes', 'bears'], chance: 0.2, amount: 0.5 },
                    { type: ['mosseer'], chance: 0.2, amount: 0.2 },
                    { type: 'wild bugs' },
                    { type: 'freshwater fish', chance: 0.8, min: 0.1, max: 0.5 },
                    { type: 'freshwater', amount: 1 },
                    { type: ['lush rocky substrate', 'rocky substrate'] },
                ],
                modifiers: { 'river': 0.4, 'volcano': 0.2, },
                image: 42,
                score: 10,
            });
            new G.Land({
                name: 'ominous woods', //todo
                names: ['Ominous woods', 'Omilands', 'Owoods', 'Darklands', 'Dark meadow'],
                goods: [
                    { type: ['ominous tree'], chance: 1, min: 0.4, max: 1 },
                    { type: 'berry bush', chance: 0.8 },
                    { type: 'ominous grass', amount: 2 },
                    { type: ['wild bunnittias', 'firestoats'], chance: 0.1 },
                    { type: ['furoxes'], chance: 0.5, min: 0.2, max: 0.4 },
                    { type: ['vfb1', 'vfb2'], chance: 0.2, min: 0.1, max: 0.3 },
                    { type: ['wolvoes', 'omars'], chance: 0.2, min: 0.2, max: 0.4 },
                    { type: ['omieer'], chance: 0.2, min: 0.2, max: 0.4 },
                    { type: 'wild bugs' },
                    { type: 'freshwater fish', chance: 0.8, min: 0.15, max: 0.42 },
                    { type: 'freshwater', min: 0.5, max: 1.05 },
                    { type: 'dead rocky substrate' },
                ],
                modifiers: { 'river': 0.4, 'volcano': 0.2, },
                image: 51,
                score: 4,
            });
            //TODO : all the following
            new G.Land({
                name: 'volcano',
                names: ['Volcano'],
                modifier: true,
                goods: [
                ],
            });
            new G.Land({
                name: 'hills',
                names: ['Hills'],
                modifier: true,
                goods: [
                ],
            });
            new G.Land({
                name: 'canyon',
                names: ['Canyon', 'Rift', 'Gorge', 'Ravine'],
                modifier: true,
                goods: [
                ],
            });
            new G.Land({
                name: 'cliffs',
                names: ['Cliffs'],
                modifier: true,
                goods: [
                    //TODO : some limestone source here
                ],
            });
            new G.Land({
                name: 'beach',
                names: ['Beach', 'Sandy beach', 'Volcanic beach'],
                modifier: true,
                goods: [
                    { type: 'saltwater fish', min: 0.3, max: 1 },
                    { type: ['crabs', 'clams'], chance: 0.1, min: 0.1, max: 0.5 },
                    { type: 'sandy soil' },
                ],
            });
            new G.Land({
                name: 'river',
                names: ['River'],
                modifier: true,
                goods: [
                    { type: 'freshwater fish', min: 0.2, max: 1 },
                    { type: ['crabs', 'clams'], chance: 0.2, min: 0.1, max: 0.3 },
                    { type: 'freshwater', min: 0.5, max: 1.5 },
                ],
            });

            /*=====================================================================================
            GOODS
            =======================================================================================*/

            G.contextNames['gather'] = '<font color="#E6FFEA">Gathering</font>';
            G.contextNames['fish'] = '<font color="#CCFFEE">Fishing</font>';
            G.contextNames['hunt'] = '<font color="#FFDDCC">Hunting</font>';
            G.contextNames['chop'] = '<font color="#FF6619">Chopping</font>';
            G.contextNames['dig'] = '<font color="#FFE666">Digging</font>';
            G.contextNames['mine'] = '<font color="#707070">Mining</font>';
            G.contextNames['quarry'] = '<font color="#9E9E9E">Quarrying</font>';
            G.contextNames['flowers'] = '<font color="#8FA">Flowers</font>';
            //plants
            new G.Goods({
                name: 'grass',
                desc: '[grass] is a good source of [herbs]; you may also occasionally find some [fruit]s and [stick]s while foraging.',
                icon: [11, 17, "c2"],
                res: {
                    'gather': { 'herbs': 10, 'fruit': 0.5, 'stick': 0.4 },
                },
                mult: 9,
            });
            new G.Goods({
                name: 'oakloo',
                desc: 'The [oakloo] is a mighty tree with dark wood that thrives in temperate climate, rich in [log]s and [stick]s. It can rarely be found in other biomes.',
                icon: [18, 14, "c2"],
                res: {
                    'chop': { 'log': 1, 'stick': 3 },
                    'gather': { 'stick': 1 },
                },
                affectedBy: ['deforestation'],
                mult: 4.8,
            });
            new G.Goods({
                name: 'autumnal oakloo',
                desc: 'The [autumnal oakloo] is a mighty tree with dark wood that thrives in temperate climates, rich in [log]s and [stick]s. It can rarely be found in other biomes. This kind of [autumnal oakloo,Oakloo] only appears in autumnal forests where trees grow warm autumnal colors every time spring begins.',
                icon: [choose([3, 4]), 14, "c2"],
                res: {
                    'chop': { 'log': 1, 'stick': 3 },
                    'gather': { 'stick': 1 },
                },
                affectedBy: ['deforestation'],
                mult: 4.8,
            });
            new G.Goods({
                name: 'burchinn',
                desc: '[burchinn,Burchinn trees] have a white and slightly green bark and are rather frail, but are a good source of [log]s and [stick]s.',
                icon: [21, 14, "c2"],
                res: {
                    'chop': { 'log': 1, 'stick': 3 },
                    'gather': { 'stick': 1 },
                },
                affectedBy: ['deforestation'],
                mult: 4.8,
            });
            new G.Goods({
                name: 'autumnal burchinn',
                desc: '[autumnal burchinn,Autumnal burchinn trees] have white and slightly green bark and are rather frail, but are a good source of [log]s and [stick]s. This kind of [autumnal burchinn,Burchinn] only appears in autumnal forests where trees grow warm autumnal colors every time spring begins.',
                icon: [choose([5, 6]), 14, "c2"],
                res: {
                    'chop': { 'log': 1, 'stick': 3 },
                    'gather': { 'stick': 1 },
                },
                affectedBy: ['deforestation'],
                mult: 4.8,
            });
            new G.Goods({
                name: 'maploa tree',
                desc: 'The [maploa tree] is a red and mighty maple tree that thrives in some temperate climates. These trees are rich in [log]s and [stick]s.',
                icon: [7, choose([14, 15]), "c2"],
                res: {
                    'chop': { 'log': 1, 'stick': 3 },
                    'gather': { 'stick': 1 },
                },
                affectedBy: ['deforestation'],
                mult: 4.8,
            });
            new G.Goods({
                name: 'palm tree',
                desc: '[palm tree]s prefer warm climates and provide [log]s when chopped; harvesting them may also yield [stick]s and delicious [fruit] of various kinds.',
                icon: [14, 14, "c2"],
                res: {
                    'chop': { 'log': 1, 'stick': 3 },
                    'gather': { 'fruit': 0.3, 'stick': 1 },
                },
                affectedBy: ['deforestation'],
                mult: 4.8,
            });
            new G.Goods({
                name: 'palmacia tree',
                desc: 'All [palmacia tree]s prefer warm and dry climates and provide [log]s when chopped. Harvesting them can yield [stick]s and rather strange [jungle fruits].',
                icon: [13, 14, "c2"],
                res: {
                    'chop': { 'log': 1, 'stick': 3 },
                    'gather': { 'fruit': 0.1, 'stick': 1 },
                },
                affectedBy: ['deforestation'],
                mult: 4.8,
            });
            new G.Goods({
                name: 'cracacia',
                desc: 'The [cracacia,Cracacia tree] tends to grow in warm, dry climates, and can be chopped for [log]s and harvested for [stick]s.',
                icon: [19, 14, "c2"],
                res: {
                    'chop': { 'log': 1, 'stick': 3 },
                    'gather': { 'stick': 1 },
                },
                affectedBy: ['deforestation'],
                mult: 4.8,
            });
            new G.Goods({
                name: 'ver tree',
                desc: '[ver tree]s can handle cold climates and keep their needles all year along; they can provide [log]s and [stick]s.',
                icon: [15, 14, "c2"],
                res: {
                    'chop': { 'log': 1, 'stick': 3 },
                    'gather': { 'stick': 1 },
                },
                affectedBy: ['deforestation'],
                mult: 4.6,
            });
            new G.Goods({
                name: 'pine tree',
                desc: '[pine tree]s are tall and can easily handle cold climates and keep their needles all year along; they can provide [log]s and [stick]s. //Can be found in some ice deserts and in the <b>Firreal woods</b>, along with other conifers.',
                icon: [16, 14, "c2"],
                res: {
                    'chop': { 'log': 1, 'stick': 3 },
                    'gather': { 'stick': 1 },
                },
                affectedBy: ['deforestation'],
                mult: 4.6,
            });
            new G.Goods({
                name: 'confern tree',
                desc: '[confern tree]s are tall and can easily handle cold climates and keep their needles all year along; they can provide [log]s and [stick]s. //Can be found in some tundras and in the <b>Firreal woods</b>, along with other conifers.',
                icon: [17, 14, "c2"],
                res: {
                    'chop': { 'log': 1, 'stick': 3 },
                    'gather': { 'stick': 1 },
                },
                affectedBy: ['deforestation'],
                mult: 4.6,
            });
            new G.Goods({
                name: 'dead tree',
                desc: 'While an ornery and sad sight, [dead tree]s are an adequate source of dry [log]s and [stick]s.',
                icon: [9, 10],
                res: {
                    'chop': { 'log': 1, 'stick': 2 },
                    'gather': { 'stick': 0.5 },
                },
                affectedBy: ['deforestation'],
                mult: 9,
            });
            new G.Goods({
                name: 'berry bush',
                desc: '[berry bush,Berry bushes] can be foraged for [fruit]s, [stick]s, and the occasional [herbs,Herb].',
                icon: [3, 17, "c2"],
                res: {
                    'gather': { 'fruit': 3, 'stick': 0.5, 'herbs': 0.25 },
                },
                affectedBy: ['scarce forageables'],
                mult: 9,
            });
            new G.Goods({
                name: 'wild bush',
                desc: '[wild bush,Wild bushes] can be foraged for [vegetables], [stick]s, and sometimes [herbs].',
                icon: [18, 17, "c2"],
                res: {
                    'gather': { 'vegetables': 3, 'stick': 0.5 },
                },
                affectedBy: ['scarce forageables'],
                mult: 10,
            });
            new G.Goods({
                name: 'forest mushrooms',
                desc: '[forest mushrooms] grow in the penumbra of the underbrush, and yield all sorts of interesting [herbs]. They also have multiple unique styles that are quite fascinating.',
                icon: [choose([4, 5, 6]), 17, "c2"],
                res: {
                    'gather': { 'herbs': 4 },
                },
                affectedBy: ['scarce forageables'],
                mult: 9,
            });
            new G.Goods({
                name: 'big warped shrooms',
                desc: '[big warped shrooms] are a variety of [big shrooms] that can be found in <b>Shroomest</b>. //This variety can only be met in <b>Warplands</b>. Will yield [herbs] and easily harvested [spoiled food]. Can be chopped for its stem that can be later used to make a building material.',
                icon: [8, choose([14, 15]), "c2"],
                res: {
                    'gather': { 'herbs': 1, 'spoiled food': 4 },
                    'chop': { 'shroom stem': 1 / 3 }
                    //add and include stem context chop
                },
                affectedBy: ['scarce forageables'],
                mult: 4.7,
            });
            new G.Goods({
                name: 'big shrooms',
                desc: '[big shrooms] can be found in <b>Shroomests</b>//These tall shrooms can be gathered for some [herbs] and [spoiled food]. They can also sometimes be chopped for [shroom stem]s.',
                icon: [9, choose([14, 15]), "c2"],
                res: {
                    'gather': { 'herbs': 4 },
                    'chop': { 'shroom stem': 1 / 3 }
                },
                affectedBy: ['scarce forageables'],
                mult: 8,
            });
            new G.Goods({
                name: 'succulents',
                desc: 'Hardy cacti that grow in the desert. While tricky to harvest, [succulents] can provide [herbs] and [fruit]s.',
                icon: [12, 17, "c2"],
                res: {
                    'gather': { 'fruit': 1, 'herbs': 3 },
                },
                affectedBy: ['scarce forageables'],
                mult: 9,
            });
            new G.Goods({
                name: 'jungle fruits',
                desc: '[jungle fruits] come in all shapes, colors and sizes, and will yield [fruit]s and [herbs] to those who forage them.',
                icon: [13, 17, "c2"],
                res: {
                    'gather': { 'fruit': 2, 'herbs': 1 },
                },
                affectedBy: ['scarce forageables'],
                mult: 9,
            });
            //animals
            new G.Goods({
                name: 'wild bunnittias',
                desc: '[wild bunnittias] are cute but quick and hard to catch, and yield a little [meat], [bone] and [hide]. They like to hide in bushes and escape right into dense bushes.//Carcasses can sometimes be gathered for some [spoiled food].',
                icon: [3, 19, "c2"],
                res: {
                    'gather': { 'spoiled food': 0.5 },
                    'hunt': { 'meat': 2, 'bone': 0.2, 'hide': 0.2 },
                },
                affectedBy: ['over hunting'],
                mult: 4.8,
            });
            new G.Goods({
                name: 'firestoats',
                desc: 'Besides being a source of high-quality [hide,Furs], these mammals have eyes that can glow in the darkness. During the night small, these animals could provide a small amount of light for your tribe and are a source of [meat] and [bone]s.//Carcasses can sometimes be gathered for [spoiled food].',
                icon: [choose([4, 5]), 19, "c2"],
                res: {
                    'gather': { 'spoiled food': 0.5 },
                    'hunt': { 'meat': 2, 'bone': 0.2, 'hide': 1 },
                },
                affectedBy: ['over hunting'],
                mult: 4.8,
            });
            new G.Goods({
                name: 'koolas',
                desc: 'While they are placid leaf-eaters with cute pink noses, these tree-dwelling mammals have been rumored to drop down on unsuspecting passersby. [koolas] tend prefer dense jungles and may be spotted occasionally in other areas. They can be hunted for [meat], [bone]s and [hide]s.//Carcasses can sometimes be gathered for [spoiled food].',
                icon: [6, 19, "c2"],
                res: {
                    'gather': { 'spoiled food': 0.5 },
                    'hunt': { 'meat': 2, 'bone': 0.2, 'hide': 0.2 },
                },
                affectedBy: ['over hunting'],
                mult: 4.8,
            });
            new G.Goods({
                name: 'mosseer',
                desc: 'Forest herbivores that live in herds which settle in dense forests; good source of [meat], [bone]s and [hide]s.//Their carcasses can rarely be gathered for [spoiled food] as well as they provide better [meat]s.',
                icon: [7, 19, "c2"],
                res: {
                    'gather': { 'spoiled food': 0.5 },
                    'hunt': { 'meat': 4, 'bone': 1, 'hide': 0.4 },
                },
                affectedBy: ['over hunting'],
                mult: 4.8,
            });
            new G.Goods({
                name: 'omieer',
                desc: 'Ominous variety of [mosseer]s. //Purple herbivores that live in dense forests; good source of [meat], [bone]s and [hide]s.//Their carcasses can rarely be gathered for [spoiled food] as well as they provide better [hide]s.',
                icon: [8, 19, "c2"],
                res: {
                    'gather': { 'spoiled food': 0.7 },
                    'hunt': { 'meat': 3, 'bone': 1, 'hide': 0.6 },
                },
                affectedBy: ['over hunting'],
                mult: 4.8,
            });
            new G.Goods({
                name: 'bears',
                desc: 'Large omnivorous mammals that hibernate in cold seasons; fearsome in battle. Bears are a great source of [meat], [bone]s and large [hide]s.//Carcasses can also be gathered for [spoiled food].',
                icon: [9, 19, "c2"],
                res: {
                    'gather': { 'spoiled food': 1 },
                    'hunt': { 'meat': 4, 'bone': 1, 'hide': 0.9 },
                },
                affectedBy: ['over hunting'],
                mult: 4.8,
            });
            new G.Goods({
                name: 'omars',
                desc: 'Ominous variety of [bears]. //Large dark omnivorous mammals that hibernate in cold seasons; fearsome in battle. These animals will provide plenty of [meat], [bone]s and large [hide]s.//Carcasses can also be gathered for large amounts of [spoiled food].',
                icon: [15, 19, "c2"],
                res: {
                    'gather': { 'spoiled food': 1.5 },
                    'hunt': { 'meat': 3.9, 'bone': 1, 'hide': 1.1 },
                },
                affectedBy: ['over hunting'],
                mult: 4.8,
            });
            new G.Goods({
                name: 'polar bears',
                desc: 'Large omnivorous mammals that live in snowy regions; fierce hunters. These animals will give plenty of [meat], [bone]s and large [hide]s.//Carcasses can also be gathered for [spoiled food].',
                icon: [13, 19, "c2"],
                res: {
                    'gather': { 'spoiled food': 1 },
                    'hunt': { 'meat': 4, 'bone': 1, 'hide': 1 },
                },
                affectedBy: ['over hunting'],
                mult: 4.8,
            });
            new G.Goods({
                name: 'boars',
                desc: 'Omnivorous mammals armed with tusks; provide [meat], [bone]s and [hide]s.//Carcasses can also be gathered for [spoiled food].',
                icon: [14, 19, "c2"],
                res: {
                    'gather': { 'spoiled food': 1 },
                    'hunt': { 'meat': 3, 'bone': 1, 'hide': 0.5 },
                },
                affectedBy: ['over hunting'],
                mult: 4.8,
            });
            new G.Goods({
                name: 'furoxes',
                desc: 'These sly hunters have soft fur and can be butchered for [meat], [bone]s and [hide]s.//Carcasses can sometimes be gathered for [spoiled food].',
                icon: [10, 19, "c2"],
                res: {
                    'gather': { 'spoiled food': 0.5 },
                    'hunt': { 'meat': 2, 'bone': 0.2, 'hide': 0.5 },
                },
                affectedBy: ['over hunting'],
                mult: 4.8,
            });
            new G.Goods({
                name: 'colfoxes',
                desc: 'Arctic variant of [furoxes]. //These animals can be butchered for [meat], [bone]s and [hide]s.//Their carcasses, however, cannot be gathered for [spoiled food].',
                icon: [17, 19, "c2"],
                res: {
                    'hunt': { 'meat': 2, 'bone': 0.2, 'hide': 0.5 },
                },
                affectedBy: ['over hunting'],
                mult: 4.8,
            });
            new G.Goods({
                name: 'wolvoes',
                desc: 'Ferocious carnivores that tend to hunt in packs; a dangerous source of [meat], [bone]s and [hide]s.//Carcasses can sometimes be gathered for [spoiled food].',
                icon: [11, 19, "c2"],
                res: {
                    'gather': { 'spoiled food': 0.5 },
                    'hunt': { 'meat': 3, 'bone': 0.5, 'hide': 0.5 },
                },
                affectedBy: ['over hunting'],
                mult: 4.8,
            });
            new G.Goods({
                name: 'ocealoes',
                desc: 'Carnivorous semi-aquatic mammal with long tail. A fairly unique species that provides [meat], [bone]s and [hide]s.//Carcasses can also be gathered for [spoiled food].',
                icon: [7, 18, "c2"],
                res: {
                    'gather': { 'spoiled food': 1 },
                    'hunt': { 'meat': 3, 'bone': 0.6, 'hide': 0.4 },
                },
                affectedBy: ['over hunting'],
                mult: 4.8,
            });
            new G.Goods({
                name: 'wild bugs',
                displayName: 'Bugs',
                desc: '[wild bugs,Bugs] are ubiquitious and plentiful.',
                icon: [12, 19, "c2"],
                res: {
                    'gather': { 'bugs': 2 },
                },
                //affectedBy:['over hunting'],
                mult: 4.8,
            });
            new G.Goods({
                name: 'saltwater fish',
                desc: '[saltwater fish] are of every size and color.//A source of [seafood].',
                icon: [choose([3, 4]), 18, "c2"],
                res: {
                    'gather': { 'seafood': 0.03 },
                    'fish': { 'seafood': 3 },
                },
                affectedBy: ['over fishing'],
                mult: 4.8,
            });
            new G.Goods({
                name: 'freshwater fish',
                desc: '[freshwater fish] live in streams and rivers.//A source of [seafood].',
                icon: [choose([5, 6]), 18, "c2"],
                res: {
                    'gather': { 'seafood': 0.03 },
                    'fish': { 'seafood': 3 },
                },
                affectedBy: ['over fishing'],
                mult: 4.8,
            });
            new G.Goods({
                name: 'stortle',
                desc: 'A turtle with a hard shell on its top. These animals may only be found in the <b>Stonelands</b>.',
                icon: [16, 19, "c2"],
                res: {
                    'gather': { 'meat': 0.5 },
                    'hunt': { 'meat': 0.5 },
                },
                affectedBy: ['over hunting'],
                mult: 4.8,
            });
            new G.Goods({
                //TODO
                name: 'crabs',
                desc: 'Skittish crustaceans that walk sideways.//A source of [seafood].',
                icon: [0, 0],
                res: {
                    'gather': { 'seafood': 0.1 },
                    'fish': { 'seafood': 2 },
                },
                affectedBy: ['over fishing'],
                mult: 4.8,
            });
            new G.Goods({
                name: 'stone monolith',
                desc: '[stone monolith]s are exclusively in <b>Stoney deserts</b> and <b>Stonelands</b>.//These may be mined for extra [limestone] and [stone]. //May provide [olivnum ore] in very rare circumstances.',
                icon: [12, 14, "c2"],
                res: {
                    'mine': { 'stone': 0.3, 'limestone': 0.02, 'olivnum ore': 0.002 },
                },
                affectedBy: ['mineral depletion'],
                noAmount: true,
                mult: 4.8,
            });
            //NEW SUBSTRATES
            new G.Goods({
                name: 'rocky substrate',
                desc: 'A [rocky substrate] is found underneath terrain with moderate temperature and humidity.//Surface [stone]s may be gathered by hand.//Digging here often produces [mire], more [stone]s, and occasionally [olivnum ore,Ores] and [clay].//Mining provides the best results, outputting a variety of [stone]s, rare [greenold ore,Ores], and precious [gems].',
                icon: [3, 16, "c2"],
                res: {
                    'gather': { 'stone': 0.25, 'clay': 0.005, 'limestone': 0.005 },
                    'dig': { 'mire': 2, 'clay': 0.15, 'stone': 0.6, 'berrylium ore': 0.007, 'olivnum ore': 0.001, 'tin ore': 0.008, 'limestone': 0.1, 'salt': 0.051 },
                    'mine': { 'stone': 0.3, 'olivnum ore': 0.085, 'tin ore': 0.085, 'iron ore': 0.04, 'greenold ore': 0.004, 'coal': 0.09, 'salt': 0.11, 'gems': 0.003/*,'Various stones':0.3,'pyrite':0.001,'osmium ore':0.003*/ },
                    'quarry': { 'cut stone': 0.7, 'limestone': 0.5, 'fazble': 0.01/*,'Various cut stones':0.3*/ },
                },
                affectedBy: ['mineral depletion'],
                noAmount: true,
                mult: 4.8,
            });
            new G.Goods({
                name: 'warm rocky substrate',
                desc: 'A [warm rocky substrate] is found underneath biomes with warm temperature and low humidity.//Surface [stone]s may be gathered by hand.//This soil contains low amounts of [clay] and negligible amounts of [mire], more [stone]s and occasionally [olivnum ore,Ores].//Mining provides the best results, outputting a variety of [stone]s, more common [greenold ore] and [salt], but less precious [gems].//Quarrying underneath here provides less [fazble].',
                icon: [7, 16, "c2"],
                res: {
                    'gather': { 'stone': 0.2, 'clay': 0.002, 'limestone': 0.003 },
                    'dig': { 'mire': 0.1, 'clay': 0.3, 'stone': 0.6, 'berrylium ore': 0.008, 'tin ore': 0.008, 'limestone': 0.1, 'salt': 0.051, 'sand': 0.00001 },
                    'mine': { 'stone': 0.8, 'olivnum ore': 0.01, 'tin ore': 0.08, 'iron ore': 0.042, 'greenold ore': 0.0052, 'coal': 0.11, 'salt': 0.14, 'gems': 0.004/*,'Various stones':0.2no osmium,'pyrite':0.0015*/ },
                    'quarry': { 'cut stone': 0.9, 'limestone': 0.5, 'fazble': 0.0088/*,'Various cut stones':0.2*/ },
                },
                affectedBy: ['mineral depletion'],
                noAmount: true,
                mult: 4.8,
            });
            new G.Goods({
                name: 'tundra rocky substrate',
                desc: 'A [tundra rocky substrate] is found underneath biomes with low temperatures or similar to tundra.//Surface [stone]s may be gathered by hand.//This soil contains less [clay] and [mire], more [stone]s and a little bit less [olivnum ore,Ores].//Mining provides the best results, outputting a variety of [stone]s, more common [iron ore] and [coal], but less amounts of ores like [olivnum ore,Olivnum] or [tin ore,Tin]. Can\'t forget about [gems] though!//Quarrying underneath here provides more [limestone].',
                icon: [10, 16, "c2"],
                res: {
                    'gather': { 'stone': 0.2, 'clay': 0.004, 'limestone': 0.0035 },
                    'dig': { 'mire': 1.5, 'clay': 0.2, 'stone': 0.6, 'olivnum ore': 0.006, 'tin ore': 0.006, 'limestone': 0.1, 'salt': 0.051 },
                    'mine': { 'stone': 0.95, 'olivnum ore': 0.09, 'tin ore': 0.07, 'iron ore': 0.046, 'greenold ore': 0.0035, 'coal': 0.16, 'salt': 0.1, 'gems': 0.005/*,'Various stones':0.05,'pyrite':0.02osmium 0.041*/ },
                    'quarry': { 'cut stone': 0.85, 'limestone': 0.62, 'fazble': 0.01/*,'Various cut stones':0.2*/ },
                },
                affectedBy: ['mineral depletion'],
                noAmount: true,
                mult: 4.8,
            });
            new G.Goods({
                name: 'ice desert rocky substrate',
                desc: 'A [ice desert rocky substrate] is found underneath biomes with very low temperatures.//Surface [stone]s may be gathered by hand.//This soil contains no [mire], more [stone]s and [limestone] and rarely [olivnum ore,Ores].//Mining provides the best results, outputting a variety of [stone]s, way more common [iron ore], some more [coal], but less amounts of ores like [olivnum ore,Olivnum]. Can\'t forget about [gems] though, because you\'ll find more here.//Quarrying underneath here provides more [limestone] and [fazble].//<font color="#fcc">This substrate contains no [salt].</font>',
                icon: [8, 16, "c2"],
                res: {
                    'gather': { 'stone': 0.2, 'clay': 0.002, 'limestone': 0.0035 },
                    'dig': { 'clay': 0.2, 'stone': 0.6, 'olivnum ore': 0.001, 'tin ore': 0.001, 'limestone': 0.105 },
                    'mine': { 'stone': 0.944, 'olivnum ore': 0.09, 'tin ore': 0.07, 'iron ore': 0.06, 'greenold ore': 0.0035, 'coal': 0.21, 'gems': 0.0052/*,'Various stones':0.006osmium 0.04*/ },
                    'quarry': { 'cut stone': 1, 'limestone': 0.62, 'fazble': 0.01/*,'Various cut stones':0.2*/ },
                },
                affectedBy: ['mineral depletion'],
                noAmount: true,
                mult: 4.8,
            });
            new G.Goods({
                name: 'wet rocky substrate',
                desc: 'A [wet rocky substrate] is found underneath terrain with high humidity.//Surface [stone]s may be gathered by hand.//Digging here often produces way more [mire] and [clay], more [stone]s and occasionally [olivnum ore,Ores] and extra [clay]. Digging here provides more [limestone] but provides no [salt].//Mining provides the best results, outputting a variety of [stone]s, more common [olivnum ore,Olivnum], and precious [gems]. Also, mining here provides way less [iron ore,Iron].//Quarrying provides a little more [limestone] and [fazble] but less [cut stone].',
                icon: [9, 16, "c2"],
                res: {
                    'gather': { 'stone': 0.25, 'clay': 0.007, 'limestone': 0.005 },
                    'dig': { 'mire': 4.2, 'clay': 0.45, 'stone': 0.6, 'olivnum ore': 0.008, 'tin ore': 0.008, 'limestone': 0.14 },
                    'mine': { 'stone': 0.85, 'olivnum ore': 0.011, 'tin ore': 0.085, 'iron ore': 0.02, 'greenold ore': 0.004, 'coal': 0.09, 'salt': 0.11, 'gems': 0.005/*,'Various stones':0.15*/ },
                    'quarry': { 'cut stone': 0.81, 'limestone': 0.55, 'fazble': 0.011/*,'Various cut stones':0.2*/ },
                },
                affectedBy: ['mineral depletion'],
                noAmount: true,
                mult: 4.8,
            });
            new G.Goods({
                name: 'jungle rocky substrate',
                desc: 'A [jungle rocky substrate] is found underneath jungles.//Surface [stone]s may be gathered by hand.//Digging here often produces way more [clay], more [stone]s and occasionally [olivnum ore,Ores] and extra [clay]. Digging here provides more [limestone] but provides no [salt].//Mining provides the best results, outputting a variety of [stone]s, more common [tin ore,Tin] but less precious [gems] and way less [olivnum ore,Olivnum] amounts. Also, mining here provides way less [iron ore,Iron].',
                icon: [6, 16, "c2"],
                res: {
                    'gather': { 'stone': 0.25, 'clay': 0.005, 'limestone': 0.005 },
                    'dig': { 'mire': 2, 'clay': 0.35, 'stone': 0.6, 'olivnum ore': 0.004, 'berrylium ore': 0.0035, 'tin ore': 0.008, 'limestone': 0.14 },
                    'mine': { 'stone': 0.8, 'berrylium ore': 0.004, 'tin ore': 0.014, 'iron ore': 0.05, 'greenold ore': 0.004, 'coal': 0.09, 'salt': 0.11, 'gems': 0.004/*,'Various stones':0.2*/ },
                    'quarry': { 'cut stone': 0.75, 'limestone': 0.5, 'fazble': 0.01/*,'Various cut stones':0.2*/ },
                },
                affectedBy: ['mineral depletion'],
                noAmount: true,
                mult: 4.8,
            });
            new G.Goods({
                name: 'lush rocky substrate',
                desc: 'A [lush rocky substrate] is found underneath terrain with a lush temperature and stable humidity.//Surface [stone]s may be gathered by hand.//Digging here often produces [mire], more [stone]s and occasionally [olivnum ore,Ores] and a bit less [clay].//Mining provides the best results, outputting a variety of [stone]s, a little bit more rarely [greenold ore,Ores], and precious [gems] but less ores like [olivnum ore,Olivnum], [tin ore,Tin],insert new ore here, [iron ore,Iron]. You will find less [coal] here.',
                icon: [5, 16, "c2"],
                res: {
                    'gather': { 'stone': 0.25, 'clay': 0.005, 'limestone': 0.005 },
                    'dig': { 'mire': 2, 'clay': 0.13, 'stone': 0.6, 'berrylium ore': 0.0069, 'olivnum ore': 0.001, 'tin ore': 0.0081, 'limestone': 0.1, 'salt': 0.05 },
                    'mine': { 'stone': 0.88, 'olivnum ore': 0.055, 'tin ore': 0.055, 'iron ore': 0.025, 'greenold ore': 0.0038, 'coal': 0.078, 'salt': 0.1, 'gems': 0.005/*,'Various stones':0.12*/ },
                    'quarry': { 'cut stone': 0.9, 'limestone': 0.5, 'fazble': 0.01/*,'Various cut stones':0.2*/ },
                },
                affectedBy: ['mineral depletion'],
                noAmount: true,
                mult: 4.8,
            });
            new G.Goods({
                name: 'dead rocky substrate',
                desc: 'A [dead rocky substrate] is unique to the Dead forest biome.//Surface [stone]s may be gathered by hand.//Digging rarely produces [mire], more [stone]s and occasionally [olivnum ore,Ores] and [clay].//Mining here is not a great idea because you will find almost no [tin ore,Ores]. //Same with quarrying (excluding [fazble], which is more often than anywhere else).',
                icon: [4, 16, "c2"],
                res: {
                    'gather': { 'stone': 0.25, 'clay': 0.004, 'limestone': 0.002 },
                    'dig': { 'mire': 0.5, 'clay': 0.05, 'stone': 0.2, 'olivnum ore': 0.001, 'tin ore': 0.002, 'limestone': 0.025, 'salt': 0.02/*osmium 0.001*/ },
                    'mine': { 'stone': 0.8, 'olivnum ore': 0.01, 'tin ore': 0.03, 'iron ore': 0.01, 'coal': 0.04, 'salt': 0.1, 'gems': 0.001/*,'Various stones':0.2*/ },
                    'quarry': { 'cut stone': 0.6, 'limestone': 0.1, 'fazble': 0.01/*,'Various cut stones':0.2*/ },
                },
                affectedBy: ['mineral depletion'],
                noAmount: true,
                mult: 3.85,
            });
            new G.Goods({
                name: 'snow cover',
                desc: 'A [snow cover] is often available year-long in cold environments, and is a good source of [water]; it may also conceal [ice], which must be dug out from deeper cover.',
                icon: [13, 16, "c2"],
                res: {
                    'gather': { 'water': 4, 'muddy water': 8 },
                    'dig': { 'ice': 0.2 },
                },
                mult: 4.8,
            });
            new G.Goods({
                name: 'sandy soil',
                desc: '[sandy soil] is the result of a [rocky substrate] eroded by wind over long periods of time. [sand] is plentiful here.',
                icon: [11, 16, "c2"],
                res: {
                    'dig': { 'sand': 1 },
                },
                noAmount: true,
                mult: 4.8,
            });
            new G.Goods({
                name: 'red sandy soil',
                desc: '[red sandy soil] is the result of a [rocky substrate] eroded by wind over long periods of time in specific conditions. [sand] is plentiful here.',
                icon: [12, 16, "c2"],
                res: {
                    'dig': { 'sand': 1 },
                },
                noAmount: true,
                mult: 4.8,
            });
            //liquids
            new G.Goods({
                name: 'saltwater',
                desc: '[saltwater] cannot be collected for [water], but may produce [salt] deposits.',
                icon: [14, 16, "c2"],
                res: {
                    'gather': { 'salt': 0.05 },
                },
                noAmount: true,
                mult: 4.8,
            });
            new G.Goods({
                name: 'freshwater',
                desc: '[freshwater], whether found in streams or from rainwater, can be collected for [water] and [muddy water].',
                icon: [15, 16, "c2"],
                res: {
                    'gather': { 'water': 8, 'muddy water': 8 },
                },
                //mwater:res['gather']['muddy water'],
                //water:res['gather']['water'],
                mult: 4.8,
            });
            new G.Goods({
                name: 'mudwater',
                desc: '[mudwater], whether found in swamps, polluted streams, or other locations can be collected for disgusting [muddy water].',
                icon: [16, 16, "c2"],
                res: {
                    'gather': { 'muddy water': 8 },
                },
                //mwater:res['gather']['muddy water'],
                //water:res['gather']['water'],
                mult: 4.8,
            });
            new G.Goods({
                name: 'ominous tree',
                desc: 'The [ominous tree] is a dark tree that lives in the lush climates of Ominous Woods and keep their dark needles year-long; they can provide [log]s and [stick]s.',
                icon: [3, 15, "c2"],
                res: {
                    'chop': { 'log': 1, 'stick': 3 },
                    'gather': { 'stick': 1 },
                },
                affectedBy: ['deforestation'],
                mult: 4.8,
            });
            new G.Goods({
                name: 'ominous grass',
                desc: '[ominous grass] is a good source of [herbs]; you may also occasionally find some [fruit]s and [stick]s while foraging.',
                icon: [17, 17, "c2"],
                res: {
                    'gather': { 'herbs': 8, 'fruit': 0.5, 'stick': 0.7 },
                },
                mult: 9,
            });
            new G.Goods({
                name: 'coral reef',
                desc: 'Colorful, beautiful corals. They like to live in warm, tropical oceans and seas. However, some reefs can be met in the depths of lukewarm oceans in much smaller colonies. //This does not provide anything useful, however.',
                icon: [choose([8, 9]), 17, "c2"],
            });
            new G.Goods({
                name: 'kelp',
                desc: 'Kelp or seagrass. They can be found in a variety of aquatic places. In some regions of the marine world, kelp are very common, while in others, they become very scarce.//This does not provide anything useful, however.',
                icon: [10, 17, "c2"],
            });
            new G.Goods({
                name: 'vfb1',
                displayName: 'Dangerous bushes',
                desc: 'A bush filled with some [flowers] and some poisonous plants unfortunately cannot be eaten.',
                icon: [13, 17, "c2"],
                res: {
                    'flowers': { 'flowers': 3 },
                },
                mult: 3,
            });
            new G.Goods({
                name: 'vfb2',
                displayName: 'Wild flowers bush',
                desc: 'A bush filled with some wild [flowers].',
                icon: [14, 17, "c2"],
                res: {
                    'flowers': { 'flowers': 3.2 },
                },
                mult: 3,
            });
            new G.Goods({
                name: 'vfb3',
                displayName: 'Flower bush',
                desc: 'A bush filled with various [flowers].',
                icon: [15, 17, "c2"],
                res: {
                    'flowers': { 'flowers': 4 },
                },
                mult: 2,
            });
            new G.Goods({
                name: 'vfb4',
                displayName: 'Large flowery bush',
                desc: 'A bush filled with several [flowers,Large flowers].',
                icon: [19, 17, "c2"],
                res: {
                    'flowers': { 'flowers': 4.25 },
                },
                mult: 3,
            });
            new G.Goods({
                name: 'vfb5',
                displayName: 'Bush of tulips',
                desc: 'A bush filled with a few [flowers,Tulips].',
                icon: [20, 17, "c2"],
                res: {
                    'flowers': { 'flowers': 2 },
                },
                mult: 1,
            });
            /*=====================================================================================
            TILE EFFECTS
            =======================================================================================*/
            //TODO : implement
            new G.TileEffect({
                name: 'deforestation',
                desc: 'This is the result of too much woodcutting in an area.//Having this effect on a tile lowers the amount of trees it provides.//If woodcutting is halted, this effect will slowly subside as trees grow back over time, if the deforestation isn\'t too severe.',
                visibleAt: 100,
            });
            new G.TileEffect({
                name: 'mineral depletion',
                desc: 'This is the result of too much mining and digging in an area.//Having this effect on a tile lowers the amount of minerals it provides.//If mining and digging are halted, this effect will slowly subside as more ore nodes are discovered.',
                visibleAt: 100,
            });
            new G.TileEffect({
                name: 'over hunting',
                desc: 'This is the result of too much hunting in an area.//Having this effect on a tile lowers the amount of resources that animals provide.//If hunting is halted, this effect will slowly subside as animal population recovers over time, if there is enough of it left.',
                visibleAt: 100,
            });
            new G.TileEffect({
                name: 'over fishing',
                desc: 'This is the result of too much fishing in an area.//Having this effect on a tile lowers the quantity of sea creatures it provides.//If fishing is halted, this effect will slowly subside as wildlife population recovers over time, if there is enough of it left.',
                visibleAt: 100,
            });
            new G.TileEffect({
                name: 'scarce forageables',
                desc: 'This is the result of too much foraging in an area.//Having this effect on a tile lowers the quantity of all forageables it provides.//If foraging is halted, this effect will slowly subside.',
                visibleAt: 100,
            });
            new G.TileEffect({
                name: 'reserve',
                desc: 'A [reserve] prevents any resource extraction from this tile, letting depleted resources heal over.',
            });
            /*=====================================================================================
            MAP GENERATOR
            =======================================================================================*/
            G.funcs['create map'] = function (w, h) {
                var forestType = Math.round(Math.random());//0 roofed, 1 autumnal
                var stones = Math.random();
                var shroomland = Math.random();
                //generate basic geography using Conway's Game of Life (rule : births from 4 to 9 neighbors, survival from 6 to 9 neighbors)

                var generate = function (w, h) {
                    var getAt = function (map, x, y) {
                        //if (x<0||x>=map.length||y<0||y>=map[0].length) return 0;
                        //wrap around so we don't get big empty spots on the edges (as a bonus, this creates donut-shaped worlds)
                        if (x < 0) x += map.length;
                        else if (x >= map.length) x -= map.length;
                        if (y < 0) y += map[0].length;
                        else if (y >= map[0].length) y -= map[0].length;
                        return map[x][y];
                    }

                    //init map
                    var lvl = [];
                    for (var x = 0; x < w; x++) {
                        lvl[x] = [];
                        for (var y = 0; y < h; y++) {
                            lvl[x][y] = Math.random() < 0.5 ? 1 : 0;
                        }
                    }

                    //init buffer
                    var lvlBuffer = [];
                    for (var x = 0; x < w; x++) { lvlBuffer[x] = []; for (var y = 0; y < h; y++) { lvlBuffer[x][y] = 0; } }

                    var passes = 1;
                    for (var i = 0; i < passes; i++) {
                        //live
                        for (var x = 0; x < w; x++) {
                            for (var y = 0; y < h; y++) {
                                var n = getAt(lvl, x - 1, y) + getAt(lvl, x - 1, y - 1) + getAt(lvl, x, y - 1) + getAt(lvl, x + 1, y - 1) + getAt(lvl, x + 1, y) + getAt(lvl, x + 1, y + 1) + getAt(lvl, x, y + 1) + getAt(lvl, x - 1, y + 1);
                                var on = lvl[x][y];
                                if (on && n >= 4 && n <= 9) on = 1; else on = 0;
                                if (!on && n >= 6 && n <= 9) on = 1;
                                if (Math.random() < 0.05) on = Math.random() < 0.5 ? 1 : 0;//just a bit of extra randomness
                                lvlBuffer[x][y] = on;
                            }
                        }
                        //copy buffer back
                        for (var x = 0; x < w; x++) { for (var y = 0; y < h; y++) { lvl[x][y] = lvlBuffer[x][y]; } }
                    }

                    return lvl;
                }

                var getStrAt = function (map, x, y) {
                    if (x < 0 || x >= map.length - 1 || y < 0 || y >= map[0].length - 1) return 'out';
                    return map[x][y];
                }
                var getAt = function (map, x, y) {
                    if (x < 0 || x >= map.length - 1 || y < 0 || y >= map[0].length - 1) return 0.5;
                    return map[x][y];
                }

                var landTiles = [];
                var seaTiles = [];
                var fit = false;
                i = 0;
                while (fit == false && i !== 50)//discard any map with less than 30% or more than 50% land
                {
                    var lvl = generate(w, h);

                    landTiles = [];
                    seaTiles = [];
                    for (var x = 0; x < w; x++) {
                        for (var y = 0; y < h; y++) {
                            if (lvl[x][y] == 0) seaTiles.push([x, y]);
                            else landTiles.push([x, y]);
                        }
                    }
                    var total = landTiles.length + seaTiles.length;
                    if (landTiles.length / total > 0.3 && landTiles.length / total < 0.5) fit = true;
                    i++;
                }

                //translate into terrain
                for (var x = 0; x < w; x++) {
                    for (var y = 0; y < h; y++) {
                        var land = 'ocean';
                        if (lvl[x][y] == 0) land = 'ocean';
                        else if (lvl[x][y] == 1) {
                            land = 'none';
                        }
                        lvl[x][y] = land;
                    }
                }

                //precipitation map
                //generate more humidity over sea, less in land - with some variance
                //on tiles with low humidity, 30% of the time, add some huge variance
                //then, blur the map so that coasts get some humidity and variance can spread
                var wet = [];
                for (var x = 0; x < w; x++) {
                    wet[x] = [];
                    for (var y = 0; y < h; y++) {
                        wet[x][y] = (lvl[x][y] == 'ocean' ? 0.8 : 0.2) + Math.random() * 0.1 - 0.1 / 2;
                        if (Math.random() < 0.3 && wet[x][y] < 0.5) wet[x][y] += Math.random() * 5 - 2.5;
                    }
                }
                for (var x = 0; x < w; x++)//blur
                {
                    for (var y = 0; y < h; y++) {
                        var variance = 0.05;
                        var n = getAt(wet, x - 1, y) + getAt(wet, x - 1, y - 1) + getAt(wet, x, y - 1) + getAt(wet, x + 1, y - 1) + getAt(wet, x + 1, y) + getAt(wet, x + 1, y + 1) + getAt(wet, x, y + 1) + getAt(wet, x - 1, y + 1);
                        wet[x][y] = (wet[x][y] + n) / 9 + Math.random() * variance - variance / 2;
                    }
                }
                //temperature map. why not
                var jumble = false;
                if (!jumble) {
                    //vertical sine wave (so we get hot equator and cold poles), with some variance
                    //humidity lowers temperature by a bit
                    var temp = [];
                    for (var x = 0; x < w; x++) {
                        temp[x] = [];
                        for (var y = 0; y < h; y++) {
                            var variance = 0.15;
                            temp[x][y] = Math.sin(((y + 0.5) / h - 0.25) * Math.PI * 2) / 2 + (lvl[x][y] == 'ocean' ? 0.6 : 0.5) - (wet[x][y]) * 0.15 + Math.random() * variance - variance / 2;
                        }
                    }
                }
                else {
                    //temperature spawns in big blobs of cold and hot
                    var temp = [];
                    for (var x = 0; x < w; x++) {
                        temp[x] = [];
                        for (var y = 0; y < h; y++) {
                            temp[x][y] = 0.65 + Math.random() * 0.1 - 0.1 / 2 - wet[x][y] * 0.15;
                            if (Math.random() < 0.5) temp[x][y] += Math.random() * 10 - 5;
                        }
                    }
                    for (var i = 0; i < 2; i++)//blur
                    {
                        for (var x = 0; x < w; x++) {
                            for (var y = 0; y < h; y++) {
                                var variance = 0.05;
                                var n = getAt(temp, x - 1, y) + getAt(temp, x - 1, y - 1) + getAt(temp, x, y - 1) + getAt(temp, x + 1, y - 1) + getAt(temp, x + 1, y) + getAt(temp, x + 1, y + 1) + getAt(temp, x, y + 1) + getAt(temp, x - 1, y + 1);
                                temp[x][y] = (temp[x][y] + n) / 9 + Math.random() * variance - variance / 2;
                            }
                        }
                    }
                }

                //biomes
                for (var x = 0; x < w; x++) {
                    forestType = Math.round(Math.random());
                    stones = Math.random();
                    var flowery = Math.round(Math.random());
                    shroomland = Math.random();
                    for (var y = 0; y < h; y++) {
                        var tempTile = temp[x][y];
                        var wetTile = wet[x][y];
                        var landTile = lvl[x][y];

                        var biomes = [];
                        if (tempTile < -0.12) {
                            biomes.push('glacier');
                        }
                        else if (tempTile < -0.1 && tempTile > -0.12) {
                            if (landTile == 'ocean') biomes.push('arctic ocean');
                            else biomes.push('ice desert');
                        }
                        else if (tempTile < 0.15) {
                            if (landTile == 'ocean') biomes.push('arctic ocean');
                            else if (wetTile < 0.25) biomes.push('ice desert');
                            else if (wetTile > 0.5) biomes.push('firreal woods');
                            else if (wetTile > 0.6 && forestType == 1) biomes.push('warpland');
                            else biomes.push('tundra');
                        }
                        else if (tempTile > 0.16 && tempTile < 0.23) {
                            if (landTile == 'ocean' && tempTile < 0.2) biomes.push('arctic ocean');
                            else if (landTile == 'ocean' && tempTile > 0.2) biomes.push('ocean');
                            else biomes.push('maprairie');
                        }
                        else if (tempTile > 1.1) {
                            if (landTile == 'ocean') biomes.push('tropical ocean');
                            else if (stones < 0.75 && forestType == 0) biomes.push('desert');
                            else if (stones > 0.75) biomes.push('stoney desert');
                        }
                        else if (tempTile > 0.85) {
                            if (landTile == 'ocean') biomes.push('tropical ocean');
                            else if (wetTile < 0.25 && stones <= 0.78 && forestType == 0) biomes.push('desert');
                            else if (wetTile < 0.25 && stones > 0.78) biomes.push('stoney desert');
                            else if (wetTile > 0.5 && wetTile < 0.75) biomes.push('jungle');
                            else if (wetTile > 0.86) biomes.push('deadlands');
                            else biomes.push('savanna');
                        }
                        else {

                            if (landTile == 'ocean' && tempTile < 1.1 && tempTile > 0.6) biomes.push('lukewarm ocean');
                            else if (landTile == 'ocean') biomes.push('ocean');
                            else if (tempTile > 0.15 && tempTile < 0.75 && wetTile > 0.67 && forestType == 1) biomes.push('warpland');
                            else if (tempTile > 0.15 && tempTile < 0.75 && wetTile > 0.67 && forestType == 0) biomes.push('shroomest');
                            else if (wetTile < 0.25) biomes.push('shrubland');
                            else if (wetTile > 0.35 && wetTile < 0.43) biomes.push('stonelands');
                            else if (wetTile > 0.43 && wetTile < 0.5) biomes.push('ominous woods');
                            else if (wetTile > 0.5 && forestType == 1) biomes.push('autumnal forest');
                            else if (wetTile > 0.5 && forestType == 0) biomes.push('roofed forest');

                            else if (flowery == 1) biomes.push('flowery prairie');
                            else biomes.push('prairie');
                        }
                        if (biomes.length == 0) biomes.push('prairie');
                        lvl[x][y] = choose(biomes);
                    }
                }

                for (var x = 0; x < w; x++)//clean all tiles with no terrain
                {
                    for (var y = 0; y < h; y++) {
                        if (lvl[x][y] == 'none') lvl[x][y] = 'forest';
                    }
                }
                return lvl;
            }
        }
    })
}
